<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>分布式锁基础及其解决方案</title>
    <url>/jwangcloud/995176995/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/fen1.jpeg" width="1000" height="300" align="middle">


<h2 id="分布式锁介绍"><a href="#分布式锁介绍" class="headerlink" title="分布式锁介绍"></a>分布式锁介绍</h2><span id="more"></span>

<h3 id="为什么用分布式锁"><a href="#为什么用分布式锁" class="headerlink" title="为什么用分布式锁"></a>为什么用分布式锁</h3><p>​    在单机系统中，当多线程访问数据时，为了保证数据的正确性，我们一般都会采用加锁的方式，比较常见的synchronized或者ReentrantLock。他们都是由Java为我们提供的锁实现，能够让多个线程之间只能串行化执行，从而保证数据的正确性。</p>
<p>​    但是一旦将服务器从单机部署升级为多机部署后，则会发现Java提供的原生锁机制在多机部署下失效了。这是因为Java本身提供的锁，他们只对属于自己JVM里面的线程有效，对于其他JVM的线程是无效的。</p>
<h3 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h3><p>​    现在有一个电商系统，此时只通过一台机器进行部署，当用户下单时，首先会检查库存是否足够，只有当库存足够时，才会允许进行下单。</p>
<p>​    为了提高系统的并发性能，因此会首先将商品库存信息预热到redis中，当用户下单时，会更新redis中的库存信息。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/CSync/assets/image-20201013211837715.png" alt="image-20201013211837715"></p>
<p>​    此时在单线程下执行是没有任何问题的，但是假设现在某一商品库存数量为1，且同时有两个线程同时对该商品执行下单操作，线程A和线程B查询库存结果都为1，此时线程A先执行第三步更新mysql将库存数量由1变为0。但是当线程B再来执行第三步更新mysql时，库存数量会变为-1，此时库存超卖出现。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/CSync/assets/image-20201013211029774.png" alt="image-20201013211029774"></p>
<p>​    此时要想解决超卖问题，则可以进行加锁，将2，3，4步利用synchronized或者ReentrantLock进行加锁，从而让线程排队，避免超卖问题的出现。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/CSync/assets/image-20201013211919195.png" alt="image-20201013211919195"></p>
<p>​    但是当随着并发量的增大，此时单机部署已经无法承受这么大的并发量了，则会将系统由单机变为多机部署。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/CSync/assets/image-20201013214025149.png" alt="image-20201013214025149"></p>
<p>​    此时假设同时有两个用户进行下单，请求分别进入两台机器中，那么这两个请求是可以同时执行的，则仍然会出现超卖问题。</p>
<p>​    因为不管synchronized或者ReentrantLock都是只作用于自己机器的JVM中，对其他机器的JVM无效。相当于两台不同的机器使用的是不同的两把锁，导致锁失效。</p>
<p>​    解决该问题的思路则需要保证不同的机器使用的是相同的一把锁，则此时需要使用分布式锁。对于分布式锁的实现，可以基于Mysql、redis、zookeeper、consule等进行实现。</p>
<h3 id="分布式锁具备的条件"><a href="#分布式锁具备的条件" class="headerlink" title="分布式锁具备的条件"></a>分布式锁具备的条件</h3><ul>
<li><strong>互斥性</strong>：同一时刻只能有一个服务(或应用)访问资源。</li>
<li><strong>原子性</strong>：一致性要求保证加锁和解锁的行为是原子性的。</li>
<li><strong>安全性</strong>：锁只能被持有该锁的服务(或应用)释放。</li>
<li><strong>容错性</strong>：在持有锁的服务崩溃时，锁仍能得到释放，避免死锁。</li>
<li><strong>高可用</strong>：获取锁和释放锁 要高可用。</li>
<li><strong>高性能</strong>：获取锁和释放锁的性能要好。</li>
<li><strong>持久性</strong>：锁按业务需要自动续约/自动延期。</li>
</ul>
<h2 id="分布式锁的解决方案"><a href="#分布式锁的解决方案" class="headerlink" title="分布式锁的解决方案"></a>分布式锁的解决方案</h2><h3 id="数据库实现分布式锁"><a href="#数据库实现分布式锁" class="headerlink" title="数据库实现分布式锁"></a>数据库实现分布式锁</h3><p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysqlLockDemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring boot 版本信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Environment Settings --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis-plus begin--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis-plus end--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--web起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/mysqlLock?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">book</span></span><br></pre></td></tr></table></figure>

<p>MyApplication</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &#123;&quot;com.itheima.dao&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MyApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Book</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;tb_book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 图书ID</span></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">// 图书名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数量</span></span><br><span class="line">    <span class="keyword">private</span> Integer stock;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>BookMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Book</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tb_book set stock=stock-#&#123;saleNum&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateNoLock</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id, <span class="meta">@Param(&quot;saleNum&quot;)</span> <span class="keyword">int</span> saleNum)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>BookService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> saleNum 销售数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateStock</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> saleNum)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>BookServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateStock</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> saleNum)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Book book = bookMapper.selectById(id);</span><br><span class="line">        <span class="keyword">if</span> (book.getStock()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            bookMapper.updateNoLock(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有库存了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>BookController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/updateNoLock/&#123;id&#125;/&#123;saleNum&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateNoLock</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,<span class="meta">@PathVariable(&quot;saleNum&quot;)</span> <span class="keyword">int</span> saleNum)</span></span>&#123;</span><br><span class="line">        bookService.updateStock(id,saleNum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>经过jemeter测试可以发现，库存出现了负数。相当于出现了商品超卖。</p>
<h4 id="基于数据库表实现"><a href="#基于数据库表实现" class="headerlink" title="基于数据库表实现"></a>基于数据库表实现</h4><p><strong>准备工作</strong>：创建tb_program表，用于记录当前哪个程序正在使用数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">、<span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_program`  (</span><br><span class="line">  `program_no` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`program_no`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>实现步骤：</p>
<ol>
<li>程序访问数据时，将程序的编号（insert）存入tb_program表。</li>
<li>当insert成功，代表该程序获得了锁，即可执行逻辑。</li>
<li>当program_no相同的其他程序进行insert时，由于主键冲突会导致insert失败，则代表获取锁失败。</li>
<li>获取锁成功的程序在逻辑执行完以后，删除该数据,代表释放锁。</li>
</ol>
<h4 id="基于条件"><a href="#基于条件" class="headerlink" title="基于条件"></a>基于条件</h4><p>​    对于分布式锁的实现，比较常见的一种就是基于MySQL乐观锁方式来完成，这种方式的思想就是利用MySQL的InnoDB引擎的<strong>行锁</strong>机制来完成。</p>
<p>​    对于乐观锁的实现，又分为两种，分别为<strong>根据条件</strong>和<strong>根据版本号</strong>。</p>
<p><strong>实现代码</strong></p>
<p>BookMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Book</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tb_book set stock=stock-#&#123;saleNum&#125; where id = #&#123;id&#125; and stock-#&#123;saleNum&#125;&gt;=0&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateNoLock</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id, <span class="meta">@Param(&quot;saleNum&quot;)</span> <span class="keyword">int</span> saleNum)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过Jemeter进行并发测试，可以发现其已经可以保证库存不会被扣减超卖。</p>
<h4 id="基于version版本号"><a href="#基于version版本号" class="headerlink" title="基于version版本号"></a>基于version版本号</h4><p>​    有时我们并没有一些特定的条件让我们去进行判断。此时就会在数据表中新增一个字段版本字段version来进行数据并发控制。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/CSync/assets/image-20200814184726923.png" alt="image-20200814184726923"></p>
<p>BookMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;update tb_book set name=#&#123;name&#125;,version=version+1 where id=#&#123;id&#125; and version=#&#123;version&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByVersion</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span><span class="keyword">int</span> id,<span class="meta">@Param(&quot;name&quot;)</span>String name,<span class="meta">@Param(&quot;version&quot;)</span><span class="keyword">int</span> version)</span></span>;</span><br></pre></td></tr></table></figure>

<p>BookService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateByVersion</span><span class="params">(<span class="keyword">int</span> id,String name,<span class="keyword">int</span> version)</span></span>;</span><br></pre></td></tr></table></figure>

<p>BookServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateByVersion</span><span class="params">(<span class="keyword">int</span> id, String name,<span class="keyword">int</span> version)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> result = bookMapper.updateByVersion(id, name, version);</span><br><span class="line"></span><br><span class="line">    System.out.println(result==<span class="number">1</span>?<span class="string">&quot;修改成功&quot;</span>:<span class="string">&quot;修改失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终运行结果可以发现，只会有一个线程能够修改成功，另外一个修改失败。并且版本号进行了加1。</p>
<h3 id="zookeeper分布式锁"><a href="#zookeeper分布式锁" class="headerlink" title="zookeeper分布式锁"></a>zookeeper分布式锁</h3><h4 id="实现思想"><a href="#实现思想" class="headerlink" title="实现思想"></a>实现思想</h4><p>​    对于分布式锁的实现，zookeeper天然携带的一些特性能够很完美的实现分布式锁。其内部主要是利用znode节点特性和watch机制完成。</p>
<h5 id="znode节点"><a href="#znode节点" class="headerlink" title="znode节点"></a>znode节点</h5><p>​    在zookeeper中节点会分为四类，分别是：</p>
<ul>
<li><strong>持久节点：</strong>一旦创建，则永久存在于zookeeper中，除非手动删除。</li>
<li><strong>持久有序节点：</strong>一旦创建，则永久存在于zookeeper中，除非手动删除。同时每个节点都会默认存在节点序号，每个节点的序号都是有序递增的。如demo000001、demo000002…..demo00000N。</li>
<li><strong>临时节点：</strong>当节点创建后，一旦服务器重启或宕机，则被自动删除。</li>
<li><strong>临时有序节点：</strong>当节点创建后，一旦服务器重启或宕机，则被自动删除。同时每个节点都会默认存在节点序号，每个节点的序号都是有序递增的。如demo000001、demo000002…..demo00000N。</li>
</ul>
<h5 id="watch监听机制"><a href="#watch监听机制" class="headerlink" title="watch监听机制"></a>watch监听机制</h5><p>​    watch监听机制主要用于<strong>监听节点状态变更</strong>，用于后续事件触发，假设当B节点监听A节点时，一旦A节点发生修改、删除、子节点列表发生变更等事件，B节点则会收到A节点改变的通知，接着完成其他额外事情。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/CSync/assets/image-20200813145543398.png" alt="image-20200813145543398"></p>
<h5 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h5><p>​    其实现思想是当某个线程要对方法加锁时，首先会在zookeeper中创建一个与当前方法对应的父节点，接着每个要获取当前方法的锁的线程，都会在父节点下创建一个<strong>临时有序节点</strong>，因为节点序号是递增的，所以后续要获取锁的线程在zookeeper中的序号也是逐次递增的。根据这个特性，当前序号最小的节点一定是首先要获取锁的线程，因此可以规定<strong>序号最小的节点获得锁</strong>。所以，每个线程再要获取锁时，可以判断自己的节点序号是否是最小的，如果是则获取到锁。当释放锁时，只需将自己的临时有序节点删除即可。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/CSync/assets/image-20200813145612295.png" alt="image-20200813145612295"></p>
<p>根据上图，在并发下，每个线程都会在对应方法节点下创建属于自己的临时节点，且每个节点都是临时且有序的。那么zookeeper又是如何有序的将锁分配给不同线程呢？ 这里就应用到了watch监听机制。每当添加一个新的临时节点时，其都会基于watcher机制监听着它本身的前一个节点等待前一个节点的通知，当前一个节点删除时，就轮到它来持有锁了。然后依次类推。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/CSync/assets/image-20200813145626920.png" alt="image-20200813145626920"></p>
<h4 id="原理剖析-amp-实现"><a href="#原理剖析-amp-实现" class="headerlink" title="原理剖析&amp;实现"></a>原理剖析&amp;实现</h4><h5 id="低效锁思想-amp-实现"><a href="#低效锁思想-amp-实现" class="headerlink" title="低效锁思想&amp;实现"></a>低效锁思想&amp;实现</h5><p>​    在通过zookeeper实现分布式锁时，有另外一种实现的写法，这种也是非常常见的，但是它的效率并不高，此处可以先对这种实现方式进行探讨。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/CSync/assets/image-20200813145905753.png" alt="image-20200813145905753"></p>
<p>​    此种实现方式，只会存在一个锁节点。当创建锁节点时，如果锁节点不存在，则创建成功，代表当前线程获取到锁，如果创建锁节点失败，代表已经有其他线程获取到锁，则该线程会监听锁节点的释放。当锁节点释放后，则继续尝试创建锁节点加锁。</p>
<h6 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h6><p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--zookeeper--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>AbstractLock</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//zookeeper服务器地址</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ZK_SERVER_ADDR=<span class="string">&quot;192.168.200.131:2181&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//zookeeper超时时间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONNECTION_TIME_OUT=<span class="number">30000</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SESSION_TIME_OUT=<span class="number">30000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建zk客户端</span></span><br><span class="line">    <span class="keyword">protected</span> ZkClient zkClient = <span class="keyword">new</span> ZkClient(ZK_SERVER_ADDR,SESSION_TIME_OUT,CONNECTION_TIME_OUT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等待加锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">waitLock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">releaseLock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//加锁实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String threadName = Thread.currentThread().getName();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (tryLock())&#123;</span><br><span class="line">            System.out.println(threadName+<span class="string">&quot;:   获取锁成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(threadName+<span class="string">&quot;:   等待获取锁&quot;</span>);</span><br><span class="line">            waitLock();</span><br><span class="line">            getLock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LowLock</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LowLock</span> <span class="keyword">extends</span> <span class="title">AbstractLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOCK_NODE=<span class="string">&quot;/lock_node&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CountDownLatch countDownLatch;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (zkClient == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zkClient.createEphemeral(LOCK_NODE);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">waitLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册监听</span></span><br><span class="line">        IZkDataListener listener = <span class="keyword">new</span> IZkDataListener() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//节点数据改变触发</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataChange</span><span class="params">(String dataPath, Object data)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//节点删除触发</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataDeleted</span><span class="params">(String dataPath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (countDownLatch != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        zkClient.subscribeDataChanges(LOCK_NODE,listener);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果节点存在，则线程阻塞等待</span></span><br><span class="line">        <span class="keyword">if</span> (zkClient.exists(LOCK_NODE))&#123;</span><br><span class="line">            countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                countDownLatch.await();</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:  等待获取锁&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//节点不存在，删除监听</span></span><br><span class="line">        zkClient.unsubscribeDataChanges(LOCK_NODE,listener);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:    释放锁&quot;</span>);</span><br><span class="line">        zkClient.delete(LOCK_NODE);</span><br><span class="line">        zkClient.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LockTest</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟多个10个客户端</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> LockRunnable());</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LockRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            AbstractLock abstractLock = <span class="keyword">new</span> LowLock();</span><br><span class="line"></span><br><span class="line">            abstractLock.getLock();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            abstractLock.releaseLock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    测试运行可以发现：当一个线程获取到锁之后，其他线程则一起监听同一个节点，当线程将锁释放后，其他线程再来继续竞争这把锁。</p>
<h6 id="羊群效应"><a href="#羊群效应" class="headerlink" title="羊群效应"></a>羊群效应</h6><p>​    这种方案的低效点就在于，只有一个锁节点，其他线程都会监听同一个锁节点，一旦锁节点释放后，其他线程都会收到通知，然后竞争获取锁节点。这种大量的通知操作会严重降低zookeeper性能，对于这种由于一个被watch的znode节点的变化，而造成大量的通知操作，叫做羊群效应。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/CSync/assets/image-20200813160433873.png" alt="image-20200813160433873"></p>
<h5 id="高效锁思想-amp-实现"><a href="#高效锁思想-amp-实现" class="headerlink" title="高效锁思想&amp;实现"></a>高效锁思想&amp;实现</h5><h6 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h6><p>​    为了避免羊群效应的出现，业界内普遍的解决方案就是，让获取锁的线程产生排队，后一个监听前一个，依次排序。推荐使用这种方式实现分布式锁。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/CSync/assets/image-20200813163254367.png" alt="image-20200813163254367"></p>
<p>​    按照上述流程会在根节点下为每一个等待获取锁的线程创建一个对应的临时有序节点，序号最小的节点会持有锁，并且后一个节点只监听其前面的一个节点，从而可以让获取锁的过程有序且高效。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/CSync/assets/image-20200813163324664.png" alt="image-20200813163324664"></p>
<p>1）定义HighLock类</p>
<p>1.判断父节点是否存在，父节点不存在，创建持久节点</p>
<p>2.如果当前节点不存在，则在父节点下创建第一个临时有序节点</p>
<p>3.如果当前节点存在，则获取父节点下的子节点列表</p>
<p>4.对子节点列表进行排序</p>
<p>5.判断当前节点是否为父节点下序号最小的节点</p>
<p>6.是序号最小的节点，则加锁成功</p>
<p>7.如果不是序号最小的节点，则对前置节点进行赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HighLock</span> <span class="keyword">extends</span> <span class="title">AbstractLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  String PARENT_NODE_PATH=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HighLock</span><span class="params">(String parentNodePath)</span></span>&#123;</span><br><span class="line">        PARENT_NODE_PATH = parentNodePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当前节点路径</span></span><br><span class="line">    <span class="keyword">private</span> String currentNodePath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前一个节点的路径</span></span><br><span class="line">    <span class="keyword">private</span> String preNodePath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CountDownLatch countDownLatch;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断父节点是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (!zkClient.exists(PARENT_NODE_PATH))&#123;</span><br><span class="line">            <span class="comment">//父节点不存在，创建持久节点</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                zkClient.createPersistent(PARENT_NODE_PATH);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建第一个临时有序节点</span></span><br><span class="line">        <span class="keyword">if</span> (currentNodePath==<span class="keyword">null</span> || <span class="string">&quot;&quot;</span>.equals(currentNodePath))&#123;</span><br><span class="line">            <span class="comment">//在父节点下创建临时有序节点</span></span><br><span class="line">            currentNodePath =  zkClient.createEphemeralSequential(PARENT_NODE_PATH+<span class="string">&quot;/&quot;</span>,<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不是第一个临时有序节点</span></span><br><span class="line">        <span class="comment">//获取父节点下的所有子节点列表</span></span><br><span class="line">        List&lt;String&gt; childrenNodeList = zkClient.getChildren(PARENT_NODE_PATH);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为有序号，所以进行升序排序</span></span><br><span class="line">        Collections.sort(childrenNodeList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否加锁成功，当前节点是否为父节点下序号最小的节点</span></span><br><span class="line">        <span class="keyword">if</span> (currentNodePath.equals(PARENT_NODE_PATH+<span class="string">&quot;/&quot;</span>+childrenNodeList.get(<span class="number">0</span>)))&#123;</span><br><span class="line">            <span class="comment">//当前节点是序号最小的节点</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//当前节点不是序号最小的节点，获取其前置节点，并赋值</span></span><br><span class="line">            <span class="keyword">int</span> length = PARENT_NODE_PATH.length();</span><br><span class="line">            <span class="keyword">int</span> currentNodeNumber = Collections.binarySearch(childrenNodeList, currentNodePath.substring(length + <span class="number">1</span>));</span><br><span class="line">            preNodePath = PARENT_NODE_PATH+<span class="string">&quot;/&quot;</span>+childrenNodeList.get(currentNodeNumber-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">waitLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册监听</span></span><br><span class="line">        IZkDataListener listener = <span class="keyword">new</span> IZkDataListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataChange</span><span class="params">(String dataPath, Object data)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataDeleted</span><span class="params">(String dataPath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (countDownLatch != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        zkClient.subscribeDataChanges(preNodePath,listener);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断前置节点是否存在，存在则阻塞</span></span><br><span class="line">        <span class="keyword">if</span> (zkClient.exists(preNodePath))&#123;</span><br><span class="line"></span><br><span class="line">            countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                countDownLatch.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除监听</span></span><br><span class="line">        zkClient.unsubscribeDataChanges(preNodePath,listener);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        zkClient.delete(currentNodePath);</span><br><span class="line">        zkClient.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2）修改测试类并运行，可以发现，线程获取锁的顺序是按照临时节点的序号来进行获取的。</p>
<h6 id="锁失效问题"><a href="#锁失效问题" class="headerlink" title="锁失效问题"></a>锁失效问题</h6><p>1）修改BookMapper，添加修改语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;update tb_book set stock=stock-#&#123;saleNum&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateNoLock</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id, <span class="meta">@Param(&quot;saleNum&quot;)</span> <span class="keyword">int</span> saleNum)</span></span>;</span><br></pre></td></tr></table></figure>

<p>2）修改BookServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateStock</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> saleNum)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String methodName = Thread.currentThread().getStackTrace()[<span class="number">0</span>].getMethodName();</span><br><span class="line">    AbstractLock lock = <span class="keyword">new</span> HighLock(<span class="string">&quot;/&quot;</span>+methodName);</span><br><span class="line"></span><br><span class="line">    lock.getLock();</span><br><span class="line"></span><br><span class="line">    Book book = bookMapper.selectById(id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (book.getStock()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        bookMapper.updateNoLock(id,saleNum);</span><br><span class="line">        System.out.println(<span class="string">&quot;库存扣减成功&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;没有库存了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lock.releaseLock();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    此时通过Jemeter测试，发现仍然出现了超卖。那么问题出现在哪里了呢？ 当前不管使用分布式锁还是JVM提供的锁都是控制不住超卖的(sync、redis、zookeeper)。</p>
<p>​    当把事务去掉，再通过jemeter进行测试，可以发现已经可以控制住超卖问题了。</p>
<p>​    其实原因就出现在@Transactional事务上。在业务层上，首先会开启事务，然后加锁、进行业务操作、释放锁，最后才会进行事务提交。 此时因为锁是先释放，那么其他线程就可以获取到锁再来执行该方法，但之前的事务还并未提交，那么后进来的事务当查询时，库存数量仍然满足条件。 因此最终出现超卖问题。这就业锁失效的问题。</p>
<p>​    对于该问题的解决，第一种方式：将自动事务更改为手动控制事务。 第二种：将锁操作上移到表现层。 开发中，常见的是使用第二种方式进行解决。</p>
<h3 id="Redis实现分布式锁"><a href="#Redis实现分布式锁" class="headerlink" title="Redis实现分布式锁"></a>Redis实现分布式锁</h3><h4 id="单节点Redis实现分布式锁"><a href="#单节点Redis实现分布式锁" class="headerlink" title="单节点Redis实现分布式锁"></a>单节点Redis实现分布式锁</h4><h5 id="原理-amp-实现"><a href="#原理-amp-实现" class="headerlink" title="原理&amp;实现"></a>原理&amp;实现</h5><p>​    分布式锁的一个很重要的特性就是互斥性，同一时间内多个调用方加锁竞争，只能有一个调用方加锁成功。而redis是基于单线程模型的，可以利用这个特性让调用方的请求排队，对于并发请求，只会有一个请求能获取到锁。</p>
<p>​    redis实现分布式锁也很简单，基于客户端的几个API就可以完成，主要涉及三个核心API：</p>
<ul>
<li><p>setNx()：向redis中存key-value，只有当key不存在时才会设置成功，否则返回0。用于体现互斥性。</p>
</li>
<li><p>expire()：设置key的过期时间，用于避免死锁出现。</p>
</li>
<li><p>delete()：删除key，用于释放锁。</p>
</li>
</ul>
<p><strong>1）编写工具类实现加锁</strong></p>
<p>​    通过jedis.set进行加锁，如果返回值是OK，代表加锁成功</p>
<p>​    如果加锁失败，则自旋不断尝试获取锁，同时在一定时间内如果仍没有获取到锁，则退出自旋，不再尝试获取锁。</p>
<p>​    requestId：用于标识当前每个线程自己持有的锁标记</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleRedisLockUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    JedisPool jedisPool = <span class="keyword">new</span> JedisPool(<span class="string">&quot;192.168.200.150&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//锁过期时间</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">long</span> internalLockLeaseTime = <span class="number">30000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取锁的超时时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timeout = <span class="number">999999</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey 锁键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestId 请求唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SetParams setParams = SetParams.setParams().nx().px(internalLockLeaseTime);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(String lockKey, String requestId)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String threadName = Thread.currentThread().getName();</span><br><span class="line"></span><br><span class="line">        Jedis jedis = <span class="keyword">this</span>.jedisPool.getResource();</span><br><span class="line"></span><br><span class="line">        Long start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (;;)&#123;</span><br><span class="line">                String lockResult = jedis.set(lockKey, requestId, setParams);</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;OK&quot;</span>.equals(lockResult))&#123;</span><br><span class="line">                    System.out.println(threadName+<span class="string">&quot;:   获取锁成功&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//否则循环等待，在timeout时间内仍未获取到锁，则获取失败</span></span><br><span class="line">                System.out.println(threadName+<span class="string">&quot;:   获取锁失败，等待中&quot;</span>);</span><br><span class="line">                <span class="keyword">long</span> l = System.currentTimeMillis() - start;</span><br><span class="line">                <span class="keyword">if</span> (l&gt;=timeout) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2）编写工具类实现解锁</p>
<p>​    解锁时，要避免当前线程将别人的锁释放掉。假设线程A加锁成功，当过了一段时间线程A来解锁，但线程A的锁已经过期了，在这个时间节点，线程B也来加锁，因为线程A的锁已经过期，所以线程B时可以加锁成功的。此时，就会出现问题，线程A将线程B的锁给释放了。</p>
<p>​    对于这个问题，就需要使用到加锁时的requestId。当解锁时要判断当前锁键的value与传入的value是否相同，相同的话，则代表是同一个人，可以解锁。否则不能解锁。</p>
<p>​    但是对于这个操作，有非常多的人，会先查询做对比，接着相同则删除。虽然思路是对的，但是忽略了一个问题，<strong>原子性</strong>。判断与删除分成两步执行，则无法保证原子性，一样会出现问题。所以解锁时不仅要保证加锁和解锁是同一个人还要保证解锁的原子性。因此结合lua脚本完成查询&amp;删除操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey 锁键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestId 请求唯一标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">releaseLock</span><span class="params">(String lockKey,String requestId)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    String threadName = Thread.currentThread().getName();</span><br><span class="line">    System.out.println(threadName+<span class="string">&quot;：释放锁&quot;</span>);</span><br><span class="line">    Jedis jedis = <span class="keyword">this</span>.jedisPool.getResource();</span><br><span class="line"></span><br><span class="line">    String lua =</span><br><span class="line">        <span class="string">&quot;if redis.call(&#x27;get&#x27;,KEYS[1]) == ARGV[1] then&quot;</span> +</span><br><span class="line">        <span class="string">&quot;   return redis.call(&#x27;del&#x27;,KEYS[1]) &quot;</span> +</span><br><span class="line">        <span class="string">&quot;else&quot;</span> +</span><br><span class="line">        <span class="string">&quot;   return 0 &quot;</span> +</span><br><span class="line">        <span class="string">&quot;end&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object result = jedis.eval(lua, Collections.singletonList(lockKey),</span><br><span class="line">                                   Collections.singletonList(requestId));</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(result.toString()))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3）编写测试类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟多个5个客户端</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> LockRunnable());</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LockRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            SingleRedisLock singleRedisLock = <span class="keyword">new</span> SingleRedisLock();</span><br><span class="line"></span><br><span class="line">            String requestId = UUID.randomUUID().toString();</span><br><span class="line">            <span class="keyword">boolean</span> lockResult = singleRedisLock.tryLock(<span class="string">&quot;lock&quot;</span>, requestId);</span><br><span class="line">            <span class="keyword">if</span> (lockResult)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            singleRedisLock.releaseLock(<span class="string">&quot;lock&quot;</span>,requestId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    此时可以发现，多线程会竞争同一把锁，且没有获取获取到锁的线程会自旋不断尝试去获取锁。每当一个线程将锁释放后，则会有另外一个线程持有锁。依次类推。</p>
<h5 id="单节点问题"><a href="#单节点问题" class="headerlink" title="单节点问题"></a>单节点问题</h5><ul>
<li>锁续期</li>
</ul>
<p>​    当对业务进行加锁时，锁的过期时间，绝对不能想当然的设置一个值。假设线程A在执行某个业务时加锁成功并设置锁过期时间。但该业务执行时间过长，业务的执行时间超过了锁过期时间，那么在业务还没执行完时，锁就自动释放了。接着后续线程就可以获取到锁，又来执行该业务。就会造成线程A还没执行完，后续线程又来执行，导致同一个业务逻辑被重复执行。因此对于锁的超时时间，需要结合着业务执行时间来判断，让锁的过期时间大于业务执行时间。</p>
<p>​    上面的方案是一个基础解决方案，但是仍然是有问题的。</p>
<p>​    业务执行时间的影响因素太多了，无法确定一个准确值，只能是一个估值。无法百分百保证业务执行期间，锁只能被一个线程占有。</p>
<p>​    如想保证的话，可以在创建锁的同时创建一个守护线程，同时定义一个定时任务每隔一段时间去为未释放的锁增加过期时间。当业务执行完，释放锁后，再关闭守护线程。 这种实现思想可以用来解决锁续期。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/CSync/assets/image-20200814191356203.png" alt="image-20200814191356203"></p>
<ul>
<li>服务单点&amp;集群问题</li>
</ul>
<p>​    在单点redis虽然可以完成锁操作，可一旦redis服务节点挂掉了，则无法提供锁操作。</p>
<p>​    在生产环境下，为了保证redis高可用，会采用<strong>异步复制</strong>方法进行主从部署。当主节点写入数据成功，会异步的将数据复制给从节点，并且当主节点宕机，从节点会被提升为主节点继续工作。假设主节点写入数据成功，在没有将数据复制给从节点时，主节点宕机。则会造成提升为主节点的从节点中是没有锁信息的，其他线程则又可以继续加锁，导致互斥失效。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/CSync/assets/image-20200814191418648.png" alt="image-20200814191418648"></p>
<h4 id="Redisson实现分布式锁"><a href="#Redisson实现分布式锁" class="headerlink" title="Redisson实现分布式锁"></a>Redisson实现分布式锁</h4><p>​    redisson是redis官网推荐实现分布式锁的一个第三方类库。其内部完成的功能非常强大，对各种锁都有实现，同时对于使用者来说非常简单，让使用者能够将更多的关注点放在业务逻辑上。此处重点利用Redisson解决单机Redis锁产生的两个问题。</p>
<h5 id="单机Redisson实现分布式锁"><a href="#单机Redisson实现分布式锁" class="headerlink" title="单机Redisson实现分布式锁"></a>单机Redisson实现分布式锁</h5><p>基于redisson实现分布式锁很简单，直接基于lock()&amp;unlock()方法操作即可。</p>
<p><strong>1）添加依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Redis分布式锁--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2）修改配置文件</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  redis:</span><br><span class="line">    host: <span class="number">192.168</span><span class="number">.200</span><span class="number">.150</span></span><br><span class="line">    port: <span class="number">6379</span></span><br><span class="line">    database: <span class="number">0</span></span><br><span class="line">    jedis:</span><br><span class="line">      pool:</span><br><span class="line">        max-active: <span class="number">500</span></span><br><span class="line">        max-idle: <span class="number">1000</span></span><br><span class="line">        min-idle: <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p><strong>3）修改springboot启动类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;spring.redis.host&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;spring.redis.port&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedissonClient <span class="title">redissonClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">    RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    Config config = <span class="keyword">new</span> Config();</span><br><span class="line">    String url = <span class="string">&quot;redis://&quot;</span> + host + <span class="string">&quot;:&quot;</span> + port;</span><br><span class="line">    config.useSingleServer().setAddress(url);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        redissonClient = Redisson.create(config);</span><br><span class="line">        <span class="keyword">return</span> redissonClient;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4）定义锁工具类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addLock</span><span class="params">(String lockKey)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (redissonClient == <span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;redisson client is null&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            RLock lock = redissonClient.getLock(lockKey);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置锁超时时间为10秒，到期自动释放</span></span><br><span class="line">            lock.lock(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:  获取到锁&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//加锁成功</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">releaseLock</span><span class="params">(String lockKey)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (redissonClient == <span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;redisson client is null&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            RLock lock = redissonClient.getLock(lockKey);</span><br><span class="line">            lock.unlock();</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:  释放锁&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5）测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonLockTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonLock redissonLock;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">easyLock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//模拟多个10个客户端</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> LockRunnable());</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.in.read();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">LockRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            redissonLock.addLock(<span class="string">&quot;demo&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            redissonLock.releaseLock(<span class="string">&quot;demo&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>6）执行效果</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/CSync/assets/image-20200814191819193.png" alt="image-20200814191819193"></p>
<p>​    根据执行效果可知，多线程并发获取所时，当一个线程获取到锁，其他线程则获取不到，并且其内部会不断尝试获取锁，当持有锁的线程将锁释放后，其他线程则会继续去竞争锁。</p>
<h5 id="看门狗"><a href="#看门狗" class="headerlink" title="看门狗"></a>看门狗</h5><p>​    lock()方法虽然可以设置过期时间，当到期后，锁就会自动释放，因此在业务执行中，通过lock()加锁会存在隐患。Redisson也考虑到了这点，所以提供了看门狗机制。</p>
<p>​    改造锁示例代码，让锁超时时间为1秒，但是业务执行时，需要耗时3秒，此时执行可以发现，多线程间在上一个锁没有释放的情况下，后续线程又获取到了锁。但是解锁的时候，出现异常，因为加锁时的唯一标识与解锁时的唯一标识发生了改变，造成死锁。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/CSync/assets/image-20200814192735019.png" alt="image-20200814192735019"></p>
<p>​    因为业务执行多久无法确定一个准确值，所以在看门狗的实现中，不需要对锁key设置过期时间，当过期时间为-1时，这时会启动一个定时任务，在业务释放锁之前，会一直不停的增加这个锁的有效时间，从而保证在业务执行完毕前，这把锁不会被提前释放掉。</p>
<p>​    要开启看门狗机制也很简单，只需要将加锁时使用**lock()<strong>改为</strong>tryLock()**即可。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/CSync/assets/image-20200814192753387.png" alt="image-20200814192753387"></p>
<p>​    并且在lock的源码中，如果没有设置锁超时，默认过期时间为30秒即watchdog每隔30秒来进行一次续期，该值可以修改。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">config.setLockWatchdogTimeout(<span class="number">3000L</span>);</span><br></pre></td></tr></table></figure>

<p>​    进行测试，当加锁后，线程睡眠10秒钟，然后释放锁，可以看到在这段时间内，当前线程会一直持有锁，直到锁释放。在多线程环境下，也是阻塞等待进行锁的获取。</p>
<h5 id="红锁"><a href="#红锁" class="headerlink" title="红锁"></a>红锁</h5><p>​    当在单点redis中实现redis锁时，一旦redis服务器宕机，则无法进行锁操作。因此会考虑将redis配置为主从结构，但在主从结构中，数据复制是异步实现的。假设在主从结构中，master会异步将数据复制到slave中，一旦某个线程持有了锁，在还没有将数据复制到slave时，master宕机。则slave会被提升为master，但被提升为slave的master中并没有之前线程的锁信息，那么其他线程则又可以重新加锁。</p>
<h6 id="redlock算法"><a href="#redlock算法" class="headerlink" title="redlock算法"></a>redlock算法</h6><p>​    redlock是一种<strong>基于多节点redis实现分布式锁</strong>的算法，可以有效解决redis单点故障的问题。官方建议搭建<strong>五台redis</strong>服务器对redlock算法进行实现。</p>
<p>​    在redis官网中，对于redlock算法的实现思想也做了详细的介绍。地址：<a href="https://redis.io/topics/distlock%E3%80%82%E6%95%B4%E4%B8%AA%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B%E5%88%86%E4%B8%BA%E4%BA%94%E6%AD%A5%EF%BC%9A">https://redis.io/topics/distlock。整个实现过程分为五步：</a></p>
<p>1）记录获取锁前的当前时间</p>
<p>2）使用相同的key，value获取所有redis实例中的锁，并且设置获取锁的时间要远远小于锁自动释放的时间。假设锁自动释放时间是10秒，则获取时间应在5-50毫秒之间。通过这种方式避免客户端长时间等待一个已经关闭的实例，如果一个实例不可用了，则尝试获取下一个实例。</p>
<p>3）客户端通过获取所有实例的锁后的时间减去第一步的时间，得到的差值要小于锁自动释放时间，避免拿到一个已经过期的锁。并且要有超过半数的redis实例成功获取到锁，才算最终获取锁成功。如果不是超过半数，有可能出现多个客户端重复获取到锁，导致锁失效。</p>
<p>4）当已经获取到锁，那么它的真正失效时间应该为：过期时间-第三步的差值。</p>
<p>5）如果客户端获取锁失败，则在所有redis实例中释放掉锁。为了保证更高效的获取锁，还可以设置重试策略，在一定时间后重新尝试获取锁，但不能是无休止的，要设置重试次数。</p>
<p>​    虽然通过redlock能够更加有效的防止redis单点问题，但是仍然是存在隐患的。假设redis没有开启持久化，clientA获取锁后，所有redis故障重启，则会导致clientA锁记录消失，clientB仍然能够获取到锁。这种情况虽然发生几率极低，但并不能保证肯定不会发生。</p>
<p>​    保证的方案就是开始AOF持久化，但是要注意同步的策略，使用每秒同步，如果在一秒内重启，仍然数据丢失。使用always又会造成性能急剧下降。</p>
<p>​    官方推荐使用默认的AOF策略即每秒同步，且在redis停掉后，要在ttl时间后再重启。 缺点就是ttl时间内redis无法对外提供服务。</p>
<h6 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h6><p>redisson对于红锁的实现已经非常完善，通过其内部提供的api既可以完成红锁的操作。</p>
<p><strong>1）新建配置类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonRedLockConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedissonRedLock <span class="title">initRedissonClient</span><span class="params">(String lockKey)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Config config1 = <span class="keyword">new</span> Config();</span><br><span class="line">        config1.useSingleServer().setAddress(<span class="string">&quot;redis://192.168.200.150:7000&quot;</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line">        RedissonClient redissonClient1 = Redisson.create(config1);</span><br><span class="line"></span><br><span class="line">        Config config2 = <span class="keyword">new</span> Config();</span><br><span class="line">        config2.useSingleServer().setAddress(<span class="string">&quot;redis://192.168.200.150:7001&quot;</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line">        RedissonClient redissonClient2 = Redisson.create(config2);</span><br><span class="line"></span><br><span class="line">        Config config3 = <span class="keyword">new</span> Config();</span><br><span class="line">        config3.useSingleServer().setAddress(<span class="string">&quot;redis://192.168.200.150:7002&quot;</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line">        RedissonClient redissonClient3 = Redisson.create(config3);</span><br><span class="line"></span><br><span class="line">        Config config4 = <span class="keyword">new</span> Config();</span><br><span class="line">        config4.useSingleServer().setAddress(<span class="string">&quot;redis://192.168.200.150:7003&quot;</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line">        RedissonClient redissonClient4 = Redisson.create(config4);</span><br><span class="line"></span><br><span class="line">        Config config5 = <span class="keyword">new</span> Config();</span><br><span class="line">        config5.useSingleServer().setAddress(<span class="string">&quot;redis://192.168.200.150:7004&quot;</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line">        RedissonClient redissonClient5 = Redisson.create(config5);</span><br><span class="line"></span><br><span class="line">        RLock rLock1 = redissonClient1.getLock(lockKey);</span><br><span class="line">        RLock rLock2 = redissonClient2.getLock(lockKey);</span><br><span class="line">        RLock rLock3 = redissonClient3.getLock(lockKey);</span><br><span class="line">        RLock rLock4 = redissonClient4.getLock(lockKey);</span><br><span class="line">        RLock rLock5 = redissonClient5.getLock(lockKey);</span><br><span class="line"></span><br><span class="line">        RedissonRedLock redissonRedLock = <span class="keyword">new</span> RedissonRedLock(rLock1,rLock2,rLock3,rLock4,rLock5);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redissonRedLock;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2）新建测试类,完成加锁与解锁操作</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedLockTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonRedLockConfig redissonRedLockConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">easyLock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//模拟多个10个客户端</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> RedLockTest.RedLockRunnable());</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.in.read();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">RedLockRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            RedissonRedLock redissonRedLock = redissonRedLockConfig.initRedissonClient(<span class="string">&quot;demo&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">boolean</span> lockResult = redissonRedLock.tryLock(<span class="number">100</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (lockResult)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;获取锁成功&quot;</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                redissonRedLock.unlock();</span><br><span class="line">                System.out.println(<span class="string">&quot;释放锁&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Redis与zookeeper分布式锁对比"><a href="#Redis与zookeeper分布式锁对比" class="headerlink" title="Redis与zookeeper分布式锁对比"></a>Redis与zookeeper分布式锁对比</h3><p>​    redis实现分布式锁优点在于其性能很高，能够支撑高并发的加锁与解锁操作。而其缺点也很明显，主要如下：</p>
<ul>
<li><p>采用抢占式方式进行锁的获取，需要不断的在用户态进行CAS尝试获取锁，对CPU占用率高。</p>
</li>
<li><p>redis本身并不是CP模型，即便采用了redlock算法，但仍然无法保证百分百不会出现问题，如持久化问题。</p>
<p>对于redis分布式锁的使用，在企业中是非常常见的，绝大多数情况不会出现极端情况。</p>
</li>
</ul>
<p>​    zookeeper实现分布式的优点在于其是强一致性的，采用排队监听的方式获取锁，不会像redis那样不断进行轮询尝试，对性能消耗较小。其缺点则是如果频繁的加锁和解锁，对zk服务器压力较大。</p>
<p>​    当进行技术选型时，应该对其优缺点结合公司当前情况进行考虑。 如果公司有条件使用zk集群，更推荐使用zk的分布式锁，因为redis实现分布式锁有可能出现数据不正确的情况，但如果公司没有zk集群，使用redis集群完成分布式锁也无可厚非。</p>
]]></content>
      <categories>
        <category>分布式锁</category>
      </categories>
      <tags>
        <tag>分布式锁介绍</tag>
        <tag>数据库实现</tag>
        <tag>redis实现</tag>
        <tag>zookeeper实现</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式数据库架构实践03--数据切分核心思想</title>
    <url>/jwangcloud/2456176317/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/DB1.jpeg" width="1000" height="200" align="middle">




<h2 id="为什么要进行数据切分"><a href="#为什么要进行数据切分" class="headerlink" title="为什么要进行数据切分"></a>为什么要进行数据切分</h2><p>​    当前微服务架构非常流行，很多都会采用微服务架构对其系统进行拆分。 而虽然产生了多个微服务，但因为其用户量和数据量的问题，很有可能仍然使用的是同一个数据库。<br>​<br>​<span id="more"></span></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200601232224434.png" alt="image-20200601232224434"></p>
<p>​    但是随着用户量和数据量增加，就会出现很多影响数据库性能的因素，如：数据存储量、IO瓶颈、访问量瓶颈等。此时就需要将数据进行拆分，从一个库拆分成多个库。</p>
<h2 id="数据拆分方式"><a href="#数据拆分方式" class="headerlink" title="数据拆分方式"></a>数据拆分方式</h2><h3 id="垂直拆分"><a href="#垂直拆分" class="headerlink" title="垂直拆分"></a>垂直拆分</h3><p>​    垂直拆分是按照业务将表进行分类并分布到不同的数据节点上。在初始进行数据拆分时，使用垂直拆分是非常直观的一种方式。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200601235540364.png" alt="image-20200601235540364"></p>
<p>垂直拆分的优点：</p>
<ul>
<li>拆分规则明确，按照不同的功能模块或服务分配不同的数据库。</li>
<li>数据维护与定位简单。</li>
</ul>
<p>垂直拆分的缺点：</p>
<ul>
<li>对于读写极其频繁且数据量超大的表，仍然存在存储与性能瓶颈。简单的索引此时已经无法解决问题。</li>
<li>会出现跨库join。</li>
<li>需要对代码进行重构，修改原有的事务操作。</li>
<li>某个表数据量达到一定程度后扩展起来较为困难</li>
</ul>
<h3 id="水平拆分"><a href="#水平拆分" class="headerlink" title="水平拆分"></a>水平拆分</h3><p>​    为了解决垂直拆分出现的问题，可以使用水平拆分继续横向扩展，首先，可以如果<strong>当前数据库的容量没有问题</strong>的话，可以对读写极其频繁且数据量超大的表进行<strong>分表</strong>操作。由一张表拆分出多张表。</p>
<p>​    在一个库中，拆分出多张表，每张表存储不同的数据，这样对于其操作效率会有明显的提升。而且因为处于同一个库中，也不会出现分布式事务的问题。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200602001628392.png" alt="image-20200602001628392"></p>
<p>​    而拆分出多张表后，如果当前数据库的容量已经不够了，但是还要继续拆分的话，就可以进行<strong>分库</strong>操作，产生多个数据库，然后在扩展出的数据库中继续扩展表。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200602002017703.png" alt="image-20200602002017703"></p>
<p>水平拆分的优点：</p>
<ul>
<li>尽量的避免了跨库join操作。</li>
<li>不会存在超大型表的性能瓶颈问题。</li>
<li>事务处理相对简单。</li>
<li>只要拆分规则定义好，很难出现扩展性的限制。</li>
</ul>
<p>水平拆分的缺点：</p>
<ul>
<li>拆分规则不好明确，规则一定会和业务挂钩，如根据id、根据时间等。</li>
<li>不好明确数据位置，难以进行维护。</li>
<li>多数据源管理难度加大，代码复杂度增加。</li>
<li>也会存在分布式事务问题</li>
<li>数据库维护成本增加</li>
</ul>
<h2 id="数据切分带来的问题"><a href="#数据切分带来的问题" class="headerlink" title="数据切分带来的问题"></a>数据切分带来的问题</h2><ul>
<li>按照用户ID求模，将数据分散到不同的数据库，具有相同数据用户的数据都被分散到一个库中。</li>
<li>按照日期，将不同月甚至日的数据分散到不同的库中。</li>
<li>按照某个特定的字段求模，或者根据特定范围段分散到不同的库中。</li>
</ul>
<p>数据切分带来的核心问题</p>
<ul>
<li>产生引入分布式事务的问题。</li>
<li>跨节点 Join 的问题。</li>
<li>跨节点合并排序分页问题。</li>
</ul>
]]></content>
      <categories>
        <category>分布式数据库架构</category>
      </categories>
      <tags>
        <tag>数据切分核心思想</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式数据库架构实践06--Mycat企业级架构设计&amp;应用</title>
    <url>/jwangcloud/1100440702/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/DB1.jpeg" width="1000" height="200" align="middle">





<h2 id="Mycat主从切换"><a href="#Mycat主从切换" class="headerlink" title="Mycat主从切换"></a>Mycat主从切换</h2><span id="more"></span>

<p>​    基于Mycat主从复制方案，当前存在一个主节点和一个从节点，主节点负责写操作，从节点负责读操作。当在一个dataHost中配置了两个或多个writeHost，如果第一个writeHost宕机，则Mycat会在默认3次心跳检查失败后，自动切换到下一个可用的writeHost执行DML语句，并在<strong>conf/dnindex.properties</strong>文件里记录当前所用的writeHost的index。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200621190210292.png" alt="image-20200621190210292"></p>
<p>​    在Mycat主从切换中，可以将从节点也配置为是一个写节点（相当于从节点同时负责读写）。当原有的master写节点宕机后，从节点会被提升为主节点，同时负责读写操作。当写节点恢复后，会被作为从节点使用，保持现有状态不变，跟随新的主节点。</p>
<p>​    简单点说就是：原来的主变成从，原来的从一直为主。</p>
<h3 id="修改schema-xml"><a href="#修改schema-xml" class="headerlink" title="修改schema.xml"></a>修改schema.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:schema <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;userdb&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;true&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;user_id&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn142&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;dh142&quot;</span> <span class="attr">database</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">		writeType:0  所有的写操作都发送到writeHost上</span></span><br><span class="line"><span class="comment">		balance:1 所有读操作都发送到readHost上</span></span><br><span class="line"><span class="comment">		switchType:2 基于mysql主从同步的状态决定是否切换</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;dh142&quot;</span>  <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;1&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;100&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span>  <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;jdbc&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--查询心跳--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>show slave status<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--配置写节点实际物理数据库信息--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://192.168.200.142:3309&quot;</span> <span class="attr">host</span>=<span class="string">&quot;host1&quot;</span>  <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--配置读节点实际物理数据库信息--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;host2&quot;</span> <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://192.168.200.145:3309&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">readHost</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!--配置从节点也会作为写节点使用--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://192.168.200.145:3309&quot;</span> <span class="attr">host</span>=<span class="string">&quot;host2&quot;</span>  <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>​    开始测试时，当前host1为master写节点，host2为slave读节点同时作为备用写节点。</p>
<p>1）查看conf/dnindex.properties。可以发现dn142的值0，代表为第一个写节点。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200621194835074.png" alt="image-20200621194835074"></p>
<p>2）向tb_user表中插入数据。期望效果：当前host1为写节点，数据会进入到host1中，并复制到host2中</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(user_name) <span class="keyword">values</span>(<span class="string">&#x27;zhangsan&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200621193213163.png" alt="image-20200621193213163"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200621193227331.png" alt="image-20200621193227331"></p>
<p>3）停止host1的mysql服务。并重新执行添加操作。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(user_name) <span class="keyword">values</span>(<span class="string">&#x27;lisi&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>此时mycat Server控制台信息</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200621194645750.png" alt="image-20200621194645750"></p>
<p>同时查看conf/dnindex.properties。可以发现dn142的值已从0变为1。进行了节点更改。<img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200621194803521.png" alt="image-20200621194803521"></p>
<p>数据可以插入成功，但是数据会进入到第二个写节点中</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200621194946743.png" alt="image-20200621194946743"></p>
<p>4）重启host1服务。并重新插入数据。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(user_name) <span class="keyword">values</span>(<span class="string">&#x27;wangwu&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>此时可以发现数据仍然会进入到host2中，因为就算之前的host1恢复了，根据mycat的规则其也不会自动提升为写节点，因此写节点仍然为host2。 </p>
<p>并且当前为主从架构，并没有配置为双向复制。所以数据进入到host2后，host1中仍然没有数据，符合预期。此时host2会同时负责读、写请求。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200621195436688.png" alt="image-20200621195436688"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200621195444753.png" alt="image-20200621195444753"></p>
<h2 id="动态扩容-amp-数据迁移"><a href="#动态扩容-amp-数据迁移" class="headerlink" title="动态扩容&amp;数据迁移"></a>动态扩容&amp;数据迁移</h2><p>​    在生产环境下，当原有的数据库节点已经满足不了当前的数据存储量，此时就会在现有数据库基础上新增数据节点。但是当新增数据节点后，就要考虑原有的数据应该如何迁移一部分数据到新增的数据节点上。</p>
<p>​    <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200628172038412.png" alt="image-20200628172038412"></p>
<p>1）上传mycat，并在mycat目录下创建logs目录，并在logs目录中创建mycat.pid文件</p>
<p>1）/conf目录下新建newSchema.xml和newRule.xml，用于配置扩容节点。修改内容如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:schema <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;userdb&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;true&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn180&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn180,dn181,dn182&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;mod-long&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn180&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;dh180&quot;</span> <span class="attr">database</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn181&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;dh181&quot;</span> <span class="attr">database</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn182&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;dh182&quot;</span> <span class="attr">database</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;dh180&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;100&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span>  <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;jdbc&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span> <span class="attr">slaveThreshold</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://192.168.200.180:3311&quot;</span> <span class="attr">host</span>=<span class="string">&quot;host1&quot;</span>  <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;dh181&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;100&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span>  <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;jdbc&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span> <span class="attr">slaveThreshold</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://192.168.200.181:3311&quot;</span> <span class="attr">host</span>=<span class="string">&quot;host1&quot;</span>  <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;dh182&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;100&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span>  <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;jdbc&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span> <span class="attr">slaveThreshold</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://192.168.200.182:3311&quot;</span> <span class="attr">host</span>=<span class="string">&quot;host1&quot;</span>  <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- - - Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); </span></span><br><span class="line"><span class="comment"> - you may not use this file except in compliance with the License. - You </span></span><br><span class="line"><span class="comment"> may obtain a copy of the License at - - http://www.apache.org/licenses/LICENSE-2.0 </span></span><br><span class="line"><span class="comment"> - - Unless required by applicable law or agreed to in writing, software - </span></span><br><span class="line"><span class="comment"> distributed under the License is distributed on an &quot;AS IS&quot; BASIS, - WITHOUT </span></span><br><span class="line"><span class="comment"> WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. - See the </span></span><br><span class="line"><span class="comment"> License for the specific language governing permissions and - limitations </span></span><br><span class="line"><span class="comment"> under the License. --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:rule <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;rule.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:rule</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;rule1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>func1<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;partition-by-fixed-hash&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>partition-by-fixed-hash<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-date&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>create_time<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>partbyday<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;rule2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>func1<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-intfile&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>sex<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>hash-int<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;auto-sharding-long&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>age<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>rang-long<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;mod-long&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>mod-long<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-murmur&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>murmur<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-murmur-goods&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>goods_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>murmur<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-murmur-goods-detail&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>goods_detail_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>murmur<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;crc32slot&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>crc32slot<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-month&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>create_time<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-month-function<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;latest-month-calldate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>calldate<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>latestMonth<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;auto-sharding-rang-mod&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>rang-mod<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;jch&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>jump-consistent-hash<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-hour&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_hour<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-hour-function<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;murmur&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMurmurHash&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;seed&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;count&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;virtualBucketTimes&quot;</span>&gt;</span>160<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;crc32slot&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByCRC32PreSlot&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;count&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;hash-int&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByFileMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>partition-hash-int.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;type&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultNode&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;rang-long&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.AutoPartitionByLong&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>autopartition-long.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;mod-long&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMod&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;count&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;func1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByLong&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionCount&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionLength&quot;</span>&gt;</span>128<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;partition-by-fixed-hash&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByLong&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionCount&quot;</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionLength&quot;</span>&gt;</span>256,768<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;latestMonth&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.LatestMonthPartion&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;splitOneDay&quot;</span>&gt;</span>24<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;partbymonth&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMonth&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dateFormat&quot;</span>&gt;</span>yyyy-MM-dd<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sBeginDate&quot;</span>&gt;</span>2015-01-01<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;partbyday&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByDate&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dateFormat&quot;</span>&gt;</span>yyyy-MM-dd<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sNaturalDay&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sBeginDate&quot;</span>&gt;</span>2020-01-01<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sPartionDay&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;rang-mod&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByRangeMod&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>partition-range-mod.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;jump-consistent-hash&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByJumpConsistentHash&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;totalBuckets&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-hour-function&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.LatestMonthPartion&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;splitOneDay&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-month-function&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMonth&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dateFormat&quot;</span>&gt;</span>yyyy-MM-dd<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sBeginDate&quot;</span>&gt;</span>2020-05-01<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:rule</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2）修改/conf下migrateTables.properties，指定虚拟库和表</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">userdb</span>=<span class="string">tb_user</span></span><br></pre></td></tr></table></figure>

<p>3）修改/bin下dataMigrate.sh</p>
<p>修改该文件编码格式由原有dos修改为unix</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看文件格式</span><br><span class="line">:set ff</span><br><span class="line"></span><br><span class="line">#修改文件格式</span><br><span class="line">:set ff&#x3D;unix</span><br></pre></td></tr></table></figure>

<p>修改mysqldump文件路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看mysqldump文件路径</span><br><span class="line">find &#x2F; -name mysqldump</span><br><span class="line"></span><br><span class="line">#修改dataMigrate.sh文件配置</span><br><span class="line">RUN_CMD&#x3D;&quot;$RUN_CMD -mysqlBin&#x3D;&#x2F;usr&#x2F;bin&#x2F;&quot;</span><br></pre></td></tr></table></figure>

<p>4）执行数据扩容与迁移</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd bin</span><br><span class="line"></span><br><span class="line">.&#x2F;dataMigrate.sh</span><br></pre></td></tr></table></figure>

<p>5）执行后结果</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200628173237529.png" alt="image-20200628173237529"></p>
<p><code>ps:执行数据扩容&amp;迁移时，务必注意虚拟库的名称必须要全部是小写，不能大小写混合</code></p>
<p>6）数据迁移后还应考虑后续的数据查询，此时还需将文件进行替换，用于查询路由。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv newRule.xml rule.xml</span><br><span class="line"></span><br><span class="line">mv newSchema.xml schema.xml</span><br></pre></td></tr></table></figure>

<h2 id="Haproxy-keepalived-mycat高可用负载均衡集群"><a href="#Haproxy-keepalived-mycat高可用负载均衡集群" class="headerlink" title="Haproxy+keepalived+mycat高可用负载均衡集群"></a>Haproxy+keepalived+mycat高可用负载均衡集群</h2><p>​    当线上服务器压力过大时，可以考虑基于keepalived进行高可用避免出现mycat单点问题，同时为了防止线上压力集中在某一台实例上，可以通过haproxy进行请求的负载均衡。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200628173502183.png" alt="image-20200628173502183"></p>
<h3 id="mycat准备"><a href="#mycat准备" class="headerlink" title="mycat准备"></a>mycat准备</h3><p>​    142&amp;145两台机器准备mycat-server并启动</p>
<h3 id="haproxy安装-amp-配置"><a href="#haproxy安装-amp-配置" class="headerlink" title="haproxy安装&amp;配置"></a>haproxy安装&amp;配置</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载haproxy镜像</span></span><br><span class="line"><span class="string">docker</span> <span class="string">pull</span> <span class="string">haproxy:1.9.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在宿主机指定文件夹创建haproxy.cfg</span></span><br><span class="line"></span><br><span class="line"><span class="string">global</span></span><br><span class="line">    <span class="string">log</span>         <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="string">local2</span></span><br><span class="line">    <span class="string">maxconn</span>     <span class="number">4000</span></span><br><span class="line">    <span class="string">daemon</span></span><br><span class="line"></span><br><span class="line"><span class="string">defaults</span></span><br><span class="line">        <span class="string">log</span>     <span class="string">global</span></span><br><span class="line">        <span class="string">log</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="string">local3</span></span><br><span class="line">        <span class="string">mode</span>    <span class="string">http</span></span><br><span class="line">        <span class="string">option</span>  <span class="string">tcplog</span></span><br><span class="line">        <span class="string">option</span>  <span class="string">dontlognull</span></span><br><span class="line">        <span class="string">retries</span> <span class="number">10</span></span><br><span class="line">        <span class="string">option</span> <span class="string">redispatch</span></span><br><span class="line">        <span class="string">maxconn</span>         <span class="number">2000</span></span><br><span class="line">        <span class="string">timeout</span> <span class="string">connect</span>         <span class="string">10s</span></span><br><span class="line">        <span class="string">timeout</span> <span class="string">client</span>          <span class="string">1m</span></span><br><span class="line">        <span class="string">timeout</span> <span class="string">server</span>          <span class="string">1m</span></span><br><span class="line">        <span class="string">timeout</span> <span class="string">http-keep-alive</span> <span class="string">10s</span></span><br><span class="line">        <span class="string">timeout</span> <span class="string">check</span>           <span class="string">10s</span></span><br><span class="line"></span><br><span class="line"><span class="string">listen</span> <span class="string">admin_stats</span></span><br><span class="line">        <span class="string">bind</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:10080</span></span><br><span class="line">        <span class="string">mode</span> <span class="string">http</span></span><br><span class="line">        <span class="string">option</span> <span class="string">httplog</span></span><br><span class="line">        <span class="string">maxconn</span> <span class="number">10</span></span><br><span class="line">        <span class="string">stats</span> <span class="string">refresh</span> <span class="string">30s</span></span><br><span class="line">        <span class="string">stats</span> <span class="string">uri</span> <span class="string">/stats</span></span><br><span class="line">        <span class="string">stats</span> <span class="string">realm</span> <span class="string">XingCloud/</span> <span class="string">Haproxy</span></span><br><span class="line">        <span class="string">stats</span> <span class="string">auth</span> <span class="string">admin:admin</span> <span class="comment">#用这个账号登录，可以自己设置</span></span><br><span class="line">        <span class="string">stats</span> <span class="string">hide-version</span></span><br><span class="line">        <span class="string">stats</span> <span class="string">admin</span> <span class="string">if</span> <span class="literal">TRUE</span></span><br><span class="line">        </span><br><span class="line"><span class="string">listen</span>  <span class="string">mycat</span></span><br><span class="line">        <span class="string">bind</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:3300</span></span><br><span class="line">        <span class="string">mode</span> <span class="string">tcp</span></span><br><span class="line">        <span class="string">balance</span> <span class="string">roundrobin</span></span><br><span class="line">        <span class="string">server</span> <span class="string">mycat-180</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.180</span><span class="string">:8066</span> <span class="string">check</span> <span class="string">port</span> <span class="number">8066 </span><span class="string">maxconn</span> <span class="number">300</span></span><br><span class="line">        <span class="string">server</span> <span class="string">mycat-181</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.181</span><span class="string">:8066</span> <span class="string">check</span> <span class="string">port</span> <span class="number">8066 </span><span class="string">maxconn</span> <span class="number">300</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#启动容器</span></span><br><span class="line"><span class="string">docker</span> <span class="string">run</span> <span class="string">-d</span> <span class="string">--name</span> <span class="string">haproxy</span> <span class="string">-p</span> <span class="number">10080</span><span class="string">:10080</span> <span class="string">-v</span> <span class="string">/usr/local/haproxy:/usr/local/etc/haproxy</span> <span class="string">haproxy:1.9.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#访问web管理页面</span></span><br><span class="line"><span class="string">http://192.168.200.142:10080/stats</span></span><br></pre></td></tr></table></figure>

<p><a href="http://192.168.200.142:10080/stats">http://192.168.200.142:10080/stats</a>     帐号：admin  密码：admin</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200628195202338.png" alt="image-20200628195202338"></p>
<h3 id="keepalived安装-amp-配置"><a href="#keepalived安装-amp-配置" class="headerlink" title="keepalived安装&amp;配置"></a>keepalived安装&amp;配置</h3><p>1）安装epel-release源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum list installed|grep epel-release</span><br></pre></td></tr></table></figure>

<p>2）查找可用安装源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum search keepalived</span><br></pre></td></tr></table></figure>

<p>3）keepAlived安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install keepalived -y</span><br></pre></td></tr></table></figure>

<p>4）安装虚拟服务器管理命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install ipvsadm -y</span><br></pre></td></tr></table></figure>

<p>5）编写执行shell脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vi /etc/keepalived/chk.sh<span class="comment">#!/bin/bash</span></span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="keyword">if</span> [ $(ps -C haproxy --no-header | wc -l) -eq 0 ]; <span class="keyword">then</span></span></span><br><span class="line">       killall keepalived</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>6）配置keepAlived配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;keepalived</span><br><span class="line"></span><br><span class="line">vi keepalvied.conf</span><br><span class="line"></span><br><span class="line">! Configuration File for keepalived</span><br><span class="line">#简单的头部，这里主要可以做邮件通知报警等的设置，此处就暂不配置了；</span><br><span class="line">global_defs &#123;</span><br><span class="line">        #notificationd LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line">#预先定义一个脚本，方便后面调用，也可以定义多个，方便选择；</span><br><span class="line">vrrp_script chk_haproxy &#123;</span><br><span class="line">    script &quot;&#x2F;etc&#x2F;keepalived&#x2F;check.sh&quot;</span><br><span class="line">    interval 2  #脚本循环运行间隔</span><br><span class="line">&#125;</span><br><span class="line">#VRRP虚拟路由冗余协议配置</span><br><span class="line">vrrp_instance VI_1 &#123;   #VI_1 是自定义的名称；</span><br><span class="line">    state BACKUP    #MASTER表示是一台主设备，BACKUP表示为备用设备【我们这里因为设置为开启不抢占，所以都设置为备用】</span><br><span class="line">    nopreempt      #开启不抢占</span><br><span class="line">    interface ens33   #指定VIP需要绑定的物理网卡</span><br><span class="line">    virtual_router_id 11   #VRID虚拟路由标识，也叫做分组名称，该组内的设备需要相同</span><br><span class="line">    priority 130   #定义这台设备的优先级 1-254；开启了不抢占，所以此处优先级必须高于另一台</span><br><span class="line"></span><br><span class="line">    advert_int 1   #生存检测时的组播信息发送间隔，组内一致</span><br><span class="line">    authentication &#123;    #设置验证信息，组内一致</span><br><span class="line">        auth_type PASS   #有PASS 和 AH 两种，常用 PASS</span><br><span class="line">        auth_pass 111111    #密码</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.200.200    #指定VIP地址，组内一致，可以设置多个IP</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;    #使用在这个域中使用预先定义的脚本，上面定义的</span><br><span class="line">        chk_haproxy</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7）启动keepAlived</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start keepalived</span><br></pre></td></tr></table></figure>

<p>8）查看keepAlived执行状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef|grep keepalived</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200628202404850.png" alt="image-20200628202404850"></p>
<p>9）此时通过ip a可以看到优先级高的机器已经有了虚拟ip</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200628202617986.png" alt="image-20200628202617986"></p>
<p>10）访问haproxy</p>
<p>192.168.200.200:10080/stats   访问成功</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200628202701140.png" alt="image-20200628202701140"></p>
<p>11）访问mycat</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200628202822392.png" alt="image-20200628202822392"></p>
<p>访问成功，现在已经成功通过keepalived+haproxy跳转到mycat上。</p>
]]></content>
      <categories>
        <category>分布式数据库架构</category>
      </categories>
      <tags>
        <tag>Mycat主从切换</tag>
        <tag>动态扩容</tag>
        <tag>数据迁移</tag>
        <tag>Haproxy+keepalived+mycat高可用负载均衡集群</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式数据库架构实践07--Mycat企业级运维</title>
    <url>/jwangcloud/2395128656/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/DB1.jpeg" width="1000" height="200" align="middle">


<h2 id="Mycat-Web性能监控平台"><a href="#Mycat-Web性能监控平台" class="headerlink" title="Mycat-Web性能监控平台"></a>Mycat-Web性能监控平台</h2><span id="more"></span>

<p>​    在现在的企业开发中，作为一个合格的开发人员来说，不仅要完成正常的编码任务，同时也要掌握一定的运维能力。当线上系统出现问题时，要能够快速的将隐藏问题找出来并进行解决。</p>
<p>​    Mycat-web是mycat的可视化运维监控平台。其能够管理和监控mycat的流量、连接数、线程数、JVM、内存。并且基于内部统计还能够分析出慢SQL与高频SQL。为sql优化提供了重要的依据。</p>
<h3 id="Mycat-web安装"><a href="#Mycat-web安装" class="headerlink" title="Mycat-web安装"></a>Mycat-web安装</h3><p>1）安装zookeeper</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建zk文件夹</span><br><span class="line">mkdir -p &#x2F;usr&#x2F;local&#x2F;zookeeper</span><br><span class="line"></span><br><span class="line">#在zk文件夹下下载zk安装包</span><br><span class="line">wget https:&#x2F;&#x2F;archive.apache.org&#x2F;dist&#x2F;zookeeper&#x2F;zookeeper-3.4.9&#x2F;zookeeper-3.4.9.tar.gz</span><br><span class="line"></span><br><span class="line">#解压安装包</span><br><span class="line">tar -zxvf zookeeper-3.4.9.tar.gz</span><br><span class="line"></span><br><span class="line">#进入&#x2F;conf文件夹，修改配置文件名称</span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line"></span><br><span class="line">#修改配置文件内容</span><br><span class="line"># The number of milliseconds of each tick</span><br><span class="line">tickTime&#x3D;2000</span><br><span class="line"># The number of ticks that the initial</span><br><span class="line"># synchronization phase can take</span><br><span class="line">initLimit&#x3D;10</span><br><span class="line"># The number of ticks that can pass between</span><br><span class="line"># sending a request and getting an acknowledgement</span><br><span class="line">syncLimit&#x3D;5</span><br><span class="line"># the directory where the snapshot is stored.</span><br><span class="line"># do not use &#x2F;tmp for storage, &#x2F;tmp here is just</span><br><span class="line"># example sakes.</span><br><span class="line">dataDir&#x3D;&#x2F;usr&#x2F;local&#x2F;services&#x2F;zookeeper&#x2F;zookeeper-3.4.9&#x2F;data</span><br><span class="line">dataLogDir&#x3D;&#x2F;usr&#x2F;local&#x2F;services&#x2F;zookeeper&#x2F;zookeeper-3.4.9&#x2F;logs</span><br><span class="line"># the port at which the clients will connect</span><br><span class="line">clientPort&#x3D;2181</span><br><span class="line"># the maximum number of client connections.</span><br><span class="line"># increase this if you need to handle more clients</span><br><span class="line">#maxClientCnxns&#x3D;60</span><br><span class="line">#</span><br><span class="line"># Be sure to read the maintenance section of the</span><br><span class="line"># administrator guide before turning on autopurge.</span><br><span class="line">#</span><br><span class="line"># http:&#x2F;&#x2F;zookeeper.apache.org&#x2F;doc&#x2F;current&#x2F;zookeeperAdmin.html#sc_maintenance</span><br><span class="line">#</span><br><span class="line"># The number of snapshots to retain in dataDir</span><br><span class="line">#autopurge.snapRetainCount&#x3D;3</span><br><span class="line"># Purge task interval in hours</span><br><span class="line"># Set to &quot;0&quot; to disable auto purge feature</span><br><span class="line">#autopurge.purgeInterval&#x3D;1</span><br><span class="line"></span><br><span class="line">#配置环境变量</span><br><span class="line">export ZOOKEEPER_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;zookeeper&#x2F;zookeeper-3.4.9&#x2F;</span><br><span class="line">export PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH:$MYCAT_HOME&#x2F;bin:$ZOOKEEPER_HOME&#x2F;bin</span><br><span class="line"></span><br><span class="line">#启动zk</span><br><span class="line">zkServer.sh start</span><br></pre></td></tr></table></figure>

<p>2）Mycat-web安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#解压mycat安装包</span><br><span class="line">tar -zxvf Mycat-web-1.0-SNAPSHOT-20170102153329-linux.tar.gz</span><br><span class="line"></span><br><span class="line">#启动mycat-web，默认端口8082</span><br><span class="line">.&#x2F;start.sh</span><br><span class="line"></span><br><span class="line">#查看mycat-web是否启动成功</span><br><span class="line">netstat -ant | grep 8082</span><br><span class="line"></span><br><span class="line">#访问mycat-web</span><br><span class="line">ip:8082&#x2F;mycat</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200628211259421.png" alt="image-20200628211259421"></p>
<h3 id="mycat-web使用"><a href="#mycat-web使用" class="headerlink" title="mycat-web使用"></a>mycat-web使用</h3><p>​    mycat-web的使用非常简单，其内部已经提供了mycat配置、mycat监控、sql监控与sql上线检查。只需要在其内部配置好自己的mycat服务器信息即可完成使用。</p>
<h2 id="Mycat调优"><a href="#Mycat调优" class="headerlink" title="Mycat调优"></a>Mycat调优</h2><p>​    在mycat使用过程中，也有可能涉及到对其进行调优。对于mycat调优主要是从JVM、操作系统、mycat本身、缓存、I/O、mysql这几部分分别进行调优</p>
<h3 id="JVM优化"><a href="#JVM优化" class="headerlink" title="JVM优化"></a>JVM优化</h3><p>​    JVM调优主要分为两部分<strong>堆内存</strong>和<strong>直接内存</strong>。直接内存尽可能的大，合理情况下应在操作系统的50%~67%之间。以16G内存服务器为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-server -Xms4G -Mmx4G XX:MaxPermSize&#x3D;64M -XX:MaxDirectMemorySize&#x3D;6G</span><br></pre></td></tr></table></figure>

<p>​    Mycat中JVM参数修改可配置/conf/wrapper.conf</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">wrapper.java.additional.4</span>=<span class="string">-XX:MaxDirectMemorySize=2G</span></span><br><span class="line"><span class="comment"># Initial Java Heap Size (in MB)</span></span><br><span class="line"><span class="comment">#wrapper.java.initmemory=3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Maximum Java Heap Size (in MB)</span></span><br><span class="line"><span class="comment">#wrapper.java.maxmemory=64</span></span><br></pre></td></tr></table></figure>

<h3 id="操作系统优化"><a href="#操作系统优化" class="headerlink" title="操作系统优化"></a>操作系统优化</h3><p>​    Linux系统对每个进行打开的文件句柄数量是有限的，可以把mysql和mycat服务器的最大文件句柄数量设置为5000~10000，可以通过ulimit命令修改，但只对当前用户有效，且服务器重启后失效。</p>
<h3 id="mycat优化"><a href="#mycat优化" class="headerlink" title="mycat优化"></a>mycat优化</h3><p>​    修改/conf/server.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置可用CPU数量，当CPU压力小时，可以通过该参数优化mycat--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;processors&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--设置可用CPU线程池大小，一般为16~64之间，根据系统能力决定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;processorExecutor&quot;</span>&gt;</span>32<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    修改/conf/schema.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--checkSQLschema建议设置为false，可以优化sql解析--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;userDB&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;true&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;500&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--maxCon建议设置在1000~2000之间，同一个mysql实例上所有dataNode节点共享本datahost上的所有物理节点--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;dh142&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;3&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;100&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span>  <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;jdbc&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span> <span class="attr">slaveThreshold</span>=<span class="string">&quot;1000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="缓存优化"><a href="#缓存优化" class="headerlink" title="缓存优化"></a>缓存优化</h3><p>​    在mycat中通过<code>show @@cache</code>可以查看当前mycat缓存的使用情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -umycat -h192.168.200.142 -P9066 -pmycat</span><br><span class="line"></span><br><span class="line">show @@cache</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200628231722460.png" alt="image-20200628231722460"></p>
<p>​    如果CUR接近MAX，而PUT比MAX大很多，则表明MAX需要增大。HIT/ACCESS为缓存命中率，该值越高越好。当调整后需要观察缓存命中率是否增加、PUT是否在下降。</p>
<p>​    可以修改**/conf/cacheservice.properties**修改缓存配置，其使用的是encache，在encache.xml中设置了encache缓存的全局属性</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#used for mycat cache service conf</span></span><br><span class="line"><span class="meta">factory.encache</span>=<span class="string">io.mycat.cache.impl.EnchachePooFactory</span></span><br><span class="line"><span class="comment">#key is pool name ,value is type,max size, expire seconds</span></span><br><span class="line"><span class="comment">#SQL解析和路由使用的缓存</span></span><br><span class="line"><span class="meta">pool.SQLRouteCache</span>=<span class="string">encache,10000,1800</span></span><br><span class="line"><span class="comment">#ER分片时使用的缓存</span></span><br><span class="line"><span class="meta">pool.ER_SQL2PARENTID</span>=<span class="string">encache,1000,1800</span></span><br><span class="line"><span class="comment">#当根据主键查询比较多时，该值设置的较大，可以有效提升性能</span></span><br><span class="line"><span class="meta">layedpool.TableID2DataNodeCache</span>=<span class="string">encache,10000,18000</span></span><br><span class="line"><span class="meta">layedpool.TableID2DataNodeCache.TESTDB_ORDERS</span>=<span class="string">50000,18000</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>分布式数据库架构</category>
      </categories>
      <tags>
        <tag>Mycat-Web性能监控平台</tag>
        <tag>Mycat调优</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式数据库架构实践04--Mycat核心概念&amp;源码部署</title>
    <url>/jwangcloud/164096051/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/DB1.jpeg" width="1000" height="200" align="middle">



<h2 id="Mycat简介"><a href="#Mycat简介" class="headerlink" title="Mycat简介"></a>Mycat简介</h2><span id="more"></span>

<p>​    当对数据拆分后会产生诸多的问题，对于这些问题的解决，可以借助于数据库中间件来进行解决，现在时下比较流行的是使用Mycat。</p>
<p>​    Mycat是一款数据库中间件，对于应用程序来说是完全透明化的，不管底层的数据如何拆分，应用只需要连接Mycat即可完成对数据的操作。同时它还支持MySQL、SQL Server、Oracle、DB2、PostgreSQL等主流数据库。但是Mycat不会进行数据存储，它只是用于数据的路由。</p>
<p>​    其底层是基于拦截思想实现，其会拦截用户发送过来的SQL语句，首先对SQL语句做了一些特定的分析：如分片分析、路由分析、读写分离分析、缓存分析等，然后将此SQL发往后端的真实数据库，并将返回的结果做适当的处理，最终再返回给用户。</p>
<p>​    <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200602235241816.png" alt="image-20200602235241816"></p>
<h2 id="Mycat特性"><a href="#Mycat特性" class="headerlink" title="Mycat特性"></a>Mycat特性</h2><ul>
<li>支持SQL92标准</li>
<li>遵守Mysql原生协议，跨语言，跨平台，跨数据库的通用中间件代理。</li>
<li>基于心跳的自动故障切换，支持读写分离，支持MySQL主从，以及galera cluster集群。</li>
<li>支持Galera for MySQL集群，Percona Cluster或者MariaDB cluster</li>
<li>基于Nio实现，有效管理线程，高并发问题。</li>
<li>支持数据的多片自动路由与聚合，支持sum,count,max等常用的聚合函数。</li>
<li>支持单库内部任意join，支持跨库2表join。</li>
<li>支持通过全局表，ER关系的分片策略，实现了高效的多表join查询。</li>
<li>支持多租户方案。</li>
<li>支持分布式事务（弱xa）。</li>
<li>支持全局序列号，解决分布式下的主键生成问题。</li>
<li>分片规则丰富，插件化开发，易于扩展。</li>
<li>强大的web，命令行监控。</li>
<li>支持前端作为mysq通用代理，后端JDBC方式支持Oracle、DB2、SQL Server 、 mongodb 。</li>
<li>支持密码加密</li>
<li>支持服务降级</li>
<li>支持IP白名单</li>
<li>支持SQL黑名单、sql注入攻击拦截</li>
<li>支持分表（1.6）</li>
<li>集群基于ZooKeeper管理，在线升级，扩容，智能优化，大数据处理（2.0开发版）。</li>
</ul>
<h2 id="Mycat源码调试-amp-部署"><a href="#Mycat源码调试-amp-部署" class="headerlink" title="Mycat源码调试&amp;部署"></a>Mycat源码调试&amp;部署</h2><p><strong>源码下载：</strong><a href="https://codeload.github.com/MyCATApache/Mycat-Server/zip/Mycat-server-1675-release">https://codeload.github.com/MyCATApache/Mycat-Server/zip/Mycat-server-1675-release</a></p>
<p><strong>默认端口：8066</strong></p>
<p><strong>配置启动参数：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-DMYCAT_HOME&#x3D;D:&#x2F;workspace&#x2F;Mycat-Server-Mycat-server-1675-release&#x2F;src&#x2F;main</span><br><span class="line">#设置堆外内存大小</span><br><span class="line">-XX:MaxDirectMemorySize&#x3D;512M </span><br></pre></td></tr></table></figure>

<p><code>为什么要设置堆外内存：当使用mycat对非分片查询时，会把所有的数据查询出来，然后把这部分数据放在堆外内存中</code></p>
<p>​    在Mycat有核心三个配置文件，分别为：sever.xml、schema.xml、rule.xml</p>
<ul>
<li><strong>server.xml</strong>：是Mycat服务器参数调整和用户授权的配置文件。</li>
<li><strong>schema.xml</strong>：是逻辑库定义和表以及分片定义的配置文件</li>
<li><strong>rule.xml</strong>：是分片规则的配置文件，分片规则的具体一些参数信息单独存放为文件，也在这个目录下，配置文件修改需要重启MyCAT。</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200603000918666.png" alt="image-20200603000918666"></p>
<h2 id="MyCat核心概念"><a href="#MyCat核心概念" class="headerlink" title="MyCat核心概念"></a>MyCat核心概念</h2><p>​    在学习Mycat首先需要先对其内部一些核心概念有足够的了解。</p>
<ul>
<li><strong>逻辑库</strong>：Mycat中的虚拟数据库。对应实际数据库的概念。在没有使用mycat时，应用需要确定当前连接的数据库等信息，那么当使用mycat后，也需要先虚拟一个数据库，用于应用的连接。</li>
<li><strong>逻辑表</strong>：mycat中的虚拟数据表。对应时间数据库中数据表的概念。</li>
<li><strong>非分片表</strong>：没有进行数据切分的表。</li>
<li><strong>分片表</strong>：已经被数据拆分的表，每个分片表中都有原有数据表的一部分数据。多张分片表可以构成一个完整数据表。</li>
<li><strong>ER表</strong>：子表的记录与所关联的父表记录存放在同一个数据分片上，即子表依赖于父表，通过表分组（Table Group）保证数据Join不会跨库操作。表分组（Table Group）是解决跨分片数据join的一种很好的思路，也是数据切分规划的重要一条规则</li>
<li><strong>全局表</strong>：可以理解为是一张数据冗余表，如状态表，每一个数据分片节点又保存了一份状态表数据。数据冗余是解决跨分片数据join的一种很好的思路，也是数据切分规划的另外一条重要规则。</li>
<li><strong>分片节点（dataNode）</strong>：数据切分后，每一个数据分片表所在的数据库就是分片节点。</li>
<li><strong>节点主机（dataHost）</strong>：数据切分后，每个分片节点（dataNode）不一定都会独占一台机器，同一机器上面可以有多个分片数据库，这样一个或多个分片节点（dataNode）所在的机器就是节点主机（dataHost）,为了规避单节点主机并发数限制，尽量将读写压力高的分片节点（dataNode）均衡的放在不同的节点主机（dataHost）。</li>
<li><strong>分片规则（rule）</strong>：按照某种业务规则把数据分到某个分片的规则就是分片规则。</li>
<li><strong>全局序列号（sequence）</strong>：也可以理解为分布式id。数据切分后，原有的关系数据库中的主键约束在分布式条件下将无法使用，因此需要引入外部机制保证数据唯一性标识，这种保证全局性的数据唯一标识的机制就是全局序列号（sequence），如UUID、雪花算法等。</li>
</ul>
]]></content>
      <categories>
        <category>分布式数据库架构</category>
      </categories>
      <tags>
        <tag>Mycat</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式数据库架构实践05--Mycat企业级应用实践</title>
    <url>/jwangcloud/3881685427/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/DB1.jpeg" width="1000" height="200" align="middle">


<span id="more"></span>

<h2 id="环境参数配置"><a href="#环境参数配置" class="headerlink" title="环境参数配置"></a>环境参数配置</h2><p>​    在server.xml 文件中的system标签下配置所有的参数，全部为环境参数，可以根据当前需要进行开启和配置，如：设置mycat连接端口号</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;serverPort&quot;</span>&gt;</span>8066<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200603010530819.png" alt="image-20200603010530819"></p>
<h2 id="数据非分片"><a href="#数据非分片" class="headerlink" title="数据非分片"></a>数据非分片</h2><h3 id="配置初始化信息"><a href="#配置初始化信息" class="headerlink" title="配置初始化信息"></a>配置初始化信息</h3><p>​    应用连接mycat的话，也需要设置用户名、密码、被连接数据库信息，要配置这些信息的话，可以修改server.xml，在其内部添加内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置自定义用户信息--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--连接用户名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;mycat&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--连接密码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>mycat<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--创建虚拟数据库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>userdb<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定该库是否只读--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name=&quot;readOnly&quot;&gt;true&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置虚拟数据库-amp-表"><a href="#配置虚拟数据库-amp-表" class="headerlink" title="配置虚拟数据库&amp;表"></a>配置虚拟数据库&amp;表</h3><p>当配置了一个虚拟数据库后，还需要修改schema.xml，对虚拟库进行详细配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:schema <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--配置虚拟数据库--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--name：虚拟逻辑数据库名称，对应server.xml中的schemas属性值--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--dataNode：逻辑库中逻辑表的默认数据节点--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--sqlMaxLimit：类似于SQL上添加limit，如schema为非分片库，则该属性无效--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;userdb&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;true&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;localdn&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--配置虚拟逻辑表--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--name：逻辑表名称，必须唯一--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--dataNode：逻辑表所处的数据节点，值必须与dataNode标签中的name属性对应。如果值过多可以用$连接，如：dn$1-99,dn$200-400--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--primaryKey：逻辑表对应的真实表的主键id的字段名--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;localdn&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;user_id&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--配置dataNode信息--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--name：当前datanode名称--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--dataHost：分片节点所处的节点主机，该值必须与dataHost标签中的name属性对应--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--database：当前数据节点所对应的实际物理数据库--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;localdn&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localdh&quot;</span> <span class="attr">database</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--配置节点主机--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--balance：用于进行读操作指向，有三个值可选</span></span><br><span class="line"><span class="comment">		0：所有读操作都发送到当前可用的writeHost上</span></span><br><span class="line"><span class="comment">		1：所有读操作都随机的发送到readHost上</span></span><br><span class="line"><span class="comment">		2：所有读操作都随机发送在writeHost与readHost上</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--maxCon：指定每个读写实例连接池的最大连接。也就是说，标签内嵌套的writeHost、readHost标签都会使用这个属性的值来实例化出连接池的最大连接数--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--minCon：指定每个读写实例连接池的最小连接，初始化连接池的大小--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--name：当前节点主机名称，不允许出现重复--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--dbType：当时使用的数据库类型--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--dbDriver：当前使用的数据库驱动--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--writeType：用于写操作指向，有三个值可选</span></span><br><span class="line"><span class="comment">		0：所有写操作都发送到可用的writeHost上</span></span><br><span class="line"><span class="comment">		1：所有写操作都随机发送到readHost上</span></span><br><span class="line"><span class="comment">		2：所有写操作都随机发送在writeHost与readHost上</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--readHost是从属于writeHost的，即意味着它从那个writeHost获取同步数据。</span></span><br><span class="line"><span class="comment">		因此，当它所属的writeHost宕机了，则它也不会再参与到读写分离中来，即“不工作了”。这是因为此时，它的数据已经“不可靠”了。</span></span><br><span class="line"><span class="comment">		基于这个考虑，目前mycat 1.3和1.4版本中，若想支持MySQL一主一从的标准配置，并且在主节点宕机的情况下，从节点还能读取数据。</span></span><br><span class="line"><span class="comment">		则需要在Mycat里配置为两个writeHost并设置banlance=1。”--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--switchType：设置节点切换操作，有三个值可选</span></span><br><span class="line"><span class="comment">		-1：不自动切换</span></span><br><span class="line"><span class="comment">		1：自动切换，默认值</span></span><br><span class="line"><span class="comment">		2：基于mysql主从同步的状态决定是否切换</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--slaveThreshold：主从同步状态决定是否切换，延迟超过该值就不切换--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;100&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">name</span>=<span class="string">&quot;localdh&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;jdbc&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span> <span class="attr">slaveThreshold</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--查询心跳--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--配置写节点实际物理数据库信息--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://localhost:3306&quot;</span> <span class="attr">host</span>=<span class="string">&quot;host1&quot;</span> <span class="attr">password</span>=<span class="string">&quot;root&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>​    通过navicat创建本地数据库连接并创建对应数据库，同时创建mycat连接。 在mycat连接中操作表，添加数据，可以发现，本地数据库中同步的也新增了对应的数据。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200603020230476.png" alt="image-20200603020230476"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200603020257486.png" alt="image-20200603020257486"></p>
<h2 id="根据ID取模数据分片"><a href="#根据ID取模数据分片" class="headerlink" title="根据ID取模数据分片"></a>根据ID取模数据分片</h2><p>​    当一个数据表中的数据量非常大时，就需要考虑对表内数据进行分片，拆分的规则有很多种，比较简单的一种就是，通过对id进行取模，完成数据分片。</p>
<p>1）修改schema.xml</p>
<p>​    table标签新增属性：subTables、rule</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:schema <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--配置虚拟数据库--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--name：虚拟逻辑数据库名称，对应server.xml中的schemas属性值--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--dataNode：逻辑库中逻辑表的默认数据节点--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--sqlMaxLimit：类似于SQL上添加limit，如schema为非分片库，则该属性无效--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;userdb&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;true&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;localdn&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--配置虚拟逻辑表--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--name：逻辑表名称，必须唯一--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--dataNode：逻辑表所处的数据节点，值必须与dataNode标签中的name属性对应。如果值过多可以用$连接，如：dn$1-99,dn$200-400--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--primaryKey：逻辑表对应的真实表的主键id的字段名--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--subTables：分表的名称。可以存在多个，tb_user1,tb_user2,tb_user3.如果分表较多，可以通过$连接：tb_user$1-3--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--rule：分片规则，对应rule.xml中配置--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;localdn&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">subTables</span>=<span class="string">&quot;tb_user$1-3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;mod-long&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--配置dataNode信息--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--name：当前datanode名称--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--dataHost：分片节点所处的节点主机，该值必须与dataHost标签中的name属性对应--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--database：当前数据节点所对应的实际物理数据库--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;localdn&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localdh&quot;</span> <span class="attr">database</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--配置节点主机--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--balance：用于进行读操作指向，有三个值可选</span></span><br><span class="line"><span class="comment">		0：所有读操作都发送到当前可用的writeHost上</span></span><br><span class="line"><span class="comment">		1：所有读操作都随机的发送到readHost上</span></span><br><span class="line"><span class="comment">		2：所有读操作都随机发送在writeHost与readHost上</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--maxCon：指定每个读写实例连接池的最大连接。也就是说，标签内嵌套的writeHost、readHost标签都会使用这个属性的值来实例化出连接池的最大连接数--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--minCon：指定每个读写实例连接池的最小连接，初始化连接池的大小--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--name：当前节点主机名称，不允许出现重复--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--dbType：当时使用的数据库类型--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--dbDriver：当前使用的数据库驱动--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--writeType：用于写操作指向，有三个值可选</span></span><br><span class="line"><span class="comment">		0：所有写操作都发送到可用的writeHost上</span></span><br><span class="line"><span class="comment">		1：所有写操作都随机发送到readHost上</span></span><br><span class="line"><span class="comment">		2：所有写操作都随机发送在writeHost与readHost上</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--readHost是从属于writeHost的，即意味着它从那个writeHost获取同步数据。</span></span><br><span class="line"><span class="comment">		因此，当它所属的writeHost宕机了，则它也不会再参与到读写分离中来，即“不工作了”。这是因为此时，它的数据已经“不可靠”了。</span></span><br><span class="line"><span class="comment">		基于这个考虑，目前mycat 1.3和1.4版本中，若想支持MySQL一主一从的标准配置，并且在主节点宕机的情况下，从节点还能读取数据。</span></span><br><span class="line"><span class="comment">		则需要在Mycat里配置为两个writeHost并设置banlance=1。”--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--switchType：设置节点切换操作，有三个值可选</span></span><br><span class="line"><span class="comment">		-1：不自动切换</span></span><br><span class="line"><span class="comment">		1：自动切换，默认值</span></span><br><span class="line"><span class="comment">		2：基于mysql主从同步的状态决定是否切换</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--slaveThreshold：主从同步状态决定是否切换，延迟超过该值就不切换--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;100&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">name</span>=<span class="string">&quot;localdh&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;jdbc&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span> <span class="attr">slaveThreshold</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--查询心跳--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--配置写节点实际物理数据库信息--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://localhost:3306&quot;</span> <span class="attr">host</span>=<span class="string">&quot;host1&quot;</span> <span class="attr">password</span>=<span class="string">&quot;root&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）修改rule.xml</p>
<p>​    在schema.xml中已经指定规则为mod-long。因此需要到该文件中修改对应信息。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;mod-long&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当用用于id取模的字段--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>mod-long<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--修改当前的分片数量--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;mod-long&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMod&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- how many data nodes --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 根据datanode数量进行取模分片，也就是要模几。 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;count&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）测试</p>
<p>1）向数据库中插入一千条数据，可以发现，其会根据id取模，放入不同的三张表中。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200604003934504.png" alt="image-20200604003934504"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200604003948529.png" alt="image-20200604003948529"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200604004000971.png" alt="image-20200604004000971"></p>
<p>2）当根据id查询时，会通过对id的取模，确定当前要查询的分片。并且首先会先查询mycat中的ehcache缓存，再来查询数据分片</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200604004554041.png" alt="image-20200604004554041"></p>
<p>3）当查询所有数据时，会查询所有数据分片。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200604004806962.png" alt="image-20200604004806962"></p>
<p>4）缺陷</p>
<p>​    通过id取模分片这种方式实际中应用较少。主要因为两点问题：</p>
<p>根据id取模，1）散列不均匀，出现数据倾斜。2）动态扩容时，存在rehash，出现数据丢失。</p>
<p>1）数据散列不均匀，容易出现数据倾斜。每张表中的数据量差距较大。</p>
<p>2）动态扩容后，当需要新增表时，需要对模数修改，有可能就会造成当查询某个分片时，在该分片中找不到对应数据。</p>
<p>3）动态扩容后，要进行rehash操作。</p>
<h2 id="全局序列号"><a href="#全局序列号" class="headerlink" title="全局序列号"></a>全局序列号</h2><p>​    当进行数据切分后，数据会存放在多张表中，如果仍然通过数据库自增id的方式，就会出现ID重复的问题，造成数据错乱。所以当拆分完数据后，需要让每一条数据都有自己的ID，并且在多表中不能出现重复。比较常见的会使用雪花算法来生成分布式id。</p>
<p>​    在Mycat中也提供了四种方式来进行分布式id生成：基于文件、基于数据库、基于时间戳和基于ZK。</p>
<h3 id="基于本地文件方式生成"><a href="#基于本地文件方式生成" class="headerlink" title="基于本地文件方式生成"></a>基于本地文件方式生成</h3><p>优点：本地加载，读取速度较快。</p>
<p>缺点：当MyCAT重新发布后，配置文件中的sequence会恢复到初始值。</p>
<p>​            生成的id没有含义，如时间。</p>
<p>​            MyCat如果存在多个，会出现id重复问题。</p>
<p>​    1）修改<strong>sequence_conf.properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">USER.HISIDS</span>=  <span class="string">#使用过的历史分段，可不配置</span></span><br><span class="line"><span class="meta">USER.MINID</span>=<span class="string">1  #最小ID值</span></span><br><span class="line"><span class="meta">USER.MAXID</span>=<span class="string">200000  #最大ID值</span></span><br><span class="line"><span class="meta">USER.CURID</span>=<span class="string">1000  #当前ID值</span></span><br></pre></td></tr></table></figure>

<p>​    2）修改<strong>server.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置全局序号生成方式</span></span><br><span class="line"><span class="comment">   0：文件</span></span><br><span class="line"><span class="comment">   1：数据库</span></span><br><span class="line"><span class="comment">   2：时间戳</span></span><br><span class="line"><span class="comment">   3：zookeeper</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sequnceHandlerType&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--进入序列匹配流程, 必须带有MYCATSEQ_或者 mycatseq_--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sequnceHandlerPattern&quot;</span>&gt;</span>(?:(/s*next/s+value/s+for/s*MYCATSEQ_(/w+))(,|/)|/s)*)+<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sequenceHanlderClass&quot;</span>&gt;</span>io.mycat.route.sequence.handler.HttpIncrSequenceHandler<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    3）测试</p>
<p>重启mycat，并查询是否修改成功</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> @<span class="variable">@sysparam</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200605183431528.png" alt="image-20200605183431528"></p>
<p>通过navicat插入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(user_id,user_name) <span class="keyword">values</span>(<span class="string">&#x27;next value for MYCATSEQ_USER&#x27;</span>,<span class="string">&#x27;wangwu&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>通过程序插入数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into tb_user(user_id,user_name) values(&#x27;next value for MYCATSEQ_USER&#x27;,#&#123;userName&#125;)&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="基于数据库生成"><a href="#基于数据库生成" class="headerlink" title="基于数据库生成"></a>基于数据库生成</h3><p>​    优点：能够进行id批量生成，在分布式下，可以避免id重复问题。</p>
<p>​    缺点：ID没有意义，对数据库有压力。</p>
<p>1）<strong>在实际数据库执行dbseq.sql中的sql语句</strong>，执行完毕后，会创建一张表。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200605191200321.png" alt="image-20200605191200321"></p>
<p>2）<strong>修改sequence_db_conf.properties</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TB_USER&#x3D;localdn</span><br></pre></td></tr></table></figure>

<p>3）<strong>修改server.xml文件</strong>，修改全局序列号生成方式为数据库方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sequnceHandlerType&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4）修改schema.xml。在table中添加自增属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;localdn&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">subTables</span>=<span class="string">&quot;tb_user$1-3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;mod-long&quot;</span> <span class="attr">autoIncrement</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>5）测试</p>
<p>通过navicat新增记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(user_id,user_name) <span class="keyword">values</span>(<span class="string">&#x27;next value for MYCATSEQ_TB_USER&#x27;</span>,<span class="string">&#x27;wangwu&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200605194130010.png" alt="image-20200605194130010"></p>
<h3 id="基于zookeeper生成"><a href="#基于zookeeper生成" class="headerlink" title="基于zookeeper生成"></a>基于zookeeper生成</h3><p>1）修改<strong>server.xml</strong>，更改生成模式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sequenceHandlerType&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）修改<strong>myid.properties</strong>，配置zk连接信息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">loadZk</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">zkURL</span>=<span class="string">192.168.200.131:2181</span></span><br><span class="line"><span class="attr">clusterId</span>=<span class="string">01</span></span><br><span class="line"><span class="attr">myid</span>=<span class="string">mycat_fz_01</span></span><br><span class="line"><span class="attr">clusterNodes</span>=<span class="string">mycat_fz_01</span></span><br><span class="line"><span class="comment">#server  booster  ;   booster install on db same server,will reset all minCon to 1</span></span><br><span class="line"><span class="comment">#type=server</span></span><br><span class="line"><span class="comment">#boosterDataHosts=localhost1</span></span><br></pre></td></tr></table></figure>

<p>3）修改<strong>sequence_distributed_conf.properties</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSTANCEID&#x3D;ZK #声明使用zk生成</span><br><span class="line">CLUSTERID&#x3D;01</span><br></pre></td></tr></table></figure>

<p>4）测试</p>
<p>启动mycatServer后，通过zk客户端查看节点信息。会发现新增了一个mycat节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;zkCli.sh</span><br><span class="line"></span><br><span class="line">ls &#x2F;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200609225750661.png" alt="image-20200609225750661"></p>
<p>插入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(user_id,user_name) <span class="keyword">values</span>(<span class="string">&#x27;next value for MYCATSEQ_TB_USER12&#x27;</span>,<span class="string">&#x27;heima&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>next value for MYCATSEQ_  后的内容可以随意指定。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200609233738919.png" alt="image-20200609233738919"></p>
<p>5）特性：</p>
<p>ID 结构：<strong>long 64 位</strong>，ID 最大可占 63 位</p>
<p>/* |current time millis(微秒时间戳 38 位,可以使用 17 年)|clusterId（机房或者 ZKid，通过配置文件配置 5位）|instanceId（实例 ID，可以通过 ZK 或者配置文件获取，5 位）|threadId（线程 ID，9 位）|increment(自增,6 位)</p>
<p>/* 一共 63 位，可以承受单机房单机器单线程 1000*(2^6)=640000 的并发。</p>
<p>/* 无悲观锁，无强竞争，吞吐量更高</p>
<h3 id="基于时间戳生成"><a href="#基于时间戳生成" class="headerlink" title="基于时间戳生成"></a>基于时间戳生成</h3><p>优点：不存在上面两种方案因为mycat的重启导致id重复的现象</p>
<p>​    ID= 64 位二进制 (42(毫秒)+5(机器 ID)+5(业务编码)+12(重复累加)，每毫秒可以并发 12 位二进制的累加。</p>
<p>缺点：数据类型太长，建议采用bigint(最大取值18446744073709551615)</p>
<p>1）修改<strong>server.xml</strong>。更改生成方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sequenceHandlerType&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）修改<strong>sequence_time_conf.properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sequence depend on TIME</span></span><br><span class="line"><span class="comment">#WORKID与DATAACENTERID: 0-31 任意整数。多mycat节点下，每个节点的WORKID、DATAACENTERID不能重复，组成唯一标识，总共支持32*32=1024 种组合</span></span><br><span class="line"><span class="attr">WORKID</span>=<span class="string">01</span></span><br><span class="line"><span class="attr">DATAACENTERID</span>=<span class="string">01</span></span><br></pre></td></tr></table></figure>

<p>3）测试</p>
<p>新增数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into tb_user(user_id,user_name) values(&#39;next value for MYCATSEQ_TB_USER12&#39;,&#39;heima&#39;)</span><br></pre></td></tr></table></figure>

<p>next value for MYCATSEQ_  后的内容可以随意指定。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200609234814418.png" alt="image-20200609234814418"></p>
<h2 id="Mycat分库-amp-读写分离"><a href="#Mycat分库-amp-读写分离" class="headerlink" title="Mycat分库&amp;读写分离"></a>Mycat分库&amp;读写分离</h2><p>​    之前已经基于id取模完成了分表操作，但是一个数据库的容量毕竟是有限制的，如果数据量非常大，分表已经满足不了的话，就会进行分库操作。</p>
<p>​    当前分库架构如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200612002109456.png" alt="image-20200612002109456"></p>
<p>​    现在存在两个主库，并且各自都有从节点。 当插入数据时，根据id取模放入不同的库中。同时主从间在进行写时复制的同时，还要完成主从读写分离的配置。</p>
<p>1）修改schema.xml。配置多datenode与datahost。同时配置主从读写分离。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:schema <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;userdb&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;true&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn09&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn09,dn10&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;mod-long&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn09&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;dh09&quot;</span> <span class="attr">database</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn10&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;dh10&quot;</span> <span class="attr">database</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;dh09&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;100&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span>  <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;jdbc&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span> <span class="attr">slaveThreshold</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--查询心跳--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置写节点实际物理数据库信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://192.168.200.142:3309&quot;</span> <span class="attr">host</span>=<span class="string">&quot;host1&quot;</span>  <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置读节点实际物理数据库信息--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;host2&quot;</span> <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://192.168.200.145:3309&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">readHost</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;dh10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;100&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span>  <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;jdbc&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span> <span class="attr">slaveThreshold</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--查询心跳--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置写节点实际物理数据库信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://192.168.200.142:3310&quot;</span> <span class="attr">host</span>=<span class="string">&quot;host1&quot;</span>  <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置读节点实际物理数据库信息--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;host2&quot;</span> <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://192.168.200.145:3310&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">readHost</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）修改rule.xml。配置取模时的模数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;mod-long&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMod&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- how many data nodes --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据datanode数量进行取模分片，也就是要模几。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;count&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）进行批量数据添加，可以发现数据落在了不同的库中。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200612005132092.png" alt="image-20200612005132092"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200612005159630.png" alt="image-20200612005159630"></p>
<p>4）读写分离验证</p>
<p>​    设置log4j2.xml的日志级别为DEBUG</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">		........</span><br><span class="line">        <span class="tag">&lt;<span class="name">asyncRoot</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">includeLocation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">			........</span><br><span class="line">        <span class="tag">&lt;/<span class="name">asyncRoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    基于mysql服务进行数据查看，观察控制台信息，可以看到对于read请求的数据源，分别使用的是配置文件的配置</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200621213109545.png" alt="image-20200621213109545"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200621213153827.png" alt="image-20200621213153827"></p>
<h2 id="MyCat分片规则"><a href="#MyCat分片规则" class="headerlink" title="MyCat分片规则"></a>MyCat分片规则</h2><h3 id="枚举分片"><a href="#枚举分片" class="headerlink" title="枚举分片"></a>枚举分片</h3><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>​    适用于在特定业务场景下，将不同的数据存放于不同的数据库中，如按省份、按人员信息等。</p>
<p>1）修改<strong>schema.xml</strong>，修改<strong>table</strong>标签中<strong>name</strong>属性为当前操作的表名，<strong>rule</strong>属性为<strong>sharding-by-intfile</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user_sharding_by_intfile&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142,dn145&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;sharding-by-intfile&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）修改<strong>rule.xml</strong>，配置<strong>tableRule</strong>为<strong>sharding-by-intfile</strong>中<strong>columns</strong>属性为当前指定分片字段</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-intfile&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>sex<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>hash-int<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）修改<strong>rule.xml</strong>中<strong>hash-int</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;hash-int&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByFileMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>partition-hash-int.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--type默认值为0，0表示Integer，非零表示String--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;type&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--defaultNode 当有一些特殊数据信息可以存放于默认节点中，如即不是male也不是female。默认节点：小于0表示不设置默认节点，大于等于0表示设置默认节点,不能解析的枚举就存到默认节点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultNode&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4）修改<strong>partition-hash-int.txt</strong>。指定分片字段不同值存在于不同的数据库节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">male&#x3D;0 #代表第一个datanode</span><br><span class="line">female&#x3D;1 #代表第二个datanode</span><br></pre></td></tr></table></figure>

<p>5）执行测试</p>
<p>​    修改mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into tb_user_sharding_by_intfile(user_id,user_name,sex) values(&#x27;next value for MYCATSEQ_TB_USER12&#x27;,#&#123;userName&#125;,#&#123;sex&#125;)&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addUserShareBySex</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​    执行测试，此时可以发现，当sex为male时，数据会进入142节点，当sex为female时，数据会进入145节点。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200613004923752.png" alt="image-20200613004923752"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200613004947984.png" alt="image-20200613004947984">6.8.1.2）</p>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>​    该方案适用于特定业务场景进行数据分片，但该方式容易出现数据倾斜，如不同省份的订单量一定会不同。订单量大的省份还会进行数据分库，数据库架构就会继续发生对应改变。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200613005457354.png" alt="image-20200613005457354"></p>
<h3 id="固定hash分片"><a href="#固定hash分片" class="headerlink" title="固定hash分片"></a>固定hash分片</h3><p>​    固定hash分片的工作原理类似与redis cluster槽的概念，在固定hash中会有一个范围是0-1024，内部会进行二进制运算操作，如取 id 的二进制低 10 位 与 1111111111 进行 &amp; 运算。从而当出现连接数据插入，其有可能会进入到同一个分片中，减少了分布式事务操作，提升插入效率同时尽量减少了数据倾斜问题，但不能避免不出现数据倾斜。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200613210301026.png" alt="image-20200613210301026"></p>
<p>​    按照上面这张图就存在两个分区，partition1和partition2。partition1的范围是0-255，partition2的范围是256-1024。</p>
<p>​    当向分区中存数据时，先将id值转换为二进制，接着&amp;1111111111，再对结果值转换为十进制，从而确定当前数据应该存入哪个分区中。</p>
<ul>
<li><p>1023的二进制&amp;1111111111运算后为1023，故落入第二个分区 </p>
</li>
<li><p>1024的二进制&amp;1111111111运算后为0，故落入第一个分区</p>
</li>
<li><p>266 的二进制&amp;1111111111运算后为266，故落入第二个分区内</p>
</li>
</ul>
<h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><p>1）修改<strong>schema.xml</strong>，配置自定义固定hash分配规则</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user_fixed_hash&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142,dn145&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;partition-by-fixed-hash&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）修改<strong>rule.xml</strong>，配置自定义固定hash分片规则</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;partition-by-fixed-hash&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>partition-by-fixed-hash<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  partitionCount: 存在多少个节点，如1,1    1,1,1    1,2</span></span><br><span class="line"><span class="comment">  partitionLength: 每个节点分配的范围大小</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;partition-by-fixed-hash&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByLong&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionCount&quot;</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionLength&quot;</span>&gt;</span>256,768<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）测试，添加数据，可以发现数据会根据计算，落入相应的数据库节点。</p>
<h3 id="固定范围分片"><a href="#固定范围分片" class="headerlink" title="固定范围分片"></a>固定范围分片</h3><p>​    该规则有点像枚举与固定hash的综合体，设置某一个字段，然后规定该字段值的不同范围值会进入到哪一个dataNode。适用于明确知道分片字段的某个范围属于某个分片</p>
<p>优点：适用于想明确知道某个分片字段的某个范围具体在哪一个节点； </p>
<p>缺点：如果短时间内有大量的批量插入操作，那么某个分片节点可能一下子会承受比较大的数据库压力，而别的分片节点此时可能处于闲置状态，无法利用其它节点进行分担压力（热点数据问题);</p>
<p>1）修改<strong>schema.xml</strong>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user_range&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142,dn145&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;auto-sharding-long&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）修改<strong>rule.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;auto-sharding-long&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>age<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>rang-long<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）修改<strong>autopartition-long.txt</strong>，定义自定义范围</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#用于定义dataNode对应的数据范围，如果配置多了会报错。</span><br><span class="line"># range start-end ,data node index</span><br><span class="line"># K&#x3D;1000,M&#x3D;10000.</span><br><span class="line">#0-500M&#x3D;0</span><br><span class="line">#500M-1000M&#x3D;1</span><br><span class="line">#1000M-1500M&#x3D;2</span><br><span class="line"></span><br><span class="line">#所有的节点配置都是从0开始，0代表节点1</span><br><span class="line">0-20&#x3D;0</span><br><span class="line">21-50&#x3D;1</span><br></pre></td></tr></table></figure>

<p>4）测试，添加用户信息，年龄分别为9和33，可以看到，数据落入到对应的数据节点</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200613220321220.png" alt="image-20200613220321220"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200613220333523.png" alt="image-20200613220333523"></p>
<h3 id="取模范围分片"><a href="#取模范围分片" class="headerlink" title="取模范围分片"></a>取模范围分片</h3><p>​    这种方式结合了范围分片和取模分片，主要是为后续的数据迁移做准备。</p>
<p>​    优点：可以自主决定取模后数据的节点分布。</p>
<p>​    缺点：dataNode 划分节点是事先建好的，需要扩展时比较麻烦。</p>
<p>1）修改schema.xml，配置分片规则</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user_mod_range&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142,dn145&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;sharding-by-partition&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）修改rule.xml，添加分片规则</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-partition&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-partition<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-partition&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByPattern&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--求模基数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;patternValue&quot;</span>&gt;</span>256<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--默认节点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultNode&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定规则配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>partition-pattern.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）添加partition-pattern.txt，文件内部配置节点中数据范围</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#0-128表示id%256后的数据范围。</span><br><span class="line">0-128&#x3D;0</span><br><span class="line">129-256&#x3D;1</span><br></pre></td></tr></table></figure>

<p>4）测试</p>
<p>​    可以发现数据根据id取模并进入到了不同的分片节点中。</p>
<h3 id="字符串hash求模范围分片"><a href="#字符串hash求模范围分片" class="headerlink" title="字符串hash求模范围分片"></a>字符串hash求模范围分片</h3><p>​    在业务场景下，有时可能会根据某个分片字段的前几个值来进行取模。如地址信息只取省份、姓名只取前一个字的姓等。此时则可以使用该种方式。</p>
<p>​    其工作方式与取模范围分片类型，该分片方式支持数值、符号、字母取模。</p>
<p>1）修改schema.xml。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user_string_hash&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142,dn145&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;sharding-by-string-hash&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）修改rule.xml，定义拆分规则</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-string-hash&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_name<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-string-hash-function<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-string-hash-function&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByPrefixPattern&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--求模基数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;patternValue&quot;</span>&gt;</span>256<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 截取的位数  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefixLength&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>partition-pattern-string-hash.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）新建partition-pattern-string-hash.txt。指定数据分片节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0-128&#x3D;0</span><br><span class="line">129-256&#x3D;1</span><br></pre></td></tr></table></figure>

<p>4）运行后可以发现 ，不同的姓名取模后，会进入不同的分片节点。</p>
<h3 id="一致性hash分片"><a href="#一致性hash分片" class="headerlink" title="一致性hash分片"></a>一致性hash分片</h3><p>​    通过一致性hash分片可以最大限度的让数据均匀分布，但是均匀分布也会带来问题，就是分布式事务。</p>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>​    一致性hash算法引入了hash环的概念。环的大小是0~2^32-1。首先通过crc16算法计算出数据节点在hash环中的位置。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200614115947722.png" alt="image-20200614115947722"></p>
<p>​    当存储数据时，也会采用同样的算法，计算出数据key的hash值，映射到hash环上。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200614120302675.png" alt="image-20200614120302675"></p>
<p>​    然后从数据映射的位置开始，以顺时针的方式找出距离最近的数据节点，接着将数据存入到该节点中。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200614121047323.png" alt="image-20200614121047323"></p>
<p>​    此时可以发现，数据并没有达到预期的数据均匀，可以发现如果两个数据节点在环上的距离，决定有大量数据存入了dataNode2，而仅有少量数据存入dataNode1。</p>
<p>​    为了解决数据不均匀的问题，在mycat中可以设置<strong>虚拟数据映射节点</strong>。同时这些虚拟节点会映射到实际数据节点。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200614121729209.png" alt="image-20200614121729209"></p>
<p>​    数据仍然以顺时针方式寻找数据节点，当找到最近的数据节点无论是实际还是虚拟，都会进行存储，如果是虚拟数据节点的话，最终会将数据保存到实际数据节点中。 从而尽量的使数据均匀分布。</p>
<h4 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h4><p>1）修改schema.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user_murmur&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142,dn145&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;sharding-by-murmur&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）修改rule.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-murmur&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>murmur<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;murmur&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMurmurHash&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;seed&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- 默认是0 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;count&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- 要分片的数据库节点数量，必须指定，否则没法分片 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;virtualBucketTimes&quot;</span>&gt;</span>160<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- 一个实际的数据库节点被映射为这么多虚拟节点，默认是160倍，也就是虚拟节点数是物理节点数的160倍 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;property name=&quot;weightMapFile&quot;&gt;weightMapFile&lt;/property&gt; 节点的权重，没有指定权重的节点默认是1。以properties文件的格式填写，以从0开始到count-1的整数值也就是节点索引为key，以节点权重值为值。所有权重值必须是正整数，否则以1代替 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;property name=&quot;bucketMapPath&quot;&gt;/etc/mycat/bucketMapPath&lt;/property&gt;</span></span><br><span class="line"><span class="comment">   用于测试时观察各物理节点与虚拟节点的分布情况，如果指定了这个属性，会把虚拟节点的murmur hash值与物理节点的映射按行输出到这个文件，没有默认值，如果不指定，就不会输出任何东西 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）测试</p>
<p>​    循环插入一千条数据，可以数据会尽量均匀的分布在142和145两个节点中。</p>
<h3 id="时间分片"><a href="#时间分片" class="headerlink" title="时间分片"></a>时间分片</h3><h4 id="按天分片"><a href="#按天分片" class="headerlink" title="按天分片"></a>按天分片</h4><p>​    当数据量非常大时，有时会考虑，按天去分库分表。这种场景是非常常见的。同时也有利于后期的数据查询。</p>
<p>1）修改schema.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user_day&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142,dn145&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;sharding-by-date&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）修改rule.xml，每十天一个分片，从起始时间开始计算，分片不够，则报错。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-date&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>create_time<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>partbyday<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;partbyday&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByDate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日期格式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dateFormat&quot;</span>&gt;</span>yyyy-MM-dd<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sNaturalDay&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--从哪天开始,并且只能插入2020年的数据，2021的无法插入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sBeginDate&quot;</span>&gt;</span>2020-01-01<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--每隔几天一个分片--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sPartionDay&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUserDay</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUserName(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">    user.setCreateTime(<span class="string">&quot;2020-01-31&quot;</span>);</span><br><span class="line">    userMapper.addUserDay(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当时间为1月1-10号之间，会进入142节点。当时间为11-20号之间，会进入145节点，当超出则报错。</p>
<h4 id="按月分片"><a href="#按月分片" class="headerlink" title="按月分片"></a>按月分片</h4><p>​    按月进行数据分片，每月一个分片</p>
<p>1）修改schema.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user_month&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142,dn145&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;sharding-by-month&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）修改rule.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-month&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>create_time<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-month-function<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-month-function&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMonth&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dateFormat&quot;</span>&gt;</span>yyyy-MM-dd<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sBeginDate&quot;</span>&gt;</span>2020-05-01<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）测试</p>
<p>​    可以发现当为五月会进入到节点1中，当为六月会进入到节点2中。当为七月则报错，因为需要每月一个分片，当前测试只有两个分片。</p>
<h2 id="跨库join"><a href="#跨库join" class="headerlink" title="跨库join"></a>跨库join</h2><h3 id="全局表"><a href="#全局表" class="headerlink" title="全局表"></a>全局表</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>​    系统中基本都会存在数据字典信息，如数据分类信息、项目的配置信息等。这些字典数据最大的特点就是数据量不大并且很少会被改变。同时绝大多数的业务场景都会涉及到字典表的操作。 因此为了避免频繁的跨库join操作，结合冗余数据思想，可以考虑把这些字典信息在每一个分库中都存在一份。</p>
<p>​    mycat在进行join操作时，当业务表与全局表进行聚合会优先选择相同分片的全局表，从而避免跨库join操作。在进行数据插入时，会把数据同时插入到所有分片的全局表中。</p>
<h4 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h4><p>1）修改<strong>schema.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_global&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142,dn145&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;global_id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）测试，可以发现会同时向两张表中插入数据</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200614172334771.png" alt="image-20200614172334771"></p>
<h3 id="ER表"><a href="#ER表" class="headerlink" title="ER表"></a>ER表</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>ER表也是一种为了避免跨库join的手段，在业务开发时，经常会使用到主从表关系的查询，如商品表与商品详情表。<img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200614180130992.png" alt="image-20200614180130992"></p>
<p>​    根据上图就是一个简单的表关系，但是现在有可能出现一个问题：<strong>goods_detail中goods_id为1，2这两条数据有可能存在于142中</strong>。这样就造成了跨库join的问题的。并且在不使用ER表的情况下，还有可能出现数据丢失的问题。</p>
<p>​    ER表的出现就是为了让有关系的表数据存储于同一个分片中，从而避免跨库join的出现。</p>
<h4 id="不使用ER表问题演示"><a href="#不使用ER表问题演示" class="headerlink" title="不使用ER表问题演示"></a>不使用ER表问题演示</h4><p>1）修改schema.xml，配置商品与商品详情表信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_goods&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142,dn145&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;goods_id&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;sharding-by-murmur-goods&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_goods_detail&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142,dn145&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;goods_detail_id&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;sharding-by-murmur-goods-detail&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）修改rule.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-murmur-goods&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>goods_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>murmur<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-murmur-goods-detail&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>goods_detail_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>murmur<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）插入数据，<strong>不要使用自动生成id。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IdWorker idWorker;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addGoodsInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">        Goods goods = <span class="keyword">new</span> Goods();</span><br><span class="line">        <span class="keyword">long</span> goodsId = idWorker.nextId();</span><br><span class="line">        goods.setGoodsId(goodsId);</span><br><span class="line">        goods.setGoodsName(<span class="string">&quot;heima&quot;</span>+i);</span><br><span class="line">        goodsMapper.addGoods(goods);</span><br><span class="line"></span><br><span class="line">        GoodsDetail goodsDetail = <span class="keyword">new</span> GoodsDetail();</span><br><span class="line">        goodsDetail.setGoodsDetailId(idWorker.nextId());</span><br><span class="line">        goodsDetail.setGoodsId(goodsId);</span><br><span class="line">        goodsDetail.setGoodsDetailName(<span class="string">&quot;heima goodsDetail&quot;</span>+i);</span><br><span class="line">        goodsDetailMapper.addGoodsDetail(goodsDetail);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4）连接mycat查询数据，可以发现出现数据丢失。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_goods a <span class="keyword">join</span> tb_goods_detail b <span class="keyword">on</span> a.goods_id <span class="operator">=</span> b.goods_id</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200614194232402.png" alt="image-20200614194232402"></p>
<h4 id="ER实现"><a href="#ER实现" class="headerlink" title="ER实现"></a>ER实现</h4><p>1）修改schema.xml。配置er表</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_goods&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142,dn145&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;goods_id&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;sharding-by-murmur-goods&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">childTable</span> <span class="attr">name</span>=<span class="string">&quot;tb_goods_detail&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;goods_detail_id&quot;</span> <span class="attr">joinKey</span>=<span class="string">&quot;goods_id&quot;</span> <span class="attr">parentKey</span>=<span class="string">&quot;goods_id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">childTable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）测试</p>
<p>​    删除原有数据，并重新插入数据，此时再次join查询，可以发现全部的一千条数据都已经获取到了。同时有关联关系的数据，也都存在于同一个数据分片中。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200614230514278.png" alt="image-20200614230514278"></p>
]]></content>
      <categories>
        <category>分布式数据库架构</category>
      </categories>
      <tags>
        <tag>Mycat</tag>
        <tag>全局序列号</tag>
        <tag>Mycat分库</tag>
        <tag>Mycat读写分离</tag>
        <tag>MyCat分片规则</tag>
        <tag>跨库join</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式数据库架构实践02--Mysql高可用实践</title>
    <url>/jwangcloud/2860326216/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/DB1.jpeg" width="1000" height="200" align="middle">



<h2 id="高可用简介"><a href="#高可用简介" class="headerlink" title="高可用简介"></a>高可用简介</h2><p>​    以主主架构为例，现在不管写或者读，只要其中一个宕机，则会把它本身工作交给另外一台服务器完成。此时就需要对IP进行一个自动的指向。而且这种服务器IP切换，对于上层应用来说，应该是完全隐藏的，其无需知道当前是由谁来完成具体工作，其只需要来连接一个IP就可以。</p>
<span id="more"></span>

<p>​    对于这种需求，就需要通过<strong>keepAlived</strong>来完成IP的自动切换。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200530020827979.png" alt="image-20200530020827979"></p>
<p>​        对于keepalived会在多台mysql服务器进行安装， 同时keepalived间也分为master和slave，  同时master会虚拟化一个VIP供应用进行连接。  如果一旦master挂掉后，会由slave节点继续工作，同时slave节点也会虚拟出相同VIP，供应用进行连接</p>
<h2 id="keepAlived高可用配置"><a href="#keepAlived高可用配置" class="headerlink" title="keepAlived高可用配置"></a>keepAlived高可用配置</h2><p>1）安装keepalived</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 下载keepalied安装包 http:&#x2F;&#x2F;www.keepalived.org&#x2F;download.html</span><br><span class="line">2. yum -y install openssl-devel gcc gcc-c++</span><br><span class="line">3. mkdir &#x2F;etc&#x2F;keepalived</span><br><span class="line">4. 上传安装包并解压  tar -zxvf keepalived-2.0.18.tar.gz</span><br><span class="line">5. mv keepalived-2.0.18 &#x2F;usr&#x2F;local&#x2F;keepalived</span><br><span class="line">6. cd &#x2F;usr&#x2F;local&#x2F;keepalived</span><br><span class="line">7. .&#x2F;configure &amp;&amp; make &amp;&amp; make install</span><br><span class="line">8.创建启动文件</span><br><span class="line">cp  -a &#x2F;usr&#x2F;local&#x2F;etc&#x2F;keepalived   &#x2F;etc&#x2F;init.d&#x2F;</span><br><span class="line">cp  -a &#x2F;usr&#x2F;local&#x2F;etc&#x2F;sysconfig&#x2F;keepalived    &#x2F;etc&#x2F;sysconfig&#x2F;</span><br><span class="line">cp  -a &#x2F;usr&#x2F;local&#x2F;sbin&#x2F;keepalived    &#x2F;usr&#x2F;sbin&#x2F;</span><br></pre></td></tr></table></figure>

<p>2）编写执行shell脚本</p>
<p><strong>进入/etc/keepalived。创建chk.sh</strong>，同时赋予执行权限：<strong>chmod +x chk.sh</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">! /bin/bash</span></span><br><span class="line">mysql -h 192.168.200.180 -u root -p123456 -P 3312 -e &quot;show status;&quot; &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">if [ $? == 0 ]</span><br><span class="line">then</span><br><span class="line">    echo &quot; $host mysql login successfully &quot;</span><br><span class="line">    exit 0</span><br><span class="line">else</span><br><span class="line">    echo &quot;  mysql login faild&quot;</span><br><span class="line">    killall keepalived</span><br><span class="line">    exit 2</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>3）编写keepAlived配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;keepalived</span><br><span class="line"></span><br><span class="line">vi keepalived.conf</span><br><span class="line"></span><br><span class="line">! Configuration File for keepalived</span><br><span class="line">#简单的头部，这里主要可以做邮件通知报警等的设置，此处就暂不配置了；</span><br><span class="line">global_defs &#123;</span><br><span class="line">    #notificationd LVS_DEVEL</span><br><span class="line">    router_id MYSQL_4   #唯一标识不允许出现重复</span><br><span class="line">    script_user root</span><br><span class="line">    enable_script_security</span><br><span class="line">&#125;</span><br><span class="line">#预先定义一个脚本，方便后面调用，也可以定义多个，方便选择；</span><br><span class="line">vrrp_script chk_haproxy &#123;</span><br><span class="line">    script &quot;&#x2F;etc&#x2F;keepalived&#x2F;chk.sh&quot;</span><br><span class="line">    interval 2  #脚本循环运行间隔</span><br><span class="line">&#125;</span><br><span class="line">#VRRP虚拟路由冗余协议配置</span><br><span class="line">vrrp_instance VI_1 &#123;   #VI_1 是自定义的名称；</span><br><span class="line">    state BACKUP    #MASTER表示是一台主设备，BACKUP表示为备用设备【我们这里因为设置为开启不抢占，所以都设置为备用】</span><br><span class="line">    nopreempt      #开启不抢占</span><br><span class="line">    interface ens33   #指定VIP需要绑定的物理网卡</span><br><span class="line">    virtual_router_id 11   #VRID虚拟路由标识，也叫做分组名称，该组内的设备需要相同</span><br><span class="line">    priority 130   #定义这台设备的优先级 1-254；开启了不抢占，所以此处优先级必须高于另一台</span><br><span class="line"></span><br><span class="line">    advert_int 1   #生存检测时的组播信息发送间隔，组内一致</span><br><span class="line">    authentication &#123;    #设置验证信息，组内一致</span><br><span class="line">        auth_type PASS   #有PASS 和 AH 两种，常用 PASS</span><br><span class="line">        auth_pass 111111    #密码</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.200.200    #指定VIP地址，组内一致，可以设置多个IP</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;    #使用在这个域中使用预先定义的脚本，上面定义的</span><br><span class="line">        chk_haproxy</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7）启动keepAlived</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start keepalived</span><br></pre></td></tr></table></figure>

<p>8）查看keepAlived执行状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef|grep keepalived</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200601220145818.png" alt="image-20200601220145818"></p>
<p>9）可以通过tail -f /var/log/messages</p>
<p>10）查看ip信息，此时可以发现出现了配置的虚拟ip</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200601220246701.png" alt="image-20200601220246701"></p>
<p>11）测试</p>
<p>通过navicat连接mysql，但是当前连接IP为VIP。可以连接成功。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200601221633754.png" alt="image-20200601221633754"></p>
<p>根据上述配置可知，当前连接的为142的mysql。测试添加数据。可以添加成功。</p>
<p>此时将142的mysql服务停止掉，再去查看145机器上的ip a，可以发现145机器上已经出现200的虚拟ip。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200601222627661.png" alt="image-20200601222627661"></p>
<p>再去navicat中添加数据，仍可以添加成功。但此时连接的则为145的mysql了。</p>
<h1 id="5）数据切分核心思想"><a href="#5）数据切分核心思想" class="headerlink" title="5）数据切分核心思想"></a>5）数据切分核心思想</h1><h2 id="5-1）为什么要进行数据切分"><a href="#5-1）为什么要进行数据切分" class="headerlink" title="5.1）为什么要进行数据切分"></a>5.1）为什么要进行数据切分</h2><p>​    当前微服务架构非常流行，很多都会采用微服务架构对其系统进行拆分。 而虽然产生了多个微服务，但因为其用户量和数据量的问题，很有可能仍然使用的是同一个数据库。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200601232224434.png" alt="image-20200601232224434"></p>
<p>​    但是随着用户量和数据量增加，就会出现很多影响数据库性能的因素，如：数据存储量、IO瓶颈、访问量瓶颈等。此时就需要将数据进行拆分，从一个库拆分成多个库。</p>
<h2 id="5-2）数据拆分方式"><a href="#5-2）数据拆分方式" class="headerlink" title="5.2）数据拆分方式"></a>5.2）数据拆分方式</h2><h3 id="5-2-1）垂直拆分"><a href="#5-2-1）垂直拆分" class="headerlink" title="5.2.1）垂直拆分"></a>5.2.1）垂直拆分</h3><p>​    垂直拆分是按照业务将表进行分类并分布到不同的数据节点上。在初始进行数据拆分时，使用垂直拆分是非常直观的一种方式。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200601235540364.png" alt="image-20200601235540364"></p>
<p>垂直拆分的优点：</p>
<ul>
<li>拆分规则明确，按照不同的功能模块或服务分配不同的数据库。</li>
<li>数据维护与定位简单。</li>
</ul>
<p>垂直拆分的缺点：</p>
<ul>
<li>对于读写极其频繁且数据量超大的表，仍然存在存储与性能瓶颈。简单的索引此时已经无法解决问题。</li>
<li>会出现跨库join。</li>
<li>需要对代码进行重构，修改原有的事务操作。</li>
<li>某个表数据量达到一定程度后扩展起来较为困难</li>
</ul>
<h3 id="5-2-2）水平拆分"><a href="#5-2-2）水平拆分" class="headerlink" title="5.2.2）水平拆分"></a>5.2.2）水平拆分</h3><p>​    为了解决垂直拆分出现的问题，可以使用水平拆分继续横向扩展，首先，可以如果<strong>当前数据库的容量没有问题</strong>的话，可以对读写极其频繁且数据量超大的表进行<strong>分表</strong>操作。由一张表拆分出多张表。</p>
<p>​    在一个库中，拆分出多张表，每张表存储不同的数据，这样对于其操作效率会有明显的提升。而且因为处于同一个库中，也不会出现分布式事务的问题。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200602001628392.png" alt="image-20200602001628392"></p>
<p>​    而拆分出多张表后，如果当前数据库的容量已经不够了，但是还要继续拆分的话，就可以进行<strong>分库</strong>操作，产生多个数据库，然后在扩展出的数据库中继续扩展表。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200602002017703.png" alt="image-20200602002017703"></p>
<p>水平拆分的优点：</p>
<ul>
<li>尽量的避免了跨库join操作。</li>
<li>不会存在超大型表的性能瓶颈问题。</li>
<li>事务处理相对简单。</li>
<li>只要拆分规则定义好，很难出现扩展性的限制。</li>
</ul>
<p>水平拆分的缺点：</p>
<ul>
<li>拆分规则不好明确，规则一定会和业务挂钩，如根据id、根据时间等。</li>
<li>不好明确数据位置，难以进行维护。</li>
<li>多数据源管理难度加大，代码复杂度增加。</li>
<li>也会存在分布式事务问题</li>
<li>数据库维护成本增加</li>
</ul>
<h2 id="5-3）数据切分带来的问题"><a href="#5-3）数据切分带来的问题" class="headerlink" title="5.3）数据切分带来的问题"></a>5.3）数据切分带来的问题</h2><ul>
<li>按照用户ID求模，将数据分散到不同的数据库，具有相同数据用户的数据都被分散到一个库中。</li>
<li>按照日期，将不同月甚至日的数据分散到不同的库中。</li>
<li>按照某个特定的字段求模，或者根据特定范围段分散到不同的库中。</li>
</ul>
<p>数据切分带来的核心问题</p>
<ul>
<li>产生引入分布式事务的问题。</li>
<li>跨节点 Join 的问题。</li>
<li>跨节点合并排序分页问题。</li>
</ul>
<h1 id="6）Mycat核心概念-amp-源码部署"><a href="#6）Mycat核心概念-amp-源码部署" class="headerlink" title="6）Mycat核心概念&amp;源码部署"></a>6）Mycat核心概念&amp;源码部署</h1><h2 id="6-1）Mycat简介"><a href="#6-1）Mycat简介" class="headerlink" title="6.1）Mycat简介"></a>6.1）Mycat简介</h2><p>​    当对数据拆分后会产生诸多的问题，对于这些问题的解决，可以借助于数据库中间件来进行解决，现在时下比较流行的是使用Mycat。</p>
<p>​    Mycat是一款数据库中间件，对于应用程序来说是完全透明化的，不管底层的数据如何拆分，应用只需要连接Mycat即可完成对数据的操作。同时它还支持MySQL、SQL Server、Oracle、DB2、PostgreSQL等主流数据库。但是Mycat不会进行数据存储，它只是用于数据的路由。</p>
<p>​    其底层是基于拦截思想实现，其会拦截用户发送过来的SQL语句，首先对SQL语句做了一些特定的分析：如分片分析、路由分析、读写分离分析、缓存分析等，然后将此SQL发往后端的真实数据库，并将返回的结果做适当的处理，最终再返回给用户。</p>
<p>​    <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200602235241816.png" alt="image-20200602235241816"></p>
<h2 id="6-2）Mycat特性"><a href="#6-2）Mycat特性" class="headerlink" title="6.2）Mycat特性"></a>6.2）Mycat特性</h2><ul>
<li>支持SQL92标准</li>
<li>遵守Mysql原生协议，跨语言，跨平台，跨数据库的通用中间件代理。</li>
<li>基于心跳的自动故障切换，支持读写分离，支持MySQL主从，以及galera cluster集群。</li>
<li>支持Galera for MySQL集群，Percona Cluster或者MariaDB cluster</li>
<li>基于Nio实现，有效管理线程，高并发问题。</li>
<li>支持数据的多片自动路由与聚合，支持sum,count,max等常用的聚合函数。</li>
<li>支持单库内部任意join，支持跨库2表join。</li>
<li>支持通过全局表，ER关系的分片策略，实现了高效的多表join查询。</li>
<li>支持多租户方案。</li>
<li>支持分布式事务（弱xa）。</li>
<li>支持全局序列号，解决分布式下的主键生成问题。</li>
<li>分片规则丰富，插件化开发，易于扩展。</li>
<li>强大的web，命令行监控。</li>
<li>支持前端作为mysq通用代理，后端JDBC方式支持Oracle、DB2、SQL Server 、 mongodb 。</li>
<li>支持密码加密</li>
<li>支持服务降级</li>
<li>支持IP白名单</li>
<li>支持SQL黑名单、sql注入攻击拦截</li>
<li>支持分表（1.6）</li>
<li>集群基于ZooKeeper管理，在线升级，扩容，智能优化，大数据处理（2.0开发版）。</li>
</ul>
<h2 id="6-3）Mycat源码调试-amp-部署"><a href="#6-3）Mycat源码调试-amp-部署" class="headerlink" title="6.3）Mycat源码调试&amp;部署"></a>6.3）Mycat源码调试&amp;部署</h2><p><strong>源码下载：</strong><a href="https://codeload.github.com/MyCATApache/Mycat-Server/zip/Mycat-server-1675-release">https://codeload.github.com/MyCATApache/Mycat-Server/zip/Mycat-server-1675-release</a></p>
<p><strong>默认端口：8066</strong></p>
<p><strong>配置启动参数：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-DMYCAT_HOME&#x3D;D:&#x2F;workspace&#x2F;Mycat-Server-Mycat-server-1675-release&#x2F;src&#x2F;main</span><br><span class="line">#设置堆外内存大小</span><br><span class="line">-XX:MaxDirectMemorySize&#x3D;512M </span><br></pre></td></tr></table></figure>

<p><code>为什么要设置堆外内存：当使用mycat对非分片查询时，会把所有的数据查询出来，然后把这部分数据放在堆外内存中</code></p>
<p>​    在Mycat有核心三个配置文件，分别为：sever.xml、schema.xml、rule.xml</p>
<ul>
<li><strong>server.xml</strong>：是Mycat服务器参数调整和用户授权的配置文件。</li>
<li><strong>schema.xml</strong>：是逻辑库定义和表以及分片定义的配置文件</li>
<li><strong>rule.xml</strong>：是分片规则的配置文件，分片规则的具体一些参数信息单独存放为文件，也在这个目录下，配置文件修改需要重启MyCAT。</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200603000918666.png" alt="image-20200603000918666"></p>
<h2 id="6-4）MyCat核心概念"><a href="#6-4）MyCat核心概念" class="headerlink" title="6.4）MyCat核心概念"></a>6.4）MyCat核心概念</h2><p>​    在学习Mycat首先需要先对其内部一些核心概念有足够的了解。</p>
<ul>
<li><strong>逻辑库</strong>：Mycat中的虚拟数据库。对应实际数据库的概念。在没有使用mycat时，应用需要确定当前连接的数据库等信息，那么当使用mycat后，也需要先虚拟一个数据库，用于应用的连接。</li>
<li><strong>逻辑表</strong>：mycat中的虚拟数据表。对应时间数据库中数据表的概念。</li>
<li><strong>非分片表</strong>：没有进行数据切分的表。</li>
<li><strong>分片表</strong>：已经被数据拆分的表，每个分片表中都有原有数据表的一部分数据。多张分片表可以构成一个完整数据表。</li>
<li><strong>ER表</strong>：子表的记录与所关联的父表记录存放在同一个数据分片上，即子表依赖于父表，通过表分组（Table Group）保证数据Join不会跨库操作。表分组（Table Group）是解决跨分片数据join的一种很好的思路，也是数据切分规划的重要一条规则</li>
<li><strong>全局表</strong>：可以理解为是一张数据冗余表，如状态表，每一个数据分片节点又保存了一份状态表数据。数据冗余是解决跨分片数据join的一种很好的思路，也是数据切分规划的另外一条重要规则。</li>
<li><strong>分片节点（dataNode）</strong>：数据切分后，每一个数据分片表所在的数据库就是分片节点。</li>
<li><strong>节点主机（dataHost）</strong>：数据切分后，每个分片节点（dataNode）不一定都会独占一台机器，同一机器上面可以有多个分片数据库，这样一个或多个分片节点（dataNode）所在的机器就是节点主机（dataHost）,为了规避单节点主机并发数限制，尽量将读写压力高的分片节点（dataNode）均衡的放在不同的节点主机（dataHost）。</li>
<li><strong>分片规则（rule）</strong>：按照某种业务规则把数据分到某个分片的规则就是分片规则。</li>
<li><strong>全局序列号（sequence）</strong>：也可以理解为分布式id。数据切分后，原有的关系数据库中的主键约束在分布式条件下将无法使用，因此需要引入外部机制保证数据唯一性标识，这种保证全局性的数据唯一标识的机制就是全局序列号（sequence），如UUID、雪花算法等。</li>
</ul>
<h1 id="7）Mycat企业级应用实践"><a href="#7）Mycat企业级应用实践" class="headerlink" title="7）Mycat企业级应用实践"></a>7）Mycat企业级应用实践</h1><h2 id="7-1）环境参数配置"><a href="#7-1）环境参数配置" class="headerlink" title="7.1）环境参数配置"></a>7.1）环境参数配置</h2><p>​    在server.xml 文件中的system标签下配置所有的参数，全部为环境参数，可以根据当前需要进行开启和配置，如：设置mycat连接端口号</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;serverPort&quot;</span>&gt;</span>8066<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200603010530819.png" alt="image-20200603010530819"></p>
<h2 id="7-2）数据非分片"><a href="#7-2）数据非分片" class="headerlink" title="7.2）数据非分片"></a>7.2）数据非分片</h2><h3 id="7-2-1）配置初始化信息"><a href="#7-2-1）配置初始化信息" class="headerlink" title="7.2.1）配置初始化信息"></a>7.2.1）配置初始化信息</h3><p>​    应用连接mycat的话，也需要设置用户名、密码、被连接数据库信息，要配置这些信息的话，可以修改server.xml，在其内部添加内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置自定义用户信息--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--连接用户名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;mycat&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--连接密码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>mycat<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--创建虚拟数据库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>userdb<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定该库是否只读--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name=&quot;readOnly&quot;&gt;true&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-2-2）配置虚拟数据库-amp-表"><a href="#7-2-2）配置虚拟数据库-amp-表" class="headerlink" title="7.2.2）配置虚拟数据库&amp;表"></a>7.2.2）配置虚拟数据库&amp;表</h3><p>当配置了一个虚拟数据库后，还需要修改schema.xml，对虚拟库进行详细配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:schema <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--配置虚拟数据库--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--name：虚拟逻辑数据库名称，对应server.xml中的schemas属性值--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--dataNode：逻辑库中逻辑表的默认数据节点--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--sqlMaxLimit：类似于SQL上添加limit，如schema为非分片库，则该属性无效--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;userdb&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;true&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;localdn&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--配置虚拟逻辑表--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--name：逻辑表名称，必须唯一--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--dataNode：逻辑表所处的数据节点，值必须与dataNode标签中的name属性对应。如果值过多可以用$连接，如：dn$1-99,dn$200-400--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--primaryKey：逻辑表对应的真实表的主键id的字段名--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;localdn&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;user_id&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--配置dataNode信息--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--name：当前datanode名称--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--dataHost：分片节点所处的节点主机，该值必须与dataHost标签中的name属性对应--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--database：当前数据节点所对应的实际物理数据库--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;localdn&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localdh&quot;</span> <span class="attr">database</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--配置节点主机--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--balance：用于进行读操作指向，有三个值可选</span></span><br><span class="line"><span class="comment">		0：所有读操作都发送到当前可用的writeHost上</span></span><br><span class="line"><span class="comment">		1：所有读操作都随机的发送到readHost上</span></span><br><span class="line"><span class="comment">		2：所有读操作都随机发送在writeHost与readHost上</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--maxCon：指定每个读写实例连接池的最大连接。也就是说，标签内嵌套的writeHost、readHost标签都会使用这个属性的值来实例化出连接池的最大连接数--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--minCon：指定每个读写实例连接池的最小连接，初始化连接池的大小--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--name：当前节点主机名称，不允许出现重复--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--dbType：当时使用的数据库类型--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--dbDriver：当前使用的数据库驱动--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--writeType：用于写操作指向，有三个值可选</span></span><br><span class="line"><span class="comment">		0：所有写操作都发送到可用的writeHost上</span></span><br><span class="line"><span class="comment">		1：所有写操作都随机发送到readHost上</span></span><br><span class="line"><span class="comment">		2：所有写操作都随机发送在writeHost与readHost上</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--readHost是从属于writeHost的，即意味着它从那个writeHost获取同步数据。</span></span><br><span class="line"><span class="comment">		因此，当它所属的writeHost宕机了，则它也不会再参与到读写分离中来，即“不工作了”。这是因为此时，它的数据已经“不可靠”了。</span></span><br><span class="line"><span class="comment">		基于这个考虑，目前mycat 1.3和1.4版本中，若想支持MySQL一主一从的标准配置，并且在主节点宕机的情况下，从节点还能读取数据。</span></span><br><span class="line"><span class="comment">		则需要在Mycat里配置为两个writeHost并设置banlance=1。”--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--switchType：设置节点切换操作，有三个值可选</span></span><br><span class="line"><span class="comment">		-1：不自动切换</span></span><br><span class="line"><span class="comment">		1：自动切换，默认值</span></span><br><span class="line"><span class="comment">		2：基于mysql主从同步的状态决定是否切换</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--slaveThreshold：主从同步状态决定是否切换，延迟超过该值就不切换--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;100&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">name</span>=<span class="string">&quot;localdh&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;jdbc&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span> <span class="attr">slaveThreshold</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--查询心跳--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--配置写节点实际物理数据库信息--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://localhost:3306&quot;</span> <span class="attr">host</span>=<span class="string">&quot;host1&quot;</span> <span class="attr">password</span>=<span class="string">&quot;root&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-2-3）测试"><a href="#7-2-3）测试" class="headerlink" title="7.2.3）测试"></a>7.2.3）测试</h3><p>​    通过navicat创建本地数据库连接并创建对应数据库，同时创建mycat连接。 在mycat连接中操作表，添加数据，可以发现，本地数据库中同步的也新增了对应的数据。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200603020230476.png" alt="image-20200603020230476"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200603020257486.png" alt="image-20200603020257486"></p>
<h2 id="7-3）根据ID取模数据分片"><a href="#7-3）根据ID取模数据分片" class="headerlink" title="7.3）根据ID取模数据分片"></a>7.3）根据ID取模数据分片</h2><p>​    当一个数据表中的数据量非常大时，就需要考虑对表内数据进行分片，拆分的规则有很多种，比较简单的一种就是，通过对id进行取模，完成数据分片。</p>
<p>1）修改schema.xml</p>
<p>​    table标签新增属性：subTables、rule</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:schema <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--配置虚拟数据库--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--name：虚拟逻辑数据库名称，对应server.xml中的schemas属性值--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--dataNode：逻辑库中逻辑表的默认数据节点--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--sqlMaxLimit：类似于SQL上添加limit，如schema为非分片库，则该属性无效--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;userdb&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;true&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;localdn&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--配置虚拟逻辑表--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--name：逻辑表名称，必须唯一--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--dataNode：逻辑表所处的数据节点，值必须与dataNode标签中的name属性对应。如果值过多可以用$连接，如：dn$1-99,dn$200-400--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--primaryKey：逻辑表对应的真实表的主键id的字段名--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--subTables：分表的名称。可以存在多个，tb_user1,tb_user2,tb_user3.如果分表较多，可以通过$连接：tb_user$1-3--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--rule：分片规则，对应rule.xml中配置--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;localdn&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">subTables</span>=<span class="string">&quot;tb_user$1-3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;mod-long&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--配置dataNode信息--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--name：当前datanode名称--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--dataHost：分片节点所处的节点主机，该值必须与dataHost标签中的name属性对应--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--database：当前数据节点所对应的实际物理数据库--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;localdn&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localdh&quot;</span> <span class="attr">database</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--配置节点主机--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--balance：用于进行读操作指向，有三个值可选</span></span><br><span class="line"><span class="comment">		0：所有读操作都发送到当前可用的writeHost上</span></span><br><span class="line"><span class="comment">		1：所有读操作都随机的发送到readHost上</span></span><br><span class="line"><span class="comment">		2：所有读操作都随机发送在writeHost与readHost上</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--maxCon：指定每个读写实例连接池的最大连接。也就是说，标签内嵌套的writeHost、readHost标签都会使用这个属性的值来实例化出连接池的最大连接数--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--minCon：指定每个读写实例连接池的最小连接，初始化连接池的大小--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--name：当前节点主机名称，不允许出现重复--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--dbType：当时使用的数据库类型--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--dbDriver：当前使用的数据库驱动--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--writeType：用于写操作指向，有三个值可选</span></span><br><span class="line"><span class="comment">		0：所有写操作都发送到可用的writeHost上</span></span><br><span class="line"><span class="comment">		1：所有写操作都随机发送到readHost上</span></span><br><span class="line"><span class="comment">		2：所有写操作都随机发送在writeHost与readHost上</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--readHost是从属于writeHost的，即意味着它从那个writeHost获取同步数据。</span></span><br><span class="line"><span class="comment">		因此，当它所属的writeHost宕机了，则它也不会再参与到读写分离中来，即“不工作了”。这是因为此时，它的数据已经“不可靠”了。</span></span><br><span class="line"><span class="comment">		基于这个考虑，目前mycat 1.3和1.4版本中，若想支持MySQL一主一从的标准配置，并且在主节点宕机的情况下，从节点还能读取数据。</span></span><br><span class="line"><span class="comment">		则需要在Mycat里配置为两个writeHost并设置banlance=1。”--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--switchType：设置节点切换操作，有三个值可选</span></span><br><span class="line"><span class="comment">		-1：不自动切换</span></span><br><span class="line"><span class="comment">		1：自动切换，默认值</span></span><br><span class="line"><span class="comment">		2：基于mysql主从同步的状态决定是否切换</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--slaveThreshold：主从同步状态决定是否切换，延迟超过该值就不切换--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;100&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">name</span>=<span class="string">&quot;localdh&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;jdbc&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span> <span class="attr">slaveThreshold</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--查询心跳--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--配置写节点实际物理数据库信息--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://localhost:3306&quot;</span> <span class="attr">host</span>=<span class="string">&quot;host1&quot;</span> <span class="attr">password</span>=<span class="string">&quot;root&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）修改rule.xml</p>
<p>​    在schema.xml中已经指定规则为mod-long。因此需要到该文件中修改对应信息。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;mod-long&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当用用于id取模的字段--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>mod-long<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--修改当前的分片数量--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;mod-long&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMod&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- how many data nodes --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 根据datanode数量进行取模分片，也就是要模几。 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;count&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）测试</p>
<p>1）向数据库中插入一千条数据，可以发现，其会根据id取模，放入不同的三张表中。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200604003934504.png" alt="image-20200604003934504"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200604003948529.png" alt="image-20200604003948529"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200604004000971.png" alt="image-20200604004000971"></p>
<p>2）当根据id查询时，会通过对id的取模，确定当前要查询的分片。并且首先会先查询mycat中的ehcache缓存，再来查询数据分片</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200604004554041.png" alt="image-20200604004554041"></p>
<p>3）当查询所有数据时，会查询所有数据分片。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200604004806962.png" alt="image-20200604004806962"></p>
<p>4）缺陷</p>
<p>​    通过id取模分片这种方式实际中应用较少。主要因为两点问题：</p>
<p>根据id取模，1）散列不均匀，出现数据倾斜。2）动态扩容时，存在rehash，出现数据丢失。</p>
<p>1）数据散列不均匀，容易出现数据倾斜。每张表中的数据量差距较大。</p>
<p>2）动态扩容后，当需要新增表时，需要对模数修改，有可能就会造成当查询某个分片时，在该分片中找不到对应数据。</p>
<p>3）动态扩容后，要进行rehash操作。</p>
<h2 id="7-4）全局序列号"><a href="#7-4）全局序列号" class="headerlink" title="7.4）全局序列号"></a>7.4）全局序列号</h2><p>​    当进行数据切分后，数据会存放在多张表中，如果仍然通过数据库自增id的方式，就会出现ID重复的问题，造成数据错乱。所以当拆分完数据后，需要让每一条数据都有自己的ID，并且在多表中不能出现重复。比较常见的会使用雪花算法来生成分布式id。</p>
<p>​    在Mycat中也提供了四种方式来进行分布式id生成：基于文件、基于数据库、基于时间戳和基于ZK。</p>
<h3 id="7-4-1）基于本地文件方式生成"><a href="#7-4-1）基于本地文件方式生成" class="headerlink" title="7.4.1）基于本地文件方式生成"></a>7.4.1）基于本地文件方式生成</h3><p>优点：本地加载，读取速度较快。</p>
<p>缺点：当MyCAT重新发布后，配置文件中的sequence会恢复到初始值。</p>
<p>​            生成的id没有含义，如时间。</p>
<p>​            MyCat如果存在多个，会出现id重复问题。</p>
<p>​    1）修改<strong>sequence_conf.properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">USER.HISIDS</span>=  <span class="string">#使用过的历史分段，可不配置</span></span><br><span class="line"><span class="meta">USER.MINID</span>=<span class="string">1  #最小ID值</span></span><br><span class="line"><span class="meta">USER.MAXID</span>=<span class="string">200000  #最大ID值</span></span><br><span class="line"><span class="meta">USER.CURID</span>=<span class="string">1000  #当前ID值</span></span><br></pre></td></tr></table></figure>

<p>​    2）修改<strong>server.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置全局序号生成方式</span></span><br><span class="line"><span class="comment">   0：文件</span></span><br><span class="line"><span class="comment">   1：数据库</span></span><br><span class="line"><span class="comment">   2：时间戳</span></span><br><span class="line"><span class="comment">   3：zookeeper</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sequnceHandlerType&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--进入序列匹配流程, 必须带有MYCATSEQ_或者 mycatseq_--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sequnceHandlerPattern&quot;</span>&gt;</span>(?:(/s*next/s+value/s+for/s*MYCATSEQ_(/w+))(,|/)|/s)*)+<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sequenceHanlderClass&quot;</span>&gt;</span>io.mycat.route.sequence.handler.HttpIncrSequenceHandler<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    3）测试</p>
<p>重启mycat，并查询是否修改成功</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> @<span class="variable">@sysparam</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200605183431528.png" alt="image-20200605183431528"></p>
<p>通过navicat插入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(user_id,user_name) <span class="keyword">values</span>(<span class="string">&#x27;next value for MYCATSEQ_USER&#x27;</span>,<span class="string">&#x27;wangwu&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>通过程序插入数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into tb_user(user_id,user_name) values(&#x27;next value for MYCATSEQ_USER&#x27;,#&#123;userName&#125;)&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="7-4-2）基于数据库生成"><a href="#7-4-2）基于数据库生成" class="headerlink" title="7.4.2）基于数据库生成"></a>7.4.2）基于数据库生成</h3><p>​    优点：能够进行id批量生成，在分布式下，可以避免id重复问题。</p>
<p>​    缺点：ID没有意义，对数据库有压力。</p>
<p>1）<strong>在实际数据库执行dbseq.sql中的sql语句</strong>，执行完毕后，会创建一张表。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200605191200321.png" alt="image-20200605191200321"></p>
<p>2）<strong>修改sequence_db_conf.properties</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TB_USER&#x3D;localdn</span><br></pre></td></tr></table></figure>

<p>3）<strong>修改server.xml文件</strong>，修改全局序列号生成方式为数据库方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sequnceHandlerType&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4）修改schema.xml。在table中添加自增属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;localdn&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">subTables</span>=<span class="string">&quot;tb_user$1-3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;mod-long&quot;</span> <span class="attr">autoIncrement</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>5）测试</p>
<p>通过navicat新增记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(user_id,user_name) <span class="keyword">values</span>(<span class="string">&#x27;next value for MYCATSEQ_TB_USER&#x27;</span>,<span class="string">&#x27;wangwu&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200605194130010.png" alt="image-20200605194130010"></p>
<h3 id="7-4-3）基于zookeeper生成"><a href="#7-4-3）基于zookeeper生成" class="headerlink" title="7.4.3）基于zookeeper生成"></a>7.4.3）基于zookeeper生成</h3><p>1）修改<strong>server.xml</strong>，更改生成模式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sequenceHandlerType&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）修改<strong>myid.properties</strong>，配置zk连接信息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">loadZk</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">zkURL</span>=<span class="string">192.168.200.131:2181</span></span><br><span class="line"><span class="attr">clusterId</span>=<span class="string">01</span></span><br><span class="line"><span class="attr">myid</span>=<span class="string">mycat_fz_01</span></span><br><span class="line"><span class="attr">clusterNodes</span>=<span class="string">mycat_fz_01</span></span><br><span class="line"><span class="comment">#server  booster  ;   booster install on db same server,will reset all minCon to 1</span></span><br><span class="line"><span class="comment">#type=server</span></span><br><span class="line"><span class="comment">#boosterDataHosts=localhost1</span></span><br></pre></td></tr></table></figure>

<p>3）修改<strong>sequence_distributed_conf.properties</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSTANCEID&#x3D;ZK #声明使用zk生成</span><br><span class="line">CLUSTERID&#x3D;01</span><br></pre></td></tr></table></figure>

<p>4）测试</p>
<p>启动mycatServer后，通过zk客户端查看节点信息。会发现新增了一个mycat节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;zkCli.sh</span><br><span class="line"></span><br><span class="line">ls &#x2F;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200609225750661.png" alt="image-20200609225750661"></p>
<p>插入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(user_id,user_name) <span class="keyword">values</span>(<span class="string">&#x27;next value for MYCATSEQ_TB_USER12&#x27;</span>,<span class="string">&#x27;heima&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>next value for MYCATSEQ_  后的内容可以随意指定。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200609233738919.png" alt="image-20200609233738919"></p>
<p>5）特性：</p>
<p>ID 结构：<strong>long 64 位</strong>，ID 最大可占 63 位</p>
<p>/* |current time millis(微秒时间戳 38 位,可以使用 17 年)|clusterId（机房或者 ZKid，通过配置文件配置 5位）|instanceId（实例 ID，可以通过 ZK 或者配置文件获取，5 位）|threadId（线程 ID，9 位）|increment(自增,6 位)</p>
<p>/* 一共 63 位，可以承受单机房单机器单线程 1000*(2^6)=640000 的并发。</p>
<p>/* 无悲观锁，无强竞争，吞吐量更高</p>
<h3 id="7-4-4）基于时间戳生成"><a href="#7-4-4）基于时间戳生成" class="headerlink" title="7.4.4）基于时间戳生成"></a>7.4.4）基于时间戳生成</h3><p>优点：不存在上面两种方案因为mycat的重启导致id重复的现象</p>
<p>​    ID= 64 位二进制 (42(毫秒)+5(机器 ID)+5(业务编码)+12(重复累加)，每毫秒可以并发 12 位二进制的累加。</p>
<p>缺点：数据类型太长，建议采用bigint(最大取值18446744073709551615)</p>
<p>1）修改<strong>server.xml</strong>。更改生成方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sequenceHandlerType&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）修改<strong>sequence_time_conf.properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sequence depend on TIME</span></span><br><span class="line"><span class="comment">#WORKID与DATAACENTERID: 0-31 任意整数。多mycat节点下，每个节点的WORKID、DATAACENTERID不能重复，组成唯一标识，总共支持32*32=1024 种组合</span></span><br><span class="line"><span class="attr">WORKID</span>=<span class="string">01</span></span><br><span class="line"><span class="attr">DATAACENTERID</span>=<span class="string">01</span></span><br></pre></td></tr></table></figure>

<p>3）测试</p>
<p>新增数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into tb_user(user_id,user_name) values(&#39;next value for MYCATSEQ_TB_USER12&#39;,&#39;heima&#39;)</span><br></pre></td></tr></table></figure>

<p>next value for MYCATSEQ_  后的内容可以随意指定。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200609234814418.png" alt="image-20200609234814418"></p>
<h2 id="7-5）Mycat分库-amp-读写分离"><a href="#7-5）Mycat分库-amp-读写分离" class="headerlink" title="7.5）Mycat分库&amp;读写分离"></a>7.5）Mycat分库&amp;读写分离</h2><p>​    之前已经基于id取模完成了分表操作，但是一个数据库的容量毕竟是有限制的，如果数据量非常大，分表已经满足不了的话，就会进行分库操作。</p>
<p>​    当前分库架构如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200612002109456.png" alt="image-20200612002109456"></p>
<p>​    现在存在两个主库，并且各自都有从节点。 当插入数据时，根据id取模放入不同的库中。同时主从间在进行写时复制的同时，还要完成主从读写分离的配置。</p>
<p>1）修改schema.xml。配置多datenode与datahost。同时配置主从读写分离。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:schema <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;userdb&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;true&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn09&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn09,dn10&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;mod-long&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn09&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;dh09&quot;</span> <span class="attr">database</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn10&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;dh10&quot;</span> <span class="attr">database</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;dh09&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;100&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span>  <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;jdbc&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span> <span class="attr">slaveThreshold</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--查询心跳--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置写节点实际物理数据库信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://192.168.200.142:3309&quot;</span> <span class="attr">host</span>=<span class="string">&quot;host1&quot;</span>  <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置读节点实际物理数据库信息--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;host2&quot;</span> <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://192.168.200.145:3309&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">readHost</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;dh10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;100&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span>  <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;jdbc&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span> <span class="attr">slaveThreshold</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--查询心跳--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置写节点实际物理数据库信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://192.168.200.142:3310&quot;</span> <span class="attr">host</span>=<span class="string">&quot;host1&quot;</span>  <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置读节点实际物理数据库信息--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;host2&quot;</span> <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://192.168.200.145:3310&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">readHost</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）修改rule.xml。配置取模时的模数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;mod-long&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMod&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- how many data nodes --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据datanode数量进行取模分片，也就是要模几。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;count&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）进行批量数据添加，可以发现数据落在了不同的库中。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200612005132092.png" alt="image-20200612005132092"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200612005159630.png" alt="image-20200612005159630"></p>
<p>4）读写分离验证</p>
<p>​    设置log4j2.xml的日志级别为DEBUG</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">		........</span><br><span class="line">        <span class="tag">&lt;<span class="name">asyncRoot</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">includeLocation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">			........</span><br><span class="line">        <span class="tag">&lt;/<span class="name">asyncRoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    基于mysql服务进行数据查看，观察控制台信息，可以看到对于read请求的数据源，分别使用的是配置文件的配置</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200621213109545.png" alt="image-20200621213109545"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200621213153827.png" alt="image-20200621213153827"></p>
<h2 id="7-6）MyCat分片规则"><a href="#7-6）MyCat分片规则" class="headerlink" title="7.6）MyCat分片规则"></a>7.6）MyCat分片规则</h2><h3 id="7-6-1）枚举分片"><a href="#7-6-1）枚举分片" class="headerlink" title="7.6.1）枚举分片"></a>7.6.1）枚举分片</h3><h4 id="7-6-1-1）实现"><a href="#7-6-1-1）实现" class="headerlink" title="7.6.1.1）实现"></a>7.6.1.1）实现</h4><p>​    适用于在特定业务场景下，将不同的数据存放于不同的数据库中，如按省份、按人员信息等。</p>
<p>1）修改<strong>schema.xml</strong>，修改<strong>table</strong>标签中<strong>name</strong>属性为当前操作的表名，<strong>rule</strong>属性为<strong>sharding-by-intfile</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user_sharding_by_intfile&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142,dn145&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;sharding-by-intfile&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）修改<strong>rule.xml</strong>，配置<strong>tableRule</strong>为<strong>sharding-by-intfile</strong>中<strong>columns</strong>属性为当前指定分片字段</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-intfile&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>sex<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>hash-int<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）修改<strong>rule.xml</strong>中<strong>hash-int</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;hash-int&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByFileMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>partition-hash-int.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--type默认值为0，0表示Integer，非零表示String--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;type&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--defaultNode 当有一些特殊数据信息可以存放于默认节点中，如即不是male也不是female。默认节点：小于0表示不设置默认节点，大于等于0表示设置默认节点,不能解析的枚举就存到默认节点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultNode&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4）修改<strong>partition-hash-int.txt</strong>。指定分片字段不同值存在于不同的数据库节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">male&#x3D;0 #代表第一个datanode</span><br><span class="line">female&#x3D;1 #代表第二个datanode</span><br></pre></td></tr></table></figure>

<p>5）执行测试</p>
<p>​    修改mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into tb_user_sharding_by_intfile(user_id,user_name,sex) values(&#x27;next value for MYCATSEQ_TB_USER12&#x27;,#&#123;userName&#125;,#&#123;sex&#125;)&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addUserShareBySex</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure>

<p>​    执行测试，此时可以发现，当sex为male时，数据会进入142节点，当sex为female时，数据会进入145节点。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200613004923752.png" alt="image-20200613004923752"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200613004947984.png" alt="image-20200613004947984">6.8.1.2）</p>
<h4 id="7-6-1-2）问题"><a href="#7-6-1-2）问题" class="headerlink" title="7.6.1.2）问题"></a>7.6.1.2）问题</h4><p>​    该方案适用于特定业务场景进行数据分片，但该方式容易出现数据倾斜，如不同省份的订单量一定会不同。订单量大的省份还会进行数据分库，数据库架构就会继续发生对应改变。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200613005457354.png" alt="image-20200613005457354"></p>
<h3 id="7-6-2）固定hash分片"><a href="#7-6-2）固定hash分片" class="headerlink" title="7.6.2）固定hash分片"></a>7.6.2）固定hash分片</h3><p>​    固定hash分片的工作原理类似与redis cluster槽的概念，在固定hash中会有一个范围是0-1024，内部会进行二进制运算操作，如取 id 的二进制低 10 位 与 1111111111 进行 &amp; 运算。从而当出现连接数据插入，其有可能会进入到同一个分片中，减少了分布式事务操作，提升插入效率同时尽量减少了数据倾斜问题，但不能避免不出现数据倾斜。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200613210301026.png" alt="image-20200613210301026"></p>
<p>​    按照上面这张图就存在两个分区，partition1和partition2。partition1的范围是0-255，partition2的范围是256-1024。</p>
<p>​    当向分区中存数据时，先将id值转换为二进制，接着&amp;1111111111，再对结果值转换为十进制，从而确定当前数据应该存入哪个分区中。</p>
<ul>
<li><p>1023的二进制&amp;1111111111运算后为1023，故落入第二个分区 </p>
</li>
<li><p>1024的二进制&amp;1111111111运算后为0，故落入第一个分区</p>
</li>
<li><p>266 的二进制&amp;1111111111运算后为266，故落入第二个分区内</p>
</li>
</ul>
<h4 id="7-6-2-1）实现"><a href="#7-6-2-1）实现" class="headerlink" title="7.6.2.1）实现"></a>7.6.2.1）实现</h4><p>1）修改<strong>schema.xml</strong>，配置自定义固定hash分配规则</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user_fixed_hash&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142,dn145&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;partition-by-fixed-hash&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）修改<strong>rule.xml</strong>，配置自定义固定hash分片规则</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;partition-by-fixed-hash&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>partition-by-fixed-hash<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  partitionCount: 存在多少个节点，如1,1    1,1,1    1,2</span></span><br><span class="line"><span class="comment">  partitionLength: 每个节点分配的范围大小</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;partition-by-fixed-hash&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByLong&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionCount&quot;</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionLength&quot;</span>&gt;</span>256,768<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）测试，添加数据，可以发现数据会根据计算，落入相应的数据库节点。</p>
<h3 id="7-6-3）固定范围分片"><a href="#7-6-3）固定范围分片" class="headerlink" title="7.6.3）固定范围分片"></a>7.6.3）固定范围分片</h3><p>​    该规则有点像枚举与固定hash的综合体，设置某一个字段，然后规定该字段值的不同范围值会进入到哪一个dataNode。适用于明确知道分片字段的某个范围属于某个分片</p>
<p>优点：适用于想明确知道某个分片字段的某个范围具体在哪一个节点； </p>
<p>缺点：如果短时间内有大量的批量插入操作，那么某个分片节点可能一下子会承受比较大的数据库压力，而别的分片节点此时可能处于闲置状态，无法利用其它节点进行分担压力（热点数据问题);</p>
<p>1）修改<strong>schema.xml</strong>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user_range&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142,dn145&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;auto-sharding-long&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）修改<strong>rule.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;auto-sharding-long&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>age<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>rang-long<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）修改<strong>autopartition-long.txt</strong>，定义自定义范围</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#用于定义dataNode对应的数据范围，如果配置多了会报错。</span><br><span class="line"># range start-end ,data node index</span><br><span class="line"># K&#x3D;1000,M&#x3D;10000.</span><br><span class="line">#0-500M&#x3D;0</span><br><span class="line">#500M-1000M&#x3D;1</span><br><span class="line">#1000M-1500M&#x3D;2</span><br><span class="line"></span><br><span class="line">#所有的节点配置都是从0开始，0代表节点1</span><br><span class="line">0-20&#x3D;0</span><br><span class="line">21-50&#x3D;1</span><br></pre></td></tr></table></figure>

<p>4）测试，添加用户信息，年龄分别为9和33，可以看到，数据落入到对应的数据节点</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200613220321220.png" alt="image-20200613220321220"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200613220333523.png" alt="image-20200613220333523"></p>
<h3 id="7-6-4）取模范围分片"><a href="#7-6-4）取模范围分片" class="headerlink" title="7.6.4）取模范围分片"></a>7.6.4）取模范围分片</h3><p>​    这种方式结合了范围分片和取模分片，主要是为后续的数据迁移做准备。</p>
<p>​    优点：可以自主决定取模后数据的节点分布。</p>
<p>​    缺点：dataNode 划分节点是事先建好的，需要扩展时比较麻烦。</p>
<p>1）修改schema.xml，配置分片规则</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user_mod_range&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142,dn145&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;sharding-by-partition&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）修改rule.xml，添加分片规则</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-partition&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-partition<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-partition&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByPattern&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--求模基数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;patternValue&quot;</span>&gt;</span>256<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--默认节点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultNode&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定规则配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>partition-pattern.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）添加partition-pattern.txt，文件内部配置节点中数据范围</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#0-128表示id%256后的数据范围。</span><br><span class="line">0-128&#x3D;0</span><br><span class="line">129-256&#x3D;1</span><br></pre></td></tr></table></figure>

<p>4）测试</p>
<p>​    可以发现数据根据id取模并进入到了不同的分片节点中。</p>
<h3 id="7-6-5）字符串hash求模范围分片"><a href="#7-6-5）字符串hash求模范围分片" class="headerlink" title="7.6.5）字符串hash求模范围分片"></a>7.6.5）字符串hash求模范围分片</h3><p>​    在业务场景下，有时可能会根据某个分片字段的前几个值来进行取模。如地址信息只取省份、姓名只取前一个字的姓等。此时则可以使用该种方式。</p>
<p>​    其工作方式与取模范围分片类型，该分片方式支持数值、符号、字母取模。</p>
<p>1）修改schema.xml。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user_string_hash&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142,dn145&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;sharding-by-string-hash&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）修改rule.xml，定义拆分规则</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-string-hash&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_name<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-string-hash-function<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-string-hash-function&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByPrefixPattern&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--求模基数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;patternValue&quot;</span>&gt;</span>256<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 截取的位数  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefixLength&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>partition-pattern-string-hash.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）新建partition-pattern-string-hash.txt。指定数据分片节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0-128&#x3D;0</span><br><span class="line">129-256&#x3D;1</span><br></pre></td></tr></table></figure>

<p>4）运行后可以发现 ，不同的姓名取模后，会进入不同的分片节点。</p>
<h3 id="7-6-6）一致性hash分片"><a href="#7-6-6）一致性hash分片" class="headerlink" title="7.6.6）一致性hash分片"></a>7.6.6）一致性hash分片</h3><p>​    通过一致性hash分片可以最大限度的让数据均匀分布，但是均匀分布也会带来问题，就是分布式事务。</p>
<h4 id="7-6-6-1）原理"><a href="#7-6-6-1）原理" class="headerlink" title="7.6.6.1）原理"></a>7.6.6.1）原理</h4><p>​    一致性hash算法引入了hash环的概念。环的大小是0~2^32-1。首先通过crc16算法计算出数据节点在hash环中的位置。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200614115947722.png" alt="image-20200614115947722"></p>
<p>​    当存储数据时，也会采用同样的算法，计算出数据key的hash值，映射到hash环上。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200614120302675.png" alt="image-20200614120302675"></p>
<p>​    然后从数据映射的位置开始，以顺时针的方式找出距离最近的数据节点，接着将数据存入到该节点中。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200614121047323.png" alt="image-20200614121047323"></p>
<p>​    此时可以发现，数据并没有达到预期的数据均匀，可以发现如果两个数据节点在环上的距离，决定有大量数据存入了dataNode2，而仅有少量数据存入dataNode1。</p>
<p>​    为了解决数据不均匀的问题，在mycat中可以设置<strong>虚拟数据映射节点</strong>。同时这些虚拟节点会映射到实际数据节点。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200614121729209.png" alt="image-20200614121729209"></p>
<p>​    数据仍然以顺时针方式寻找数据节点，当找到最近的数据节点无论是实际还是虚拟，都会进行存储，如果是虚拟数据节点的话，最终会将数据保存到实际数据节点中。 从而尽量的使数据均匀分布。</p>
<h4 id="7-6-6-2）实现"><a href="#7-6-6-2）实现" class="headerlink" title="7.6.6.2）实现"></a>7.6.6.2）实现</h4><p>1）修改schema.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user_murmur&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142,dn145&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;sharding-by-murmur&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）修改rule.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-murmur&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>murmur<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;murmur&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMurmurHash&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;seed&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- 默认是0 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;count&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- 要分片的数据库节点数量，必须指定，否则没法分片 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;virtualBucketTimes&quot;</span>&gt;</span>160<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- 一个实际的数据库节点被映射为这么多虚拟节点，默认是160倍，也就是虚拟节点数是物理节点数的160倍 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;property name=&quot;weightMapFile&quot;&gt;weightMapFile&lt;/property&gt; 节点的权重，没有指定权重的节点默认是1。以properties文件的格式填写，以从0开始到count-1的整数值也就是节点索引为key，以节点权重值为值。所有权重值必须是正整数，否则以1代替 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;property name=&quot;bucketMapPath&quot;&gt;/etc/mycat/bucketMapPath&lt;/property&gt;</span></span><br><span class="line"><span class="comment">   用于测试时观察各物理节点与虚拟节点的分布情况，如果指定了这个属性，会把虚拟节点的murmur hash值与物理节点的映射按行输出到这个文件，没有默认值，如果不指定，就不会输出任何东西 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）测试</p>
<p>​    循环插入一千条数据，可以数据会尽量均匀的分布在142和145两个节点中。</p>
<h3 id="7-6-7）时间分片"><a href="#7-6-7）时间分片" class="headerlink" title="7.6.7）时间分片"></a>7.6.7）时间分片</h3><h4 id="7-6-7-1）按天分片"><a href="#7-6-7-1）按天分片" class="headerlink" title="7.6.7.1）按天分片"></a>7.6.7.1）按天分片</h4><p>​    当数据量非常大时，有时会考虑，按天去分库分表。这种场景是非常常见的。同时也有利于后期的数据查询。</p>
<p>1）修改schema.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user_day&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142,dn145&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;sharding-by-date&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）修改rule.xml，每十天一个分片，从起始时间开始计算，分片不够，则报错。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-date&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>create_time<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>partbyday<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;partbyday&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByDate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日期格式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dateFormat&quot;</span>&gt;</span>yyyy-MM-dd<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sNaturalDay&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--从哪天开始,并且只能插入2020年的数据，2021的无法插入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sBeginDate&quot;</span>&gt;</span>2020-01-01<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--每隔几天一个分片--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sPartionDay&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUserDay</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUserName(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">    user.setCreateTime(<span class="string">&quot;2020-01-31&quot;</span>);</span><br><span class="line">    userMapper.addUserDay(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当时间为1月1-10号之间，会进入142节点。当时间为11-20号之间，会进入145节点，当超出则报错。</p>
<h4 id="7-6-7-2）按月分片"><a href="#7-6-7-2）按月分片" class="headerlink" title="7.6.7.2）按月分片"></a>7.6.7.2）按月分片</h4><p>​    按月进行数据分片，每月一个分片</p>
<p>1）修改schema.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user_month&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142,dn145&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;sharding-by-month&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）修改rule.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-month&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>create_time<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-month-function<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-month-function&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMonth&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dateFormat&quot;</span>&gt;</span>yyyy-MM-dd<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sBeginDate&quot;</span>&gt;</span>2020-05-01<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）测试</p>
<p>​    可以发现当为五月会进入到节点1中，当为六月会进入到节点2中。当为七月则报错，因为需要每月一个分片，当前测试只有两个分片。</p>
<h2 id="7-7）跨库join"><a href="#7-7）跨库join" class="headerlink" title="7.7）跨库join"></a>7.7）跨库join</h2><h3 id="7-7-1）全局表"><a href="#7-7-1）全局表" class="headerlink" title="7.7.1）全局表"></a>7.7.1）全局表</h3><h4 id="7-7-1-1）简介"><a href="#7-7-1-1）简介" class="headerlink" title="7.7.1.1）简介"></a>7.7.1.1）简介</h4><p>​    系统中基本都会存在数据字典信息，如数据分类信息、项目的配置信息等。这些字典数据最大的特点就是数据量不大并且很少会被改变。同时绝大多数的业务场景都会涉及到字典表的操作。 因此为了避免频繁的跨库join操作，结合冗余数据思想，可以考虑把这些字典信息在每一个分库中都存在一份。</p>
<p>​    mycat在进行join操作时，当业务表与全局表进行聚合会优先选择相同分片的全局表，从而避免跨库join操作。在进行数据插入时，会把数据同时插入到所有分片的全局表中。</p>
<h4 id="7-7-1-2）实现"><a href="#7-7-1-2）实现" class="headerlink" title="7.7.1.2）实现"></a>7.7.1.2）实现</h4><p>1）修改<strong>schema.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_global&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142,dn145&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;global_id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;global&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）测试，可以发现会同时向两张表中插入数据</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200614172334771.png" alt="image-20200614172334771"></p>
<h3 id="7-7-2）ER表"><a href="#7-7-2）ER表" class="headerlink" title="7.7.2）ER表"></a>7.7.2）ER表</h3><h4 id="7-7-2-1）介绍"><a href="#7-7-2-1）介绍" class="headerlink" title="7.7.2.1）介绍"></a>7.7.2.1）介绍</h4><p>ER表也是一种为了避免跨库join的手段，在业务开发时，经常会使用到主从表关系的查询，如商品表与商品详情表。<img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200614180130992.png" alt="image-20200614180130992"></p>
<p>​    根据上图就是一个简单的表关系，但是现在有可能出现一个问题：<strong>goods_detail中goods_id为1，2这两条数据有可能存在于142中</strong>。这样就造成了跨库join的问题的。并且在不使用ER表的情况下，还有可能出现数据丢失的问题。</p>
<p>​    ER表的出现就是为了让有关系的表数据存储于同一个分片中，从而避免跨库join的出现。</p>
<h4 id="7-7-2-2）不使用ER表问题演示"><a href="#7-7-2-2）不使用ER表问题演示" class="headerlink" title="7.7.2.2）不使用ER表问题演示"></a>7.7.2.2）不使用ER表问题演示</h4><p>1）修改schema.xml，配置商品与商品详情表信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_goods&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142,dn145&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;goods_id&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;sharding-by-murmur-goods&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_goods_detail&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142,dn145&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;goods_detail_id&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;sharding-by-murmur-goods-detail&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）修改rule.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-murmur-goods&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>goods_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>murmur<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-murmur-goods-detail&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>goods_detail_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>murmur<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3）插入数据，<strong>不要使用自动生成id。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IdWorker idWorker;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addGoodsInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">        Goods goods = <span class="keyword">new</span> Goods();</span><br><span class="line">        <span class="keyword">long</span> goodsId = idWorker.nextId();</span><br><span class="line">        goods.setGoodsId(goodsId);</span><br><span class="line">        goods.setGoodsName(<span class="string">&quot;heima&quot;</span>+i);</span><br><span class="line">        goodsMapper.addGoods(goods);</span><br><span class="line"></span><br><span class="line">        GoodsDetail goodsDetail = <span class="keyword">new</span> GoodsDetail();</span><br><span class="line">        goodsDetail.setGoodsDetailId(idWorker.nextId());</span><br><span class="line">        goodsDetail.setGoodsId(goodsId);</span><br><span class="line">        goodsDetail.setGoodsDetailName(<span class="string">&quot;heima goodsDetail&quot;</span>+i);</span><br><span class="line">        goodsDetailMapper.addGoodsDetail(goodsDetail);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4）连接mycat查询数据，可以发现出现数据丢失。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_goods a <span class="keyword">join</span> tb_goods_detail b <span class="keyword">on</span> a.goods_id <span class="operator">=</span> b.goods_id</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200614194232402.png" alt="image-20200614194232402"></p>
<h4 id="7-7-2-3）ER实现"><a href="#7-7-2-3）ER实现" class="headerlink" title="7.7.2.3）ER实现"></a>7.7.2.3）ER实现</h4><p>1）修改schema.xml。配置er表</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_goods&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142,dn145&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;goods_id&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;sharding-by-murmur-goods&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">childTable</span> <span class="attr">name</span>=<span class="string">&quot;tb_goods_detail&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;goods_detail_id&quot;</span> <span class="attr">joinKey</span>=<span class="string">&quot;goods_id&quot;</span> <span class="attr">parentKey</span>=<span class="string">&quot;goods_id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">childTable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）测试</p>
<p>​    删除原有数据，并重新插入数据，此时再次join查询，可以发现全部的一千条数据都已经获取到了。同时有关联关系的数据，也都存在于同一个数据分片中。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200614230514278.png" alt="image-20200614230514278"></p>
<h1 id="8）Mycat企业级架构设计-amp-应用"><a href="#8）Mycat企业级架构设计-amp-应用" class="headerlink" title="8）Mycat企业级架构设计&amp;应用"></a>8）Mycat企业级架构设计&amp;应用</h1><h2 id="8-1）Mycat主从切换"><a href="#8-1）Mycat主从切换" class="headerlink" title="8.1）Mycat主从切换"></a>8.1）Mycat主从切换</h2><p>​    基于Mycat主从复制方案，当前存在一个主节点和一个从节点，主节点负责写操作，从节点负责读操作。当在一个dataHost中配置了两个或多个writeHost，如果第一个writeHost宕机，则Mycat会在默认3次心跳检查失败后，自动切换到下一个可用的writeHost执行DML语句，并在<strong>conf/dnindex.properties</strong>文件里记录当前所用的writeHost的index。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200621190210292.png" alt="image-20200621190210292"></p>
<p>​    在Mycat主从切换中，可以将从节点也配置为是一个写节点（相当于从节点同时负责读写）。当原有的master写节点宕机后，从节点会被提升为主节点，同时负责读写操作。当写节点恢复后，会被作为从节点使用，保持现有状态不变，跟随新的主节点。</p>
<p>​    简单点说就是：原来的主变成从，原来的从一直为主。</p>
<h3 id="8-1-1）修改schema-xml"><a href="#8-1-1）修改schema-xml" class="headerlink" title="8.1.1）修改schema.xml"></a>8.1.1）修改schema.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:schema <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;userdb&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;true&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;user_id&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn142&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;dh142&quot;</span> <span class="attr">database</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">		writeType:0  所有的写操作都发送到writeHost上</span></span><br><span class="line"><span class="comment">		balance:1 所有读操作都发送到readHost上</span></span><br><span class="line"><span class="comment">		switchType:2 基于mysql主从同步的状态决定是否切换</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;dh142&quot;</span>  <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;1&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;100&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span>  <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;jdbc&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--查询心跳--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>show slave status<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--配置写节点实际物理数据库信息--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://192.168.200.142:3309&quot;</span> <span class="attr">host</span>=<span class="string">&quot;host1&quot;</span>  <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--配置读节点实际物理数据库信息--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;host2&quot;</span> <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://192.168.200.145:3309&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">readHost</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!--配置从节点也会作为写节点使用--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://192.168.200.145:3309&quot;</span> <span class="attr">host</span>=<span class="string">&quot;host2&quot;</span>  <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="8-1-2）测试"><a href="#8-1-2）测试" class="headerlink" title="8.1.2）测试"></a>8.1.2）测试</h3><p>​    开始测试时，当前host1为master写节点，host2为slave读节点同时作为备用写节点。</p>
<p>1）查看conf/dnindex.properties。可以发现dn142的值0，代表为第一个写节点。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200621194835074.png" alt="image-20200621194835074"></p>
<p>2）向tb_user表中插入数据。期望效果：当前host1为写节点，数据会进入到host1中，并复制到host2中</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(user_name) <span class="keyword">values</span>(<span class="string">&#x27;zhangsan&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200621193213163.png" alt="image-20200621193213163"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200621193227331.png" alt="image-20200621193227331"></p>
<p>3）停止host1的mysql服务。并重新执行添加操作。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(user_name) <span class="keyword">values</span>(<span class="string">&#x27;lisi&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>此时mycat Server控制台信息</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200621194645750.png" alt="image-20200621194645750"></p>
<p>同时查看conf/dnindex.properties。可以发现dn142的值已从0变为1。进行了节点更改。<img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200621194803521.png" alt="image-20200621194803521"></p>
<p>数据可以插入成功，但是数据会进入到第二个写节点中</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200621194946743.png" alt="image-20200621194946743"></p>
<p>4）重启host1服务。并重新插入数据。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(user_name) <span class="keyword">values</span>(<span class="string">&#x27;wangwu&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>此时可以发现数据仍然会进入到host2中，因为就算之前的host1恢复了，根据mycat的规则其也不会自动提升为写节点，因此写节点仍然为host2。 </p>
<p>并且当前为主从架构，并没有配置为双向复制。所以数据进入到host2后，host1中仍然没有数据，符合预期。此时host2会同时负责读、写请求。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200621195436688.png" alt="image-20200621195436688"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200621195444753.png" alt="image-20200621195444753"></p>
<h2 id="8-2）动态扩容-amp-数据迁移"><a href="#8-2）动态扩容-amp-数据迁移" class="headerlink" title="8.2）动态扩容&amp;数据迁移"></a>8.2）动态扩容&amp;数据迁移</h2><p>​    在生产环境下，当原有的数据库节点已经满足不了当前的数据存储量，此时就会在现有数据库基础上新增数据节点。但是当新增数据节点后，就要考虑原有的数据应该如何迁移一部分数据到新增的数据节点上。</p>
<p>​    <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200628172038412.png" alt="image-20200628172038412"></p>
<p>1）上传mycat，并在mycat目录下创建logs目录，并在logs目录中创建mycat.pid文件</p>
<p>1）/conf目录下新建newSchema.xml和newRule.xml，用于配置扩容节点。修改内容如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:schema <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;userdb&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;true&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn180&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb_user&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn180,dn181,dn182&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;mod-long&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn180&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;dh180&quot;</span> <span class="attr">database</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn181&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;dh181&quot;</span> <span class="attr">database</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn182&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;dh182&quot;</span> <span class="attr">database</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;dh180&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;100&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span>  <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;jdbc&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span> <span class="attr">slaveThreshold</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://192.168.200.180:3311&quot;</span> <span class="attr">host</span>=<span class="string">&quot;host1&quot;</span>  <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;dh181&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;100&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span>  <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;jdbc&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span> <span class="attr">slaveThreshold</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://192.168.200.181:3311&quot;</span> <span class="attr">host</span>=<span class="string">&quot;host1&quot;</span>  <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;dh182&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;100&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span>  <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;jdbc&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span> <span class="attr">slaveThreshold</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://192.168.200.182:3311&quot;</span> <span class="attr">host</span>=<span class="string">&quot;host1&quot;</span>  <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- - - Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); </span></span><br><span class="line"><span class="comment"> - you may not use this file except in compliance with the License. - You </span></span><br><span class="line"><span class="comment"> may obtain a copy of the License at - - http://www.apache.org/licenses/LICENSE-2.0 </span></span><br><span class="line"><span class="comment"> - - Unless required by applicable law or agreed to in writing, software - </span></span><br><span class="line"><span class="comment"> distributed under the License is distributed on an &quot;AS IS&quot; BASIS, - WITHOUT </span></span><br><span class="line"><span class="comment"> WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. - See the </span></span><br><span class="line"><span class="comment"> License for the specific language governing permissions and - limitations </span></span><br><span class="line"><span class="comment"> under the License. --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:rule <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;rule.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:rule</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;rule1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>func1<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;partition-by-fixed-hash&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>partition-by-fixed-hash<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-date&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>create_time<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>partbyday<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;rule2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>func1<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-intfile&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>sex<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>hash-int<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;auto-sharding-long&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>age<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>rang-long<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;mod-long&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>mod-long<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-murmur&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>murmur<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-murmur-goods&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>goods_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>murmur<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-murmur-goods-detail&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>goods_detail_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>murmur<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;crc32slot&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>crc32slot<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-month&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>create_time<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-month-function<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;latest-month-calldate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>calldate<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>latestMonth<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;auto-sharding-rang-mod&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>rang-mod<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;jch&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>jump-consistent-hash<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-hour&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_hour<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-hour-function<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;murmur&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMurmurHash&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;seed&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;count&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;virtualBucketTimes&quot;</span>&gt;</span>160<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;crc32slot&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByCRC32PreSlot&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;count&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;hash-int&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByFileMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>partition-hash-int.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;type&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultNode&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;rang-long&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.AutoPartitionByLong&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>autopartition-long.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;mod-long&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMod&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;count&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;func1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByLong&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionCount&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionLength&quot;</span>&gt;</span>128<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;partition-by-fixed-hash&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByLong&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionCount&quot;</span>&gt;</span>1,1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionLength&quot;</span>&gt;</span>256,768<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;latestMonth&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.LatestMonthPartion&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;splitOneDay&quot;</span>&gt;</span>24<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;partbymonth&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMonth&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dateFormat&quot;</span>&gt;</span>yyyy-MM-dd<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sBeginDate&quot;</span>&gt;</span>2015-01-01<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;partbyday&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByDate&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dateFormat&quot;</span>&gt;</span>yyyy-MM-dd<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sNaturalDay&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sBeginDate&quot;</span>&gt;</span>2020-01-01<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sPartionDay&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;rang-mod&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByRangeMod&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>partition-range-mod.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;jump-consistent-hash&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByJumpConsistentHash&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;totalBuckets&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-hour-function&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.LatestMonthPartion&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;splitOneDay&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-month-function&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMonth&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dateFormat&quot;</span>&gt;</span>yyyy-MM-dd<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sBeginDate&quot;</span>&gt;</span>2020-05-01<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:rule</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2）修改/conf下migrateTables.properties，指定虚拟库和表</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">userdb</span>=<span class="string">tb_user</span></span><br></pre></td></tr></table></figure>

<p>3）修改/bin下dataMigrate.sh</p>
<p>修改该文件编码格式由原有dos修改为unix</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看文件格式</span><br><span class="line">:set ff</span><br><span class="line"></span><br><span class="line">#修改文件格式</span><br><span class="line">:set ff&#x3D;unix</span><br></pre></td></tr></table></figure>

<p>修改mysqldump文件路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看mysqldump文件路径</span><br><span class="line">find &#x2F; -name mysqldump</span><br><span class="line"></span><br><span class="line">#修改dataMigrate.sh文件配置</span><br><span class="line">RUN_CMD&#x3D;&quot;$RUN_CMD -mysqlBin&#x3D;&#x2F;usr&#x2F;bin&#x2F;&quot;</span><br></pre></td></tr></table></figure>

<p>4）执行数据扩容与迁移</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd bin</span><br><span class="line"></span><br><span class="line">.&#x2F;dataMigrate.sh</span><br></pre></td></tr></table></figure>

<p>5）执行后结果</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200628173237529.png" alt="image-20200628173237529"></p>
<p><code>ps:执行数据扩容&amp;迁移时，务必注意虚拟库的名称必须要全部是小写，不能大小写混合</code></p>
<p>6）数据迁移后还应考虑后续的数据查询，此时还需将文件进行替换，用于查询路由。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv newRule.xml rule.xml</span><br><span class="line"></span><br><span class="line">mv newSchema.xml schema.xml</span><br></pre></td></tr></table></figure>

<h2 id="8-3）Haproxy-keepalived-mycat高可用负载均衡集群"><a href="#8-3）Haproxy-keepalived-mycat高可用负载均衡集群" class="headerlink" title="8.3）Haproxy+keepalived+mycat高可用负载均衡集群"></a>8.3）Haproxy+keepalived+mycat高可用负载均衡集群</h2><p>​    当线上服务器压力过大时，可以考虑基于keepalived进行高可用避免出现mycat单点问题，同时为了防止线上压力集中在某一台实例上，可以通过haproxy进行请求的负载均衡。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200628173502183.png" alt="image-20200628173502183"></p>
<h3 id="8-3-1）mycat准备"><a href="#8-3-1）mycat准备" class="headerlink" title="8.3.1）mycat准备"></a>8.3.1）mycat准备</h3><p>​    142&amp;145两台机器准备mycat-server并启动</p>
<h3 id="8-3-2）haproxy安装-amp-配置"><a href="#8-3-2）haproxy安装-amp-配置" class="headerlink" title="8.3.2）haproxy安装&amp;配置"></a>8.3.2）haproxy安装&amp;配置</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载haproxy镜像</span></span><br><span class="line"><span class="string">docker</span> <span class="string">pull</span> <span class="string">haproxy:1.9.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在宿主机指定文件夹创建haproxy.cfg</span></span><br><span class="line"></span><br><span class="line"><span class="string">global</span></span><br><span class="line">    <span class="string">log</span>         <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="string">local2</span></span><br><span class="line">    <span class="string">maxconn</span>     <span class="number">4000</span></span><br><span class="line">    <span class="string">daemon</span></span><br><span class="line"></span><br><span class="line"><span class="string">defaults</span></span><br><span class="line">        <span class="string">log</span>     <span class="string">global</span></span><br><span class="line">        <span class="string">log</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="string">local3</span></span><br><span class="line">        <span class="string">mode</span>    <span class="string">http</span></span><br><span class="line">        <span class="string">option</span>  <span class="string">tcplog</span></span><br><span class="line">        <span class="string">option</span>  <span class="string">dontlognull</span></span><br><span class="line">        <span class="string">retries</span> <span class="number">10</span></span><br><span class="line">        <span class="string">option</span> <span class="string">redispatch</span></span><br><span class="line">        <span class="string">maxconn</span>         <span class="number">2000</span></span><br><span class="line">        <span class="string">timeout</span> <span class="string">connect</span>         <span class="string">10s</span></span><br><span class="line">        <span class="string">timeout</span> <span class="string">client</span>          <span class="string">1m</span></span><br><span class="line">        <span class="string">timeout</span> <span class="string">server</span>          <span class="string">1m</span></span><br><span class="line">        <span class="string">timeout</span> <span class="string">http-keep-alive</span> <span class="string">10s</span></span><br><span class="line">        <span class="string">timeout</span> <span class="string">check</span>           <span class="string">10s</span></span><br><span class="line"></span><br><span class="line"><span class="string">listen</span> <span class="string">admin_stats</span></span><br><span class="line">        <span class="string">bind</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:10080</span></span><br><span class="line">        <span class="string">mode</span> <span class="string">http</span></span><br><span class="line">        <span class="string">option</span> <span class="string">httplog</span></span><br><span class="line">        <span class="string">maxconn</span> <span class="number">10</span></span><br><span class="line">        <span class="string">stats</span> <span class="string">refresh</span> <span class="string">30s</span></span><br><span class="line">        <span class="string">stats</span> <span class="string">uri</span> <span class="string">/stats</span></span><br><span class="line">        <span class="string">stats</span> <span class="string">realm</span> <span class="string">XingCloud/</span> <span class="string">Haproxy</span></span><br><span class="line">        <span class="string">stats</span> <span class="string">auth</span> <span class="string">admin:admin</span> <span class="comment">#用这个账号登录，可以自己设置</span></span><br><span class="line">        <span class="string">stats</span> <span class="string">hide-version</span></span><br><span class="line">        <span class="string">stats</span> <span class="string">admin</span> <span class="string">if</span> <span class="literal">TRUE</span></span><br><span class="line">        </span><br><span class="line"><span class="string">listen</span>  <span class="string">mycat</span></span><br><span class="line">        <span class="string">bind</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:3300</span></span><br><span class="line">        <span class="string">mode</span> <span class="string">tcp</span></span><br><span class="line">        <span class="string">balance</span> <span class="string">roundrobin</span></span><br><span class="line">        <span class="string">server</span> <span class="string">mycat-180</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.180</span><span class="string">:8066</span> <span class="string">check</span> <span class="string">port</span> <span class="number">8066 </span><span class="string">maxconn</span> <span class="number">300</span></span><br><span class="line">        <span class="string">server</span> <span class="string">mycat-181</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.181</span><span class="string">:8066</span> <span class="string">check</span> <span class="string">port</span> <span class="number">8066 </span><span class="string">maxconn</span> <span class="number">300</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#启动容器</span></span><br><span class="line"><span class="string">docker</span> <span class="string">run</span> <span class="string">-d</span> <span class="string">--name</span> <span class="string">haproxy</span> <span class="string">-p</span> <span class="number">10080</span><span class="string">:10080</span> <span class="string">-v</span> <span class="string">/usr/local/haproxy:/usr/local/etc/haproxy</span> <span class="string">haproxy:1.9.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#访问web管理页面</span></span><br><span class="line"><span class="string">http://192.168.200.142:10080/stats</span></span><br></pre></td></tr></table></figure>

<p><a href="http://192.168.200.142:10080/stats">http://192.168.200.142:10080/stats</a>     帐号：admin  密码：admin</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200628195202338.png" alt="image-20200628195202338"></p>
<h3 id="8-3-3）keepalived安装-amp-配置"><a href="#8-3-3）keepalived安装-amp-配置" class="headerlink" title="8.3.3）keepalived安装&amp;配置"></a>8.3.3）keepalived安装&amp;配置</h3><p>1）安装epel-release源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum list installed|grep epel-release</span><br></pre></td></tr></table></figure>

<p>2）查找可用安装源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum search keepalived</span><br></pre></td></tr></table></figure>

<p>3）keepAlived安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install keepalived -y</span><br></pre></td></tr></table></figure>

<p>4）安装虚拟服务器管理命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install ipvsadm -y</span><br></pre></td></tr></table></figure>

<p>5）编写执行shell脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vi /etc/keepalived/chk.sh<span class="comment">#!/bin/bash</span></span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="keyword">if</span> [ $(ps -C haproxy --no-header | wc -l) -eq 0 ]; <span class="keyword">then</span></span></span><br><span class="line">       killall keepalived</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>6）配置keepAlived配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;keepalived</span><br><span class="line"></span><br><span class="line">vi keepalvied.conf</span><br><span class="line"></span><br><span class="line">! Configuration File for keepalived</span><br><span class="line">#简单的头部，这里主要可以做邮件通知报警等的设置，此处就暂不配置了；</span><br><span class="line">global_defs &#123;</span><br><span class="line">        #notificationd LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line">#预先定义一个脚本，方便后面调用，也可以定义多个，方便选择；</span><br><span class="line">vrrp_script chk_haproxy &#123;</span><br><span class="line">    script &quot;&#x2F;etc&#x2F;keepalived&#x2F;check.sh&quot;</span><br><span class="line">    interval 2  #脚本循环运行间隔</span><br><span class="line">&#125;</span><br><span class="line">#VRRP虚拟路由冗余协议配置</span><br><span class="line">vrrp_instance VI_1 &#123;   #VI_1 是自定义的名称；</span><br><span class="line">    state BACKUP    #MASTER表示是一台主设备，BACKUP表示为备用设备【我们这里因为设置为开启不抢占，所以都设置为备用】</span><br><span class="line">    nopreempt      #开启不抢占</span><br><span class="line">    interface ens33   #指定VIP需要绑定的物理网卡</span><br><span class="line">    virtual_router_id 11   #VRID虚拟路由标识，也叫做分组名称，该组内的设备需要相同</span><br><span class="line">    priority 130   #定义这台设备的优先级 1-254；开启了不抢占，所以此处优先级必须高于另一台</span><br><span class="line"></span><br><span class="line">    advert_int 1   #生存检测时的组播信息发送间隔，组内一致</span><br><span class="line">    authentication &#123;    #设置验证信息，组内一致</span><br><span class="line">        auth_type PASS   #有PASS 和 AH 两种，常用 PASS</span><br><span class="line">        auth_pass 111111    #密码</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.200.200    #指定VIP地址，组内一致，可以设置多个IP</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;    #使用在这个域中使用预先定义的脚本，上面定义的</span><br><span class="line">        chk_haproxy</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7）启动keepAlived</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start keepalived</span><br></pre></td></tr></table></figure>

<p>8）查看keepAlived执行状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef|grep keepalived</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200628202404850.png" alt="image-20200628202404850"></p>
<p>9）此时通过ip a可以看到优先级高的机器已经有了虚拟ip</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200628202617986.png" alt="image-20200628202617986"></p>
<p>10）访问haproxy</p>
<p>192.168.200.200:10080/stats   访问成功</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200628202701140.png" alt="image-20200628202701140"></p>
<p>11）访问mycat</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200628202822392.png" alt="image-20200628202822392"></p>
<p>访问成功，现在已经成功通过keepalived+haproxy跳转到mycat上。</p>
<h1 id="9）Mycat企业级运维"><a href="#9）Mycat企业级运维" class="headerlink" title="9）Mycat企业级运维"></a>9）Mycat企业级运维</h1><h2 id="9-1）Mycat-Web性能监控平台"><a href="#9-1）Mycat-Web性能监控平台" class="headerlink" title="9.1）Mycat-Web性能监控平台"></a>9.1）Mycat-Web性能监控平台</h2><p>​    在现在的企业开发中，作为一个合格的开发人员来说，不仅要完成正常的编码任务，同时也要掌握一定的运维能力。当线上系统出现问题时，要能够快速的将隐藏问题找出来并进行解决。</p>
<p>​    Mycat-web是mycat的可视化运维监控平台。其能够管理和监控mycat的流量、连接数、线程数、JVM、内存。并且基于内部统计还能够分析出慢SQL与高频SQL。为sql优化提供了重要的依据。</p>
<h3 id="9-1-1）Mycat-web安装"><a href="#9-1-1）Mycat-web安装" class="headerlink" title="9.1.1）Mycat-web安装"></a>9.1.1）Mycat-web安装</h3><p>1）安装zookeeper</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建zk文件夹</span><br><span class="line">mkdir -p &#x2F;usr&#x2F;local&#x2F;zookeeper</span><br><span class="line"></span><br><span class="line">#在zk文件夹下下载zk安装包</span><br><span class="line">wget https:&#x2F;&#x2F;archive.apache.org&#x2F;dist&#x2F;zookeeper&#x2F;zookeeper-3.4.9&#x2F;zookeeper-3.4.9.tar.gz</span><br><span class="line"></span><br><span class="line">#解压安装包</span><br><span class="line">tar -zxvf zookeeper-3.4.9.tar.gz</span><br><span class="line"></span><br><span class="line">#进入&#x2F;conf文件夹，修改配置文件名称</span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line"></span><br><span class="line">#修改配置文件内容</span><br><span class="line"># The number of milliseconds of each tick</span><br><span class="line">tickTime&#x3D;2000</span><br><span class="line"># The number of ticks that the initial</span><br><span class="line"># synchronization phase can take</span><br><span class="line">initLimit&#x3D;10</span><br><span class="line"># The number of ticks that can pass between</span><br><span class="line"># sending a request and getting an acknowledgement</span><br><span class="line">syncLimit&#x3D;5</span><br><span class="line"># the directory where the snapshot is stored.</span><br><span class="line"># do not use &#x2F;tmp for storage, &#x2F;tmp here is just</span><br><span class="line"># example sakes.</span><br><span class="line">dataDir&#x3D;&#x2F;usr&#x2F;local&#x2F;services&#x2F;zookeeper&#x2F;zookeeper-3.4.9&#x2F;data</span><br><span class="line">dataLogDir&#x3D;&#x2F;usr&#x2F;local&#x2F;services&#x2F;zookeeper&#x2F;zookeeper-3.4.9&#x2F;logs</span><br><span class="line"># the port at which the clients will connect</span><br><span class="line">clientPort&#x3D;2181</span><br><span class="line"># the maximum number of client connections.</span><br><span class="line"># increase this if you need to handle more clients</span><br><span class="line">#maxClientCnxns&#x3D;60</span><br><span class="line">#</span><br><span class="line"># Be sure to read the maintenance section of the</span><br><span class="line"># administrator guide before turning on autopurge.</span><br><span class="line">#</span><br><span class="line"># http:&#x2F;&#x2F;zookeeper.apache.org&#x2F;doc&#x2F;current&#x2F;zookeeperAdmin.html#sc_maintenance</span><br><span class="line">#</span><br><span class="line"># The number of snapshots to retain in dataDir</span><br><span class="line">#autopurge.snapRetainCount&#x3D;3</span><br><span class="line"># Purge task interval in hours</span><br><span class="line"># Set to &quot;0&quot; to disable auto purge feature</span><br><span class="line">#autopurge.purgeInterval&#x3D;1</span><br><span class="line"></span><br><span class="line">#配置环境变量</span><br><span class="line">export ZOOKEEPER_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;zookeeper&#x2F;zookeeper-3.4.9&#x2F;</span><br><span class="line">export PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH:$MYCAT_HOME&#x2F;bin:$ZOOKEEPER_HOME&#x2F;bin</span><br><span class="line"></span><br><span class="line">#启动zk</span><br><span class="line">zkServer.sh start</span><br></pre></td></tr></table></figure>

<p>2）Mycat-web安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#解压mycat安装包</span><br><span class="line">tar -zxvf Mycat-web-1.0-SNAPSHOT-20170102153329-linux.tar.gz</span><br><span class="line"></span><br><span class="line">#启动mycat-web，默认端口8082</span><br><span class="line">.&#x2F;start.sh</span><br><span class="line"></span><br><span class="line">#查看mycat-web是否启动成功</span><br><span class="line">netstat -ant | grep 8082</span><br><span class="line"></span><br><span class="line">#访问mycat-web</span><br><span class="line">ip:8082&#x2F;mycat</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200628211259421.png" alt="image-20200628211259421"></p>
<h3 id="9-1-2）mycat-web使用"><a href="#9-1-2）mycat-web使用" class="headerlink" title="9.1.2）mycat-web使用"></a>9.1.2）mycat-web使用</h3><p>​    mycat-web的使用非常简单，其内部已经提供了mycat配置、mycat监控、sql监控与sql上线检查。只需要在其内部配置好自己的mycat服务器信息即可完成使用。</p>
<h2 id="9-2）Mycat调优"><a href="#9-2）Mycat调优" class="headerlink" title="9.2）Mycat调优"></a>9.2）Mycat调优</h2><p>​    在mycat使用过程中，也有可能涉及到对其进行调优。对于mycat调优主要是从JVM、操作系统、mycat本身、缓存、I/O、mysql这几部分分别进行调优</p>
<h3 id="9-2-1）JVM优化"><a href="#9-2-1）JVM优化" class="headerlink" title="9.2.1）JVM优化"></a>9.2.1）JVM优化</h3><p>​    JVM调优主要分为两部分<strong>堆内存</strong>和<strong>直接内存</strong>。直接内存尽可能的大，合理情况下应在操作系统的50%~67%之间。以16G内存服务器为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-server -Xms4G -Mmx4G XX:MaxPermSize&#x3D;64M -XX:MaxDirectMemorySize&#x3D;6G</span><br></pre></td></tr></table></figure>

<p>​    Mycat中JVM参数修改可配置/conf/wrapper.conf</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">wrapper.java.additional.4</span>=<span class="string">-XX:MaxDirectMemorySize=2G</span></span><br><span class="line"><span class="comment"># Initial Java Heap Size (in MB)</span></span><br><span class="line"><span class="comment">#wrapper.java.initmemory=3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Maximum Java Heap Size (in MB)</span></span><br><span class="line"><span class="comment">#wrapper.java.maxmemory=64</span></span><br></pre></td></tr></table></figure>

<h3 id="9-2-2）操作系统优化"><a href="#9-2-2）操作系统优化" class="headerlink" title="9.2.2）操作系统优化"></a>9.2.2）操作系统优化</h3><p>​    Linux系统对每个进行打开的文件句柄数量是有限的，可以把mysql和mycat服务器的最大文件句柄数量设置为5000~10000，可以通过ulimit命令修改，但只对当前用户有效，且服务器重启后失效。</p>
<h3 id="9-2-3）mycat优化"><a href="#9-2-3）mycat优化" class="headerlink" title="9.2.3）mycat优化"></a>9.2.3）mycat优化</h3><p>​    修改/conf/server.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置可用CPU数量，当CPU压力小时，可以通过该参数优化mycat--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;processors&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--设置可用CPU线程池大小，一般为16~64之间，根据系统能力决定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;processorExecutor&quot;</span>&gt;</span>32<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    修改/conf/schema.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--checkSQLschema建议设置为false，可以优化sql解析--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;userDB&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;true&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn142&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;500&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--maxCon建议设置在1000~2000之间，同一个mysql实例上所有dataNode节点共享本datahost上的所有物理节点--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;dh142&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;3&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;100&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span>  <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;jdbc&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span> <span class="attr">slaveThreshold</span>=<span class="string">&quot;1000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="9-2-4）缓存优化"><a href="#9-2-4）缓存优化" class="headerlink" title="9.2.4）缓存优化"></a>9.2.4）缓存优化</h3><p>​    在mycat中通过<code>show @@cache</code>可以查看当前mycat缓存的使用情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -umycat -h192.168.200.142 -P9066 -pmycat</span><br><span class="line"></span><br><span class="line">show @@cache</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200628231722460.png" alt="image-20200628231722460"></p>
<p>​    如果CUR接近MAX，而PUT比MAX大很多，则表明MAX需要增大。HIT/ACCESS为缓存命中率，该值越高越好。当调整后需要观察缓存命中率是否增加、PUT是否在下降。</p>
<p>​    可以修改**/conf/cacheservice.properties**修改缓存配置，其使用的是encache，在encache.xml中设置了encache缓存的全局属性</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#used for mycat cache service conf</span></span><br><span class="line"><span class="meta">factory.encache</span>=<span class="string">io.mycat.cache.impl.EnchachePooFactory</span></span><br><span class="line"><span class="comment">#key is pool name ,value is type,max size, expire seconds</span></span><br><span class="line"><span class="comment">#SQL解析和路由使用的缓存</span></span><br><span class="line"><span class="meta">pool.SQLRouteCache</span>=<span class="string">encache,10000,1800</span></span><br><span class="line"><span class="comment">#ER分片时使用的缓存</span></span><br><span class="line"><span class="meta">pool.ER_SQL2PARENTID</span>=<span class="string">encache,1000,1800</span></span><br><span class="line"><span class="comment">#当根据主键查询比较多时，该值设置的较大，可以有效提升性能</span></span><br><span class="line"><span class="meta">layedpool.TableID2DataNodeCache</span>=<span class="string">encache,10000,18000</span></span><br><span class="line"><span class="meta">layedpool.TableID2DataNodeCache.TESTDB_ORDERS</span>=<span class="string">50000,18000</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>分布式数据库架构</category>
      </categories>
      <tags>
        <tag>Mysql高可用实践</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式数据库架构实践01--数据库分库分表</title>
    <url>/jwangcloud/3255538449/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/DB1.jpeg" width="1000" height="200" align="middle">




<p>​    在项目开发的过程中，随着项目的不断庞大，伴随着的就是数据量的不断膨胀，当数据达到了一个量级之后，就会考虑数据的拆分。这个问题对于所有的中大型项目都不可避免要进行处理。</p>
<span id="more"></span>

<h2 id="docker下安装mysql"><a href="#docker下安装mysql" class="headerlink" title="docker下安装mysql"></a>docker下安装mysql</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name mysql3311 -p 3311:3306 --privileged&#x3D;true -ti -e MYSQL_ROOT_PASSWORD&#x3D;123456 -e MYSQL_USER&#x3D;user -e MYSQL_PASSWORD&#x3D;pass -v &#x2F;home&#x2F;mysql&#x2F;docker-data&#x2F;3311&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d -v &#x2F;home&#x2F;mysql&#x2F;docker-data&#x2F;3311&#x2F;data&#x2F;:&#x2F;var&#x2F;lib&#x2F;mysql -v &#x2F;home&#x2F;mysql&#x2F;docker-data&#x2F;3311&#x2F;logs&#x2F;:&#x2F;var&#x2F;log&#x2F;mysql -d mysql:5.7</span><br></pre></td></tr></table></figure>

<h2 id="数据库扩展思想"><a href="#数据库扩展思想" class="headerlink" title="数据库扩展思想"></a>数据库扩展思想</h2><ul>
<li>热备份：数据库在运行的过程中，对数据进行备份操作。相对的，还有冷备份，冷备份需要停机，然后对数据进行备份操作。</li>
<li>多活：所谓的多活，就是让数据库机器节点会存在多个，避免单点情况的出现。</li>
<li>故障切换：当一台数据库物理机出现异常状况时，可以自动的切换到其他物理机上。</li>
<li>读写分离：当存在存在多台数据库物理机，将读写操作分别交给不同的机器完成。</li>
<li>负载均衡：假设当存在多台数据库物理机接收读请求时，多个请求会均匀的分配到不同的机器上，避免大量请求压在某一台机器上。</li>
</ul>
<h2 id="Mysql常见架构设计"><a href="#Mysql常见架构设计" class="headerlink" title="Mysql常见架构设计"></a>Mysql常见架构设计</h2><p>​    首先对于架构设计来说，没有百分百的完美架构，只有适合的架构。要想理解mysql的分库分表，必须要先对mysql的架构设计有一定的了解，对于mysql架构，一定会使用到读写分离，在此基础上有五种常见架构设计：一主一从或多从、主主复制、级联复制、主主与级联复制结合。</p>
<h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>​    这种架构设计是使用的最多的。在读写分离的基础上，会存在一台master作为写机，一个或多个slave作为读机。因为在实际的情况下，读的请求量一般是远远大于写请求的。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200524232250958.png" alt="image-20200524232250958"></p>
<p>​    采用这种架构之后，当应用写入输入时，会把数据写入到master节点，然后由master节点将写入数据复制到slave节点上。</p>
<p>缺点：</p>
<p>​    1）因为master是单点存在的，所以如果要对master进行停机维护，则无法接收写请求。</p>
<p>​    2）master需要将写入数据复制到各个slave节点，但是复制是有一定的时间延迟的，因此有可能出现查询数据延迟。</p>
<p>​    3）如必须要对master进行停机维护，则需将某一个slave提升为master节点，将哪一个slave提升为master也需要考虑。</p>
<p>​    4）当某一个slave被提升为master后，则会造成被提升的master节点与原master的数据不一致。并且之前的master并没有最新的binlog信息。</p>
<h4 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h4><p>​    此处以一主一备来进行演示。</p>
<p>​    根据刚才docker创建mysql容器的参数指定，需要在两台机器上的**/home/mysql/docker-data/3307/conf<strong>目录下，需要创建mysql的配置文件</strong>my.cnf**。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># For advice on how to change settings please see</span><br><span class="line"># http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;server-configuration-defaults.html</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">#</span><br><span class="line"># Remove leading # and set to the amount of RAM for the most important data</span><br><span class="line"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span><br><span class="line"># innodb_buffer_pool_size &#x3D; 128M</span><br><span class="line">#</span><br><span class="line"># Remove leading # to turn on a very important data integrity option: logging</span><br><span class="line"># changes to the binary log between backups.</span><br><span class="line"># log_bin</span><br><span class="line">#</span><br><span class="line"># Remove leading # to set options mainly useful for reporting servers.</span><br><span class="line"># The server defaults are faster for transactions and fast SELECTs.</span><br><span class="line"># Adjust sizes as needed, experiment to find the optimal values.</span><br><span class="line"># join_buffer_size &#x3D; 128M</span><br><span class="line"># sort_buffer_size &#x3D; 2M</span><br><span class="line"># read_rnd_buffer_size &#x3D; 2M</span><br><span class="line">#datadir&#x3D;&#x2F;home&#x2F;mysql&#x2F;docker-data&#x2F;3307&#x2F;data</span><br><span class="line">#socket&#x3D;&#x2F;home&#x2F;mysql&#x2F;docker-data&#x2F;3307&#x2F;mysql.sock</span><br><span class="line"></span><br><span class="line">character_set_server&#x3D;utf8</span><br><span class="line">init_connect&#x3D;&#39;SET NAMES utf8&#39;</span><br><span class="line"></span><br><span class="line"># Disabling symbolic-links is recommended to prevent assorted security risks</span><br><span class="line">symbolic-links&#x3D;0</span><br><span class="line"></span><br><span class="line">#log-error&#x3D;&#x2F;home&#x2F;mysql&#x2F;docker-data&#x2F;3307&#x2F;logs&#x2F;mysqld.log</span><br><span class="line">#pid-file&#x3D;&#x2F;home&#x2F;mysql&#x2F;docker-data&#x2F;3307&#x2F;mysqld.pid</span><br><span class="line">lower_case_table_names&#x3D;1</span><br><span class="line">#指定主机号，不允许出现重复</span><br><span class="line">server-id&#x3D;1423307</span><br><span class="line">#开启binlog</span><br><span class="line">log-bin&#x3D;mysql-bin</span><br><span class="line">auto_increment_increment&#x3D;2</span><br><span class="line">auto_increment_offset&#x3D;1</span><br><span class="line"></span><br><span class="line">#rpl_semi_sync_master_enabled&#x3D;1</span><br><span class="line">#rpl_semi_sync_master_timeout&#x3D;10000</span><br></pre></td></tr></table></figure>

<p>​    在master的docker容器中添加mysql权限，开启备份机复制，并且设置备份用户信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#添加权限</span><br><span class="line">GRANT REPLICATION SLAVE,FILE,REPLICATION CLIENT ON *.* TO &#39;repluser&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;</span><br><span class="line"></span><br><span class="line">#刷新权限</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200525231404926.png" alt="image-20200525231404926"></p>
<p>​    设置并刷新权限后，<strong>重启mysql服务器</strong>，可以查看master上的binlog信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200525231505062.png" alt="image-20200525231505062"></p>
<p>​    <code>注：如果没有查询到任何信息代表master的binlog日志没有开启，查看配置文件或者重启docker容器</code>。</p>
<p>​    接着在slave中进入到mysql容器，设置master信息，用于标注当前slave的master是谁。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">change master to master_host&#x3D;&#39;master的ip&#39;,master_port&#x3D;master的端口号,master_user&#x3D;&#39;repluser&#39;,master_password&#x3D;&#39;123456&#39;,master_log_file&#x3D;&#39;master中的binlob文件&#39;,master_log_pos&#x3D;master中的position位置信息;</span><br><span class="line"></span><br><span class="line">change master to master_host&#x3D;&#39;192.168.200.180&#39;,master_port&#x3D;3310,master_user&#x3D;&#39;repluser&#39;,master_password&#x3D;&#39;123456&#39;,master_log_file&#x3D;&#39;mysql-bin.000001&#39;,master_log_pos&#x3D;154;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200525231937581.png" alt="image-20200525231937581"></p>
<p>​    设置完成后，还要开启slave中的<strong>IO</strong>和<strong>SQL</strong>线程，这两个线程主要用于slave中进行数据备份，可以先查看slave中这两个线程的状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show slave status&#x2F;G</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200525232119712.png" alt="image-20200525232119712"></p>
<p>​    此时，在slave中，这两个线程是关闭的，需要将这两个线程进行开启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start slave;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200525232307499.png" alt="image-20200525232307499"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200525232323712.png" alt="image-20200525232323712"></p>
<p>​    此时可以看到，这两个线程已经开启。</p>
<p>​    截止到此，mysql主从复制就已经搭建完毕了。接着可以来查看相关的状态信息。</p>
<p>​    首先可以先查看slave中的binlog是否已经开启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show global variables like &quot;%log%&quot;;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200525233252673.png" alt="image-20200525233252673"></p>
<p>​    根据信息，slave节点中的binlog日志已经开启。</p>
<p>​    接着还可以查看master、slave中的进程信息，</p>
<p>​    在master中输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show processlist</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200525233400935.png" alt="image-20200525233400935"></p>
<p>​    根据信息已经告诉我们，master已经发送的自身的binlog信息到slave上，并且正在等待更多的更新操作。</p>
<p>​    同时也可以在slave中输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show processlist</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200525233509873.png" alt="image-20200525233509873"></p>
<p>​    根据信息可以看到，在slave它已经连接到了master，正在等待master发送事件，并且slave已经读取了所有的relay log信息，并且正在等待更多的更新操作。</p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>​    1）在master中的user数据库中创建一张表。创建成功后，slave中也会同步更新出相同的表。</p>
<p>​    2）在master中enjoy数据库的表中新增一条记录，新增成功后，slave中也会同步新增一条数据。</p>
<p>​    3）但在slave中新增记录，master中并不会同步更新，因为现在配置的是单向复制。只会master向slave中复制数据。</p>
<h2 id="Mysql复制原理解析"><a href="#Mysql复制原理解析" class="headerlink" title="Mysql复制原理解析"></a>Mysql复制原理解析</h2><p>​    刚才已经搭建完了主从复制，虽然效果已经实现了，但是对于mysql内部的复制操作，其内部又是如何完成的呢？</p>
<p>​    在mysql中，其有两种复制机制，分别是：<strong>异步复制</strong>、<strong>半同步复制</strong>。默认采用异步复制。</p>
<h3 id="复制机制的实现原理"><a href="#复制机制的实现原理" class="headerlink" title="复制机制的实现原理"></a>复制机制的实现原理</h3><h4 id="异步复制执行流程"><a href="#异步复制执行流程" class="headerlink" title="异步复制执行流程"></a>异步复制执行流程</h4><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200824144352020.png" alt="image-20200824144352020"></p>
<p>1）应用事务提交到master</p>
<p>2）master接收到应用事务提交请求后，会更新内部的binlog日志，接着让mysql引擎执行事务操作，并返回给客户端执行结果信息。同时在master中会存在一个事件监听，其会一直监听着master中binlog日志文件的改变，一旦发现日志文件发生改变，则会触发dump线程。</p>
<p>3）dump线程被触发后，会通知slave中的IO线程现在有事务操作要进行同步。</p>
<p>4）slave中IO线程接收到通知后，会从slave中<strong>relay-log.info</strong>文件中获取slave中的binlog日志文件和pos位置信息。接着会把这部分信息发送给master的dump线程。</p>
<p>5）master的dump线程收到这些信息后，会根据slave发送的binlog日志文件和pos位置，将最新的binlog日志和pos位置后面的内容同步给slave的IO线程。</p>
<p>6）slave的IO线程接收到这些信息后，会将这部分内容同步到slave中的relay-bin文件中。</p>
<p>7）当relay-bin文件发生改变后，会触发slave 线程执行sql操作，【异步操作】</p>
<p>8）当slave向relay-bin写入完成后，还会向master返回一个ACK消息，通知slave已经执行成功。</p>
<p>​    对于这一系列的操作，可以发现master和slave在进行同步时是以异步的方式完成的，master写入完binlog后，会马上通过引擎进行事务提交并向客户端返回响应，对于与slave同步的操作，则是异步完成的。</p>
<p>​    虽然这种方式的RT很快，但是容易出现数据不一致的情况。</p>
<h4 id="半同步复制执行流程"><a href="#半同步复制执行流程" class="headerlink" title="半同步复制执行流程"></a>半同步复制执行流程</h4><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200824144623639.png" alt="image-20200824144623639"></p>
<p>​    半同步复制与异步复制的工作流程大体相似，但不同的是，当master中的binlog日志写入完成后，其不会马上通过引擎进行事务提交，而会处于等待，等到slave同步完成向master返回ACK通知后，才会唤醒等待，继续向下执行。</p>
<p>​    等待的时长，默认为10秒，但该时间可以配置。</p>
<p>​    半同步复制尽量的避免的主从数据不一致的情况，但是会造成吞吐量的降低。</p>
<p>​    对于这个问题，mysql也进行了解决，假设使用半同步复制进行备份时，slave节点挂掉了，那么当master等待10秒后，仍然会进行引擎提交，同时会将半同步复制切换为异步复制。等到slave节点重启后，又会自动的从异步复制切换到半同步复制。</p>
<h3 id="主从异步复制日志效果"><a href="#主从异步复制日志效果" class="headerlink" title="主从异步复制日志效果"></a>主从异步复制日志效果</h3><p>​    Mysql在进行复制操作时，默认是基于异步复制完成的。那为了更好的体会异步复制的效果，可以通过mysql日志来查看具体的复制过程效果。</p>
<p>1）启动主从两台Mysql服务器。</p>
<p>2）查看master的Mysql日志信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker logs -f mysql3307</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200529224302948.png" alt="image-20200529224302948"></p>
<p>​    根据当前查看的日志信息，在master中已经开启了dump线程连接到了id为1453307的slave节点，并且该id就是在slave的mysql配置文件中设置的id。</p>
<p>​    同时pos内容包括当前的binlog日志和pos位置。</p>
<p>3）查看slave的Mysql日志信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker logs -f mysql3307</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200529224651937.png" alt="image-20200529224651937"></p>
<p>​    根据slave中的日志信息，可以看到，当前slave中已经开启了relay-log日志，其对应文件信息就是xxxxx-relay-bin。其内部保存的就是slave中的相关binlog信息和pos位置信息。</p>
<p>​    同时在slave中也已经开启了SQL Thread，并且根据信息可以，它会从xxxx-relay-bin.0006文件的367位置开始复制。</p>
<p>​    同时在slave中也开启了IO Thread，其已经连接到master，并且会从master的binlog日志的154的位置开启复制。</p>
<p>4）查看master当前的binlog日志信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#确定当前master正在使用的binlog日志文件</span><br><span class="line">cat mysql-bin.index</span><br><span class="line"></span><br><span class="line">#查看当前binlog日志文件内容</span><br><span class="line">tail -f mysql-bin.000001</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200529230743091.png" alt="image-20200529230743091"></p>
<p>5）查看slave当前的日志信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@bogon data]# cat relay-log.info </span><br><span class="line">7</span><br><span class="line">.&#x2F;8122977f8b0a-relay-bin.000002</span><br><span class="line">864</span><br><span class="line">mysql-bin.000004</span><br><span class="line">1251</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">[root@bogon data]# cat master.info </span><br><span class="line">25</span><br><span class="line">mysql-bin.000004</span><br><span class="line">1251</span><br><span class="line">192.168.200.142</span><br><span class="line">repluser</span><br><span class="line">123456</span><br><span class="line">3307</span><br><span class="line"></span><br><span class="line">[root@bogon data]# cat 8122977f8b0a-relay-bin.index</span><br><span class="line">.&#x2F;8122977f8b0a-relay-bin.000001</span><br><span class="line">.&#x2F;8122977f8b0a-relay-bin.000002</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200529231644827.png" alt="image-20200529231644827"></p>
<p>6）监控slave日志信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tail -f 8122977f8b0a-relay-bin.000002</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200529231855898.png" alt="image-20200529231855898"></p>
<p>7）master中新增数据，触发主从同步</p>
<p>master中日志改变内容如下</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200529232120418.png" alt="image-20200529232120418"></p>
<p>slave中日志改变内容如下</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200529232202700.png" alt="image-20200529232202700"></p>
<h3 id="主从半同步复制配置-amp-效果演示"><a href="#主从半同步复制配置-amp-效果演示" class="headerlink" title="主从半同步复制配置&amp;效果演示"></a>主从半同步复制配置&amp;效果演示</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>1）进入mysql容器，加载lib，<strong>主从节点都要配置</strong>，因为主从节点间会存在切换。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">install plugin rpl_semi_sync_master soname &#39;semisync_master.so&#39;;</span><br><span class="line"></span><br><span class="line">install plugin rpl_semi_sync_slave soname &#39;semisync_slave.so&#39;;</span><br></pre></td></tr></table></figure>

<p>2）查看插件信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show plugins;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200530005008363.png" alt="image-20200530005008363"></p>
<p>3）启用半同步<strong>（务必先启用从库，再启用主库）</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#先启用从库，再启用主库</span><br><span class="line"></span><br><span class="line">从库：set global rpl_semi_sync_slave_enabled&#x3D; &#123;0|1&#125;;   # 1：启用，0：禁止</span><br><span class="line"></span><br><span class="line">主库：</span><br><span class="line">     set global rpl_semi_sync_master_enabled&#x3D; &#123;0|1&#125;;   # 1：启用，0：禁止</span><br><span class="line">     set global rpl_semi_sync_master_timeout&#x3D;10000;   # 单位为ms</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    当主库开启半同步复制后，打印日志信息如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200530005339598.png" alt="image-20200530005339598"></p>
<p>4）从库重启IO Thread</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stop slave io_thread;</span><br><span class="line">start slave io_thread;</span><br></pre></td></tr></table></figure>

<p>5）截止到此已经完成半同步开启配置，可以查看<strong>主库</strong>状态信息和参数信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查询状态信息</span><br><span class="line">show global status like &quot;%sync%&quot;;</span><br><span class="line"></span><br><span class="line">#查询参数信息</span><br><span class="line">show global variables like &#39;%sync%&#39;;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200530005851845.png" alt="image-20200530005851845"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200530005802183.png" alt="image-20200530005802183"></p>
<h4 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h4><p>​    根据上述的配置，当前主从两台服务器的复制方式已经改为半同步复制。接下来就可以来查看具体的效果。</p>
<p>1）正常的向master中添加数据，slave可以进行正常数据更新。</p>
<p>master打印日志信息如下： 开启半同步复制，关闭异步复制</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200530010448157.png" alt="image-20200530010448157"></p>
<p>2）关闭slave的IO Thread。 </p>
<p>​    <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200530010702895.png" alt="image-20200530010702895"></p>
<p>​    再次向master中添加数据。此时可以发现，当进行数据提交时，会出现等待，过了十秒后，会对数据进行保存。同时slave中不会同步的进行数据更新。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200530010747005.png" alt="image-20200530010747005"></p>
<p>​    并且master中会打印日志信息，等待超时，关闭半同步复制。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200530010928093.png" alt="image-20200530010928093"></p>
<p>​    此时复制机制就会由半同步复制转换为异步复制，当再次向master中添加数据，不会再次出现等待。</p>
<p>3）slave中重新开启IO Thread。</p>
<p>​    首先：异步复制会再次转换为半同步复制，master中打印日志信息如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200530011251399.png" alt="image-20200530011251399"></p>
<p>​    其次：在slave IO Tthread关闭这段时间内的数据，会同步到slave中，不会出现数据丢失。</p>
<h2 id="主主复制"><a href="#主主复制" class="headerlink" title="主主复制"></a>主主复制</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>​    对于主从复制来说，其内部会存在一台master以及一台或多台slave。但有一个非常明显的问题，<strong>master是单点存在</strong>。一旦master宕机，则无法进行数据的写入。为了解决这个问题，可以使用主主复制架构。</p>
<p>​    在主主复制架构中，会存在两台master，没有slave。并且会对这两台master进行读写分离，两台master会进行相互的复制。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200530012403644.png" alt="image-20200530012403644"></p>
<p>​    在此架构中，两台master会进行双向复制，为什么这么做呢？ 因为假设现在负责写的master宕机了，那么写的工作则会交给之前负责读的服务器来完成，相当于它即负责写又负责读。等到原先负责写的master恢复了，其在继续负责写工作。 反之亦然。因此才需要两者间进行双向复制。</p>
<p>​    此时缺点也非常明显，虽然master不存在单点了，但是对于读来说，如果并发量大的话，它肯定扛不住。对于主主复制架构来说，应用较少。</p>
<h3 id="搭建-1"><a href="#搭建-1" class="headerlink" title="搭建"></a>搭建</h3><p>​    主主复制的搭建和主从非常类似，只不过主主复制会进行互指。</p>
<p>1）参照主从完成搭建。</p>
<p>2）原slave端也要开启权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#添加权限</span><br><span class="line">GRANT REPLICATION SLAVE,FILE,REPLICATION CLIENT ON *.* TO &#39;repluser&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;</span><br><span class="line"></span><br><span class="line">#刷新权限</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line">#重启mysql服务并查看binlog信息</span><br><span class="line">show master status</span><br></pre></td></tr></table></figure>

<p>3）在master这一端也要配置slave的相关配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">change master to master_host&#x3D;&#39;master的ip&#39;,master_port&#x3D;master的端口号,master_user&#x3D;&#39;repluser&#39;,master_password&#x3D;&#39;123456&#39;,master_log_file&#x3D;&#39;master中的binlob文件&#39;,master_log_pos&#x3D;master中的position位置信息;</span><br><span class="line"></span><br><span class="line">change master to master_host&#x3D;&#39;192.168.200.181&#39;,master_port&#x3D;3308,master_user&#x3D;&#39;repluser&#39;,master_password&#x3D;&#39;123456&#39;,master_log_file&#x3D;&#39;mysql-bin.000002&#39;,master_log_pos&#x3D;154;</span><br><span class="line"></span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure>

<p>3）查看master和slave的进程列表：show processlist。可以发现他们现在互为主备。</p>
<p>master： </p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200530020237138.png" alt="image-20200530020237138"></p>
<p>slave：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200530020332258.png" alt="image-20200530020332258"></p>
<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>​    当在两台服务器中添加数据，都可以完成双向同步。</p>
<h2 id="级联复制架构"><a href="#级联复制架构" class="headerlink" title="级联复制架构"></a>级联复制架构</h2><p>​    当读压力现在增大并且还想减小主从复制的性能消耗，可以采用级联复制架构。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200601225751946.png" alt="image-20200601225751946"></p>
<p>​    写请求的入口仍为一个，但当master向slave进行复制时，对于slave可以分为多层， master只要向其中两台slave复制即可，然后再由slave将其数据复制到后面更多的slave中。</p>
<p>​    通过这种方式可以减轻master向slave复制的IO压力。</p>
<p>​    但是这种架构也存在一个弊端：slave的延迟会加大。</p>
<h2 id="双主与级联复制结合架构"><a href="#双主与级联复制结合架构" class="headerlink" title="双主与级联复制结合架构"></a>双主与级联复制结合架构</h2><p>​    对于master在前面几种架构设计中，都存在单点问题， 对于master单点问题的解决，可以采用当前的架构。通过这种架构不仅可以解决master单点的问题，也可以解决slave延迟的问题。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/DB/1/assets/image-20200601230908495.png" alt="image-20200601230908495"></p>
<p>​    </p>
]]></content>
      <categories>
        <category>分布式数据库架构</category>
      </categories>
      <tags>
        <tag>数据库分库分表</tag>
        <tag>主从复制</tag>
        <tag>主主复制</tag>
        <tag>及联复制</tag>
      </tags>
  </entry>
  <entry>
    <title>如何提升变更频率低的数据访问速度--lua脚本语言</title>
    <url>/jwangcloud/2696540171/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/first_foots/01.jpeg" width="1000" height="200" align="middle">

<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li>变更频率低的数据，如何提升访问速度？</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.数据做成静态页[商品详情页]</span><br><span class="line">2.做缓存[Redis]</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<ul>
<li>基本的思路如下：</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1560736222654.png" alt="1560736222654"></p>
<p>如上图此种方式 简单，直接通过数据库查询数据展示给用户即可，但是通常情况下，首页（门户系统的流量一般非常的高）不适合直接通过mysql数据库直接访问的方式来获取展示。</p>
<p>如下思路：</p>
<p>1.首先访问nginx ，我们可以采用缓存的方式，先从nginx本地缓存中获取，获取到直接响应</p>
<p>2.如果没有获取到，再次访问redis，我们可以从redis中获取数据，如果有 则返回，并缓存到nginx中</p>
<p>3.如果没有获取到,再次访问mysql,我们从mysql中获取数据，再将数据存储到redis中，返回。</p>
<p>而这里面，我们都可以使用LUA脚本嵌入到程序中执行这些查询相关的业务。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1560738068753.png" alt="1560738068753"></p>
<h2 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h2><h3 id="lua是什么"><a href="#lua是什么" class="headerlink" title="lua是什么"></a>lua是什么</h3><p>Lua [1]  是一个小巧的<a href="https://baike.baidu.com/item/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80">脚本语言</a>。用标准C语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。</p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul>
<li>支持面向过程(procedure-oriented)编程和函数式编程(functional programming)；</li>
<li>自动内存管理；只提供了一种通用类型的表（table），用它可以实现数组，哈希表，集合，对象；</li>
<li>语言内置模式匹配；闭包(closure)；函数也可以看做一个值；提供多线程（协同进程，并非操作系统所支持的线程）支持；</li>
<li>通过闭包和table可以很方便地支持面向对象编程所需要的一些关键机制，比如数据抽象，虚函数，继承和重载等。</li>
</ul>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul>
<li>游戏开发</li>
<li>独立应用脚本</li>
<li>Web 应用脚本</li>
<li>扩展和数据库插件如：MySQL Proxy 和 MySQL WorkBench</li>
<li>安全系统，如入侵检测系统</li>
<li>redis中嵌套调用实现类似事务的功能</li>
<li>web容器中应用处理一些过滤 缓存等等的逻辑，例如nginx。</li>
</ul>
<h3 id="lua的安装"><a href="#lua的安装" class="headerlink" title="lua的安装"></a>lua的安装</h3><p>安装步骤,在linux系统中执行下面的命令。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">curl</span> <span class="string">-R -O http://www.lua.org/ftp/lua-5.3.5.tar.gz</span></span><br><span class="line"><span class="attr">tar</span> <span class="string">zxf lua-5.3.5.tar.gz</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">lua-5.3.5</span></span><br><span class="line"><span class="attr">make</span> <span class="string">linux test</span></span><br></pre></td></tr></table></figure>

<p>注意：此时安装，有可能会出现如下错误：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1560739143890.png" alt="1560739143890"></p>
<p>此时需要安装lua相关依赖库的支持，执行如下命令即可：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">yum</span> <span class="string">install libtermcap-devel ncurses-devel libevent-devel readline-devel</span></span><br></pre></td></tr></table></figure>

<p>此时再执行lua测试看lua是否安装成功</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[root@localhost</span> <span class="string">~]# lua</span></span><br><span class="line"><span class="attr">Lua</span> <span class="string">5.1.4  Copyright (C) 1994-2008 Lua.org, PUC-Rio</span></span><br></pre></td></tr></table></figure>



<h3 id="入门程序"><a href="#入门程序" class="headerlink" title="入门程序"></a>入门程序</h3><p>创建hello.lua文件，内容为</p>
<p>编辑文件hello.lua</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi hello.lua</span><br></pre></td></tr></table></figure>

<p>在文件中输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(&quot;hello&quot;);</span><br></pre></td></tr></table></figure>

<p>保存并退出。</p>
<p>执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lua hello.lua</span><br></pre></td></tr></table></figure>

<p>输出为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1564436327870.png" alt="1564436327870"></p>
<h3 id="LUA的基本语法"><a href="#LUA的基本语法" class="headerlink" title="LUA的基本语法"></a>LUA的基本语法</h3><p>lua有交互式编程和脚本式编程。</p>
<p>交互式编程就是直接输入语法，就能执行。</p>
<p>脚本式编程需要编写脚本，然后再执行命令 执行脚本才可以。</p>
<p>一般采用脚本式编程。（例如：编写一个hello.lua的文件，输入文件内容，并执行lua hell.lua即可）</p>
<p>(1)交互式编程</p>
<p>Lua 提供了交互式编程模式。我们可以在命令行中输入程序并立即查看效果。</p>
<p>Lua 交互式编程模式可以通过命令 lua -i 或 lua 来启用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lua -i</span><br></pre></td></tr></table></figure>

<p>如下图：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1564436436450.png" alt="1564436436450"></p>
<p>(2)脚本式编程</p>
<p>我们可以将 Lua 程序代码保持到一个以 lua 结尾的文件，并执行，该模式称为脚本式编程，例如上面入门程序中将lua语法写到hello.lua文件中。</p>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>一行注释：两个减号是单行注释:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--</span><br></pre></td></tr></table></figure>

<p>多行注释：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment"> 多行注释</span></span><br><span class="line"><span class="comment"> 多行注释</span></span><br><span class="line"><span class="comment"> --]]</span></span><br></pre></td></tr></table></figure>



<h4 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h4><p>全局变量，默认的情况下，定义一个变量都是全局变量，</p>
<p>如果要用局部变量 需要声明为local.例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 全局变量赋值</span></span><br><span class="line">a=<span class="number">1</span></span><br><span class="line"><span class="comment">-- 局部变量赋值</span></span><br><span class="line"><span class="keyword">local</span> b=<span class="number">2</span> </span><br></pre></td></tr></table></figure>

<p>如果变量没有初始化：则 它的值为nil 这和java中的null不同。</p>
<p>如下图案例：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1564436763084.png" alt="1564436763084"></p>
<h4 id="Lua中的数据类型"><a href="#Lua中的数据类型" class="headerlink" title="Lua中的数据类型"></a>Lua中的数据类型</h4><p>Lua 是动态类型语言，变量不要类型定义,只需要为变量赋值。 值可以存储在变量中，作为参数传递或结果返回。</p>
<p>Lua 中有 8 个基本类型分别为：nil、boolean、number、string、userdata、function、thread 和 table。</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>nil</td>
<td>这个最简单，只有值nil属于该类，表示一个无效值（在条件表达式中相当于false）。</td>
</tr>
<tr>
<td>boolean</td>
<td>包含两个值：false和true。</td>
</tr>
<tr>
<td>number</td>
<td>表示双精度类型的实浮点数</td>
</tr>
<tr>
<td>string</td>
<td>字符串由一对双引号或单引号来表示</td>
</tr>
<tr>
<td>function</td>
<td>由 C 或 Lua 编写的函数</td>
</tr>
<tr>
<td>userdata</td>
<td>表示任意存储在变量中的C数据结构</td>
</tr>
<tr>
<td>thread</td>
<td>表示执行的独立线路，用于执行协同程序</td>
</tr>
<tr>
<td>table</td>
<td>Lua 中的表（table）其实是一个”关联数组”（associative arrays），数组的索引可以是数字、字符串或表类型。在 Lua 里，table 的创建是通过”构造表达式”来完成，最简单构造表达式是{}，用来创建一个空表。</td>
</tr>
</tbody></table>
<p>实例：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">print(type(&quot;Hello</span> <span class="string">world&quot;))      --&gt; string</span></span><br><span class="line"><span class="meta">print(type(10.4*3))</span>             <span class="string">--&gt; number</span></span><br><span class="line"><span class="meta">print(type(print))</span>              <span class="string">--&gt; function</span></span><br><span class="line"><span class="meta">print(type(type))</span>               <span class="string">--&gt; function</span></span><br><span class="line"><span class="meta">print(type(true))</span>               <span class="string">--&gt; boolean</span></span><br><span class="line"><span class="meta">print(type(nil))</span>                <span class="string">--&gt; nil</span></span><br></pre></td></tr></table></figure>





<h4 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h4><p>(1)if语句</p>
<p>Lua <strong>if 语句</strong> 由一个布尔表达式作为条件判断，其后紧跟其他语句组成。</p>
<p>语法：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">if(布尔表达式)</span></span><br><span class="line"><span class="attr">then</span></span><br><span class="line">   <span class="meta">--[</span> <span class="string">在布尔表达式为 true 时执行的语句 --]</span></span><br><span class="line"><span class="attr">end</span></span><br></pre></td></tr></table></figure>

<p>实例：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1564437016055.png" alt="1564437016055"></p>
<p>(2)if..else语句</p>
<p>Lua if 语句可以与 else 语句搭配使用, 在 if 条件表达式为 false 时执行 else 语句代码块。</p>
<p>语法：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">if(布尔表达式)</span></span><br><span class="line"><span class="attr">then</span></span><br><span class="line">   <span class="meta">--[</span> <span class="string">布尔表达式为 true 时执行该语句块 --]</span></span><br><span class="line"><span class="attr">else</span></span><br><span class="line">   <span class="meta">--[</span> <span class="string">布尔表达式为 false 时执行该语句块 --]</span></span><br><span class="line"><span class="attr">end</span></span><br></pre></td></tr></table></figure>

<p>实例：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1564437356737.png" alt="1564437356737"></p>
<h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><p>学员完成</p>
<p>(1)while循环[==满足条件就循环==]</p>
<p>Lua 编程语言中 while 循环语句在判断条件为 true 时会重复执行循环体语句。<br>语法：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">while(condition)</span></span><br><span class="line"><span class="attr">do</span></span><br><span class="line">   <span class="attr">statements</span></span><br><span class="line"><span class="attr">end</span></span><br></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">a</span>=<span class="string">10</span></span><br><span class="line"><span class="meta">while(</span> <span class="string">a &lt; 20 )</span></span><br><span class="line"><span class="attr">do</span></span><br><span class="line">   <span class="meta">print(&quot;a</span> <span class="string">的值为:&quot;, a)</span></span><br><span class="line">   <span class="attr">a</span> = <span class="string">a+1</span></span><br><span class="line"><span class="attr">end</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1564437466576.png" alt="1564437466576"></p>
<p>(2)for循环</p>
<p>Lua 编程语言中 for 循环语句可以重复执行指定语句，重复次数可在 for 语句中控制。</p>
<p>语法：  1-&gt;10  1:exp1  10:exp2  2:exp3:递增的数量   </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">for</span> <span class="string">var=exp1,exp2,exp3 </span></span><br><span class="line"><span class="attr">do</span>  <span class="string"></span></span><br><span class="line">    <span class="meta">&lt;执行体&gt;</span>  <span class="string"></span></span><br><span class="line"><span class="attr">end</span>  <span class="string"></span></span><br></pre></td></tr></table></figure>

<p>var 从 exp1 变化到 exp2，每次变化以 exp3 为步长递增 var，并执行一次 **”执行体”**。exp3 是可选的，如果不指定，默认为1。</p>
<p>例子：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">for</span> <span class="string">i=1,9,2</span></span><br><span class="line"><span class="attr">do</span></span><br><span class="line">   <span class="attr">print(i)</span></span><br><span class="line"><span class="attr">end</span></span><br></pre></td></tr></table></figure>

<p><code>for i=1,9,2</code>:i=1从1开始循环，9循环数据到9结束，2每次递增2</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1564437629211.png" alt="1564437629211"></p>
<p>(3)repeat…until语句[==满足条件结束==]</p>
<p>Lua 编程语言中 repeat…until 循环语句不同于 for 和 while循环，for 和 while 循环的条件语句在当前循环执行开始时判断，而 repeat…until 循环的条件语句在当前循环结束后判断。</p>
<p>语法：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">repeat</span></span><br><span class="line">   <span class="attr">statements</span></span><br><span class="line"><span class="meta">until(</span> <span class="string">condition )</span></span><br></pre></td></tr></table></figure>

<p>案例：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1564438640878.png" alt="1564438640878"></p>
<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>lua中也可以定义函数，类似于java中的方法。例如：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--[[ 函数返回两个值的最大值 --]]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span><span class="params">(num1, num2)</span></span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (num1 &gt; num2) <span class="keyword">then</span></span><br><span class="line">      result = num1;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">      result = num2;</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> result; </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 调用函数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;两值比较最大值为 &quot;</span>,<span class="built_in">max</span>(<span class="number">10</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;两值比较最大值为 &quot;</span>,<span class="built_in">max</span>(<span class="number">5</span>,<span class="number">6</span>))</span><br></pre></td></tr></table></figure>

<p>执行之后的结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">两值比较最大值为     10</span><br><span class="line">两值比较最大值为     6</span><br></pre></td></tr></table></figure>



<p>..:表示拼接</p>
<h4 id="表"><a href="#表" class="headerlink" title="表"></a>表</h4><p>table 是 Lua 的一种数据结构用来帮助我们创建不同的数据类型，如：数组、字典等。</p>
<p>Lua也是通过table来解决模块（module）、包（package）和对象（Object）的。</p>
<p>案例：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">--</span> <span class="string">初始化表</span></span><br><span class="line"><span class="attr">mytable</span> = <span class="string">&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">--</span> <span class="string">指定值</span></span><br><span class="line"><span class="meta">mytable[1]</span>= <span class="string">&quot;Lua&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">--</span> <span class="string">移除引用</span></span><br><span class="line"><span class="attr">mytable</span> = <span class="string">nil</span></span><br></pre></td></tr></table></figure>



<h4 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h4><p>(1)模块定义</p>
<p>模块类似于一个封装库，从 Lua 5.1 开始，Lua 加入了标准的模块管理机制，可以把一些公用的代码放在一个文件里，以 API 接口的形式在其他地方调用，有利于代码的重用和降低代码耦合度。</p>
<p>创建一个文件叫module.lua，在module.lua中创建一个独立的模块，代码如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">--</span> <span class="string">文件名为 module.lua</span></span><br><span class="line"><span class="meta">--</span> <span class="string">定义一个名为 module 的模块</span></span><br><span class="line"><span class="attr">module</span> = <span class="string">&#123;&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">--</span> <span class="string">定义一个常量</span></span><br><span class="line"><span class="meta">module.constant</span> = <span class="string">&quot;这是一个常量&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">--</span> <span class="string">定义一个函数</span></span><br><span class="line"><span class="attr">function</span> <span class="string">module.func1()</span></span><br><span class="line">    <span class="attr">print(&quot;这是一个公有函数&quot;)</span></span><br><span class="line"><span class="attr">end</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">local</span> <span class="string">function func2()</span></span><br><span class="line">    <span class="attr">print(&quot;这是一个私有函数！&quot;)</span></span><br><span class="line"><span class="attr">end</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">function</span> <span class="string">module.func3()</span></span><br><span class="line">    <span class="attr">func2()</span></span><br><span class="line"><span class="attr">end</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">return</span> <span class="string">module</span></span><br></pre></td></tr></table></figure>

<p>由上可知，模块的结构就是一个 table 的结构，因此可以像操作调用 table 里的元素那样来操作调用模块里的常量或函数。</p>
<p>上面的 func2 声明为程序块的局部变量，即表示一个私有函数，因此是不能从外部访问模块里的这个私有函数，必须通过模块里的公有函数来调用.</p>
<p>(2)require 函数</p>
<p>require 用于 引入其他的模块，类似于java中的类要引用别的类的效果。</p>
<p>用法：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">require(&quot;&lt;模块名&gt;&quot;)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">require</span> <span class="string">&quot;&lt;模块名&gt;&quot;</span></span><br></pre></td></tr></table></figure>

<p>两种都可以。</p>
<p>我们可以将上面定义的module模块引入使用,创建一个test_module.lua文件，代码如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">--</span> <span class="string">test_module.lua 文件</span></span><br><span class="line"><span class="meta">--</span> <span class="string">module 模块为上文提到到 module.lua</span></span><br><span class="line"><span class="attr">require(&quot;module&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">print(module.constant)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">module.func3()</span></span><br></pre></td></tr></table></figure>





<h2 id="OpenResty介绍"><a href="#OpenResty介绍" class="headerlink" title="OpenResty介绍"></a>OpenResty介绍</h2><p>OpenResty(又称：ngx_openresty) 是一个基于 nginx的可伸缩的 Web 平台</p>
<p>OpenResty 简单理解成 就相当于封装了nginx,并且集成了LUA脚本，开发人员只需要简单的其提供了模块就可以实现相关的逻辑，而不再像之前，还需要在nginx中自己编写lua的脚本，再进行调用了。</p>
<h3 id="安装openresty"><a href="#安装openresty" class="headerlink" title="安装openresty"></a>安装openresty</h3><p>linux安装openresty:</p>
<p>1.添加仓库执行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install yum-utils</span><br><span class="line">yum-config-manager --add-repo https://openresty.org/package/centos/openresty.repo</span><br></pre></td></tr></table></figure>

<p>2.执行安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install openresty</span><br></pre></td></tr></table></figure>

<p>3.安装成功后 会在默认的目录如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;openresty</span><br></pre></td></tr></table></figure>



<h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><p>默认已经安装好了nginx,在目录：/usr/local/openresty/nginx 下。</p>
<p>修改/usr/local/openresty/nginx/conf/nginx.conf,将配置文件使用的根设置为root,目的就是将来要使用lua脚本的时候 ，直接可以加载在root下的lua脚本。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;openresty&#x2F;nginx&#x2F;conf</span><br><span class="line">vi nginx.conf</span><br></pre></td></tr></table></figure>

<p>修改代码如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1560739975500.png" alt="1560739975500"></p>
<h3 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h3><p>重启下centos虚拟机，然后访问测试Nginx</p>
<p>访问地址：<code>http://192.168.211.132/</code></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1560740292872.png" alt="1560740292872"></p>
<h2 id="广告缓存的载入与读取"><a href="#广告缓存的载入与读取" class="headerlink" title="广告缓存的载入与读取"></a>广告缓存的载入与读取</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>需要在页面上显示广告的信息。</p>
<h3 id="Lua-Nginx配置"><a href="#Lua-Nginx配置" class="headerlink" title="Lua+Nginx配置"></a>Lua+Nginx配置</h3><p>(1)实现思路-查询数据放入redis中</p>
<p>实现思路：</p>
<p>定义请求：用于查询数据库中的数据更新到redis中。</p>
<p>a.连接mysql ，按照广告分类ID读取广告列表，转换为json字符串。</p>
<p>b.连接redis，将广告列表json字符串存入redis 。</p>
<p>定义请求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">请求：</span><br><span class="line">	&#x2F;update_content</span><br><span class="line">参数：</span><br><span class="line">	id  --指定广告分类的id</span><br><span class="line">返回值：</span><br><span class="line">	json</span><br></pre></td></tr></table></figure>

<p>请求地址：<code>&lt;http://192.168.211.132/update_content?id=1&gt;</code></p>
<p>创建/root/lua目录，在该目录下创建update_content.lua： 目的就是连接mysql  查询数据 并存储到redis中。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1560759977349.png" alt="1560759977349"></p>
<p>上图代码如下：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">ngx.header.content_type=<span class="string">&quot;application/json;charset=utf8&quot;</span></span><br><span class="line"><span class="keyword">local</span> cjson = <span class="built_in">require</span>(<span class="string">&quot;cjson&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;resty.mysql&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> uri_args = ngx.req.get_uri_args()</span><br><span class="line"><span class="keyword">local</span> id = uri_args[<span class="string">&quot;id&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> db = mysql:new()</span><br><span class="line">db:set_timeout(<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">local</span> props = &#123;</span><br><span class="line">    host = <span class="string">&quot;192.168.211.132&quot;</span>,</span><br><span class="line">    port = <span class="number">3306</span>,</span><br><span class="line">    database = <span class="string">&quot;wang_content&quot;</span>,</span><br><span class="line">    user = <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    password = <span class="string">&quot;123456&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> res = db:connect(props)</span><br><span class="line"><span class="keyword">local</span> select_sql = <span class="string">&quot;select url,pic from tb_content where status =&#x27;1&#x27; and category_id=&quot;</span>..id..<span class="string">&quot; order by sort_order&quot;</span></span><br><span class="line">res = db:query(select_sql)</span><br><span class="line">db:<span class="built_in">close</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> redis = <span class="built_in">require</span>(<span class="string">&quot;resty.redis&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> red = redis:new()</span><br><span class="line">red:set_timeout(<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> ip =<span class="string">&quot;192.168.211.132&quot;</span></span><br><span class="line"><span class="keyword">local</span> port = <span class="number">6379</span></span><br><span class="line">red:connect(ip,port)</span><br><span class="line">red:set(<span class="string">&quot;content_&quot;</span>..id,cjson.encode(res))</span><br><span class="line">red:<span class="built_in">close</span>()</span><br><span class="line"></span><br><span class="line">ngx.say(<span class="string">&quot;&#123;flag:true&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>



<p>修改/usr/local/openresty/nginx/conf/nginx.conf文件： 添加头信息，和 location信息</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1560741056485.png" alt="1560741056485"></p>
<p>代码如下：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> /update_content &#123;</span><br><span class="line">        <span class="attribute">content_by_lua_file</span> /root/lua/update_content.lua;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义lua缓存命名空间，修改nginx.conf，添加如下代码即可：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1560762051330.png" alt="1560762051330"></p>
<p>代码如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">lua_shared_dict</span> <span class="string">dis_cache 128m;</span></span><br></pre></td></tr></table></figure>



<p>请求<code>&lt;http://192.168.211.132/update_content?id=1&gt;</code>可以实现缓存的添加</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1564422636804.png" alt="1564422636804"></p>
<p>(2)实现思路-从redis中获取数据</p>
<p>实现思路：</p>
<p>定义请求，用户根据广告分类的ID 获取广告的列表。通过lua脚本直接从redis中获取数据即可。</p>
<p>定义请求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">请求:&#x2F;read_content</span><br><span class="line">参数：id</span><br><span class="line">返回值：json</span><br></pre></td></tr></table></figure>

<p>在/root/lua目录下创建read_content.lua:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--设置响应头类型</span></span><br><span class="line">ngx.header.content_type=<span class="string">&quot;application/json;charset=utf8&quot;</span></span><br><span class="line"><span class="comment">--获取请求中的参数ID</span></span><br><span class="line"><span class="keyword">local</span> uri_args = ngx.req.get_uri_args();</span><br><span class="line"><span class="keyword">local</span> id = uri_args[<span class="string">&quot;id&quot;</span>];</span><br><span class="line"><span class="comment">--引入redis库</span></span><br><span class="line"><span class="keyword">local</span> redis = <span class="built_in">require</span>(<span class="string">&quot;resty.redis&quot;</span>);</span><br><span class="line"><span class="comment">--创建redis对象</span></span><br><span class="line"><span class="keyword">local</span> red = redis:new()</span><br><span class="line"><span class="comment">--设置超时时间</span></span><br><span class="line">red:set_timeout(<span class="number">2000</span>)</span><br><span class="line"><span class="comment">--连接</span></span><br><span class="line"><span class="keyword">local</span> ok, err = red:connect(<span class="string">&quot;192.168.211.132&quot;</span>, <span class="number">6379</span>)</span><br><span class="line"><span class="comment">--获取key的值</span></span><br><span class="line"><span class="keyword">local</span> rescontent=red:get(<span class="string">&quot;content_&quot;</span>..id)</span><br><span class="line"><span class="comment">--输出到返回响应中</span></span><br><span class="line">ngx.say(rescontent)</span><br><span class="line"><span class="comment">--关闭连接</span></span><br><span class="line">red:<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure>

<p>在/usr/local/openresty/nginx/conf/nginx.conf中配置如下：</p>
<p>如图：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1560741401873.png" alt="1560741401873"></p>
<p>代码：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /read_content &#123;</span><br><span class="line">     <span class="attribute">content_by_lua_file</span> /root/lua/read_content.lua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>(3)加入openresty本地缓存</p>
<p>如上的方式没有问题，但是如果请求都到redis，redis压力也很大，所以我们一般采用多级缓存的方式来减少下游系统的服务压力。参考基本思路图的实现。</p>
<p>先查询openresty本地缓存 如果 没有</p>
<p>再查询redis中的数据，如果没有</p>
<p>再查询mysql中的数据，但凡有数据 则返回即可。</p>
<p>修改read_content.lua文件，代码如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1560760965394.png" alt="1560760965394"></p>
<p>上图代码如下：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">ngx.header.content_type=<span class="string">&quot;application/json;charset=utf8&quot;</span></span><br><span class="line"><span class="keyword">local</span> uri_args = ngx.req.get_uri_args();</span><br><span class="line"><span class="keyword">local</span> id = uri_args[<span class="string">&quot;id&quot;</span>];</span><br><span class="line"><span class="comment">--获取本地缓存</span></span><br><span class="line"><span class="keyword">local</span> cache_ngx = ngx.shared.dis_cache;</span><br><span class="line"><span class="comment">--根据ID 获取本地缓存数据</span></span><br><span class="line"><span class="keyword">local</span> contentCache = cache_ngx:get(<span class="string">&#x27;content_cache_&#x27;</span>..id);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> contentCache == <span class="string">&quot;&quot;</span> <span class="keyword">or</span> contentCache == <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">local</span> redis = <span class="built_in">require</span>(<span class="string">&quot;resty.redis&quot;</span>);</span><br><span class="line">    <span class="keyword">local</span> red = redis:new()</span><br><span class="line">    red:set_timeout(<span class="number">2000</span>)</span><br><span class="line">    red:connect(<span class="string">&quot;192.168.211.132&quot;</span>, <span class="number">6379</span>)</span><br><span class="line">    <span class="keyword">local</span> rescontent=red:get(<span class="string">&quot;content_&quot;</span>..id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ngx.null == rescontent <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">local</span> cjson = <span class="built_in">require</span>(<span class="string">&quot;cjson&quot;</span>);</span><br><span class="line">        <span class="keyword">local</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;resty.mysql&quot;</span>);</span><br><span class="line">        <span class="keyword">local</span> db = mysql:new();</span><br><span class="line">        db:set_timeout(<span class="number">2000</span>)</span><br><span class="line">        <span class="keyword">local</span> props = &#123;</span><br><span class="line">            host = <span class="string">&quot;192.168.211.132&quot;</span>,</span><br><span class="line">            port = <span class="number">3306</span>,</span><br><span class="line">            database = <span class="string">&quot;wang_content&quot;</span>,</span><br><span class="line">            user = <span class="string">&quot;root&quot;</span>,</span><br><span class="line">            password = <span class="string">&quot;123456&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">local</span> res = db:connect(props);</span><br><span class="line">        <span class="keyword">local</span> select_sql = <span class="string">&quot;select url,pic from tb_content where status =&#x27;1&#x27; and category_id=&quot;</span>..id..<span class="string">&quot; order by sort_order&quot;</span>;</span><br><span class="line">        res = db:query(select_sql);</span><br><span class="line">        <span class="keyword">local</span> responsejson = cjson.encode(res);</span><br><span class="line">        red:set(<span class="string">&quot;content_&quot;</span>..id,responsejson);</span><br><span class="line">        ngx.say(responsejson);</span><br><span class="line">        db:<span class="built_in">close</span>()</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cache_ngx:set(<span class="string">&#x27;content_cache_&#x27;</span>..id, rescontent, <span class="number">10</span>*<span class="number">60</span>);</span><br><span class="line">        ngx.say(rescontent)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    red:<span class="built_in">close</span>()</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    ngx.say(contentCache)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>



<p>测试地址：<code>http://192.168.211.132/update_content?id=1</code></p>
<p>此时会将分类ID=1的所有广告查询出来，并存入到Redis缓存。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1560761133343.png" alt="1560761133343"></p>
<p>测试地址：<code>http://192.168.211.132/read_content?id=1</code></p>
<p>此时会获取分类ID=1的所有广告信息。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1560761192634.png" alt="1560761192634"></p>
<h2 id="nginx限流"><a href="#nginx限流" class="headerlink" title="nginx限流"></a>nginx限流</h2><p>一般情况下，首页的并发量是比较大的，即使 有了多级缓存，当用户不停的刷新页面的时候，也是没有必要的，另外如果有恶意的请求 大量达到，也会对系统造成影响。</p>
<p>而限流就是保护措施之一。</p>
<h3 id="nginx的限流"><a href="#nginx的限流" class="headerlink" title="nginx的限流"></a>nginx的限流</h3><p>nginx提供两种限流的方式：</p>
<ul>
<li><p>一是控制速率</p>
</li>
<li><p>二是控制并发连接数</p>
</li>
</ul>
<h4 id="控制速率"><a href="#控制速率" class="headerlink" title="控制速率"></a>控制速率</h4><p>控制速率的方式之一就是采用漏桶算法。</p>
<p>(1)漏桶算法实现控制速率限流</p>
<p>漏桶(Leaky Bucket)算法思路很简单,水(请求)先进入到漏桶里,漏桶以一定的速度出水(接口有响应速率),当水流入速度过大会直接溢出(访问频率超过接口响应速率),然后就拒绝请求,可以看出漏桶算法能强行限制数据的传输速率.示意图如下:</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1560774438337.png" alt="1560774438337"></p>
<p>(2)nginx的配置</p>
<p>配置示意图如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1560775302161.png" alt="1560775302161"></p>
<p>修改/usr/local/openresty/nginx/conf/nginx.conf:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">user</span>  root root;</span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#cache</span></span><br><span class="line">    <span class="attribute">lua_shared_dict</span> dis_cache <span class="number">128m</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#限流设置</span></span><br><span class="line">    <span class="attribute">limit_req_zone</span> $binary_remote_addr zone=contentRateLimit:<span class="number">10m</span> rate=2r/s;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> /update_content &#123;</span><br><span class="line">            <span class="attribute">content_by_lua_file</span> /root/lua/update_content.lua;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> /read_content &#123;</span><br><span class="line">            <span class="comment">#使用限流配置</span></span><br><span class="line">            <span class="attribute">limit_req</span> zone=contentRateLimit;</span><br><span class="line">            <span class="attribute">content_by_lua_file</span> /root/lua/read_content.lua;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置说明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">binary_remote_addr 是一种key，表示基于 remote_addr(客户端IP) 来做限流，binary_ 的目的是压缩内存占用量。</span><br><span class="line">zone：定义共享内存区来存储访问信息， contentRateLimit:10m 表示一个大小为10M，名字为contentRateLimit的内存区域。1M能存储16000 IP地址的访问信息，10M可以存储16W IP地址访问信息。</span><br><span class="line">rate 用于设置最大访问速率，rate&#x3D;10r&#x2F;s 表示每秒最多处理10个请求。Nginx 实际上以毫秒为粒度来跟踪请求信息，因此 10r&#x2F;s 实际上是限制：每100毫秒处理一个请求。这意味着，自上一个请求处理完后，若后续100毫秒内又有请求到达，将拒绝处理该请求.我们这里设置成2 方便测试。</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<p>重新加载配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">/usr/local/openresty/nginx/sbin</span></span><br><span class="line"></span><br><span class="line"><span class="meta">./nginx</span> <span class="string">-s reload</span></span><br></pre></td></tr></table></figure>

<p>访问页面：<code>http://192.168.211.132/read_content?id=1</code> ,连续刷新会直接报错。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1560775527156.png" alt="1560775527156"></p>
<p>(3)处理突发流量</p>
<p>上面例子限制 2r/s，如果有时正常流量突然增大，超出的请求将被拒绝，无法处理突发流量，可以结合 <strong>burst</strong> 参数使用来解决该问题。</p>
<p>例如，如下配置表示：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1560775792418.png" alt="1560775792418"></p>
<p>上图代码如下：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    <span class="attribute">location</span> /update_content &#123;</span><br><span class="line">        <span class="attribute">content_by_lua_file</span> /root/lua/update_content.lua;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> /read_content &#123;</span><br><span class="line">        <span class="attribute">limit_req</span> zone=contentRateLimit burst=<span class="number">4</span>;</span><br><span class="line">        <span class="attribute">content_by_lua_file</span> /root/lua/read_content.lua;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>burst 译为突发、爆发，表示在超过设定的处理速率后能额外处理的请求数,当 rate=10r/s 时，将1s拆成10份，即每100ms可处理1个请求。</p>
<p>此处，**burst=4 **，若同时有4个请求到达，Nginx 会处理第一个请求，剩余3个请求将放入队列，然后每隔500ms从队列中获取一个请求进行处理。若请求数大于4，将拒绝处理多余的请求，直接返回503.</p>
<p>不过，单独使用 burst 参数并不实用。假设 burst=50 ，rate依然为10r/s，排队中的50个请求虽然每100ms会处理一个，但第50个请求却需要等待 50 * 100ms即 5s，这么长的处理时间自然难以接受。</p>
<p>因此，burst 往往结合 nodelay 一起使用。</p>
<p>例如：如下配置：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    <span class="attribute">location</span> /update_content &#123;</span><br><span class="line">        <span class="attribute">content_by_lua_file</span> /root/lua/update_content.lua;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> /read_content &#123;</span><br><span class="line">        <span class="attribute">limit_req</span> zone=contentRateLimit burst=<span class="number">4</span> nodelay;</span><br><span class="line">        <span class="attribute">content_by_lua_file</span> /root/lua/read_content.lua;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上表示：</p>
<p>平均每秒允许不超过2个请求，突发不超过4个请求，并且处理突发4个请求的时候，没有延迟，等到完成之后，按照正常的速率处理。</p>
<p>如上两种配置结合就达到了速率稳定，但突然流量也能正常处理的效果。完整配置代码如下：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">user</span>  root root;</span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#cache</span></span><br><span class="line">    <span class="attribute">lua_shared_dict</span> dis_cache <span class="number">128m</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#限流设置</span></span><br><span class="line">    <span class="attribute">limit_req_zone</span> $binary_remote_addr zone=contentRateLimit:<span class="number">10m</span> rate=2r/s;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> /update_content &#123;</span><br><span class="line">            <span class="attribute">content_by_lua_file</span> /root/lua/update_content.lua;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> /read_content &#123;</span><br><span class="line">            <span class="attribute">limit_req</span> zone=contentRateLimit burst=<span class="number">4</span> nodelay;</span><br><span class="line">            <span class="attribute">content_by_lua_file</span> /root/lua/read_content.lua;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>测试：如下图 在1秒钟之内可以刷新4次，正常处理。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1560776119165.png" alt="1560776119165"></p>
<p>但是超过之后，连续刷新5次，抛出异常。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1560776155042.png" alt="1560776155042"></p>
<h4 id="控制并发量（连接数）"><a href="#控制并发量（连接数）" class="headerlink" title="控制并发量（连接数）"></a>控制并发量（连接数）</h4><p>ngx_http_limit_conn_module  提供了限制连接数的能力。主要是利用limit_conn_zone和limit_conn两个指令。</p>
<p>利用连接数限制 某一个用户的ip连接的数量来控制流量。</p>
<p>注意：并非所有连接都被计算在内 只有当服务器正在处理请求并且已经读取了整个请求头时，才会计算有效连接。此处忽略测试。</p>
<p>配置语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Syntax:	limit_conn zone number;</span><br><span class="line">Default: —;</span><br><span class="line">Context: http, server, location;</span><br></pre></td></tr></table></figure>



<p>(1)配置限制固定连接数</p>
<p>如下，配置如下： </p>
<p><img data-src="images/1608961342987.png" alt="1608961342987"></p>
<p>goods微服务BrandController中添加如下代码：进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">testConne</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>,StatusCode.OK,<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>上图配置如下：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment"># 设置nginx缓存 空间 为128M 缓存对象名称为dis_cache</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">lua_shared_dict</span> dis_cache <span class="number">128m</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">limit_req_zone</span> $binary_remote_addr zone=contentRateLimit:<span class="number">10m</span> rate=1r/s;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">limit_conn_zone</span> $binary_remote_addr zone=addr:<span class="number">10m</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">       <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">       <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">       <span class="comment"># nginx接收请求 （content_by_lua_file 指定lua脚本）转发给lua脚本来处理</span></span><br><span class="line">       <span class="comment"># content_by_lua_file 指定的lua脚本就是要处理该请求的业务逻辑的文件</span></span><br><span class="line">       <span class="attribute">location</span> /update_content&#123;</span><br><span class="line">            <span class="attribute">content_by_lua_file</span> /root/lua/update_content.lua;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment"># 处理 多级缓存获取广告数据</span></span><br><span class="line">       <span class="attribute">location</span> /read_content&#123;</span><br><span class="line">	    <span class="attribute">limit_req</span> zone=contentRateLimit burst=<span class="number">4</span> nodelay;</span><br><span class="line">            <span class="attribute">content_by_lua_file</span> /root/lua/read_content.lua;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="attribute">location</span> /brand/test&#123;</span><br><span class="line">	    <span class="comment">#/brand/test的请求，访问本地service-goods微服务</span></span><br><span class="line">	    <span class="comment"># 2 表示同一个ip地址 只能最多有效的链接数量为2</span></span><br><span class="line">            <span class="attribute">limit_conn</span> addr <span class="number">2</span>;</span><br><span class="line">	    <span class="attribute">proxy_pass</span> http://192.168.211.1:18081;</span><br><span class="line">       &#125;</span><br><span class="line">          </span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>表示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">limit_conn_zone $binary_remote_addr zone&#x3D;addr:10m;  表示限制根据用户的IP地址来显示，设置存储地址为的内存大小10M</span><br><span class="line"></span><br><span class="line">limit_conn addr 2;   表示 同一个地址只允许连接2次。</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<p>此时开3个线程，测试的时候会发生异常，开2个就不会有异常</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1560779033144.png" alt="1560779033144"></p>
<p>(2)限制每个客户端IP与服务器的连接数，同时限制与虚拟服务器的连接总数。(了解)</p>
<p>如下配置： </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">limit_conn_zone</span> $binary_remote_addr zone=perip:<span class="number">10m</span>;</span><br><span class="line"><span class="attribute">limit_conn_zone</span> $server_name zone=perserver:<span class="number">10m</span>; </span><br><span class="line"><span class="section">server</span> &#123;  </span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">limit_conn</span> perip <span class="number">10</span>;<span class="comment">#单个客户端ip与服务器的连接数．</span></span><br><span class="line">        limit_conn perserver 100; ＃限制与服务器的总连接数</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="canal同步广告"><a href="#canal同步广告" class="headerlink" title="canal同步广告"></a>canal同步广告</h2><p>canal可以用来监控数据库数据的变化，从而获得新增数据，或者修改的数据。</p>
<p>canal是应阿里巴巴存在杭州和美国的双机房部署，存在跨机房同步的业务需求而提出的。</p>
<p>阿里系公司开始逐步的尝试基于数据库的日志解析，获取增量变更进行同步，由此衍生出了增量订阅&amp;消费的业务。</p>
<h3 id="Canal工作原理"><a href="#Canal工作原理" class="headerlink" title="Canal工作原理"></a>Canal工作原理</h3><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1560813843260.png" alt="1560813843260"></p>
<p>原理相对比较简单：</p>
<ol>
<li>canal模拟mysql slave的交互协议，伪装自己为mysql slave，向mysql master发送dump协议</li>
<li>mysql master收到dump请求，开始推送binary log给slave(也就是canal)</li>
<li>canal解析binary log对象(原始为byte流)</li>
</ol>
<p>canal需要使用到mysql，我们需要先安装mysql，但canal是基于mysql的主从模式实现的，所以必须先开启binlog.</p>
<h3 id="开启binlog模式"><a href="#开启binlog模式" class="headerlink" title="开启binlog模式"></a>开启binlog模式</h3><p>先使用docker 创建mysql容器</p>
<p>(1) 连接到mysql中,并修改/etc/mysql/mysql.conf.d/mysqld.cnf  需要开启主 从模式，开启binlog模式。</p>
<p>执行如下命令，编辑mysql配置文件</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1560814415655.png" alt="1560814415655"></p>
<p>命令行如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">exec -it mysql /bin/bash</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">/etc/mysql/mysql.conf.d</span></span><br><span class="line"><span class="attr">vi</span> <span class="string">mysqld.cnf</span></span><br></pre></td></tr></table></figure>



<p>修改mysqld.cnf配置文件，添加如下配置：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1560814236901.png" alt="1560814236901"></p>
<p>上图配置如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log-bin</span>=<span class="string">/var/lib/mysql/mysql-bin</span></span><br><span class="line"><span class="meta">server-id</span>=<span class="string">12345</span></span><br></pre></td></tr></table></figure>



<p>(2) 创建账号 用于测试使用,</p>
<p>使用root账号创建用户并授予权限</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">create</span> <span class="string">user canal@&#x27;%&#x27; IDENTIFIED by &#x27;canal&#x27;;</span></span><br><span class="line"><span class="attr">GRANT</span> <span class="string">SELECT, REPLICATION SLAVE, REPLICATION CLIENT,SUPER ON *.* TO &#x27;canal&#x27;@&#x27;%&#x27;;</span></span><br><span class="line"><span class="attr">FLUSH</span> <span class="string">PRIVILEGES;</span></span><br></pre></td></tr></table></figure>



<p>(3)重启mysql容器</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">restart mysql</span></span><br></pre></td></tr></table></figure>





<h3 id="canal容器安装"><a href="#canal容器安装" class="headerlink" title="canal容器安装"></a>canal容器安装</h3><p>下载镜像：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">pull docker.io/canal/canal-server</span></span><br></pre></td></tr></table></figure>

<p>容器安装</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run -p 11111:11111 --name canal -d docker.io/canal/canal-server</span></span><br></pre></td></tr></table></figure>

<p>进入容器,修改核心配置canal.properties 和instance.properties，canal.properties 是canal自身的配置，instance.properties是需要同步数据的数据库连接配置。</p>
<p>执行代码如下:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">exec -it canal /bin/bash</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">canal-server/conf/</span></span><br><span class="line"><span class="attr">vi</span> <span class="string">canal.properties</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">example/</span></span><br><span class="line"><span class="attr">vi</span> <span class="string">instance.properties</span></span><br></pre></td></tr></table></figure>

<p>修改canal.properties的id，不能和mysql的server-id重复，如下图：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1560814792482.png" alt="1560814792482"></p>
<p>修改instance.properties,配置数据库连接地址:</p>
<p> <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1597302724010.png" alt="1597302724010"></p>
<p>这里的<code>canal.instance.filter.regex</code>有多种配置，如下：</p>
<p>可以参考地址如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;alibaba&#x2F;canal&#x2F;wiki&#x2F;AdminGuide</span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">mysql</span> <span class="string">数据解析关注的表，Perl正则表达式.</span></span><br><span class="line"><span class="meta">多个正则之间以逗号(,)分隔，转义符需要双斜杠(\\)</span> <span class="string"></span></span><br><span class="line"><span class="attr">常见例子：</span></span><br><span class="line"><span class="meta">1.</span>  <span class="string">所有表：.*   or  .*\\..*</span></span><br><span class="line"><span class="meta">2.</span>  <span class="string">canal schema下所有表： canal\\..*</span></span><br><span class="line"><span class="meta">3.</span>  <span class="string">canal下的以canal打头的表：canal\\.canal.*</span></span><br><span class="line"><span class="meta">4.</span>  <span class="string">canal schema下的一张表：canal.test1</span></span><br><span class="line"><span class="meta">5.</span>  <span class="string">多个规则组合使用：canal\\..*,mysql.test1,mysql.test2 (逗号分隔)</span></span><br><span class="line"><span class="meta">注意：此过滤条件只针对row模式的数据有效(ps.</span> <span class="string">mixed/statement因为不解析sql，所以无法准确提取tableName进行过滤)</span></span><br></pre></td></tr></table></figure>

<p>配置完成后，设置开机启动，并记得重启canal。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">update --restart=always canal</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">restart canal</span></span><br></pre></td></tr></table></figure>



<h3 id="canal微服务搭建"><a href="#canal微服务搭建" class="headerlink" title="canal微服务搭建"></a>canal微服务搭建</h3><p> 当用户执行 数据库的操作的时候，binlog 日志会被canal捕获到，并解析出数据。我们就可以将解析出来的数据进行同步到redis中即可。</p>
<p>思路：创建一个独立的程序，并监控canal服务器，获取binlog日志，解析数据，将数据更新到redis中。这样广告的数据就更新了。</p>
<p>(1)安装辅助jar包</p>
<p>在<code>canal\spring-boot-starter-canal-master</code>中有一个工程<code>starter-canal</code>，它主要提供了SpringBoot环境下<code>canal</code>的支持，我们需要先安装该工程，在<code>starter-canal</code>目录下执行<code>mvn install</code>，如下图：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1560815769342.png" alt="1560815769342"></p>
<p>(2)canal微服务工程搭建</p>
<p>在wang-service下创建wang-service-canal工程，并引入相关配置。</p>
<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wang-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wang-service-canal<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--canal依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xpand<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>starter-canal<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>application.yml配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">port</span>: <span class="string">18083</span></span><br><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">application</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">canal</span></span><br><span class="line"><span class="attr">eureka</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">client</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">service-url</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">defaultZone</span>: <span class="string">http://127.0.0.1:7001/eureka</span></span><br><span class="line">  <span class="attr">instance</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">prefer-ip-address</span>: <span class="string">true</span></span><br><span class="line"><span class="attr">feign</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">hystrix</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">enabled</span>: <span class="string">true</span></span><br><span class="line"><span class="attr">ribbon</span>:<span class="string"></span></span><br><span class="line">  <span class="meta">eager-load</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">enabled</span>: <span class="string">true</span></span><br><span class="line">  <span class="attr">ReadTimeout</span>: <span class="string">100000     </span></span><br><span class="line"><span class="comment">#canal配置</span></span><br><span class="line"><span class="attr">canal</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">client</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">instances</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">example</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">host</span>: <span class="string">192.168.211.132</span></span><br><span class="line">        <span class="attr">port</span>: <span class="string">11111</span></span><br></pre></td></tr></table></figure>

<p>解释：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ribbon:</span><br><span class="line">  eager-load:</span><br><span class="line">    enabled: true # 开启饥饿加载</span><br><span class="line">  ReadTimeout: 100000  #设置超时时间</span><br></pre></td></tr></table></figure>



<p>(3)监听创建</p>
<p>创建一个CanalDataEventListener类，实现对表增删改操作的监听，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.canal.listener;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.protocol.CanalEntry;</span><br><span class="line"><span class="keyword">import</span> com.xpand.starter.canal.annotation.*;</span><br><span class="line"><span class="meta">@CanalEventListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CanalDataEventListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 增加数据监听</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> eventType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rowData</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@InsertListenPoint</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventInsert</span><span class="params">(CanalEntry.EventType eventType, CanalEntry.RowData rowData)</span> </span>&#123;</span><br><span class="line">        rowData.getAfterColumnsList().forEach((c) -&gt; System.out.println(<span class="string">&quot;By--Annotation: &quot;</span> + c.getName() + <span class="string">&quot; ::   &quot;</span> + c.getValue()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 修改数据监听</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rowData</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@UpdateListenPoint</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventUpdate</span><span class="params">(CanalEntry.RowData rowData)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UpdateListenPoint&quot;</span>);</span><br><span class="line">        rowData.getAfterColumnsList().forEach((c) -&gt; System.out.println(<span class="string">&quot;By--Annotation: &quot;</span> + c.getName() + <span class="string">&quot; ::   &quot;</span> + c.getValue()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 删除数据监听</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> eventType</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteListenPoint</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventDelete</span><span class="params">(CanalEntry.EventType eventType)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DeleteListenPoint&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 自定义数据修改监听</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> eventType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rowData</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ListenPoint(destination = &quot;example&quot;, schema = &quot;wang_content&quot;, table = &#123;&quot;tb_content_category&quot;, &quot;tb_content&quot;&#125;, eventType = CanalEntry.EventType.UPDATE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventCustomUpdate</span><span class="params">(CanalEntry.EventType eventType, CanalEntry.RowData rowData)</span> </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;DeleteListenPoint&quot;</span>);</span><br><span class="line">        rowData.getAfterColumnsList().forEach((c) -&gt; System.out.println(<span class="string">&quot;By--Annotation: &quot;</span> + c.getName() + <span class="string">&quot; ::   &quot;</span> + c.getValue()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>(4)启动类创建</p>
<p>创建启动类，代码如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(exclude</span>=<span class="string">&#123;DataSourceAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="attr">@EnableEurekaClient</span></span><br><span class="line"><span class="attr">@EnableCanalClient</span></span><br><span class="line"><span class="attr">public</span> <span class="string">class CanalApplication &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">public</span> <span class="string">static void main(String[] args) &#123;</span></span><br><span class="line">        <span class="attr">SpringApplication.run(CanalApplication.class,args);</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>



<p>(5)测试</p>
<p>启动canal微服务，然后修改任意数据库的表数据，canal微服务后台输出如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/lua/images/1560816240753.png" alt="1560816240753"></p>
]]></content>
      <categories>
        <category>Java扩展</category>
      </categories>
      <tags>
        <tag>Java扩展</tag>
        <tag>lua</tag>
        <tag>canal</tag>
        <tag>OpenResty</tag>
      </tags>
  </entry>
  <entry>
    <title>Java重要框架04--静态页面生成框架Thymeleaf</title>
    <url>/jwangcloud/2482136458/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Thymeleaf介绍"><a href="#Thymeleaf介绍" class="headerlink" title="Thymeleaf介绍"></a>Thymeleaf介绍</h2><p>它的特点便是：开箱即用，Thymeleaf允许您处理六种模板，每种模板称为模板模式：</p>
<span id="more"></span>

<ul>
<li>XML</li>
<li>有效的XML</li>
<li>XHTML</li>
<li>有效的XHTML</li>
<li>HTML5</li>
<li>旧版HTML5</li>
</ul>
<p>所有这些模式都指的是格式良好的XML文件，但<em>Legacy HTML5</em>模式除外，它允许您处理HTML5文件，其中包含独立（非关闭）标记，没有值的标记属性或不在引号之间写入的标记属性。为了在这种特定模式下处理文件，Thymeleaf将首先执行转换，将您的文件转换为格式良好的XML文件，这些文件仍然是完全有效的HTML5（实际上是创建HTML5代码的推荐方法）<a href="https://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html#fn1">1</a>。</p>
<p>另请注意，验证仅适用于XML和XHTML模板。</p>
<p>然而，这些并不是Thymeleaf可以处理的唯一模板类型，并且用户始终能够通过指定在此模式下<em>解析</em>模板的方法和<em>编写</em>结果的方式来定义他/她自己的模式。这样，任何可以建模为DOM树（无论是否为XML）的东西都可以被Thymeleaf有效地作为模板处理。</p>
<h2 id="Springboot整合thymeleaf"><a href="#Springboot整合thymeleaf" class="headerlink" title="Springboot整合thymeleaf"></a>Springboot整合thymeleaf</h2><p>使用springboot 来集成使用Thymeleaf可以大大减少单纯使用thymleaf的代码量，所以我们接下来使用springboot集成使用thymeleaf.</p>
<p>实现的步骤为：</p>
<ul>
<li>创建一个sprinboot项目</li>
<li>添加thymeleaf的起步依赖</li>
<li>添加spring web的起步依赖</li>
<li>编写html 使用thymleaf的语法获取变量对应后台传递的值</li>
<li>编写controller 设置变量的值到model中</li>
</ul>
<p>(1)创建工程</p>
<p>创建一个独立的工程springboot-thymeleaf,该工程为案例工程，不需要放到jwang-parent工程中。</p>
<p><strong>pom.xml依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jwang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--thymeleaf配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>(2)创建html</p>
<p>在resources中创建templates目录，在templates目录创建 demo1.html,代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Thymeleaf的入门<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--输出hello数据--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;hello&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解释：<code>&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</code>:这句声明使用thymeleaf标签</p>
<p><code>&lt;p th:text=&quot;$&#123;hello&#125;&quot;&gt;&lt;/p&gt;</code>:这句使用 <code>th:text=&quot;$&#123;变量名&#125;&quot;</code> 表示 使用thymeleaf获取文本数据，类似于EL表达式。</p>
<p>(3)修改application.yml配置</p>
<p>创建application.yml,并设置thymeleaf的缓存设置，设置为false。默认加缓存的，用于测试。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>在这里，其实还有一些默认配置，比如视图前缀：classpath:/templates/,视图后缀：.html</p>
<p><code>org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties</code>部分源码如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/staticpage/images/1564779051830.png" alt="1564779051830"></p>
<p>(4)控制层</p>
<p>创建controller用于测试后台 设置数据到model中。</p>
<p>创建com.jwang.controller.TestController，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 访问/test/hello  跳转到demo1页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;hello welcome&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;demo1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>(5)测试</p>
<p>创建启动类<code>com.jwang.ThymeleafApplication</code>，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ThymeleafApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>启动系统，并在浏览器访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;test&#x2F;hello</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/staticpage/images/1560936996326.png" alt="1560936996326"></p>
<h2 id="Thymeleaf基本语法"><a href="#Thymeleaf基本语法" class="headerlink" title="Thymeleaf基本语法"></a>Thymeleaf基本语法</h2><p>(1)th:href 后台代码</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">model.addAttribute(&quot;key1&quot;,&quot;value1&quot;);</span></span><br><span class="line"><span class="attr">model.addAttribute(&quot;url&quot;,&quot;/test/hello&quot;);</span></span><br></pre></td></tr></table></figure>

<p>html:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;$&#123;url&#125;(key1=$&#123;key1&#125;,key2=$&#123;key1&#125;)&#125;&quot;</span>&gt;</span>去网站首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>(2)th:each 遍历，功能类似jstl中的<code>&lt;c:forEach&gt;</code>标签。 </p>
<p>创建com.jwang.model.User,代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">//..get..set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>Controller添加数据,List输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 访问/test/hello  跳转到demo1页面</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;hello welcome&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//集合数据</span></span><br><span class="line">    List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">    users.add(<span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;深圳&quot;</span>));</span><br><span class="line">    users.add(<span class="keyword">new</span> User(<span class="number">2</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;北京&quot;</span>));</span><br><span class="line">    users.add(<span class="keyword">new</span> User(<span class="number">3</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;武汉&quot;</span>));</span><br><span class="line">    model.addAttribute(<span class="string">&quot;users&quot;</span>,users);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;demo1&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>页面输出</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>id<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>地址<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>下标<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;abc,mystat:$&#123;users&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;abc.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;abc.name&#125;&quot;</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;abc.address&#125;&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;mystat.index+1&#125;&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>测试效果</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/staticpage/images/1560941932553.png" alt="1560941932553"></p>
<p>(3)Map输出 后台添加Map</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Map定义</span></span><br><span class="line">Map&lt;String,Object&gt; dataMap = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">dataMap.put(<span class="string">&quot;No&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">dataMap.put(<span class="string">&quot;address&quot;</span>,<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">model.addAttribute(<span class="string">&quot;dataMap&quot;</span>,dataMap);</span><br></pre></td></tr></table></figure>



<p>页面输出</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">&quot;map,mapStat:$&#123;dataMap&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;map&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    key:<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;mapStat.current.key&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    value:<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;mapStat.current.value&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">&quot;entry:$&#123;dataMap&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;entry&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    key:<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;entry.key&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    value:<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;entry.value&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试效果</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/staticpage/images/1560942024009.png" alt="1560942024009"></p>
<p>(4)数组输出 后台添加数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存储一个数组</span></span><br><span class="line">String[] names = &#123;<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>&#125;;</span><br><span class="line">model.addAttribute(<span class="string">&quot;names&quot;</span>,names);</span><br></pre></td></tr></table></figure>

<p>页面输出</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">&quot;nm,nmStat:$&#123;names&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;nmStat.count&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;nm&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    ==============================================</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>测试效果</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/staticpage/images/1560942589016.png" alt="1560942589016"></p>
<p>(5)Date输出</p>
<p>后台添加日期</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//日期</span></span><br><span class="line">model.addAttribute(<span class="string">&quot;now&quot;</span>,<span class="keyword">new</span> Date());</span><br></pre></td></tr></table></figure>

<p>页面输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;span th:text&#x3D;&quot;$&#123;#dates.format(now,&#39;yyyy-MM-dd hh:ss:mm&#39;)&#125;&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>



<p>测试效果</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/staticpage/images/1560942631925.png" alt="1560942631925"></p>
<p>(6)th:if条件  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//if条件</span></span><br><span class="line">model.addAttribute(<span class="string">&quot;age&quot;</span>,<span class="number">22</span>);</span><br></pre></td></tr></table></figure>

<p>页面输出</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;(age&gt;=18)&#125;&quot;</span>&gt;</span>终于长大了！<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>测试效果</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/staticpage/images/1560942782470.png" alt="1560942782470"></p>
<p>(7)使用javascript</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/staticpage/images/1566877170657.png" alt="1566877170657"></p>
<p>java代码为:</p>
<p> <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/staticpage/images/1566877199124.png" alt="1566877199124"></p>
<p>(8) 字符拼接 使用||</p>
<p>后台代码:</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/staticpage/images/1566877232470.png" alt="1566877232470"></p>
<p>模板:</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/staticpage/images/1566877255084.png" alt="1566877255084"></p>
<h2 id="canal监听生成静态页"><a href="#canal监听生成静态页" class="headerlink" title="canal监听生成静态页"></a>canal监听生成静态页</h2><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/staticpage/images/1605747848263.png" alt="1605747848263"></p>
<p>如上图详情页的解决方案. 监听到数据的变化,直接调用feign 生成静态页即可.</p>
<h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>当商品微服务审核商品之后，应当发送消息，这里采用了Canal监控数据变化，数据变化后，调用feign实现生成静态页</p>
<h3 id="Feign创建"><a href="#Feign创建" class="headerlink" title="Feign创建"></a>Feign创建</h3><p>在jwang-service-api中创建jwang-web-item-api，该工程中主要创建jwang-web-item的对外依赖抽取信息。</p>
<p>(1)Feign创建</p>
<p>在jwang-web-item-api中创建com.jwang.item.feign.PageFeign,代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(name=&quot;item&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PageFeign</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 根据SpuID生成静态页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/createHtml/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">Result <span class="title">createHtml</span><span class="params">(<span class="meta">@PathVariable(name=&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>(2)pom.xml依赖</p>
<p>修改jwang-service-canal工程的pom.xml，引入如下依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--静态页API 服务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jwang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jwang-web-item-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>(3)修改jwang-service-canal工程中的启动类</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/staticpage/images/1566737648843.png" alt="1566737648843"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableCanalClient</span> <span class="comment">// 启用canal</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &#123;&quot;com.jwang.content.feign&quot;,&quot;com.jwang.item.feign&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CanalApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(CanalApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="canal监听数据变化"><a href="#canal监听数据变化" class="headerlink" title="canal监听数据变化"></a>canal监听数据变化</h3><p>监听类中,监听商品数据库的tb_spu的数据变化,当数据变化的时候生成静态页或者删除静态页</p>
<p>在原来的监听类中添加如下代码即可,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> PageFeign pageFeign;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ListenPoint(destination = &quot;example&quot;,</span></span><br><span class="line"><span class="meta">        schema = &quot;jwang_goods&quot;,</span></span><br><span class="line"><span class="meta">        table = &#123;&quot;tb_spu&quot;&#125;,</span></span><br><span class="line"><span class="meta">        eventType = &#123;CanalEntry.EventType.UPDATE, CanalEntry.EventType.INSERT, CanalEntry.EventType.DELETE&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventCustomSpu</span><span class="params">(CanalEntry.EventType eventType, CanalEntry.RowData rowData)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断操作类型</span></span><br><span class="line">    <span class="keyword">if</span> (eventType == CanalEntry.EventType.DELETE) &#123;</span><br><span class="line">        String spuId = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        List&lt;CanalEntry.Column&gt; beforeColumnsList = rowData.getBeforeColumnsList();</span><br><span class="line">        <span class="keyword">for</span> (CanalEntry.Column column : beforeColumnsList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (column.getName().equals(<span class="string">&quot;id&quot;</span>)) &#123;</span><br><span class="line">                spuId = column.getValue();<span class="comment">//spuid</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//todo 删除静态页</span></span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//新增 或者 更新</span></span><br><span class="line">        List&lt;CanalEntry.Column&gt; afterColumnsList = rowData.getAfterColumnsList();</span><br><span class="line">        String spuId = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (CanalEntry.Column column : afterColumnsList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (column.getName().equals(<span class="string">&quot;id&quot;</span>)) &#123;</span><br><span class="line">                spuId = column.getValue();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更新 生成静态页</span></span><br><span class="line">        pageFeign.createHtml(Long.valueOf(spuId));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>整体的页面代码如下图所示已经实现：</p>
<p> <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/staticpage/images/1609257105710.png" alt="1609257105710"></p>
]]></content>
      <categories>
        <category>Java框架</category>
      </categories>
      <tags>
        <tag>Java框架</tag>
        <tag>Thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title>Java重要框架03--文件、图片服务器框架</title>
    <url>/jwangcloud/3058054830/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="FastDFS"><a href="#FastDFS" class="headerlink" title="FastDFS"></a>FastDFS</h2><span id="more"></span>

<h3 id="FastDFS简介"><a href="#FastDFS简介" class="headerlink" title="FastDFS简介"></a>FastDFS简介</h3><h4 id="FastDFS体系结构"><a href="#FastDFS体系结构" class="headerlink" title="FastDFS体系结构"></a>FastDFS体系结构</h4><p>FastDFS是一个开源的轻量级<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/1250388">分布式文件系统</a>，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。</p>
<p>FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p>
<p>FastDFS 架构包括 Tracker server 和 Storage server。客户端请求 Tracker server 进行文件上传、下载，通过Tracker server 调度最终由 Storage server 完成文件上传和下载。</p>
<p>Tracker server 作用是负载均衡和调度，通过 Tracker server 在文件上传时可以根据一些策略找到Storage server 提供文件上传服务。可以将 tracker 称为追踪服务器或调度服务器。Storage server 作用是文件存储，客户端上传的文件最终存储在 Storage 服务器上，Storageserver 没有实现自己的文件系统而是利用操作系统的文件系统来管理文件。可以将storage称为存储服务器。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/Java/fastDFS/image/1559117928459.png" alt="1559117928459"></p>
<h4 id="上传流程"><a href="#上传流程" class="headerlink" title="上传流程"></a>上传流程</h4><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/Java/fastDFS/image/1559117994668.png" alt="1559117994668"></p>
<p>客户端上传文件后存储服务器将文件 ID 返回给客户端，此文件 ID 用于以后访问该文件的索引信息。文件索引信息包括：组名，虚拟磁盘路径，数据两级目录，文件名。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/Java/fastDFS/image/1559118013272.png" alt="1559118013272"></p>
<p><strong>组名</strong>：文件上传后所在的 storage 组名称，在文件上传成功后有storage 服务器返回，需要客户端自行保存。</p>
<p><strong>虚拟磁盘路径</strong>：storage 配置的虚拟路径，与磁盘选项store_path*对应。如果配置了</p>
<p>store_path0 则是 M00，如果配置了 store_path1 则是 M01，以此类推。</p>
<p><strong>数据两级目录</strong>：storage 服务器在每个虚拟磁盘路径下创建的两级目录，用于存储数据</p>
<p>文件。</p>
<p><strong>文件名</strong>：与文件上传时不同。是由存储服务器根据特定信息生成，文件名包含：源存储</p>
<p>服务器 IP 地址、文件创建时间戳、文件大小、随机数和文件拓展名等信息。</p>
<h3 id="FastDFS搭建"><a href="#FastDFS搭建" class="headerlink" title="FastDFS搭建"></a>FastDFS搭建</h3><h4 id="安装FastDFS镜像"><a href="#安装FastDFS镜像" class="headerlink" title="安装FastDFS镜像"></a>安装FastDFS镜像</h4><p>我们使用Docker搭建FastDFS的开发环境,拉取镜像</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">pull morunchang/fastdfs</span></span><br></pre></td></tr></table></figure>

<p>运行tracker</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run -d --name tracker --net=host morunchang/fastdfs sh tracker.sh</span></span><br></pre></td></tr></table></figure>

<p>运行storage</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run -d --name storage --net=host -e TRACKER_IP=192.168.211.132:22122 -e GROUP_NAME=group1 morunchang/fastdfs sh storage.sh</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用的网络模式是–net=host, 192.168.211.132是宿主机的IP</li>
<li>group1是组名，即storage的组  </li>
<li>如果想要增加新的storage服务器，再次运行该命令，注意更换 新组名</li>
</ul>
<h4 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h4><p>Nginx在这里主要提供对FastDFS图片访问的支持，Docker容器中已经集成了Nginx，我们需要修改nginx的配置,进入storage的容器内部，修改nginx.conf</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">exec -it storage  /bin/bash</span></span><br></pre></td></tr></table></figure>

<p>进入后</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">vi</span> <span class="string">/etc/nginx/conf/nginx.conf</span></span><br></pre></td></tr></table></figure>

<p>添加以下内容</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/Java/fastDFS/image/1564792264719.png" alt="1564792264719"></p>
<p>上图配置如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">location</span> <span class="string">~ /M00 &#123;</span></span><br><span class="line">     <span class="attr">root</span> <span class="string">/data/fast_data/data;</span></span><br><span class="line">     <span class="attr">ngx_fastdfs_module;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>



<p>禁止缓存：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add_header Cache-Control no-store;</span><br></pre></td></tr></table></figure>



<p>退出容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>



<p>重启storage容器</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">restart storage</span></span><br></pre></td></tr></table></figure>



<p>查看启动容器<code>docker ps</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">9f2391f73d97</span> <span class="string">morunchang/fastdfs &quot;sh storage.sh&quot; 12 minutes ago Up 12 seconds storage</span></span><br><span class="line"><span class="attr">e22a3c7f95ea</span> <span class="string">morunchang/fastdfs &quot;sh tracker.sh&quot; 13 minutes ago Up 13 minutes tracker</span></span><br></pre></td></tr></table></figure>



<p>开启启动设置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">update --restart=always tracker</span></span><br><span class="line"><span class="attr">docker</span> <span class="string">update --restart=always storage</span></span><br></pre></td></tr></table></figure>



<h3 id="文件存储微服务"><a href="#文件存储微服务" class="headerlink" title="文件存储微服务"></a>文件存储微服务</h3><p>创建文件管理微服务 service-file，该工程主要用于实现文件上传以及文件删除等功能。</p>
<h4 id="pom-xml依赖"><a href="#pom-xml依赖" class="headerlink" title="pom.xml依赖"></a>pom.xml依赖</h4><p>修改pom.xml，引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.oschina.zcx7878<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs-client-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.27.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="FastDFS配置"><a href="#FastDFS配置" class="headerlink" title="FastDFS配置"></a>FastDFS配置</h4><p>在resources文件夹下创建fasfDFS的配置文件fdfs_client.conf</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">connect_timeout</span>=<span class="string">60</span></span><br><span class="line"><span class="attr">network_timeout</span>=<span class="string">60</span></span><br><span class="line"><span class="attr">charset</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="meta">http.tracker_http_port</span>=<span class="string">8080</span></span><br><span class="line"><span class="attr">tracker_server</span>=<span class="string">192.168.211.132:22122</span></span><br></pre></td></tr></table></figure>

<p>connect_timeout：连接超时时间，单位为秒。</p>
<p>network_timeout：通信超时时间，单位为秒。发送或接收数据时。假设在超时时间后还不能发送或接收数据，则本次网络通信失败</p>
<p>charset： 字符集</p>
<p>http.tracker_http_port  ：.tracker的http端口</p>
<p>tracker_server： tracker服务器IP和端口设置</p>
<h4 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h4><p>在resources文件夹下创建application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">10MB</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">10MB</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">file</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">18082</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>max-file-size是单个文件大小，max-request-size是设置总上传的数据大小</p>
<h4 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h4><p>创建启动类FileApplication</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(exclude=&#123;DataSourceAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(FileApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里禁止了DataSource的加载创建。</p>
<h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><h4 id="文件信息封装"><a href="#文件信息封装" class="headerlink" title="文件信息封装"></a>文件信息封装</h4><p>文件上传一般都有文件的名字、文件的内容、文件的扩展名、文件的md5值、文件的作者等相关属性，我们可以创建一个对象封装这些属性，代码如下：</p>
<p>创建<code>com.file.FastDFSFile</code>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastDFSFile</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文件名字</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//文件内容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] content;</span><br><span class="line">    <span class="comment">//文件扩展名</span></span><br><span class="line">    <span class="keyword">private</span> String ext;</span><br><span class="line">    <span class="comment">//文件MD5摘要值</span></span><br><span class="line">    <span class="keyword">private</span> String md5;</span><br><span class="line">    <span class="comment">//文件创建作者</span></span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FastDFSFile</span><span class="params">(String name, <span class="keyword">byte</span>[] content, String ext, String md5, String author)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">        <span class="keyword">this</span>.ext = ext;</span><br><span class="line">        <span class="keyword">this</span>.md5 = md5;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FastDFSFile</span><span class="params">(String name, <span class="keyword">byte</span>[] content, String ext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">        <span class="keyword">this</span>.ext = ext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FastDFSFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//..get..set..toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>(可选)测试文件相关操作:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.file.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastdfsClientTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upload</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载全局的配置文件</span></span><br><span class="line">        ClientGlobal.init(<span class="string">&quot;C:\\Users\\Administrator\\IdeaProjects\\beike\\changgou\\changgou-service\\changgou-service-file\\src\\main\\resources\\fdfs_client.conf&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建TrackerClient客户端对象</span></span><br><span class="line">        TrackerClient trackerClient = <span class="keyword">new</span> TrackerClient();</span><br><span class="line">        <span class="comment">//通过TrackerClient对象获取TrackerServer信息</span></span><br><span class="line">        TrackerServer trackerServer = trackerClient.getConnection();</span><br><span class="line">        <span class="comment">//获取StorageClient对象</span></span><br><span class="line">        StorageClient storageClient = <span class="keyword">new</span> StorageClient(trackerServer, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行文件上传</span></span><br><span class="line">        String[] jpgs = storageClient.upload_file(<span class="string">&quot;C:\\Users\\Administrator\\Pictures\\5b13cd6cN8e12d4aa.jpg&quot;</span>, <span class="string">&quot;jpg&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String jpg : jpgs) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(jpg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载全局的配置文件</span></span><br><span class="line">        ClientGlobal.init(<span class="string">&quot;C:\\Users\\Administrator\\IdeaProjects\\beike\\changgou\\changgou-service\\changgou-service-file\\src\\main\\resources\\fdfs_client.conf&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建TrackerClient客户端对象</span></span><br><span class="line">        TrackerClient trackerClient = <span class="keyword">new</span> TrackerClient();</span><br><span class="line">        <span class="comment">//通过TrackerClient对象获取TrackerServer信息</span></span><br><span class="line">        TrackerServer trackerServer = trackerClient.getConnection();</span><br><span class="line">        <span class="comment">//获取StorageClient对象</span></span><br><span class="line">        StorageClient storageClient = <span class="keyword">new</span> StorageClient(trackerServer, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//执行文件上传</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> group1 = storageClient.delete_file(<span class="string">&quot;group1&quot;</span>, <span class="string">&quot;M00/00/00/wKjThF1VEiyAJ0xzAANdC6JX9KA522.jpg&quot;</span>);</span><br><span class="line">        System.out.println(group1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载全局的配置文件</span></span><br><span class="line">        ClientGlobal.init(<span class="string">&quot;C:\\Users\\Administrator\\IdeaProjects\\beike\\changgou\\changgou-service\\changgou-service-file\\src\\main\\resources\\fdfs_client.conf&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建TrackerClient客户端对象</span></span><br><span class="line">        TrackerClient trackerClient = <span class="keyword">new</span> TrackerClient();</span><br><span class="line">        <span class="comment">//通过TrackerClient对象获取TrackerServer信息</span></span><br><span class="line">        TrackerServer trackerServer = trackerClient.getConnection();</span><br><span class="line">        <span class="comment">//获取StorageClient对象</span></span><br><span class="line">        StorageClient storageClient = <span class="keyword">new</span> StorageClient(trackerServer, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//执行文件上传</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = storageClient.download_file(<span class="string">&quot;group1&quot;</span>, <span class="string">&quot;M00/00/00/wKjThF1VFfKAJRJDAANdC6JX9KA980.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:\\ceshi\\1234.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line"></span><br><span class="line">        BufferedOutputStream bufferedOutputStream = <span class="keyword">new</span> BufferedOutputStream(fileOutputStream);</span><br><span class="line"></span><br><span class="line">        bufferedOutputStream.write(bytes);</span><br><span class="line"></span><br><span class="line">        bufferedOutputStream.close();</span><br><span class="line"></span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取文件的信息数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getFileInfo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//加载全局的配置文件</span></span><br><span class="line">        ClientGlobal.init(<span class="string">&quot;C:\\Users\\Administrator\\IdeaProjects\\beike\\changgou\\changgou-service\\changgou-service-file\\src\\main\\resources\\fdfs_client.conf&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建TrackerClient客户端对象</span></span><br><span class="line">        TrackerClient trackerClient = <span class="keyword">new</span> TrackerClient();</span><br><span class="line">        <span class="comment">//通过TrackerClient对象获取TrackerServer信息</span></span><br><span class="line">        TrackerServer trackerServer = trackerClient.getConnection();</span><br><span class="line">        <span class="comment">//获取StorageClient对象</span></span><br><span class="line">        StorageClient storageClient = <span class="keyword">new</span> StorageClient(trackerServer, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//执行文件上传</span></span><br><span class="line"></span><br><span class="line">        FileInfo group1 = storageClient.get_file_info(<span class="string">&quot;group1&quot;</span>, <span class="string">&quot;M00/00/00/wKjThF1VFfKAJRJDAANdC6JX9KA980.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(group1);</span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><p>创建com.util.FastDFSClient类,在该类中实现FastDFS信息获取以及文件的相关操作，代码如下：</p>
<p>(1)初始化Tracker信息</p>
<p>在<code>com.util.FastDFSClient</code>类中初始化Tracker信息,在类中添加如下静态块：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 初始化tracker信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//获取tracker的配置文件fdfs_client.conf的位置</span></span><br><span class="line">        String filePath = <span class="keyword">new</span> ClassPathResource(<span class="string">&quot;fdfs_client.conf&quot;</span>).getPath();</span><br><span class="line">        <span class="comment">//加载tracker配置信息</span></span><br><span class="line">        ClientGlobal.init(filePath);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>(2)文件上传</p>
<p>在类中添加如下方法实现文件上传：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/****</span></span><br><span class="line"><span class="comment"> * 文件上传</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> file : 要上传的文件信息封装-&gt;FastDFSFile</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String[]</span></span><br><span class="line"><span class="comment"> *          1:文件上传所存储的组名</span></span><br><span class="line"><span class="comment"> *          2:文件存储路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] upload(FastDFSFile file)&#123;</span><br><span class="line">    <span class="comment">//获取文件作者</span></span><br><span class="line">    NameValuePair[] meta_list = <span class="keyword">new</span> NameValuePair[<span class="number">1</span>];</span><br><span class="line">    meta_list[<span class="number">0</span>] =<span class="keyword">new</span> NameValuePair(file.getAuthor());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 文件上传后的返回值</span></span><br><span class="line"><span class="comment">     * uploadResults[0]:文件上传所存储的组名，例如:group1</span></span><br><span class="line"><span class="comment">     * uploadResults[1]:文件存储路径,例如：M00/00/00/wKjThF0DBzaAP23MAAXz2mMp9oM26.jpeg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] uploadResults = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//创建TrackerClient客户端对象</span></span><br><span class="line">        TrackerClient trackerClient = <span class="keyword">new</span> TrackerClient();</span><br><span class="line">        <span class="comment">//通过TrackerClient对象获取TrackerServer信息</span></span><br><span class="line">        TrackerServer trackerServer = trackerClient.getConnection();</span><br><span class="line">        <span class="comment">//获取StorageClient对象</span></span><br><span class="line">        StorageClient storageClient = <span class="keyword">new</span> StorageClient(trackerServer, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//执行文件上传</span></span><br><span class="line">        uploadResults = storageClient.upload_file(file.getContent(), file.getExt(), meta_list);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> uploadResults;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(3)获取文件信息</p>
<p>在类中添加如下方法实现获取文件信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 获取文件信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> groupName:组名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> remoteFileName：文件存储完整名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FileInfo <span class="title">getFile</span><span class="params">(String groupName,String remoteFileName)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//创建TrackerClient对象</span></span><br><span class="line">        TrackerClient trackerClient = <span class="keyword">new</span> TrackerClient();</span><br><span class="line">        <span class="comment">//通过TrackerClient获得TrackerServer信息</span></span><br><span class="line">        TrackerServer trackerServer =trackerClient.getConnection();</span><br><span class="line">        <span class="comment">//通过TrackerServer获取StorageClient对象</span></span><br><span class="line">        StorageClient storageClient = <span class="keyword">new</span> StorageClient(trackerServer,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//获取文件信息</span></span><br><span class="line">        <span class="keyword">return</span> storageClient.get_file_info(groupName,remoteFileName);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(4)文件下载</p>
<p>在类中添加如下方法实现文件下载：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下载图片</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] downFile(String groupName, String remoteFileName) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">//1.创建一个配置文件 用于填写服务端的ip和端口</span></span><br><span class="line">       <span class="comment">//2.加载配置文件 建立链接</span></span><br><span class="line">       <span class="comment">// ClientGlobal.init(&quot;C:\\Users\\admin\\IdeaProjects\\98\\changgou98\\changgou-parent\\changgou-service\\changgou-service-file\\src\\main\\resources\\fdfs_client.conf&quot;);</span></span><br><span class="line">       <span class="comment">//3.创建trackerClient</span></span><br><span class="line">       TrackerClient trackerClient = <span class="keyword">new</span> TrackerClient();</span><br><span class="line">       <span class="comment">//4.根据trackerclient获取到链接对象 trackerServer</span></span><br><span class="line">       TrackerServer trackerServer = trackerClient.getConnection();</span><br><span class="line">       <span class="comment">//5.创建storageServer对象 设置null</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//6.创建stroageClient ---&gt;提供了很多的操作图片的API的代码（上传图片，下载 ，删除）</span></span><br><span class="line">       StorageClient storageClient = <span class="keyword">new</span> StorageClient(trackerServer, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//7.下在图片</span></span><br><span class="line">       <span class="comment">//参数1 指定要下载的组名</span></span><br><span class="line">       <span class="comment">//参数2 指定要下载的远程文件路径</span></span><br><span class="line">       <span class="keyword">byte</span>[] group1s = storageClient.download_file(groupName, remoteFileName);</span><br><span class="line">       <span class="keyword">return</span> group1s;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>(5)文件删除实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 文件删除实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> groupName:组名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> remoteFileName：文件存储完整名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//删除图片</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">deleteFile</span><span class="params">(String groupName, String remoteFileName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个配置文件 用于填写服务端的ip和端口</span></span><br><span class="line">        <span class="comment">//2.加载配置文件 建立链接</span></span><br><span class="line">        <span class="comment">//ClientGlobal.init(&quot;C:\\Users\\admin\\IdeaProjects\\98\\changgou98\\changgou-parent\\changgou-service\\changgou-service-file\\src\\main\\resources\\fdfs_client.conf&quot;);</span></span><br><span class="line">        <span class="comment">//3.创建trackerClient</span></span><br><span class="line">        TrackerClient trackerClient = <span class="keyword">new</span> TrackerClient();</span><br><span class="line">        <span class="comment">//4.根据trackerclient获取到链接对象 trackerServer</span></span><br><span class="line">        TrackerServer trackerServer = trackerClient.getConnection();</span><br><span class="line">        <span class="comment">//5.创建storageServer对象 设置null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.创建stroageClient ---&gt;提供了很多的操作图片的API的代码（上传图片，下载 ，删除）</span></span><br><span class="line">        StorageClient storageClient = <span class="keyword">new</span> StorageClient(trackerServer, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">int</span> group1 = storageClient.delete_file(groupName, remoteFileName);</span><br><span class="line">        <span class="keyword">if</span> (group1 == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>(6)获取组信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 获取组信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> groupName :组名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StorageServer <span class="title">getStorages</span><span class="params">(String groupName)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//创建TrackerClient对象</span></span><br><span class="line">        TrackerClient trackerClient = <span class="keyword">new</span> TrackerClient();</span><br><span class="line">        <span class="comment">//通过TrackerClient获取TrackerServer对象</span></span><br><span class="line">        TrackerServer trackerServer = trackerClient.getConnection();</span><br><span class="line">        <span class="comment">//通过trackerClient获取Storage组信息</span></span><br><span class="line">        <span class="keyword">return</span> trackerClient.getStoreStorage(trackerServer,groupName);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(7)根据文件组名和文件存储路径获取Storage服务的IP、端口信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 根据文件组名和文件存储路径获取Storage服务的IP、端口信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> groupName :组名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> remoteFileName ：文件存储完整名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ServerInfo[] getServerInfo(String groupName, String remoteFileName)&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//创建TrackerClient对象</span></span><br><span class="line">        TrackerClient trackerClient = <span class="keyword">new</span> TrackerClient();</span><br><span class="line">        <span class="comment">//通过TrackerClient获取TrackerServer对象</span></span><br><span class="line">        TrackerServer trackerServer = trackerClient.getConnection();</span><br><span class="line">        <span class="comment">//获取服务信息</span></span><br><span class="line">        <span class="keyword">return</span> trackerClient.getFetchStorages(trackerServer,groupName,remoteFileName);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(8)获取Tracker服务地址</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 获取Tracker服务地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getTrackerUrl</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//创建TrackerClient对象</span></span><br><span class="line">        TrackerClient trackerClient = <span class="keyword">new</span> TrackerClient();</span><br><span class="line">        <span class="comment">//通过TrackerClient获取TrackerServer对象</span></span><br><span class="line">        TrackerServer trackerServer = trackerClient.getConnection();</span><br><span class="line">        <span class="comment">//获取Tracker地址</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;http://&quot;</span>+trackerServer.getInetSocketAddress().getHostString()+<span class="string">&quot;:&quot;</span>+ClientGlobal.getG_tracker_http_port();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(9)优化</p>
<p>我们可以发现，上面所有方法中都会涉及到获取TrackerServer或者StorageClient，我们可以把它们单独抽取出去，分别在类中添加如下2个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 获取TrackerServer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TrackerServer <span class="title">getTrackerServer</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//创建TrackerClient对象</span></span><br><span class="line">    TrackerClient trackerClient = <span class="keyword">new</span> TrackerClient();</span><br><span class="line">    <span class="comment">//通过TrackerClient获取TrackerServer对象</span></span><br><span class="line">    TrackerServer trackerServer = trackerClient.getConnection();</span><br><span class="line">    <span class="keyword">return</span> trackerServer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 获取StorageClient</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StorageClient <span class="title">getStorageClient</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//获取TrackerServer</span></span><br><span class="line">    TrackerServer trackerServer = getTrackerServer();</span><br><span class="line">    <span class="comment">//通过TrackerServer创建StorageClient</span></span><br><span class="line">    StorageClient storageClient = <span class="keyword">new</span> StorageClient(trackerServer,<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span> storageClient;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改其他方法，在需要使用TrackerServer和StorageClient的时候，直接调用上面的方法,完整代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.file.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.file.FastDFSFile;</span><br><span class="line"><span class="keyword">import</span> org.csource.common.MyException;</span><br><span class="line"><span class="keyword">import</span> org.csource.common.NameValuePair;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.ClientGlobal;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.StorageClient;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.TrackerClient;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.TrackerServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ljh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/22 11:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 标题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> com.file.util</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastDFSClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ClassPathResource resource = <span class="keyword">new</span> ClassPathResource(<span class="string">&quot;fdfs_client.conf&quot;</span>);</span><br><span class="line">            ClientGlobal.init(resource.getPath());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MyException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上传图片</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] upload(FastDFSFile file) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.创建一个配置文件 用于填写服务端的ip和端口</span></span><br><span class="line">        <span class="comment">//2.加载配置文件 建立链接</span></span><br><span class="line">        <span class="comment">//3.创建trackerClient</span></span><br><span class="line">        TrackerClient trackerClient = <span class="keyword">new</span> TrackerClient();</span><br><span class="line">        <span class="comment">//4.根据trackerclient获取到链接对象 trackerServer</span></span><br><span class="line">        TrackerServer trackerServer = trackerClient.getConnection();</span><br><span class="line">        <span class="comment">//5.创建storageServer对象 设置null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.创建stroageClient ---&gt;提供了很多的操作图片的API的代码（上传图片，下载 ，删除）</span></span><br><span class="line">        StorageClient storageClient = <span class="keyword">new</span> StorageClient(trackerServer, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//参数1 指定要上传图片的本地的图片的绝对路径</span></span><br><span class="line">        <span class="comment">//参数2 指定要上传图片的图片的扩展名（jpg/png）不要带点</span></span><br><span class="line">        <span class="comment">//参数3 指定元数据 指的是 图片的高度 日期，像素......    可以不给，</span></span><br><span class="line">        NameValuePair[] meta_list = <span class="keyword">new</span> NameValuePair[]&#123;</span><br><span class="line">                <span class="comment">//像素 高度  大小</span></span><br><span class="line">                <span class="keyword">new</span> NameValuePair(file.getName())</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        String[] jpgs = storageClient.upload_file(file.getContent(), file.getExt(), meta_list);</span><br><span class="line">        <span class="keyword">return</span> jpgs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下载图片</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] downFile(String groupName, String remoteFileName) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.创建一个配置文件 用于填写服务端的ip和端口</span></span><br><span class="line">        <span class="comment">//2.加载配置文件 建立链接</span></span><br><span class="line">        <span class="comment">// ClientGlobal.init(&quot;C:\\Users\\admin\\IdeaProjects\\98\\changgou98\\changgou-parent\\changgou-service\\changgou-service-file\\src\\main\\resources\\fdfs_client.conf&quot;);</span></span><br><span class="line">        <span class="comment">//3.创建trackerClient</span></span><br><span class="line">        TrackerClient trackerClient = <span class="keyword">new</span> TrackerClient();</span><br><span class="line">        <span class="comment">//4.根据trackerclient获取到链接对象 trackerServer</span></span><br><span class="line">        TrackerServer trackerServer = trackerClient.getConnection();</span><br><span class="line">        <span class="comment">//5.创建storageServer对象 设置null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.创建stroageClient ---&gt;提供了很多的操作图片的API的代码（上传图片，下载 ，删除）</span></span><br><span class="line">        StorageClient storageClient = <span class="keyword">new</span> StorageClient(trackerServer, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.下在图片</span></span><br><span class="line">        <span class="comment">//参数1 指定要下载的组名</span></span><br><span class="line">        <span class="comment">//参数2 指定要下载的远程文件路径</span></span><br><span class="line">        <span class="keyword">byte</span>[] group1s = storageClient.download_file(groupName, remoteFileName);</span><br><span class="line">        <span class="keyword">return</span> group1s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除图片</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">deleteFile</span><span class="params">(String groupName, String remoteFileName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个配置文件 用于填写服务端的ip和端口</span></span><br><span class="line">        <span class="comment">//2.加载配置文件 建立链接</span></span><br><span class="line">        <span class="comment">//ClientGlobal.init(&quot;C:\\Users\\admin\\IdeaProjects\\98\\changgou98\\changgou-parent\\changgou-service\\changgou-service-file\\src\\main\\resources\\fdfs_client.conf&quot;);</span></span><br><span class="line">        <span class="comment">//3.创建trackerClient</span></span><br><span class="line">        TrackerClient trackerClient = <span class="keyword">new</span> TrackerClient();</span><br><span class="line">        <span class="comment">//4.根据trackerclient获取到链接对象 trackerServer</span></span><br><span class="line">        TrackerServer trackerServer = trackerClient.getConnection();</span><br><span class="line">        <span class="comment">//5.创建storageServer对象 设置null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.创建stroageClient ---&gt;提供了很多的操作图片的API的代码（上传图片，下载 ，删除）</span></span><br><span class="line">        StorageClient storageClient = <span class="keyword">new</span> StorageClient(trackerServer, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">int</span> group1 = storageClient.delete_file(groupName, remoteFileName);</span><br><span class="line">        <span class="keyword">if</span> (group1 == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取图片的信息 //todo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="文件上传-1"><a href="#文件上传-1" class="headerlink" title="文件上传"></a>文件上传</h4><p>创建一个FileController，在该控制器中实现文件上传操作，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;pic.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String picPath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.请求路径</span></span><br><span class="line">    <span class="comment">//2.参数</span></span><br><span class="line">    <span class="comment">//3.返回值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图片上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!file.isEmpty()) &#123;</span><br><span class="line">                <span class="comment">//1.获取到文件本身的字节数组</span></span><br><span class="line">                <span class="keyword">byte</span>[] content = file.getBytes();</span><br><span class="line">                <span class="comment">//2.获取文件的名称 --》获取图片的后缀</span></span><br><span class="line">                String name = file.getOriginalFilename();<span class="comment">//1234.jpg</span></span><br><span class="line">                <span class="comment">//3.上传到fastdfs上</span></span><br><span class="line">                <span class="comment">//[0] =group1</span></span><br><span class="line">                <span class="comment">//[1] =M00/00/00/wKjThF-qeNyATiVHAAAl8vdCW2Y824.png</span></span><br><span class="line">                String[] upload = FastDFSClient.upload(<span class="keyword">new</span> FastDFSFile(</span><br><span class="line">                        name,<span class="comment">//文件名</span></span><br><span class="line">                        content,<span class="comment">//文件的本身的字节数组</span></span><br><span class="line">                        StringUtils.getFilenameExtension(name)</span><br><span class="line">                        ));</span><br><span class="line">                <span class="comment">//4.拼接Ulr</span></span><br><span class="line">                <span class="comment">// http://192.168.211.132:8080/group1/M00/00/00/wKjThF-qeNyATiVHAAAl8vdCW2Y824.png</span></span><br><span class="line">                String realPath = picPath+<span class="string">&quot;/&quot;</span>+upload[<span class="number">0</span>]+<span class="string">&quot;/&quot;</span>+upload[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">                <span class="comment">//5.返回url给页面</span></span><br><span class="line">                <span class="keyword">return</span> realPath;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>配置：yaml</p>
<p><img data-src="images/1604994284489.png" alt="1604994284489"></p>
<h3 id="Postman测试文件上传"><a href="#Postman测试文件上传" class="headerlink" title="Postman测试文件上传"></a>Postman测试文件上传</h3><p>步骤：</p>
<p>1、选择post请求方式，输入请求地址  <a href="http://localhost:18082/upload">http://localhost:18082/upload</a></p>
<p>2、填写Headers</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">Key：Content-Type</span></span><br><span class="line"><span class="attr">Value：multipart/form-data</span></span><br></pre></td></tr></table></figure>

<p>3、填写body</p>
<p>选择form-data   然后选择文件file   点击添加文件，最后发送即可。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/Java/fastDFS/image/1560479807807.png" alt="1560479823539"></p>
<p>访问<code>http://192.168.211.132:8080/group1/M00/00/00/wKjThF0DBzaAP23MAAXz2mMp9oM26.jpeg</code>如下图</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/Java/fastDFS/image/1560479928441.png" alt="1560479928441"></p>
<p>注意，这里每次访问的端口是8080端口，访问的端口其实是storage容器的nginx端口，如果想修改该端口可以直接进入到storage容器，然后修改即可。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">exec -it storage  /bin/bash</span></span><br><span class="line"><span class="attr">vi</span> <span class="string">/etc/nginx/conf/nginx.conf</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/Java/fastDFS/image/1564181128575.png" alt="1564181128575"></p>
<p>修改后重启storage即可根据自己修改的端口访问图片了。</p>
]]></content>
      <categories>
        <category>Java框架</category>
      </categories>
      <tags>
        <tag>Java框架</tag>
        <tag>FastDFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Java重要框架02--mybatis进阶</title>
    <url>/jwangcloud/380147732/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/mybatis.jpeg" width="1000" height="300" align="middle">


<h1 id="MyBatis缓存"><a href="#MyBatis缓存" class="headerlink" title="MyBatis缓存"></a>MyBatis缓存</h1><span id="more"></span>

<h2 id="MyBatis缓存类别"><a href="#MyBatis缓存类别" class="headerlink" title="MyBatis缓存类别"></a>MyBatis缓存类别</h2><ul>
<li><p>一级缓存：它是sqlSession对象的缓存，自带的(不需要配置)不可关闭的(不想使用还不行).  一级缓存的生命周期与sqlSession一致。</p>
</li>
<li><p>二级缓存：它是SqlSessionFactory的缓存。只要是同一个SqlSessionFactory创建的SqlSession就共享二级缓存的内容，并且可以操作二级缓存。二级缓存如果要使用的话，需要我们自己手动开启(需要配置的)。</p>
</li>
</ul>
<h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><h3 id="证明一级缓存的存在"><a href="#证明一级缓存的存在" class="headerlink" title="证明一级缓存的存在"></a>证明一级缓存的存在</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.jwang.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.jwang.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mybatis框架以前的名字叫做ibatis</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="keyword">private</span> InputStream is;</span><br><span class="line">    <span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在执行单元测试方法之前要执行的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建SqlSessionFactoryBuilder对象</span></span><br><span class="line">        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        <span class="comment">//2. 读取核心配置文件，转换成字节输入流   底层使用了ClassLoader的getResourceAsStream()</span></span><br><span class="line">        is = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//3. 创建SqlSessionFactory对象  底层使用了构造者模式</span></span><br><span class="line">        SqlSessionFactory sessionFactory = sqlSessionFactoryBuilder.build(is);</span><br><span class="line">        <span class="comment">//4. 创建SqlSession对象 底层使用了工厂模式</span></span><br><span class="line">        sqlSession = sessionFactory.openSession();</span><br><span class="line">        <span class="comment">//5. 创建UserDao的代理对象 底层使用了动态代理模式</span></span><br><span class="line">        userDao = sqlSession.getMapper(UserDao.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFirstLevelCache</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//验证一级缓存</span></span><br><span class="line">        List&lt;User&gt; userList = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//使用同一个SqlSession对象，获取UserDao的代理对象，执行查询</span></span><br><span class="line">        UserDao userDao2 = sqlSession.getMapper(UserDao.class);</span><br><span class="line">        List&lt;User&gt; userList2 = userDao2.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : userList2) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在执行测试方法之后执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        is.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="一级缓存分析"><a href="#一级缓存分析" class="headerlink" title="一级缓存分析"></a>一级缓存分析</h3><p>​    <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/Java/mybatis/2/img/tu_2-1572949193589.png" alt="img"></p>
<ul>
<li><p>第一次发起查询用户 id 为 1 的用户信息，先去找缓存中是否有 id 为 1 的用户信息，如果没有，从数据库查询用户信息。得到用户信息，将用户信息存储到一级缓存中。第二次发起查询用户 id 为 1 的用户信息，先去找缓存中是否有 id 为 1 的用户信息，缓存中有，直接从缓存中获取用户信息。 </p>
</li>
<li><p>如果 sqlSession 去执行 commit操作（执行插入、更新、删除），清空 SqlSession 中的一级缓存，这样做的目的为了让缓存中存储的是最新的信息，避免脏读。</p>
</li>
</ul>
<h3 id="测试一级缓存清空"><a href="#测试一级缓存清空" class="headerlink" title="测试一级缓存清空"></a>测试一级缓存清空</h3><ul>
<li>调用sqlSession的commit()或者clearCache()或者close()都能清除一级缓存</li>
<li>更新数据也会清空一级缓存</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = SqlSessionFactoryUtil.openSqlSession();</span><br><span class="line">        UserDao userDao = sqlSession.getMapper(UserDao.class);</span><br><span class="line">        System.out.println(userDao.findAll());</span><br><span class="line"></span><br><span class="line">        userDao.deleteById(<span class="number">26</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(userDao.findAll());</span><br><span class="line"></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="-二级缓存"></a>-二级缓存</h2><ul>
<li><p>二级缓存是SqlSessionFactory的缓存。只要是同一个SqlSessionFactory创建的SqlSession就共享二级缓存的内容，并且可以操作二级缓存.</p>
</li>
<li><p>二级缓存的结构</p>
</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/Java/mybatis/2/img/tu_3-1572949193589.png" alt="img"></p>
<h3 id="二级缓存的使用"><a href="#二级缓存的使用" class="headerlink" title="二级缓存的使用"></a>二级缓存的使用</h3><ul>
<li>在 SqlMapConfig.xml 文件开启二级缓存 </li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置开启二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>因为 cacheEnabled 的取值默认就为 true</strong>，所以这一步可以省略不配置。为 true 代表开启二级缓存；为 false 代表不开启二级缓存。  </li>
</ul>
<ul>
<li><p>配置相关的 Mapper 映射文件 </p>
<p><code>&lt;cache/&gt;</code> 标签表示当前这个 mapper 映射将使用二级缓存，区分的标准就看 mapper 的 namespace 值。 </p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">      <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">      <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.jwang.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">      select * from t_user</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">      delete from t_user where uid=#&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>要进行二级缓存的POJO类必须实现Serializable接口</li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession1 = SqlSessionFactoryUtil.openSqlSession();</span><br><span class="line">        SqlSession sqlSession2 = SqlSessionFactoryUtil.openSqlSession();</span><br><span class="line">        SqlSession sqlSession3 = SqlSessionFactoryUtil.openSqlSession();</span><br><span class="line"></span><br><span class="line">        UserDao userDao1 = sqlSession1.getMapper(UserDao.class);</span><br><span class="line">        UserDao userDao2 = sqlSession2.getMapper(UserDao.class);</span><br><span class="line">        UserDao userDao3 = sqlSession3.getMapper(UserDao.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(userDao1.findAll());</span><br><span class="line">        <span class="comment">//sqlSession使用完之后，要关闭</span></span><br><span class="line">        sqlSession1.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(userDao2.findAll());</span><br><span class="line">        sqlSession2.close();</span><br><span class="line"></span><br><span class="line">        userDao3.deleteById(<span class="number">24</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">        System.out.println(userDao3.findAll());</span><br><span class="line">        sqlSession3.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>经过上面的测试，我们发现执行了两次查询，并且在执行第一次查询后，我们关闭了一级缓存，再去执行第二次查询时，我们发现并没有对数据库发出 sql 语句，所以此时的数据就只能是来自于我们所说的二级缓存。 </p>
</li>
<li><p>当我们在使用二级缓存时，缓存的类一定要实现 java.io.Serializable 接口，这种就可以使用序列化    方式来保存对象。 </p>
</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/Java/mybatis/2/img/tu_7-1572949193590.png" alt="img"></p>
<h1 id="Mybatis-的多表关联查询"><a href="#Mybatis-的多表关联查询" class="headerlink" title="Mybatis 的多表关联查询"></a>Mybatis 的多表关联查询</h1><h2 id="一-多-对一"><a href="#一-多-对一" class="headerlink" title="一(多)对一"></a>一(多)对一</h2><ul>
<li><p>本次案例以简单的用户和账户的模型来分析 Mybatis 多表关系。用户为 User 表，账户为Account 表。一个用户（User）可以有多个账户（Account）,但是一个账户(Account)只能属于一个用户(User)。具体关系如下：<br><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/Java/mybatis/2/img/tu_19.png" alt="img"></p>
</li>
<li><p>数据库的准备</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">CREATE TABLE <span class="title">t_account</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">		aid INT PRIMARY KEY auto_increment,</span></span></span><br><span class="line"><span class="function"><span class="params">		money DOUBLE,</span></span></span><br><span class="line"><span class="function"><span class="params">		uid INT</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br><span class="line"><span class="function">ALTER TABLE t_account ADD FOREIGN <span class="title">KEY</span><span class="params">(uid)</span> REFERENCES <span class="title">t_user</span><span class="params">(uid)</span></span>;</span><br><span class="line"></span><br><span class="line">INSERT INTO `t_account` VALUES (<span class="keyword">null</span>, <span class="string">&#x27;1000&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">INSERT INTO `t_account` VALUES (<span class="keyword">null</span>, <span class="string">&#x27;2000&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">INSERT INTO `t_account` VALUES (<span class="keyword">null</span>, <span class="string">&#x27;1000&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">INSERT INTO `t_account` VALUES (<span class="keyword">null</span>, <span class="string">&#x27;2000&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">INSERT INTO `t_account` VALUES (<span class="keyword">null</span>, <span class="string">&#x27;800&#x27;</span>, <span class="string">&#x27;3&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>查询语句</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from t_account a,t_user u where a.uid&#x3D;u.uid AND aid&#x3D;#&#123;aid&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li>修改Account.java 在 Account 类中加入 User类的对象作为 Account 类的一个属性。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表示Account和User的一对一关系</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>AccountDao.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据aid查询账户信息，并且连接t_user表查询该账户所属的用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">findAccountUserByAid</span><span class="params">(<span class="keyword">int</span> aid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>AccountDao.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.jwang.dao.AccountDao&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;accountUserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Account&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            使用association标签进行一对一映射</span></span><br><span class="line"><span class="comment">                property属性: 要进行一对一映射的属性名</span></span><br><span class="line"><span class="comment">                javaType属性: 要进行一对一映射的属性类型</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;true&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAccountUserByAid&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;accountUserMap&quot;</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">        *</span><br><span class="line">        from</span><br><span class="line">        t_account a,t_user u</span><br><span class="line">        where</span><br><span class="line">        a.uid=u.uid</span><br><span class="line">        AND</span><br><span class="line">        a.aid=#&#123;aid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><ul>
<li><p>查询所有用户信息及用户关联的账户信息。</p>
</li>
<li><p>sql语句</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from t_user u,t_account a where a.uid&#x3D;u.uid AND u.uid&#x3D;#&#123;uid&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Account.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>User.java 为了能够让查询的 User 信息中，带有他的个人多个账户信息，我们就需要在 User 类中添加一个集合，用于存放他的多个账户信息，这样他们之间的关联关系就保存了。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">// 用户姓名</span></span><br><span class="line">    <span class="keyword">private</span> String sex;<span class="comment">// 性别</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;<span class="comment">// 生日</span></span><br><span class="line">    <span class="keyword">private</span> String address;<span class="comment">// 地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//表达关系:1个用户对应多个账户</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accountList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>UserDao.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户的uid查询到一个用户信息，并且连接账号表查询该用户的所有账号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">findUserAccountListByUid</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>UserDao.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userAccountListMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            对accountList属性进行一对多映射,使用collection标签</span></span><br><span class="line"><span class="comment">                property属性: 要进行一对多映射的属性名</span></span><br><span class="line"><span class="comment">                ofType属性(可以不写): 要进行一对多映射的属性类型</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;accountList&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;true&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Account&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserAccountListByUid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userAccountListMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">        *</span><br><span class="line">        FROM</span><br><span class="line">        t_user u,t_account a</span><br><span class="line">        WHERE</span><br><span class="line">        a.uid=u.uid</span><br><span class="line">        AND</span><br><span class="line">        u.uid=#&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="多对多-可以看成俩一对多"><a href="#多对多-可以看成俩一对多" class="headerlink" title="多对多(可以看成俩一对多)"></a>多对多(可以看成俩一对多)</h2><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/Java/mybatis/2/img/tu_21.png" alt="img"></p>
<ul>
<li><p>实现查询所有角色对象并且加载它所分配的用户信息。 </p>
</li>
<li><p>建表语句</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_role(</span><br><span class="line">	rid <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">	rName <span class="type">varchar</span>(<span class="number">40</span>),</span><br><span class="line">	rDesc <span class="type">varchar</span>(<span class="number">40</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_role` <span class="keyword">VALUES</span> (<span class="keyword">null</span>, <span class="string">&#x27;校长&#x27;</span>, <span class="string">&#x27;负责学校管理工作&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_role` <span class="keyword">VALUES</span> (<span class="keyword">null</span>, <span class="string">&#x27;副校长&#x27;</span>, <span class="string">&#x27;协助校长负责学校管理&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_role` <span class="keyword">VALUES</span> (<span class="keyword">null</span>, <span class="string">&#x27;班主任&#x27;</span>, <span class="string">&#x27;负责班级管理工作&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_role` <span class="keyword">VALUES</span> (<span class="keyword">null</span>, <span class="string">&#x27;教务处主任&#x27;</span>, <span class="string">&#x27;负责教学管理&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_role` <span class="keyword">VALUES</span> (<span class="keyword">null</span>, <span class="string">&#x27;班主任组长&#x27;</span>, <span class="string">&#x27;负责班主任小组管理&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 中间表(关联表)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> user_role(</span><br><span class="line">	uid <span class="type">INT</span>,</span><br><span class="line">	rid <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span>  user_role <span class="keyword">ADD</span> <span class="keyword">FOREIGN</span> KEY(uid) <span class="keyword">REFERENCES</span> t_user(uid);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span>  user_role <span class="keyword">ADD</span> <span class="keyword">FOREIGN</span> KEY(rid) <span class="keyword">REFERENCES</span> t_role(rid);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_role` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_role` <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;3&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_role` <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_role` <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;5&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `user_role` <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>);</span><br></pre></td></tr></table></figure>


<ul>
<li>查询角色我们需要用到 Role 表，但角色分配的用户的信息我们并不能直接找到用户信息，而是要通过中间表(USER_ROLE 表)才能关联到用户信息。<br>下面是实现的 SQL 语句： </li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">select * from t_user u,t_role r,user_role ur where ur.uid=u.uid and ur.rid=r.rid AND u.uid=#&#123;uid&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>User.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * user和role的一对多关系</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roleList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>Role.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer rid;</span><br><span class="line">    <span class="keyword">private</span> String rName;</span><br><span class="line">    <span class="keyword">private</span> String rDesc;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>UserDao.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">findUserRoleListByUid</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>UserDao.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userRoleListMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;roleList&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;true&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Role&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserRoleListByUid&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userRoleListMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">        *</span><br><span class="line">        FROM</span><br><span class="line">        t_user u,t_role r,user_role ur</span><br><span class="line"></span><br><span class="line">        WHERE</span><br><span class="line">        ur.uid=u.uid</span><br><span class="line">        AND</span><br><span class="line">        ur.rid=r.rid</span><br><span class="line">        AND</span><br><span class="line">        u.uid=#&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>


<ol>
<li>以哪张表作为主体查询，那么就将查询到的结果封装到哪张表对应的POJO对象中</li>
<li>如果表的关系是一对一，那么就在一个POJO中添加另外一个POJO的对象属性</li>
<li>如果表的关系是一对多，那么就在一个POJO中添加另外一个POJO的集合属性</li>
<li>使用association标签可以进行一对一的映射</li>
<li>使用collection标签可以进行一对多的映射</li>
</ol>
<h1 id="Mybatis-延迟加载策略"><a href="#Mybatis-延迟加载策略" class="headerlink" title="Mybatis 延迟加载策略"></a>Mybatis 延迟加载策略</h1><h2 id="什么是延迟加载"><a href="#什么是延迟加载" class="headerlink" title="什么是延迟加载"></a>什么是延迟加载</h2><p>​    延迟加载：就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。延迟加载也称懒加载.</p>
<p>​    坏处： 执行查询的次数会增加，所以在执行批量查询的时候，查询次数比使用连接查询要多特别多  </p>
<p>​    好处： 先从单表查询，需要时再从关联表去关联查询，大大提高数据库性能，因为查询单表要比关联查询多张表速度要快.</p>
<h2 id="懒加载的配置"><a href="#懒加载的配置" class="headerlink" title="懒加载的配置"></a>懒加载的配置</h2><ul>
<li><p>局部懒加载: 在association标签或者collection标签中，设置fetchType属性的值为lazy</p>
</li>
<li><p>全局懒加载: 在mybatis的核心配置文件中添加</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用-Assocation-实现延迟加载-多对一-一对一"><a href="#使用-Assocation-实现延迟加载-多对一-一对一" class="headerlink" title="使用 Assocation 实现延迟加载 (多对一,一对一)"></a>使用 Assocation 实现延迟加载 (多对一,一对一)</h2><ul>
<li><p>查询账户(Account)信息并且关联查询用户(User)信息。</p>
</li>
<li><p>先查询账户(Account)信息，当我们需要用到用户(User)信息时再查询用户(User)信息。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 1. 查询账户</span><br><span class="line">select * from t_account where aid&#x3D;#&#123;aid&#125;</span><br><span class="line">-- 2, 再查询用户</span><br><span class="line">-- 再根据查询结果里面的uid查询当前账户所属的用户</span><br><span class="line">SELECT * FROM t_user WHERE uid &#x3D; #&#123;uid&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>User.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">// 用户姓名</span></span><br><span class="line">    <span class="keyword">private</span> String sex;<span class="comment">// 性别</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;<span class="comment">// 生日</span></span><br><span class="line">    <span class="keyword">private</span> String address;<span class="comment">// 地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Account.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表达关系:1个用户对应1个账户</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>AccountDao.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据aid查询账号信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">findAccountByAid</span><span class="params">(<span class="keyword">int</span> aid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>AccountDao.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.dao.AccountDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;accountUserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Account&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            让mybatis调用第二步查询</span></span><br><span class="line"><span class="comment">                select属性表示要调用的第二步查询的标示</span></span><br><span class="line"><span class="comment">                fetchType=&quot;lazy&quot; 表示这次调用第二步查询会延迟加载</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">select</span>=<span class="string">&quot;com.dao.UserDao.findUserByUid&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAccountByAid&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;accountUserMap&quot;</span>&gt;</span></span><br><span class="line">        select * from t_account where aid=#&#123;aid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>UserDao.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据uid查询用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">findUserByUid</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>UserDao.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByUid&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user where uid=#&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标: 使用者只调用第一次查询，由mybatis选择调用第二次查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 懒加载是需要配置的:</span></span><br><span class="line"><span class="comment"> *  1. 局部懒加载: 只在你配置了的地方才会进行懒加载</span></span><br><span class="line"><span class="comment"> *  2. 全局懒加载: 在核心配置文件添加</span></span><br><span class="line"><span class="comment"> 	&lt;settings&gt;</span></span><br><span class="line"><span class="comment">    	&lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</span></span><br><span class="line"><span class="comment">    	&lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;</span></span><br><span class="line"><span class="comment">	&lt;/settings&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//如果只需要查询账号信息</span></span><br><span class="line">        SqlSession sqlSession = SqlSessionFactoryUtil.openSqlSession();</span><br><span class="line">        AccountDao accountDao = sqlSession.getMapper(AccountDao.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询aid为1的账号信息</span></span><br><span class="line">        Account account = accountDao.findAccountByAid(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果需要先查询到账号信息，然后再查询该账号所属的用户信息</span></span><br><span class="line">        <span class="comment">//UserDao userDao = sqlSession.getMapper(UserDao.class);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将第一步查询到的uid传入到第二步</span></span><br><span class="line">        <span class="comment">//User user = userDao.findUserByUid(account.getUid());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将第二步查询到的user，设置到第一步查询到的account里面</span></span><br><span class="line">        <span class="comment">//account.setUser(user);</span></span><br><span class="line"></span><br><span class="line">        System.out.println(account.getMoney());</span><br><span class="line"></span><br><span class="line">        SqlSessionFactoryUtil.commitAndClose(sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Collection-实现延迟加载-一对多-多对多"><a href="#Collection-实现延迟加载-一对多-多对多" class="headerlink" title="Collection 实现延迟加载  (一对多,多对多)"></a>Collection 实现延迟加载  (一对多,多对多)</h2><ul>
<li>完成加载用户对象时，查询该用户所拥有的账户信息。等账户信息使用的时候再查询.</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 根据uid查询用户</span></span><br><span class="line">SELECT * FROM t_user where uid=#&#123;uid&#125;</span><br><span class="line"><span class="comment">-- 2. 查询当前用户下的账户信息</span></span><br><span class="line"><span class="comment">-- 把用户里面的uid作为条件查询账户表</span></span><br><span class="line">SELECT * FROM t_account WHERE uid = #&#123;uid&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Account.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>User.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">// 用户姓名</span></span><br><span class="line">    <span class="keyword">private</span> String sex;<span class="comment">// 性别</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;<span class="comment">// 生日</span></span><br><span class="line">    <span class="keyword">private</span> String address;<span class="comment">// 地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//表达关系:1个用户对应多个账户</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>UserDao.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据uid查询用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">findUserByUid</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>UserDao.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userAccountListMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;accountList&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">select</span>=<span class="string">&quot;com.dao.AccountDao.findAccountListByUid&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByUid&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userAccountListMap&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user where uid=#&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>AccountDao.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据uid查询账号的集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAccountListByUid</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>AccountDao.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.dao.AccountDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAccountListByUid&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Account&quot;</span>&gt;</span></span><br><span class="line">        select * from t_account where uid=#&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>测试方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标: 使用者只调用第一次查询，由mybatis选择调用第二次查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 懒加载是需要配置的:</span></span><br><span class="line"><span class="comment"> *  1. 局部懒加载: 只在你配置了的地方才会进行懒加载</span></span><br><span class="line"><span class="comment"> *  2. 全局懒加载:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = SqlSessionFactoryUtil.openSqlSession();</span><br><span class="line"></span><br><span class="line">        UserDao userDao = sqlSession.getMapper(UserDao.class);</span><br><span class="line"></span><br><span class="line">        User user = userDao.findUserByUid(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(user.getUsername());</span><br><span class="line"></span><br><span class="line">        SqlSessionFactoryUtil.commitAndClose(sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="MyBatis注解开发"><a href="#MyBatis注解开发" class="headerlink" title="MyBatis注解开发"></a>MyBatis注解开发</h1><h2 id="使用-Mybatis-注解实现基本CRUD"><a href="#使用-Mybatis-注解实现基本CRUD" class="headerlink" title="使用 Mybatis 注解实现基本CRUD"></a>使用 Mybatis 注解实现基本CRUD</h2><ul>
<li>Dao</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mybatis的注解开发，就是在对应的Dao接口的方法上添加注解</span></span><br><span class="line"><span class="comment"> * 查询方法就对应Select注解</span></span><br><span class="line"><span class="comment"> * 添加方法就对应Insert注解</span></span><br><span class="line"><span class="comment"> * 删除方法就对应Delete注解</span></span><br><span class="line"><span class="comment"> * 修改方法就对应Update注解</span></span><br><span class="line"><span class="comment"> * 查询自增长的主键</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 要添加进数据库的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受到影响的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into t_user (username,address,sex,birthday) values (#&#123;username&#125;,#&#123;address&#125;,#&#123;sex&#125;,#&#123;birthday&#125;)&quot;)</span></span><br><span class="line">    <span class="meta">@SelectKey(keyProperty = &quot;uid&quot;,keyColumn = &quot;uid&quot;,resultType = int.class,before = false,statement = &quot;select last_insert_id()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from t_user where uid=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Update(&quot;update t_user set username=#&#123;username&#125;,sex=#&#123;sex&#125;,address=#&#123;address&#125; where uid=#&#123;uid&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from t_user where uid=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>核心配置文件SqlMapConfig.xml</li>
</ul>
<p> <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/Java/mybatis/2/img/1535361902219.png" alt="1535361902219"></p>
<h2 id="使用Mybatis注解实现复杂关系映射开发"><a href="#使用Mybatis注解实现复杂关系映射开发" class="headerlink" title="使用Mybatis注解实现复杂关系映射开发"></a>使用Mybatis注解实现复杂关系映射开发</h2><h3 id="复杂关系映射的注解说明"><a href="#复杂关系映射的注解说明" class="headerlink" title="复杂关系映射的注解说明"></a>复杂关系映射的注解说明</h3><ul>
<li>@Results 注解 , 代替的是标签<resultMap> </resultMap></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该注解中可以使用单个@Result 注解，也可以使用@Result 集合</span></span><br><span class="line"><span class="meta">@Results(&#123;@Result()， @Result()&#125;)</span>或<span class="meta">@Results(@Result())</span></span><br></pre></td></tr></table></figure>

<ul>
<li>@Resutl 注解 ,代替了 <id>标签和<result>标签 ,</result></id></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Result(column=&quot;列名&quot;,property=&quot;属性名&quot;,one=@One(select=&quot;指定用来多表查询的 sqlmapper&quot;),many=@Many(select=&quot;&quot;))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Resutl</span> 注解属性说明	</span><br><span class="line">    column 数据库的列名</span><br><span class="line">    Property 需要装配的属性名</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String userSex;</span><br><span class="line">    <span class="keyword">private</span> String userAddress;</span><br><span class="line">    <span class="keyword">private</span> Date userBirthday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Results(id = &quot;userInfoMap&quot;,value = &#123;</span></span><br><span class="line"><span class="meta">    @Result(column = &quot;uid&quot;,property = &quot;userId&quot;,id = true),//id为true表示该字段是主键</span></span><br><span class="line"><span class="meta">    @Result(column = &quot;sex&quot;,property = &quot;userSex&quot;),</span></span><br><span class="line"><span class="meta">    @Result(column = &quot;address&quot;,property = &quot;userAddress&quot;),</span></span><br><span class="line"><span class="meta">    @Result(column = &quot;birthday&quot;,property = &quot;userBirthday&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function">List&lt;UserInfo&gt; <span class="title">findAllUserInfos</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>@One 注解（一对一）,代替了<assocation>标签，是多表查询的关键，在注解中用来指定子查询返回单一对象。 </assocation></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Result(column=&quot;列名&quot;,property=&quot;属性名&quot;,one=@One(select=&quot;指定用来多表查询的 sqlmapper&quot;))</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>@Many 注解（一对多） ,代替了<Collection>标签,是是多表查询的关键，在注解中用来指定子查询返回对象集合 </Collection></p>
<p>​    注意：聚集元素用来处理“一对多”的关系。需要指定映射的 Java 实体类的属性，属性的 javaType（一般<br>为 ArrayList） 但是注解中可以不定义； </p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Result(property=&quot;&quot;,column=&quot;&quot;,many=@Many(select=&quot;&quot;))</span></span><br></pre></td></tr></table></figure>



<h3 id="使用注解实现一对一复杂关系映射及延迟加载"><a href="#使用注解实现一对一复杂关系映射及延迟加载" class="headerlink" title="使用注解实现一对一复杂关系映射及延迟加载"></a>使用注解实现一对一复杂关系映射及延迟加载</h3><ul>
<li>查询账户(Account)信息并且关联查询用户(User)信息。先查询账户(Account)信息，当我们需要用到用户(User)信息时再查询用户(User)信息。</li>
</ul>
<ul>
<li>User.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">// 用户姓名</span></span><br><span class="line">    <span class="keyword">private</span> String sex;<span class="comment">// 性别</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;<span class="comment">// 生日</span></span><br><span class="line">    <span class="keyword">private</span> String address;<span class="comment">// 地址</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>Account.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表达关系:1个用户对应1个账户</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>AccountDao.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Results就是手动映射</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据aid查询账号信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from t_account where aid=#&#123;aid&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Results(</span></span><br><span class="line"><span class="meta">            &#123;</span></span><br><span class="line"><span class="meta">                    //映射主键</span></span><br><span class="line"><span class="meta">                    @Result(column = &quot;uid&quot;,property = &quot;uid&quot;,id = true),</span></span><br><span class="line"><span class="meta">                    //调用第二步查询进行一对一映射</span></span><br><span class="line"><span class="meta">                    @Result(property = &quot;user&quot;,column = &quot;uid&quot;,one = @One(select = &quot;com.jwang.dao.UserDao.findUserByUid&quot;))</span></span><br><span class="line"><span class="meta">            &#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="function">Account <span class="title">findAccountByAid</span><span class="params">(<span class="keyword">int</span> aid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>UserDao.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据uid查询用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from t_user where uid=#&#123;uid&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">findUserByUid</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标: 使用者只调用第一次查询，由mybatis选择调用第二次查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 懒加载是需要配置的:</span></span><br><span class="line"><span class="comment"> *  1. 局部懒加载: 只在你配置了的地方才会进行懒加载</span></span><br><span class="line"><span class="comment"> *  2. 全局懒加载:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//如果只需要查询账号信息</span></span><br><span class="line">        SqlSession sqlSession = SqlSessionFactoryUtil.openSqlSession();</span><br><span class="line">        AccountDao accountDao = sqlSession.getMapper(AccountDao.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询aid为1的账号信息</span></span><br><span class="line">        Account account = accountDao.findAccountByAid(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(account);</span><br><span class="line"></span><br><span class="line">        SqlSessionFactoryUtil.commitAndClose(sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用注解实现一对多复杂关系映射及延迟加载"><a href="#使用注解实现一对多复杂关系映射及延迟加载" class="headerlink" title="使用注解实现一对多复杂关系映射及延迟加载"></a>使用注解实现一对多复杂关系映射及延迟加载</h3><ul>
<li>完成加载用户对象时，查询该用户所拥有的账户信息。 等账户信息使用的时候再查询.</li>
</ul>
<ul>
<li>User.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">// 用户姓名</span></span><br><span class="line">    <span class="keyword">private</span> String sex;<span class="comment">// 性别</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;<span class="comment">// 生日</span></span><br><span class="line">    <span class="keyword">private</span> String address;<span class="comment">// 地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于保存用户的多个账户信息</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accounts;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>UserDao.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据uid查询用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from t_user where uid=#&#123;uid&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(id = true,column = &quot;uid&quot;,property = &quot;uid&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;accountList&quot;,column = &quot;uid&quot;,many = @Many(select = &quot;com.jwang.dao.AccountDao.findAccountListByUid&quot;))</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function">User <span class="title">findUserByUid</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>AccountDao.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据uid查询账号的集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from t_account where uid=#&#123;uid&#125;&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAccountListByUid</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Java框架</category>
      </categories>
      <tags>
        <tag>Java框架</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring源码- IOC- Bean的初始化-循环依赖的解决</title>
    <url>/jwangcloud/568164911/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/mybatis.jpeg" width="1000" height="300" align="middle">



<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在实际工作中，经常由于设计不佳或者各种因素，导致类之间相互依赖。这些类可能单独使用时不会出问题，但是在使用Spring进行管理的时候可能就会抛出BeanCurrentlyInCreationException等异常 。当抛出这种异常时表示Spring解决不了该循环依赖，本文将简要说明Spring对于循环依赖的解决方法。</p>
<span id="more"></span>

<p>循环依赖的产生和解决的前提<br>循环依赖的产生可能有很多种情况，例如：</p>
<p>A的构造方法中依赖了B的实例对象，同时B的构造方法中依赖了A的实例对象<br>A的构造方法中依赖了B的实例对象，同时B的某个field或者setter需要A的实例对象，以及反之<br>A的某个field或者setter依赖了B的实例对象，同时B的某个field或者setter依赖了A的实例对象，以及反之<br>当然，Spring对于循环依赖的解决不是无条件的，首先前提条件是针对scope单例并且没有显式指明不需要解决循环依赖的对象，而且要求该对象没有被代理过。同时Spring解决循环依赖也不是万能，以上三种情况只能解决两种，第一种在构造方法中相互依赖的情况Spring也无力回天。结论先给在这，下面来看看Spring的解决方法，知道了解决方案就能明白为啥第一种情况无法解决了。</p>
<p>Spring对于循环依赖的解决<br>Spring循环依赖的理论依据其实是Java基于引用传递，当我们获取到对象的引用时，对象的field或者或属性是可以延后设置的。<br>Spring单例对象的初始化其实可以分为三步：</p>
<p>createBeanInstance， 实例化，实际上就是调用对应的构造方法构造对象，此时只是调用了构造方法，spring xml中指定的property并没有进行populate<br>populateBean，填充属性，这步对spring xml中指定的property进行populate<br>initializeBean，调用spring xml中指定的init方法，或者AfterPropertiesSet方法<br>会发生循环依赖的步骤集中在第一步和第二步。<br>三级缓存<br>对于单例对象来说，在Spring的整个容器的生命周期内，有且只存在一个对象，很容易想到这个对象应该存在Cache中，Spring大量运用了Cache的手段，在循环依赖问题的解决过程中甚至使用了“三级缓存”。</p>
<p>“三级缓存”主要是指</p>
]]></content>
      <categories>
        <category>Java框架</category>
      </categories>
      <tags>
        <tag>Java框架</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Java虚拟机02--类加载器</title>
    <url>/jwangcloud/2799334683/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/JVM.png" width="1000" height="200" align="middle">


<h2 id="Java文件编译执行的过程"><a href="#Java文件编译执行的过程" class="headerlink" title="Java文件编译执行的过程"></a>Java文件编译执行的过程</h2><p>​    要想理解类加载器的话，务必要先清楚对于一个Java文件，它从编译到执行的整个过程。</p>
<span id="more"></span>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/image-20201020235156423.png" alt="image-20201020235156423"></p>
<ul>
<li>类加载器：用于装载字节码文件(.class文件)</li>
<li>运行时数据区：用于分配存储空间</li>
<li>执行引擎：执行字节码文件或本地方法</li>
<li>垃圾回收器：用于对JVM中的垃圾内容进行回收</li>
</ul>
<h2 id="类加载器介绍"><a href="#类加载器介绍" class="headerlink" title="类加载器介绍"></a>类加载器介绍</h2><p>​    前面提到过，JVM只会运行二进制文件，而类加载器（ClassLoader）的主要作用就是将字节码文件加载到JVM中，从而让Java程序能够启动起来。现有的类加载器基本上都是java.lang.ClassLoader的子类，该类的只要职责就是用于将指定的类找到或生成对应的字节码文件，同时类加载器还会负责加载程序所需要的资源。该类中主要方法如下所示：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>loadClass(String name)</td>
<td>加载名称为 <code>name</code> 的类，并返回 <code>java.lang.Class</code> 类的实例</td>
</tr>
<tr>
<td>findClass(String name)</td>
<td>查找名称为 <code>name</code> 的类，并返回 <code>java.lang.Class</code> 类的实例</td>
</tr>
<tr>
<td>findLoadedClass(String name)</td>
<td>查找名称为 <code>name</code> 的已经被加载过的类，并返回 <code>java.lang.Class</code> 类的实例</td>
</tr>
<tr>
<td>defineClass(String name, byte[] b, int off, int len)</td>
<td>把字节数组 <code>b</code> 中的内容转换成 Java 类，并返回 <code>java.lang.Class</code> 类的实例</td>
</tr>
<tr>
<td>resolveClass(Class&lt;?&gt; c)</td>
<td>链接到指定类</td>
</tr>
</tbody></table>
<h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>​    类加载器是java.lang.ClassLoader类的子类对象或者C++代码编写的Bootstrap ClassLoader，它们的作用是加载字节码到JVM内存，得到Class类的对象。</p>
<p>​    类加载器根据各自加载范围的不同，划分为四种类加载器：</p>
<ul>
<li><p><strong>启动类加载器(BootStrap ClassLoader)：</strong></p>
<p>该类并不继承ClassLoader类，其是由C++编写实现。用于加载<strong>JAVA_HOME/jre/lib</strong>目录下的类库。</p>
</li>
<li><p><strong>扩展类加载器(ExtClassLoader)：</strong></p>
<p>该类是ClassLoader的子类，主要加载<strong>JAVA_HOME/jre/lib/ext</strong>目录中的类库。</p>
</li>
<li><p><strong>应用类加载器(AppClassLoader)：</strong></p>
<p>该类是ClassLoader的子类，主要用于加载<strong>classPath</strong>下的类，也就是加载开发者自己编写的Java类。</p>
</li>
<li><p><strong>自定义类加载器：</strong></p>
<p>开发者自定义类继承ClassLoader，实现自定义类加载规则。</p>
</li>
</ul>
<p>上述三种类加载器的层次结构如下如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/image-20201022112615215.png" alt="image-20201022112615215"></p>
<p>​    类加载器的体系并不是“继承”体系，而是<strong>委派体系</strong>，类加载器首先会到自己的parent中查找类或者资源，如果找不到才会到自己本地查找。类加载器的委托行为动机是为了避免相同的类被加载多次。</p>
<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>加载器的类图如下:</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/image-20201022105347634.png" alt="image-20201022105347634"></p>
<h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Launcher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Launcher.ExtClassLoader var1;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//扩展类加载器</span></span><br><span class="line">        var1 = Launcher.ExtClassLoader.getExtClassLoader();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException var10) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(<span class="string">&quot;Could not create extension class loader&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//将load属性，设为应用类加载器</span></span><br><span class="line">        <span class="keyword">this</span>.loader = Launcher.AppClassLoader.getAppClassLoader(var1);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException var9) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(<span class="string">&quot;Could not create application class loader&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Thread.currentThread().setContextClassLoader(<span class="keyword">this</span>.loader);</span><br><span class="line">    String var2 = System.getProperty(<span class="string">&quot;java.security.manager&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (var2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        SecurityManager var3 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(var2) &amp;&amp; !<span class="string">&quot;default&quot;</span>.equals(var2)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                var3 = (SecurityManager)<span class="keyword">this</span>.loader.loadClass(var2).newInstance();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException var5) &#123;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InstantiationException var6) &#123;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException var7) &#123;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassCastException var8) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            var3 = <span class="keyword">new</span> SecurityManager();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (var3 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(<span class="string">&quot;Could not create SecurityManager: &quot;</span> + var2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.setSecurityManager(var3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="ExtClassLoader类源码"><a href="#ExtClassLoader类源码" class="headerlink" title="ExtClassLoader类源码"></a>ExtClassLoader类源码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Launcher.<span class="function">ExtClassLoader <span class="title">getExtClassLoader</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//调用私有方法getExtDirs(),用于加载指定目录下的文件信息</span></span><br><span class="line">    <span class="keyword">final</span> File[] var0 = getExtDirs();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Launcher.ExtClassLoader)AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedExceptionAction&lt;Launcher.ExtClassLoader&gt;() &#123;</span><br><span class="line">            <span class="keyword">public</span> Launcher.<span class="function">ExtClassLoader <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> var1 = var0.length;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> var2 = <span class="number">0</span>; var2 &lt; var1; ++var2) &#123;</span><br><span class="line">                    MetaIndex.registerDirectory(var0[var2]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Launcher.ExtClassLoader(var0);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (PrivilegedActionException var2) &#123;</span><br><span class="line">        <span class="keyword">throw</span> (IOException)var2.getException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> File[] getExtDirs() &#123;</span><br><span class="line">    <span class="comment">//该方法内部会加载java.ext.dirs下的文件内容</span></span><br><span class="line">    String var0 = System.getProperty(<span class="string">&quot;java.ext.dirs&quot;</span>);</span><br><span class="line">    File[] var1;</span><br><span class="line">    <span class="keyword">if</span> (var0 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        StringTokenizer var2 = <span class="keyword">new</span> StringTokenizer(var0, File.pathSeparator);</span><br><span class="line">        <span class="keyword">int</span> var3 = var2.countTokens();</span><br><span class="line">        var1 = <span class="keyword">new</span> File[var3];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> var4 = <span class="number">0</span>; var4 &lt; var3; ++var4) &#123;</span><br><span class="line">            var1[var4] = <span class="keyword">new</span> File(var2.nextToken());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        var1 = <span class="keyword">new</span> File[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="AppClassLoader类源码"><a href="#AppClassLoader类源码" class="headerlink" title="AppClassLoader类源码"></a>AppClassLoader类源码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ClassLoader <span class="title">getAppClassLoader</span><span class="params">(<span class="keyword">final</span> ClassLoader var0)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//该方法内部会加载java.class.path下的文件内容</span></span><br><span class="line">    <span class="keyword">final</span> String var1 = System.getProperty(<span class="string">&quot;java.class.path下的&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> File[] var2 = var1 == <span class="keyword">null</span> ? <span class="keyword">new</span> File[<span class="number">0</span>] : Launcher.getClassPath(var1);</span><br><span class="line">    <span class="keyword">return</span> (ClassLoader)AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Launcher.AppClassLoader&gt;() &#123;</span><br><span class="line">        <span class="keyword">public</span> Launcher.<span class="function">AppClassLoader <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            URL[] var1x = var1 == <span class="keyword">null</span> ? <span class="keyword">new</span> URL[<span class="number">0</span>] : Launcher.pathToURLs(var2);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Launcher.AppClassLoader(var1x, var0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="查看代码的类加载流程"><a href="#查看代码的类加载流程" class="headerlink" title="查看代码的类加载流程"></a>查看代码的类加载流程</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String bootPath = System.getProperty(<span class="string">&quot;sun.boot.class.path&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;BootStrap ClassLoader加载的类的路径:------------------ &quot;</span>);</span><br><span class="line">        System.out.println(bootPath.replaceAll(<span class="string">&quot;;&quot;</span>,System.lineSeparator()));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;ExtClassLoader加载的类的路径:------------------&quot;</span>);</span><br><span class="line">        String extPath = System.getProperty(<span class="string">&quot;java.ext.dirs&quot;</span>);</span><br><span class="line">        System.out.println(extPath.replaceAll(<span class="string">&quot;;&quot;</span>,System.lineSeparator()));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;AppClassLoader加载的类的路径:------------------&quot;</span>);</span><br><span class="line">        String appPath = System.getProperty(<span class="string">&quot;java.class.path&quot;</span>);</span><br><span class="line">        System.out.println(appPath.replaceAll(<span class="string">&quot;;&quot;</span>,System.lineSeparator()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BootStrap ClassLoader加载的类的路径:------------------ </span><br><span class="line">C:&#x2F;Program Files&#x2F;Java&#x2F;jdk1.8.0_101&#x2F;jre&#x2F;lib&#x2F;resources.jar</span><br><span class="line">C:&#x2F;Program Files&#x2F;Java&#x2F;jdk1.8.0_101&#x2F;jre&#x2F;lib&#x2F;rt.jar</span><br><span class="line">C:&#x2F;Program Files&#x2F;Java&#x2F;jdk1.8.0_101&#x2F;jre&#x2F;lib&#x2F;sunrsasign.jar</span><br><span class="line">C:&#x2F;Program Files&#x2F;Java&#x2F;jdk1.8.0_101&#x2F;jre&#x2F;lib&#x2F;jsse.jar</span><br><span class="line">C:&#x2F;Program Files&#x2F;Java&#x2F;jdk1.8.0_101&#x2F;jre&#x2F;lib&#x2F;jce.jar</span><br><span class="line">C:&#x2F;Program Files&#x2F;Java&#x2F;jdk1.8.0_101&#x2F;jre&#x2F;lib&#x2F;charsets.jar</span><br><span class="line">C:&#x2F;Program Files&#x2F;Java&#x2F;jdk1.8.0_101&#x2F;jre&#x2F;lib&#x2F;jfr.jar</span><br><span class="line">C:&#x2F;Program Files&#x2F;Java&#x2F;jdk1.8.0_101&#x2F;jre&#x2F;classes</span><br><span class="line"></span><br><span class="line">ExtClassLoader加载的类的路径:------------------</span><br><span class="line">C:&#x2F;Program Files&#x2F;Java&#x2F;jdk1.8.0_101&#x2F;jre&#x2F;lib&#x2F;ext</span><br><span class="line">C:&#x2F;WINDOWS&#x2F;Sun&#x2F;Java&#x2F;lib&#x2F;ext</span><br><span class="line"></span><br><span class="line">AppClassLoader加载的类的路径:------------------</span><br><span class="line">C:&#x2F;Program Files&#x2F;Java&#x2F;jdk1.8.0_101&#x2F;jre&#x2F;lib&#x2F;charsets.jar</span><br><span class="line">C:&#x2F;Program Files&#x2F;Java&#x2F;jdk1.8.0_101&#x2F;jre&#x2F;lib&#x2F;deploy.jar</span><br><span class="line">C:&#x2F;Program Files&#x2F;Java&#x2F;jdk1.8.0_101&#x2F;jre&#x2F;lib&#x2F;ext&#x2F;access-bridge-64.jar</span><br></pre></td></tr></table></figure>

<h3 id="类加载模型"><a href="#类加载模型" class="headerlink" title="类加载模型"></a>类加载模型</h3><p>​    在JVM中，对于类加载模型提供了三种，分别为全盘加载、双亲委派、缓存机制。</p>
<ul>
<li><strong>全盘加载：</strong></li>
</ul>
<p>​    即当一个类加载器负责加载某个Class时，该Class所依赖和引用的其他Class也将由该类加载器负责载入，除非显示指定使用另外一个类加载器来载入。</p>
<ul>
<li><strong>双亲委派：</strong></li>
</ul>
<p>​    即先让父类加载器试图加载该Class，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类。简单来说就是，某个特定的类加载器在接到加载类的请求时，首先将加载任务委托给父加载器，依次递归，如果父加载器可以完成类加载任务，就成功返回；只有父加载器无法完成此加载任务时，才自己去加载。</p>
<ul>
<li><strong>缓存机制：</strong></li>
</ul>
<p>​    会保证所有加载过的Class都会被缓存，当程序中需要使用某个Class时，类加载器先从缓存区中搜寻该Class，只有当缓存区中不存在该Class对象时，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存入缓冲区中。从而可以理解为什么修改了Class后，必须重新启动JVM，程序所做的修改才会生效的原因。</p>
<h2 id="双亲委派解析"><a href="#双亲委派解析" class="headerlink" title="双亲委派解析"></a>双亲委派解析</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>​    上述已经大致介绍了双亲委派，对于双亲委派具体的工作流程，如下图所示：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/image-20201022114925045.png" alt="image-20201022114925045"></p>
<h3 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">  <span class="comment">//调用本类加载器的loadClass(String name, boolean resolve)方法</span></span><br><span class="line">  <span class="keyword">return</span> loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">         <span class="comment">// 首先调用当前类加载器的findLoadedClass(name)，检查当前类加载器是否已加载过指定name的类</span></span><br><span class="line">        Class c = findLoadedClass(name);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//判断当前类加载器如果没有加载过</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//判断当前类加载器是否有父类加载器</span></span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//如果当前类加载器有父类加载器，则调用父类加载器的loadClass(name,false)方法</span></span><br><span class="line">         			<span class="comment">//父类加载器的loadClass方法，又会检查自己是否已经加载过</span></span><br><span class="line">                    c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//当前类加载器没有父类加载器，说明当前类加载器是BootStrapClassLoader</span></span><br><span class="line">          			<span class="comment">//则调用BootStrap ClassLoader的方法加载类</span></span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                <span class="comment">// to find the class.</span></span><br><span class="line">                <span class="comment">// 如果调用父类的类加载器无法对类进行加载，则用自己的findClass(name)方法进行加载</span></span><br><span class="line">                <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                c = findClass(name);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JVM为什么采用双亲委派机制"><a href="#JVM为什么采用双亲委派机制" class="headerlink" title="JVM为什么采用双亲委派机制"></a>JVM为什么采用双亲委派机制</h3><p>1）通过双亲委派机制可以避免某一个类被重复加载，当父类已经加载后则无需重复加载，保证唯一性。</p>
<p>2）为了安全，保证类库API不会被修改</p>
<p>在工程中新建java.lang包，接着在该包下新建String类，并定义main函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;demo info&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    此时执行main函数，会出现异常，在类 java.lang.String 中找不到 main 方法</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/image-20201022120956230.png" alt="image-20201022120956230"></p>
<p>​    出现该信息是因为由双亲委派的机制，java.lang.String的在启动类加载器(Bootstrap classLoader)得到加载，因为在核心jre库中有其相同名字的类文件，但该类中并没有main方法。这样就能防止恶意篡改核心API库。</p>
<h2 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h2><p>​    对于自定义类加载器的实现也是很简单，只需要继承ClassLoader类，覆写findClass方法即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义类加载器，读取指定的类路径classPath下的class文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String classPath;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClassLoader</span><span class="params">(String classPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.classPath = classPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            data = loadByte(name);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> defineClass(name, data, <span class="number">0</span>, data.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] loadByte(String name) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        name = name.replaceAll(<span class="string">&quot;//.&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(classPath + <span class="string">&quot;/&quot;</span> + name + <span class="string">&quot;.class&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> len = fis.available();</span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[len];</span><br><span class="line">        fis.read(data);</span><br><span class="line">        fis.close();</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MyClassLoader classLoader = <span class="keyword">new</span> MyClassLoader(<span class="string">&quot;D://workspace//course//java97//redisLock//src//main//java&quot;</span>);</span><br><span class="line">        Class clazz = classLoader.loadClass(<span class="string">&quot;com.itheima.demo.User&quot;</span>);</span><br><span class="line">        System.out.println(clazz.getClassLoader().getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写一个测试实体类，接着生成该类的字节码文件。</p>
<p>当存在.java文件时，根据双亲委派机制，显示当前类加载器为AppClassLoader，而当将.java文件删除时，则显示使用的是自定义的类加载器。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>类加载器</tag>
        <tag>类加载机制</tag>
        <tag>双亲委派</tag>
        <tag>自定义类加载器</tag>
      </tags>
  </entry>
  <entry>
    <title>Java虚拟机01--JVM理解</title>
    <url>/jwangcloud/3952652746/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/JVM.png" width="1000" height="200" align="middle">



<p>​    对于一个线上系统来说，经常性的会发生如：</p>
<ul>
<li>系统突然卡死，无法访问，甚至出现OOM。</li>
<li>服务器的CPU负载突然升高。</li>
<li>直接使用默认JVM参数上线，最终发现系统宕机。</li>
<li>想要调整JVM参数，但是无从下手。。。。。</li>
</ul>
<p>对于这些问题的出现，都是因为对JVM了解的不够多而导致的。本章节会主要讲解JVM相关内容。</p>
<span id="more"></span>

<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>​    JVM全称Java Virtual Machine，即Java虚拟机。它本身是一个虚拟计算机。Java虚拟机基于二进制字节码执行，由一套字节码指令集、一组寄存器、一个栈、一个垃圾回收堆、一个方法区等组成。JVM屏蔽了与操作系统平台相关的信息，从而能够让Java程序只需要生成能够在JVM上运行的字节码文件。通过该机制实现的跨平台性。因此这也是为什么说Java能够做到“一处编译、处处运行”的原因。</p>
<h2 id="JVM生命周期"><a href="#JVM生命周期" class="headerlink" title="JVM生命周期"></a>JVM生命周期</h2><p>​    JVM的生命周期分为三个阶段，分别为：启动、运行、死亡。</p>
<ul>
<li><p><strong>启动：</strong></p>
<p>当启动一个Java程序时，JVM的实例就已经产生。对于拥有main函数的类就是JVM实例运行的起点。</p>
</li>
<li><p><strong>运行：</strong></p>
<p>main()方法是一个程序的初始起点，任何线程均可由在此处启动。在JVM内部有两种线程类型，分别为：用户线程和守护线程。JVM通常使用的是守护线程，而main()使用的则是用户线程。守护线程会随着用户线程的结束而结束。</p>
</li>
<li><p><strong>死亡：</strong></p>
<p>当程序中的用户线程都中止，JVM才会退出。</p>
</li>
</ul>
<h2 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h2><p>​    JVM内存结构是JVM学习中非常重要的一部分，并且在JDK7和JDK8中也进行了一些改动。</p>
<p>​    内存是非常重要的系统资源，是硬盘和 CPU 的中间仓库及桥梁，承载着操作系统和应用程序的实时运行。JVM 内存结构规定了 Java 在运行过程中内存申请、分配、管理的策略，保证了 JVM 的高效稳定运行。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/image-20201019231114563.png" alt="image-20201019231114563"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/image-20201019231126133.png" alt="image-20201019231126133"></p>
<p><strong>虚拟机栈：</strong></p>
<p>​    线程私有的，虚拟机栈对应方法调用到执行完成的整个过程。保存执行方法时的<strong>局部变量、动态连接信息、方法返回地址信息</strong>等等。方法开始执行的时候会进栈，方法执行完会出栈【相当于清空了数据】。不需要进行GC。</p>
<p><strong>本地方法栈：</strong></p>
<p>​    与虚拟机栈类似。本地方法栈是为虚拟机<strong>执行本地方法时提供服务的</strong>。不需要进行GC。本地方法一般是由其他语言编写。</p>
<p><strong>程序计数器：</strong></p>
<p>​    线程私有的。内部保存的字节码的行号。用于记录正在执行的字节码指令的地址。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/image-20200801234325253.png" alt="image-20200801234325253"></p>
<p>​    java虚拟机对于多线程是通过线程轮流切换并且分配线程执行时间。在任何的一个时间点上，一个处理器只会处理执行一个线程，如果当前被执行的这个线程它所分配的执行时间用完了【挂起】。处理器会切换到另外的一个线程上来进行执行。并且这个线程的执行时间用完了，接着处理器就会又来执行被挂起的这个线程。</p>
<p>​    那么现在有一个问题就是，当前处理器如何能够知道，对于这个被挂起的线程，它上一次执行到了哪里？那么这时就需要从程序计数器中来回去到当前的这个线程他上一次执行的行号，然后接着继续向下执行。</p>
<p>​    程序计数器是JVM规范中唯一一个没有规定出现OOM的区域，所以这个空间也不会进行GC。</p>
<p><strong>本地内存：</strong></p>
<p>​    它又叫做<strong>堆外内存</strong>，线程共享的区域，本地内存这块区域是不会受到JVM的控制的，也就是说对于这块区域是不会发生GC的。因此对于整个java的执行效率是提升非常大的。</p>
<p><strong>堆：</strong></p>
<p>​    线程共享的区域。主要用来保存<strong>对象实例，数组</strong>等，当堆中没有内存空间可分配给实例，也无法再扩展时，则抛出OutOfMemoryError异常。</p>
<p>​    在JAVA7中堆内会存在**年轻代、老年代和方法区(永久代)**。</p>
<p>​    1）Young区被划分为三部分，Eden区和两个大小严格相同的Survivor区，其中，Survivor区间中，某一时刻只有其中一个是被使用的，另外一个留做垃圾收集时复制对象用。在Eden区变满的时候， GC就会将存活的对象移到空闲的Survivor区间中，根据JVM的策略，在经过几次垃圾收集后，任然存活于Survivor的对象将被移动到Tenured区间。</p>
<p>​    2）Tenured区主要保存生命周期长的对象，一般是一些老的对象，当一些对象在Young复制转移一定的次数以后，对象就会被转移到Tenured区。</p>
<p>​    3）Perm代主要保存<strong>保存的类信息、静态变量、常量、编译后的代码</strong>，在java7中堆上方法区会受到GC的管理的。方法区【永久代】是有一个大小的限制的。如果大量的动态生成类，就会放入到方法区【永久代】，很容易造成OOM。</p>
<p>​    为了避免方法区出现OOM，所以在java8中将堆上的方法区【永久代】给移动到了本地内存上，重新开辟了一块空间，叫做<strong>元空间</strong>。那么现在就可以避免掉OOM的出现了。</p>
<h2 id="元空间-MetaSpace-介绍"><a href="#元空间-MetaSpace-介绍" class="headerlink" title="元空间(MetaSpace)介绍"></a>元空间(MetaSpace)介绍</h2><p>​    在 HotSpot JVM 中，永久代（ ≈ 方法区）中用于存放类和方法的元数据以及常量池，比如Class 和 Method。每当一个类初次被加载的时候，它的元数据都会放到永久代中。</p>
<p>​    永久代是有大小限制的，因此如果加载的类太多，很有可能导致永久代内存溢出，即OutOfMemoryError，为此不得不对虚拟机做调优。</p>
<p>​    那么，Java 8 中 PermGen 为什么被移出 HotSpot JVM 了？</p>
<p>官网给出了解释：<a href="http://openjdk.java.net/jeps/122">http://openjdk.java.net/jeps/122</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This is part of the JRockit and Hotspot convergence effort. JRockit customers do not need to configure the permanent generation (since JRockit does not have a permanent generation) and are accustomed to not configuring the permanent generation.</span><br><span class="line"></span><br><span class="line">移除永久代是为融合HotSpot JVM与 JRockit VM而做出的努力，因为JRockit没有永久代，不需要配置永久代。</span><br></pre></td></tr></table></figure>

<p>1）由于 PermGen 内存经常会溢出，引发OutOfMemoryError，因此 JVM 的开发者希望这一块内存可以更灵活地被管理，不要再经常出现这样的 OOM。</p>
<p>2）移除 PermGen 可以促进 HotSpot JVM 与 JRockit VM 的融合，因为 JRockit 没有永久代。</p>
<p>​    准确来说，Perm 区中的字符串常量池被移到了堆内存中是在 Java7 之后，Java 8 时，PermGen 被元空间代替，其他内容比如<strong>类元信息、字段、静态属性、方法、常量</strong>等都移动到元空间区。比如 java/lang/Object 类元信息、静态属性 System.out、整型常量等。</p>
<p>​    元空间的本质和永久代类似，都是对 JVM 规范中方法区的实现。不过元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存限制。<br>​<br>​<br>​</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>深入理解JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Java虚拟机03--垃圾回收机制</title>
    <url>/jwangcloud/1150816938/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/JVM.png" width="1000" height="200" align="middle">


<h2 id="Java语言的垃圾回收"><a href="#Java语言的垃圾回收" class="headerlink" title="Java语言的垃圾回收"></a>Java语言的垃圾回收</h2><span id="more"></span>

<p>​    为了让程序员更专注于代码的实现，而不用过多的考虑内存释放的问题，所以，在Java语言中，有了自动的垃圾回收机制，也就是我们熟悉的GC。</p>
<p>​    有了垃圾回收机制后，程序员只需要关心内存的申请即可，内存的释放由系统自动识别完成。</p>
<p>​    在进行垃圾回收时，不同的对象引用类型，GC会采用不同的回收时机，对于对象的引用类型可查看第三天的ThreadLocal部分。</p>
<p>​    换句话说，自动的垃圾回收的算法就会变得非常重要了，如果因为算法的不合理，导致内存资源一直没有释放，同样也可能会导致内存溢出的。</p>
<p>​    当然，除了Java语言，C#、Python等语言也都有自动的垃圾回收机制。</p>
<h2 id="什么是垃圾-amp-垃圾定位"><a href="#什么是垃圾-amp-垃圾定位" class="headerlink" title="什么是垃圾&amp;垃圾定位"></a>什么是垃圾&amp;垃圾定位</h2><p>​    简单一句就是：<strong>如果一个或多个对象没有任何的引用指向它了，那么这个对象现在就是垃圾。</strong></p>
<h3 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h3><p>​    一个对象被引用了一次，在当前的对象头上递增一次引用次数，如果这个对象的引用次数为0，代表这个对象可回收</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String demo = <span class="keyword">new</span> String(<span class="string">&quot;123&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/image-20200802001502483.png" alt="image-20200802001502483"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String demo = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/image-20200802001515438.png" alt="image-20200802001515438"></p>
<p>当对象间出现了循环引用的话，则引用计数法就会失效</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/image-20200802001533126.png" alt="image-20200802001533126"></p>
<p>虽然a和b都为null，但是由于a和b存在循环引用，这样a和b永远都不会被回收。</p>
<p>优点：</p>
<ul>
<li>实时性较高，无需等到内存不够的时候，才开始回收，运行时根据对象的计数器是否为0，就可以直接回收。</li>
<li>在垃圾回收过程中，应用无需挂起。如果申请内存时，内存不足，则立刻报OOM错误。</li>
<li>区域性，更新对象的计数器时，只是影响到该对象，不会扫描全部对象。</li>
</ul>
<p>缺点：</p>
<ul>
<li>每次对象被引用时，都需要去更新计数器，有一点时间开销。 </li>
<li><strong>浪费CPU资源</strong>，即使内存够用，仍然在运行时进行计数器的统计。</li>
<li><strong>无法解决循环引用问题，会引发内存泄露</strong>。（最大的缺点） </li>
</ul>
<h3 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h3><p>​    现在的虚拟机采用的都是通过可达性分析算法来确定哪些内容是垃圾。</p>
<p>​    会存在一个根节点【GC Roots】，引出它下面指向的下一个节点，再以下一个节点节点开始找出它下面的节点，依次往下类推。直到所有的节点全部遍历完毕。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/image-20200802121746255.png" alt="image-20200802121746255"></p>
<p>​    M,N这两个节点是可回收的，但是<strong>并不会马上的被回收！！</strong> 对象中存在一个方法【finalize】。当对象被标记为可回收后，当发生GC时，首先<strong>会判断这个对象是否执行了finalize方法</strong>，如果这个方法还没有被执行的话，那么就会先来执行这个方法，接着在这个方法执行中，可以设置当前这个对象与GC ROOTS产生关联，那么这个方法执行完成之后，GC会再次判断对象是否可达，如果仍然不可达，则会进行回收，如果可达了，则不会进行回收。</p>
<p>​    finalize方法对于每一个对象来说，只会执行一次。如果第一次执行这个方法的时候，设置了当前对象与RC ROOTS关联，那么这一次不会进行回收。 那么等到这个对象第二次被标记为可回收时，那么该对象的finalize方法就不会再次执行了。</p>
<p><strong>GC ROOTS：</strong></p>
<p>​    <strong>虚拟机栈中引用的对象</strong></p>
<p>​    <strong>本地方法栈中引用的对象</strong></p>
<p>​    <strong>方法区中类静态属性引用的对象</strong></p>
<p>​    <strong>方法区中常量引用对象</strong></p>
<h2 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h2><h3 id="标记清除算法"><a href="#标记清除算法" class="headerlink" title="标记清除算法"></a>标记清除算法</h3><p>标记清除算法，是将垃圾回收分为2个阶段，分别是<strong>标记和清除</strong>。</p>
<p>1.根据可达性分析算法得出的垃圾进行标记</p>
<p>2.对这些标记为可回收的内容进行垃圾回收</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/image-20200802123228945.png" alt="image-20200802123228945"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/image-20200802123241536.png" alt="image-20200802123241536"></p>
<p>可以看到，标记清除算法解决了引用计数算法中的循环引用的问题，没有从root节点引用的对象都会被回收。</p>
<p>同样，标记清除算法也是有缺点的：</p>
<ul>
<li>效率较低，<strong>标记和清除两个动作都需要遍历所有的对象</strong>，并且在GC时，<strong>需要停止应用程序</strong>，对于交互性要求比较高的应用而言这个体验是非常差的。</li>
<li>（<strong>重要</strong>）通过标记清除算法清理出来的内存，碎片化较为严重，因为被回收的对象可能存在于内存的各个角落，所以清理出来的内存是不连贯的。</li>
</ul>
<h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><p>​    复制算法的核心就是，<strong>将原有的内存空间一分为二，每次只用其中的一块</strong>，在垃圾回收时，将正在使用的对象复制到另一个内存空间中，然后将该内存空间清空，交换两个内存的角色，完成垃圾的回收。</p>
<p>​    如果内存中的垃圾对象较多，需要复制的对象就较少，这种情况下适合使用该方式并且效率比较高，反之，则不适合。 </p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/image-20200802123304797.png" alt="image-20200802123304797"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/image-20200802123315514.png" alt="image-20200802123315514"></p>
<p>1）将内存区域分成两部分，每次操作其中一个。</p>
<p>2）当进行垃圾回收时，将正在使用的内存区域中的存活对象移动到未使用的内存区域。当移动完对这部分内存区域一次性清除。</p>
<p>3）周而复始。</p>
<p>优点：</p>
<ul>
<li>在垃圾对象多的情况下，效率较高</li>
<li>清理后，内存无碎片</li>
</ul>
<p>缺点：</p>
<ul>
<li>分配的2块内存空间，在同一个时刻，只能使用一半，内存使用率较低</li>
</ul>
<h3 id="标记整理算法"><a href="#标记整理算法" class="headerlink" title="标记整理算法"></a>标记整理算法</h3><p>​    标记压缩算法是在标记清除算法的基础之上，做了优化改进的算法。和标记清除算法一样，也是从根节点开始，对对象的引用进行标记，在清理阶段，并不是简单的直接清理可回收对象，而是将存活对象都向内存另一端移动，然后清理边界以外的垃圾，从而解决了碎片化的问题。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/image-20200802124108240.png" alt="image-20200802124108240"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/image-20200802124119931.png" alt="image-20200802124119931"></p>
<p>1）标记垃圾。</p>
<p>2）需要清除向右边走，不需要清除的向左边走。</p>
<p>3）清除边界以外的垃圾。</p>
<p>优缺点同标记清除算法，解决了标记清除算法的碎片化的问题，同时，标记压缩算法多了一步，对象移动内存位置的步骤，其效率也有有一定的影响。</p>
<h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p>在java8时，堆被分为了两份：<strong>新生代和老年代【1：2】</strong>，在java7时，还存在一个永久代。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/image-20200825231704058.png" alt="image-20200825231704058"></p>
<p>对于新生代，内部又被分为了三个区域。Eden区，S0区，S1区【8：1：1】</p>
<p>当对新生代产生GC：MinorGC【young GC】</p>
<p>当对老年代产生GC：FullGC【OldGC】</p>
<h4 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h4><p>1）当创建一个对象的时候，那么这个对象会被分配在新生代的Eden区。当Eden区要满了时候，触发YoungGC。</p>
<p>2）当进行YoungGC后，此时在Eden区存活的对象被移动到S0区，并且<strong>当前对象的年龄会加1</strong>，清空Eden区。</p>
<p>3）当再一次触发YoungGC的时候，会把Eden区中存活下来的对象和S0中的对象，移动到S1区中，这些对象的年龄会加1，清空Eden区和S0区。</p>
<p>4）当再一次触发YoungGC的时候，会把Eden区中存活下来的对象和S1中的对象，移动到S0区中，这些对象的年龄会加1，清空Eden区和S1区。</p>
<h4 id="对象何时晋升到老年代"><a href="#对象何时晋升到老年代" class="headerlink" title="对象何时晋升到老年代"></a>对象何时晋升到老年代</h4><p>1）对象的年龄达到了某一个限定的值（<strong>默认15岁</strong>，CMS默认6岁  ），那么这个对象就会进入到老年代中。</p>
<p>2）大对象。</p>
<p>3）如果在Survivor区中相同年龄的对象的所有大小之和超过Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代。</p>
<p>当老年代满了之后，<strong>触发FullGC</strong>。<strong>FullGC同时回收新生代和老年代</strong>，当前只会存在一个FullGC的线程进行执行，其他的线程全部会被挂起。</p>
<h2 id="七种垃圾收集器"><a href="#七种垃圾收集器" class="headerlink" title="七种垃圾收集器"></a>七种垃圾收集器</h2><p>​    前面我们讲了垃圾回收的算法，还需要有具体的实现，在jvm中，实现了多种垃圾收集器，包括：串行垃圾收集器、并行垃圾收集器、CMS（并发）垃圾收集器、G1垃圾收集器，接下来，我们一个个的了解学习。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/image-20200802221150600.png" alt="image-20200802221150600"></p>
<h3 id="Serial收集器"><a href="#Serial收集器" class="headerlink" title="Serial收集器"></a>Serial收集器</h3><p>​    <strong>串行垃圾收集器</strong>，作用于<strong>新生代</strong>。是指使用单线程进行垃圾回收，<strong>采用复制算法</strong>。垃圾回收时，只有一个线程在工作，并且java应用中的所有线程都要暂停，等待垃圾回收的完成。这种现象称之为STW（Stop-The-World）。<strong>其应用在年轻代</strong></p>
<p>​    对于交互性较强的应用而言，这种垃圾收集器是不能够接受的。因此一般在Javaweb应用中是不会采用该收集器的。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/image-20200802214415076.png" alt="image-20200802214415076"></p>
<h3 id="ParallelNew收集器"><a href="#ParallelNew收集器" class="headerlink" title="ParallelNew收集器"></a>ParallelNew收集器</h3><p>​    并行垃圾收集器在串行垃圾收集器的基础之上做了改进，<strong>采用复制算法</strong>。将单线程改为了多线程进行垃圾回收，这样可以缩短垃圾回收的时间。（这里是指，并行能力较强的机器）。但是对于其他的行为（收集算法、stop the world、对象分配规则、回收策略等）同Serial收集器一样。其也是应用在年轻代。<strong>JDK8默认使用此垃圾回收器</strong></p>
<p>​    当然了，并行垃圾收集器在收集的过程中也会暂停应用程序，这个和串行垃圾回收器是一样的，只是并行执行，速度更快些，暂停的时间更短一些。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/image-20200802215543670.png" alt="image-20200802215543670"></p>
<h3 id="Parallel-Scavenge收集器"><a href="#Parallel-Scavenge收集器" class="headerlink" title="Parallel Scavenge收集器"></a>Parallel Scavenge收集器</h3><p>​    其是一个应用于<strong>新生代</strong>的<strong>并行</strong>垃圾回收器，<strong>采用复制算法</strong>。它的目标是达到一个可控的吞吐量（吞吐量=运行用户代码时间 /（运行用户代码时间+垃圾收集时间））即虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，吞吐量就是99%。这样可以高效率的利用CPU时间，尽快完成程序的运算任务，适合在后台运算而不需要太多交互的任务。</p>
<ul>
<li>停顿时间越短对于需要与用户交互的程序来说越好，良好的响应速度能提升用户的体验。</li>
<li> 高吞吐量可以最高效率地利用CPU时间，尽快地完成程序的运算任务，主要适合在后台运算而不太需要太多交互的任务。</li>
</ul>
<h3 id="Serial-Old收集器"><a href="#Serial-Old收集器" class="headerlink" title="Serial Old收集器"></a>Serial Old收集器</h3><p>​    其是运行于<strong>老年代的单线程</strong>Serial收集器，<strong>采用标记-整理算法</strong>，主要是给Client模式下的虚拟机使用。</p>
<h3 id="Parallel-Old收集器"><a href="#Parallel-Old收集器" class="headerlink" title="Parallel Old收集器"></a>Parallel Old收集器</h3><p>​    其是一个应用于老年代的并行垃圾回收器，<strong>采用标记-整理算法</strong>。在注重吞吐量及CPU资源敏感的场合，都可以优先考虑Parallel Scavenge+Parallel Old收集器。</p>
<h3 id="CMS垃圾收集器"><a href="#CMS垃圾收集器" class="headerlink" title="CMS垃圾收集器"></a>CMS垃圾收集器</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>​    CMS全称 Concurrent Mark Sweep，是一款<strong>并发</strong>的、使用<strong>标记-清除</strong>算法的垃圾回收器，该回收器是<strong>针对老年代垃圾回收的</strong>，是一款以获取最短回收停顿时间为目标的收集器，停顿时间短，用户体验就好。<strong>其最大特点是在进行垃圾回收时，应用仍然能正常运行。</strong> </p>
<p>CMS垃圾回收器的执行过程如下：</p>
<p> <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/image-20200802222734870.png" alt="image-20200802222734870"></p>
<p>**1)初始标记(Initial Mark)**：仅仅标记GC Roots能直接关联到的对象，速度快，但是需要“Stop The World”</p>
<p>**2)并发标记(Concurrent Mark)**：就是进行追踪引用链的过程，可以和用户线程并发执行。</p>
<p>**3)重新标记(Remark)**：修正并发标记阶段因用户线程继续运行而导致标记发生变化的那部分对象的标记记录，比初始标记时间长但远比并发标记时间短，需要“Stop The World”</p>
<p>**4)并发清除(Concurrent Sweep)**：清除标记为可以回收对象，可以和用户线程并发执行</p>
<p>​    由于整个过程耗时最长的并发标记和并发清除都可以和用户线程一起工作，所以总体上来看，CMS收集器的内存回收过程和用户线程是并发执行的。</p>
<h4 id="CMS收集器缺点"><a href="#CMS收集器缺点" class="headerlink" title="CMS收集器缺点"></a>CMS收集器缺点</h4><p>​    对于CMS收集器的有三个：</p>
<ul>
<li>对CPU资源敏感：</li>
</ul>
<p>​    并发收集虽然不会暂停用户线程，但因为占用CPU资源，仍会导致系统吞吐量降低、响应变慢。</p>
<p>​    CMS的默认收集线程数量是=(CPU数量+3)/4。当CPU数量多于4个，收集线程占用的CPU资源多于25%，对用户程序影响可能较大；不足4个时，影响更大，可能无法接受。</p>
<ul>
<li>无法处理浮动垃圾：</li>
</ul>
<p>​    所谓浮动垃圾即在并发清除时，用户线程新产生的垃圾叫浮动垃圾。并发清除时需要预留一定的内存空间，不能像其他收集器在老年代几乎填满再进行收集。如果CMS预留内存空间无法满足程序需要，就会出现一次”Concurrent Mode Failure”失败。这时JVM启用后备预案：临时启用Serail Old收集器，而导致另一次Full GC的产生。</p>
<ul>
<li>垃圾回收算法导致内存碎片：</li>
</ul>
<p>​    因为CMS收集器采用标记-清除算法，因此会导致垃圾从内存中被清除后，会出现内存空间碎片化。这样会导致分配大内存对象时，无法找到足够的连续内存，从而需要提前触发另一次Full GC动作。</p>
<h3 id="G1垃圾收集器"><a href="#G1垃圾收集器" class="headerlink" title="G1垃圾收集器"></a>G1垃圾收集器</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>​    对于垃圾回收器来说，前面的三种要么一次性回收年轻代，要么一次性回收老年代。而且现代服务器的堆空间已经可以很大了。为了更加优化GC操作，所以出现了G1。</p>
<p>​    它是一款<strong>同时应用于新生代和老年代、采用标记-整理算法、软实时、低延迟、可设定目标(最大STW停顿时间)<strong>的垃圾回收器，用于代替CMS，适用于较大的堆(&gt;4~6G)，</strong>在JDK9之后默认使用G1</strong>。</p>
<p>G1的设计原则就是简化JVM性能调优，开发人员只需要简单的三步即可完成调优：</p>
<ol>
<li>第一步，开启G1垃圾收集器</li>
<li>第二步，设置堆的最大内存</li>
<li>第三步，设置最大的停顿时间（stw）</li>
</ol>
<h4 id="G1的内存布局"><a href="#G1的内存布局" class="headerlink" title="G1的内存布局"></a>G1的内存布局</h4><p>​    G1垃圾收集器相对比其他收集器而言，最大的区别在于它<strong>取消了年轻代、老年代的物理划分</strong>。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/20161222153407_691.png" alt="img"></p>
<p>​    取而代之的是将堆划分为<strong>若干个区域（Region）</strong>，这些区域中包含了有<strong>逻辑上的年轻代、老年代区域</strong>。这样做的好处就是，我们再也不用单独的空间对每个代进行设置了，不用担心每个代内存是否足够。</p>
<p>​    此时可以看到，现在出现了一个<strong>新的区域Humongous</strong>，它本身属于老年代区。当现在出现了一个巨大的对象，超出了分区容量的一半，则这个对象会进入到该区域。如果一个H区装不下一个巨型对象，那么G1会寻找连续的H分区来存储。为了能找到连续的H区 ，有时候不得不启动Full GC。</p>
<p>​    同时G1会估计每个Region中的垃圾比例，优先回收垃圾较多的区域。</p>
<p> <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/20161222153407_471.png" alt="img"></p>
<p>​    在G1划分的区域中，年轻代的垃圾收集依然采用<strong>暂停所有应用线程的方式</strong>，将存活对象拷贝到老年代或者Survivor空间，G1收集器通过将<strong>对象从一个区域复制到另外一个区域，完成了清理工作</strong>。</p>
<p>​    这就意味着，在正常的处理过程中，G1完成了堆的压缩（至少是部分堆的压缩），这样也就不会有cms内存碎片问题的存在了。</p>
<h4 id="垃圾回收模式"><a href="#垃圾回收模式" class="headerlink" title="垃圾回收模式"></a>垃圾回收模式</h4><p>其提供了三种模式垃圾回收模式： <strong>young GC、Mixed GC、Full GC</strong>。在不同的条件下被触发。</p>
<h5 id="Young-GC"><a href="#Young-GC" class="headerlink" title="Young GC"></a>Young GC</h5><p>​    发生在年轻代的GC算法，一般对象（除了巨型对象）都是在eden region中分配内存，当所有eden region被耗尽无法申请内存时，就会触发一次young gc，这种触发机制和之前的young gc差不多，执行完一次young gc，活跃对象会被拷贝到survivor region或者晋升到old region中，空闲的region会被放入空闲列表中，等待下次被使用。</p>
<h5 id="Mixed-GC"><a href="#Mixed-GC" class="headerlink" title="Mixed GC"></a>Mixed GC</h5><p>​    当越来越多的对象晋升到老年代old region时，为了避免堆内存被耗尽，虚拟机会触发一个混合的垃圾收集器，即<strong>mixed gc</strong>，该算法并不是一个old gc，除了回收整个young region，还会回收一部分的old region，这里需要注意：<strong>是一部分老年代，而不是全部老年代</strong>，可以选择哪些old region进行收集，从而可以对垃圾回收的耗时时间进行控制。</p>
<p>​    在CMS中，当老年代的使用率达到80%就会触发一次cms gc。在G1中，mixed gc也可以通过<code>-XX:InitiatingHeapOccupancyPercent</code>设置阈值，**默认为45%**。当老年代大小占整个堆大小百分比达到该阈值，则触发mixed gc。</p>
<p>其执行过程和cms类似：</p>
<ol>
<li>initial mark: 初始标记过程，整个过程STW，标记了从GC Root可达的对象。</li>
<li>concurrent marking: 并发标记过程，整个过程gc collector线程与应用线程可以并行执行，标记出GC Root可达对象衍生出去的存活对象，并收集各个Region的存活对象信息。</li>
<li>remark: 最终标记过程，整个过程STW，标记出那些在并发标记过程中遗漏的，或者内部引用发生变化的对象。</li>
<li>clean up: 垃圾清除过程，如果发现一个Region中没有存活对象，则把该Region加入到空闲列表中。</li>
</ol>
<h5 id="Full-GC"><a href="#Full-GC" class="headerlink" title="Full GC"></a>Full GC</h5><p>​    如果对象内存分配速度过快，mixed gc来不及回收，导致老年代被填满，就会触发一次full gc，G1的full gc算法就是单线程执行的serial old gc，会导致异常长时间的暂停时间，需要进行不断的调优，尽可能的避免full gc.</p>
<h4 id="G1的最佳实践"><a href="#G1的最佳实践" class="headerlink" title="G1的最佳实践"></a>G1的最佳实践</h4><p><strong>不断调优暂停时间指标</strong></p>
<p>  通过<strong>XX:MaxGCPauseMillis=x</strong>可以设置启动应用程序暂停的时间，G1在运行的时候会根据这个参数选择CSet来满足响应时间的设置。一般情况下这个值设置到100ms或者200ms都是可以的(不同情况下会不一样)，但如果设置成50ms就不太合理。暂停时间设置的太短，就会导致出现G1跟不上垃圾产生的速度。最终退化成Full GC。所以对这个参数的调优是一个持续的过程，逐步调整到最佳状态。</p>
<p><strong>不要设置新生代和老年代的大小</strong></p>
<p>  G1收集器在运行的时候会调整新生代和老年代的大小。通过改变代的大小来调整对象晋升的速度以及晋升年龄，从而达到我们为收集器设置的暂停时间目标。设置了新生代大小相当于放弃了G1为我们做的自动调优。我们需要做的只是设置整个堆内存的大小，剩下的交给G1自己去分配各个代的大小。</p>
<h2 id="可视化GC日志分析工具-GC-Easy"><a href="#可视化GC日志分析工具-GC-Easy" class="headerlink" title="可视化GC日志分析工具-GC Easy"></a>可视化GC日志分析工具-GC Easy</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> sleep = <span class="keyword">new</span> Random().nextInt(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">if</span>(System.currentTimeMillis() % <span class="number">2</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">                list.clear();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                    Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">                    properties.put(<span class="string">&quot;key_&quot;</span>+i, <span class="string">&quot;value_&quot;</span> + System.currentTimeMillis() + i);</span><br><span class="line">                    list.add(properties);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Thread.sleep(sleep);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>设置参数输出gc日志：-XX:+UseParallelGC -XX:+UseParallelOldGC -XX:+PrintGCDetails -Xms128m -Xmx128m -Xloggc:gc.log</p>
<p>GC Easy是一款在线的可视化工具，易用、功能强大，网站：</p>
<p><a href="http://gceasy.io/">http://gceasy.io/</a></p>
<p> <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/1537803536253.png" alt="1537803536253"></p>
<p>上传后，点击“Analyze”按钮，即可查看报告。</p>
<h3 id="JVM-Heap-Size"><a href="#JVM-Heap-Size" class="headerlink" title="JVM Heap Size"></a>JVM Heap Size</h3><p>​    这一部分分别使用了表格和图形界面来展示了JVM堆内存大小</p>
<p>​    左侧分别展示了年轻代的内存分配分配空间大小（Allocated）和年轻代内存分配空间大小的最大峰值（Peek），然后依次是老年代（Old Generation）、元数据区（Meta Space）、堆区和非堆区（Young + Old + Meta Space）总大小。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/1537804265054.png" alt="1537804265054"></p>
<h3 id="Key-Performance-Indicators"><a href="#Key-Performance-Indicators" class="headerlink" title="Key Performance Indicators"></a>Key Performance Indicators</h3><p>这一部分是关键的性能指标</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/image-20200817184526587.png" alt="image-20200817184526587"></p>
<ul>
<li>Throughput表示的是吞吐量</li>
<li>Latency表示响应时间<ul>
<li>Avg Pause GC Time 平均GC时间</li>
<li>Max Pause GC TIme 最大GC时间</li>
</ul>
</li>
</ul>
<h3 id="Interactive-Graphs"><a href="#Interactive-Graphs" class="headerlink" title="Interactive Graphs"></a>Interactive Graphs</h3><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/image-20200817185141660.png" alt="image-20200817185141660"></p>
<p>第一部分为：回收后堆的内存图，从图中可以看出，随着GC的进行，垃圾回收器把对象都回收掉了，因此堆的大小主键增大。</p>
<p>第二部分为：回收前堆的使用率，随着程序的运行，堆的使用率越来越高，堆被对象占用的内存越来越大。</p>
<p>第三部分为：GC的持续时间。</p>
<p>第四部分为：GC回收掉的垃圾对象的大小。</p>
<p>第五部分为：年轻代的内存分配情况</p>
<p>第六部分为：老年代的内存分配情况</p>
<p>第七部分为：元数据区内存分配情况</p>
<p>第八部分为：堆内存分配和晋升情况</p>
<h3 id="GC-Statistics"><a href="#GC-Statistics" class="headerlink" title="GC Statistics"></a>GC Statistics</h3><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/image-20200817185501527.png" alt="image-20200817185501527"></p>
<p>左图：表示的是堆内存中Minor GC和Full GC回收垃圾对象的内存。<br>中图：总计GC时间，包括Minor GC和Full GC，时间单位为ms。<br>右图：GC平均时间，包括了Minor GC和Full GC。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/image-20200817185537326.png" alt="image-20200817185537326"></p>
<p>分别表示的是总GC统计，MinorGC的统计，FullGC的统计，GC暂停程序的统计。</p>
<h3 id="GC-Causes"><a href="#GC-Causes" class="headerlink" title="GC Causes"></a>GC Causes</h3><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/JVM/1/assets/image-20200817185618995.png" alt="image-20200817185618995"></p>
<p>GC花费的时间统计</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>垃圾定位</tag>
        <tag>垃圾回收算法</tag>
        <tag>垃圾收集器</tag>
        <tag>分析工具GC easy</tag>
      </tags>
  </entry>
  <entry>
    <title>Java虚拟机04--JVM调优实践</title>
    <url>/jwangcloud/158342446/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/JVM.png" width="1000" height="200" align="middle">


<p>​    对于一个系统要部署上线时，则一定会对JVM进行调整，很少会不经过任何调整直接上线。否则很容易出现线上系统频繁FullGC造成系统卡顿、CPU使用频率过高、系统无反应等问题。<br>​    </p>
<span id="more"></span>

<h2 id="服务器性能指标"><a href="#服务器性能指标" class="headerlink" title="服务器性能指标"></a>服务器性能指标</h2><p>​    对于一个应用来说通常重点关注的性能指标主要是吞吐量、响应时间、QPS、TPS等、并发用户数等。而这些性能指标又依赖于系统服务器的资源，如：CPU、内存、磁盘IO、网络IO等。对于这些指标数据的收集，通常可以根据Java本身的工具或指令进行查询，详情参照第一天。</p>
<p>1）CPU：</p>
<p>CPU资源一般可以使用<strong>vmstat</strong>来采样（例如每秒采样一次： vmstat 1）查看CPU上下文切换。如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vmstat 1 </span><br><span class="line"></span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line"> 1  0      0 284628 234036 859100    0    0     1    15    0    1  3  1 96  0  0</span><br><span class="line"> 0  0      0 284536 234036 859204    0    0     0     0 4952 9461  4  2 95  0  0</span><br><span class="line"> 0  0      0 284536 234036 859208    0    0     0   200 5081 9768  3  3 94  1  0</span><br><span class="line"> 0  0      0 284568 234036 859212    0    0     0    16 5126 9757  3  2 96  0  0</span><br><span class="line"> 0  0      0 284900 234036 859236    0    0     0     0 5431 10230  4  3 94  0  0</span><br><span class="line"> 1  0      0 285608 234036 859256    0    0     0     0 5325 10005  6  2 92  0  0</span><br><span class="line"> 0  0      0 285452 234036 859256    0    0     0     0 5037 9653  3  1 96  0  0</span><br><span class="line"> 0  0      0 285484 234036 859264    0    0     0    60 5068 9599  3  1 96  0  0</span><br><span class="line"> 0  0      0 285452 234036 859264    0    0     0    36 5163 9825  4  2 94  0  0</span><br></pre></td></tr></table></figure>

<ul>
<li>us：用户占用CPU的百分比</li>
<li>sy：系统(内核和中断)占用CPU的百分比</li>
<li>id：CPU空闲的百分比</li>
<li>in: 系统中断数</li>
<li>cs: 每秒上下文切换次数</li>
<li>r: 可运行进程数，包括正在运行(Running)和已就绪等待运行(Waiting)的。在负载测试中，其可接受上限通常不超过CPU核数的2倍。</li>
</ul>
<p><strong>CPU使用率通常用us + sy来计算，一般大于80%说明，CPU资源出现瓶颈。</strong></p>
<p>2）内存</p>
<p>根据上述信息，其中已经输出了内存的信息</p>
<ul>
<li>free: 系统可用内存，对于稳定运行的系统，free可接受的范围通常应该大于物理内存的20%。</li>
<li>so/si : 每秒从内存写入到SWAP的数据大小/每秒从SWAP读取到内存的数据大小。如果出现频繁的swap交换，会影响系统性能，需要一起注意。</li>
<li>swpd：系统当前的swap空间占用。可以和so/si 综合分析。如果swpd为0 ，内存资源没有成为瓶颈。</li>
</ul>
<p>3）磁盘</p>
<p>对于磁盘，首要关注使用率，IOPS和数据吞吐量，在Linux服务区，可以使用iostat来获取这些数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ iostat -dxk 1</span><br><span class="line">Linux 4.4.0-63-generic  _x86_64 </span><br><span class="line">Device:         rrqm&#x2F;s   wrqm&#x2F;s     r&#x2F;s     w&#x2F;s    rkB&#x2F;s    wkB&#x2F;s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">vda               0.00     2.69    0.07    2.21     1.28    28.96    26.53     0.00    1.85    1.19    1.87   0.31   0.07</span><br><span class="line"></span><br><span class="line">Device:         rrqm&#x2F;s   wrqm&#x2F;s     r&#x2F;s     w&#x2F;s    rkB&#x2F;s    wkB&#x2F;s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">vda               0.00     0.00    2.00    0.00    12.00     0.00    12.00     0.02   10.00   10.00    0.00  10.00   2.00</span><br><span class="line"></span><br><span class="line">Device:         rrqm&#x2F;s   wrqm&#x2F;s     r&#x2F;s     w&#x2F;s    rkB&#x2F;s    wkB&#x2F;s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</span><br><span class="line">vda               0.00    29.00    0.00    2.00     0.00   124.00   124.00     0.00    2.00    0.00    2.00   2.00   0.40</span><br></pre></td></tr></table></figure>

<ul>
<li>%util: 衡量device使用率的指标。处理I/O请求的时间与统计时间的百分比.大于60%的话，会影响系统性能。</li>
<li>r/s， w/s ：每秒处理，读、写的请求数量。</li>
<li>rkB/s,wkB/s :每秒读/写的数据大小。</li>
</ul>
<h2 id="JVM参数调优"><a href="#JVM参数调优" class="headerlink" title="JVM参数调优"></a>JVM参数调优</h2><p>​    对于JVM调优，主要就是调整年轻代、年老大、元空间的内存空间大小及使用的垃圾回收器类型。</p>
<p>1）设置堆的初始大小和最大大小，为了防止垃圾收集器在初始大小、最大大小之间收缩堆而产生额外的时间，通常把最大、初始大小设置为相同的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Xms：设置堆的初始化大小</span><br><span class="line"></span><br><span class="line">-Xmx：设置堆的最大大小</span><br></pre></td></tr></table></figure>

<p>2） 设置年轻代中Eden区和两个Survivor区的大小比例。该值如果不设置，则默认比例为8:1:1。Java官方通过增大Eden区的大小，来减少YGC发生的次数，但有时我们发现，虽然次数减少了，但Eden区满</p>
<p>的时候，由于占用的空间较大，导致释放缓慢，此时STW的时间较长，因此需要按照程序情况去调优。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-XX:SurvivorRatio</span><br></pre></td></tr></table></figure>

<p>3）年轻代和老年代默认比例为1：2。可以通过调整二者空间大小比率来设置两者的大小。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-XX:newSize   设置年轻代的初始大小</span><br><span class="line">-XX:MaxNewSize   设置年轻代的最大大小，  初始大小和最大大小两个值通常相同</span><br></pre></td></tr></table></figure>

<p>4）线程堆栈的设置：<strong>每个线程默认会开启1M的堆栈</strong>，用于存放栈帧、调用参数、局部变量等，但一般256K就够用。通常减少每个线程的堆栈，可以产生更多的线程，但这实际上还受限于操作系统。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Xss   对每个线程stack大小的调整,-Xss128k</span><br></pre></td></tr></table></figure>

<p>5）一般一天超过一次FullGC就是有问题，首先通过工具查看是否出现内存泄露，如果出现内存泄露则调整代码，没有的话则调整JVM参数。</p>
<p>6）系统CPU持续飙高的话，首先先排查代码问题，如果代码没问题，则咨询运维或者云服务器供应商，通常服务器重启或者服务器迁移即可解决。</p>
<p>7）如果数据查询性能很低下的话，如果系统并发量并没有多少，则应更加关注数据库的相关问题。</p>
<p>8）如果服务器配置还不错，JDK8开始尽量使用G1或者新生代和老年代组合使用并行垃圾回收器。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>服务器性能指标</tag>
        <tag>JVM参数调优</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发编程05--atomic原子操作类</title>
    <url>/jwangcloud/673356023/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/juc.jpeg" width="1000" height="200" align="middle">



<p>​    在JDK1.5开始提供了<code>java.util.concurrent.atomic</code>工具包，这个包下的所有类都基于CAS思想实现，提供了简单、高效、安全的更新<strong>一个</strong>变量的方式。<br>​<br>​<span id="more"></span></p>
<p>​    为了适配变量类型，在Atomic包中一共提供了12个类，分属于4种类型的原子更新方式，分别为<strong>原子更新基本类型</strong>、<strong>原子更新数据</strong>、<strong>原子更新引用</strong>和<strong>原子更新属性</strong>。其内部基本都是用Unsafe实现的包装类。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/2/assets/image-20200728175255463.png" alt="image-20200728175255463"></p>
<h2 id="原子更新基本类型"><a href="#原子更新基本类型" class="headerlink" title="原子更新基本类型"></a>原子更新基本类型</h2><p>​    以原子方式更新基本类型，Atomic提供了三个类。分别为<strong>AtomicInteger</strong>、<strong>AtomicBoolean</strong>、<strong>AtomicLong</strong>。这三个类的方法基本相同，此处以AtomicInteger为例。</p>
<p>​    <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/2/assets/image-20200728181644489.png" alt="image-20200728181644489"></p>
<p>1）**int addAndGet()**：以原子的方式将输入的数字与AtomicInteger里的值相加，并返回结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicIntegerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">addAndGetDemo</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> atomicInteger.addAndGet(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Integer result = addAndGetDemo(i);</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2）**boolean compareAndSet(int expect, int update)**：如果输入的数值等于预期值，则以原子方式将该值设置为输入的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">compareAndSetDemo</span><span class="params">(<span class="keyword">int</span> expect,<span class="keyword">int</span> update)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> atomicInteger.compareAndSet(expect, update);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*System.out.println(compareAndSetDemo(1,1));*/</span></span><br></pre></td></tr></table></figure>

<p>3）<strong>int incrementAndGet()<strong>：对原值+1，并返回操作后的值。类似与redis中的increment命令。相反的还有</strong>decrementAndGet()</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">incrementAndGetDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> atomicInteger.incrementAndGet();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4）**int getAndAdd(int delta)**：原值加上指定值，并返回修改前的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getAndAddDemo</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> atomicInteger.getAndAdd(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*System.out.println(incrementAndGetDemo());*/</span></span><br></pre></td></tr></table></figure>

<p>5）**int getAndSet(int newValue)**：将原值修改为新值，并返回修改前的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getAndSetDemo</span><span class="params">(<span class="keyword">int</span> newValue)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> atomicInteger.getAndSet(newValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*System.out.println(getAndAddDemo(5));</span></span><br><span class="line"><span class="comment">System.out.println(atomicInteger.get());*/</span></span><br></pre></td></tr></table></figure>

<p>6）**int getAndIncrement()**：原值加1，返回修改前的值。对应的还有getAndDecrement()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getAndIncrementDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> atomicInteger.getAndIncrement();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* System.out.println(getAndIncrementDemo());</span></span><br><span class="line"><span class="comment">System.out.println(atomicInteger.get());*/</span></span><br></pre></td></tr></table></figure>

<h2 id="原子更新数组"><a href="#原子更新数组" class="headerlink" title="原子更新数组"></a>原子更新数组</h2><p>​    通过原子方式更新数组里的某个元素，Atomic包中提供了三个类，分别为<strong>AtomicIntegerArray</strong>、<strong>AtomicLongArray</strong>、<strong>AtomicReferenceArray</strong>。</p>
<p>​    以上几个类中的方法几乎一样，只是操作的数据类型不同，以AtomicIntegerArray中的API为例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//执行加法，第一个参数为数组的下标，第二个参数为增加的数量，返回增加后的结果</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addAndGet</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> delta)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//对比修改，参1数组下标，参2原始值，参3修改目标值，成功返回true否则false</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//参数为数组下标，将数组对应数字减少1，返回减少后的数据</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decrementAndGet</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="comment">// 参数为数组下标，将数组对应数字增加1，返回增加后的数据</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">incrementAndGet</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//和addAndGet类似，区别是返回值是变化前的数据</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAndAdd</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> delta)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="comment">//和decrementAndGet类似，区别是返回变化前的数据</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAndDecrement</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="comment">//和incrementAndGet类似，区别是返回变化前的数据</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="comment">// 将对应下标的数字设置为指定值，第一个参数数组下标，第二个参数为设置的值，返回是变化前的数据 </span></span></span><br><span class="line"><span class="function"><span class="title">getAndSet</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> newValue)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicIntegerArrayDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] value = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> AtomicIntegerArray ai = <span class="keyword">new</span> AtomicIntegerArray(value);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(ai.getAndSet(<span class="number">2</span>,<span class="number">6</span>));</span><br><span class="line">        System.out.println(ai.get(<span class="number">2</span>));</span><br><span class="line">        System.out.println(value[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    <strong>此时可以看到从AtomicIntegerArray获取的值与原传入数组的值不同。这是因为数组是通过构造方法传递，然后AtomicIntegerArray会将当前传入数组复制一份。因此当AtomicIntegerArray对内部数组元素进行修改时，不会影响原数组。</strong></p>
<h2 id="原子更新引用类型"><a href="#原子更新引用类型" class="headerlink" title="原子更新引用类型"></a>原子更新引用类型</h2><p>​    之前提到的通过CAS只能保证一个共享变量的原子操作，当多个的话，就需要使用到锁。对于这个问题，在Atomic包中也进行了解决。如果要更新多个变量，就需要使用Atomic包中的三个类，分别为：<strong>AtomicReference</strong>(用于原子更新引用类型)、<strong>AtomicMarkableReference</strong>(用于原子更新带有标记位的引用类型)、<strong>AtomicStampedReference</strong>(用于原子更新带有版本号的引用类型)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicReferenceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AtomicReference&lt;User&gt; atomicReference = <span class="keyword">new</span> AtomicReference&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        User u1 = <span class="keyword">new</span> User(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        User u2 = <span class="keyword">new</span> User(<span class="string">&quot;李四&quot;</span>,<span class="number">19</span>);</span><br><span class="line"></span><br><span class="line">        atomicReference.set(u1);</span><br><span class="line"></span><br><span class="line">        atomicReference.compareAndSet(u1,u2);</span><br><span class="line">        System.out.println(atomicReference.get().getName());</span><br><span class="line">        System.out.println(atomicReference.get().getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    <strong>AtomicMarkableReference</strong>可以用于解决CAS中的ABA的问题。使用演示如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicMarkableReferenceDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        User u1 = <span class="keyword">new</span> User(<span class="string">&quot;张三&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        User u2 = <span class="keyword">new</span> User(<span class="string">&quot;李四&quot;</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//只有true和false两种状态。相当于未修改和已修改</span></span><br><span class="line">        <span class="comment">//构造函数出传入初始化引用和初始化修改标识</span></span><br><span class="line">        AtomicMarkableReference&lt;User&gt; amr = <span class="keyword">new</span> AtomicMarkableReference&lt;&gt;(u1,<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//在进行比对时，不仅比对对象，同时还会比对修改标识</span></span><br><span class="line">        <span class="comment">//第一个参数为期望值</span></span><br><span class="line">        <span class="comment">//第二个参数为新值</span></span><br><span class="line">        <span class="comment">//第三个参数为期望的mark值</span></span><br><span class="line">        <span class="comment">//第四个参数为新的mark值</span></span><br><span class="line">        System.out.println(amr.compareAndSet(u1,u2,<span class="keyword">false</span>,<span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(amr.getReference().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    <strong>AtomicStampedReference</strong>会基于版本号思想解决ABA问题，根据源码可知，其内部维护了一个Pair对象，<strong>Pair</strong>对象记录了对象引用和时间戳信息，实际使用的时候，要保证时间戳唯一，如果时间戳如果重复，还会出现<strong>ABA</strong>的问题。</p>
<p>​    AtomicStampedReference中的每一个引用变量都带上了pair.stamp这个时间戳，这样就可以解决CAS中的ABA的问题。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/2/assets/image-20200728233410970.png" alt="image-20200728233410970"></p>
<p>​    使用实例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicStampedReferenceDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer INIT_NUM = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer UPDATE_NUM = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer TEM_NUM = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicStampedReference atomicStampedReference = <span class="keyword">new</span> AtomicStampedReference(INIT_NUM, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> value = (<span class="keyword">int</span>) atomicStampedReference.getReference();</span><br><span class="line">            <span class="keyword">int</span> stamp = atomicStampedReference.getStamp();</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; : 当前值为：&quot;</span> + value + <span class="string">&quot; 版本号为：&quot;</span> + stamp);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(atomicStampedReference.compareAndSet(value, UPDATE_NUM, stamp, stamp + <span class="number">1</span>))&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; : 当前值为：&quot;</span> + atomicStampedReference.getReference() + <span class="string">&quot; 版本号为：&quot;</span> + atomicStampedReference.getStamp());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;版本号不同，更新失败！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">&quot;线程A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 确保线程A先执行</span></span><br><span class="line">            Thread.yield();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> value = (<span class="keyword">int</span>) atomicStampedReference.getReference();</span><br><span class="line">            <span class="keyword">int</span> stamp = atomicStampedReference.getStamp();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; : 当前值为：&quot;</span> + value + <span class="string">&quot; 版本号为：&quot;</span> + stamp);</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() +<span class="string">&quot; : &quot;</span>+atomicStampedReference.compareAndSet(atomicStampedReference.getReference(), TEM_NUM, stamp, stamp + <span class="number">1</span>));</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; : 当前值为：&quot;</span> + atomicStampedReference.getReference() + <span class="string">&quot; 版本号为：&quot;</span> + atomicStampedReference.getStamp());</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() +<span class="string">&quot; : &quot;</span>+atomicStampedReference.compareAndSet(atomicStampedReference.getReference(), INIT_NUM, stamp, stamp + <span class="number">1</span>));</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; : 当前值为：&quot;</span> + atomicStampedReference.getReference() + <span class="string">&quot; 版本号为：&quot;</span> + atomicStampedReference.getStamp());</span><br><span class="line">        &#125;, <span class="string">&quot;线程B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">线程A : 当前值为：1000 版本号为：1</span><br><span class="line">线程B : 当前值为：1000 版本号为：1</span><br><span class="line">线程B : true</span><br><span class="line">线程B : 当前值为：200 版本号为：2</span><br><span class="line">线程B : false</span><br><span class="line">线程B : 当前值为：200 版本号为：2</span><br><span class="line">版本号不同，更新失败！</span><br></pre></td></tr></table></figure>

<h2 id="原子更新字段类"><a href="#原子更新字段类" class="headerlink" title="原子更新字段类"></a>原子更新字段类</h2><p>​    当需要原子更新某个类里的某个字段时，就需要使用原子更新字段类。Atomic包下提供了3个类<strong>AtomicIntegerFieldUpdater</strong>(原子更新整型字段)、<strong>AtomicLongFieldUpdater</strong>(原子更新长整型字段)、<strong>AtomicReferenceFieldUpdater</strong>(原子更新引用类型字段)</p>
<p>​    原子更新字段类都是抽象类，每次使用都时候必须使用静态方法newUpdater创建一个更新器。原子更新类的字段的必须使用public volatile修饰符。</p>
<p>​    以AtomicIntegerFieldUpdater为例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicIntegerFieldUpdaterTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicIntegerFieldUpdater&lt;User&gt; fieldUpdater = 	AtomicIntegerFieldUpdater.newUpdater(User.class,<span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        System.out.println(fieldUpdater.getAndIncrement(user));</span><br><span class="line">        System.out.println(fieldUpdater.get(user));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JDK1-8新增原子类"><a href="#JDK1-8新增原子类" class="headerlink" title="JDK1.8新增原子类"></a>JDK1.8新增原子类</h2><blockquote>
<p>LongAdder：长整型原子类<br>DoubleAdder：双浮点型原子类<br>LongAccumulator：类似LongAdder，但要更加灵活(要传入一个函数式接口)<br>DoubleAccumulator：类似DoubleAdder，但要更加灵活(要传入一个函数式接口)</p>
</blockquote>
<p>​    以LongAdder为例，其内部提供的API基本上可以替换原先的AtomicLong。</p>
<p>​    LongAdder类似于AtomicLong是原子性递增或者递减类，AtomicLong已经通过CAS提供了非阻塞的原子性操作，相比使用阻塞算法的同步器来说性能已经很好了，但是JDK开发组并不满足，因为在非常高的并发请求下AtomicLong的性能不能让他们接受，虽然AtomicLong使用CAS但是CAS失败后还是通过无限循环的自旋锁不断尝试。</p>
<p>​    在高并发下N多线程同时去操作一个变量会造成大量线程CAS失败然后处于自旋状态，这大大浪费了cpu资源，降低了并发性。那么既然AtomicLong性能由于过多线程同时去竞争一个变量的更新而降低的，那么如果把一个变量分解为多个变量，让同样多的线程去竞争多个资源那么性能问题不就解决了？是的，JDK8提供的LongAdder就是这个思路。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/2/assets/image-20200729002844239.png" alt="image-20200729002844239"></p>
<p>​    一段LongAdder和Atomic的对比测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo9Compare</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AtomicLong atomicLong = <span class="keyword">new</span> AtomicLong(<span class="number">0L</span>);</span><br><span class="line">        LongAdder longAdder = <span class="keyword">new</span> LongAdder();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10000</span>; j++) &#123;</span><br><span class="line">                        <span class="comment">//atomicLong.incrementAndGet();</span></span><br><span class="line">                        longAdder.increment();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (Thread.activeCount() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(atomicLong.get());</span><br><span class="line">        System.out.println(longAdder.longValue());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;耗时：&quot;</span> + (System.currentTimeMillis() - start));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    根据测试结论，使用longAdder相对比atomicLong可以进行大幅度的性能优化。当然不同计算机因为CPU、内存等硬件不一样，所以测试的数值也不一样，但是得到的结论都是一样的。</p>
<p>测试结果：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/2/assets/20170903201405380" alt="img"></p>
<p>​    从上结果图可以看出，在并发比较低的时候，LongAdder和AtomicLong的效果非常接近。但是当并发较高时，两者的差距会越来越大。<br>​<br>​</p>
]]></content>
      <categories>
        <category>Java并发编程</category>
      </categories>
      <tags>
        <tag>atomic</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发编程04--CAS算法</title>
    <url>/jwangcloud/2545724321/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/juc.jpeg" width="1000" height="200" align="middle">

<h1 id="CAS算法"><a href="#CAS算法" class="headerlink" title="CAS算法"></a>CAS算法</h1><h2 id="什么是CAS"><a href="#什么是CAS" class="headerlink" title="什么是CAS"></a>什么是CAS</h2><blockquote>
<p>CAS（Compare and Swap），即比较并替换，是用于实现多线程同步的原子操作。</p>
</blockquote>
<span id="more"></span>

<p>​    所谓原子操作是指不会被线程调度机制打断的操作。这种操作一旦开始，就一直运行到结束，中间不会有任何context switch（切换到另一个线程）。</p>
<p>​    实现原子操作可以使用锁，锁机制对于满足基本的原子需求是没问题的，但<strong>synchronized</strong>是基于阻塞的锁机制，也就是当一个线程拥有锁时，访问同一资源的其他线程需要等待，直到该线程释放锁。</p>
<p>​    同时基于<strong>synchronized</strong>实现原子操作也会出现很多问题。</p>
<ul>
<li>优先级低的线程抢到锁，被阻塞的线程优先级很高很重要怎么办？</li>
<li>获得锁的线程一直不释放锁怎么办？</li>
<li>有大量的线程来竞争资源，则CPU会花费大量时间和资源来处理这些竞争。</li>
<li>死锁问题处理。</li>
</ul>
<p>​    其实锁机制是一种较为粗糙，粒度比较大的机制，对于一些简单的需求，如计数器显得有点过于笨重。</p>
<h2 id="CAS实现原理"><a href="#CAS实现原理" class="headerlink" title="CAS实现原理"></a>CAS实现原理</h2><p>​    现代处理器基本都支持CAS指令，每一个CAS操作过程都包含三个运算符：<strong>内部地址V</strong>、<strong>期望值A</strong>、<strong>新值B</strong>。操作时如果这个<strong>内存地址V上</strong>存放的值等于<strong>期望值A</strong>，则将内存地址上的值修改为新值B，否则不做任何操作。常见的CAS循环其实就是在一个循环里不断的做CAS操作，直到成功为止。</p>
<p>​    CAS对于线程安全的实现，其是语言层面无任何处理，我们将其交CPU和内存完成，利用多核CPU的处理能力，实现硬件层面的阻塞，再加上volatile关键字的特性即可实现基于原子操作的线程安全。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/2/assets/image-20200728161620715.png" alt="image-20200728161620715"></p>
<h2 id="悲观锁、乐观锁"><a href="#悲观锁、乐观锁" class="headerlink" title="悲观锁、乐观锁"></a>悲观锁、乐观锁</h2><blockquote>
<p>说到CAS，不得不提到两个专业词语：悲观锁，乐观锁。我们先来看看什么是悲观锁，什么是乐观锁。</p>
</blockquote>
<h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>​    悲观锁总是假设会出现最坏的情况，每次去获取数据时，都会认为别人会修改，所以每次在获取数据时都会上锁。这样别人想拿到这个数据就会阻塞，直到它获取到锁。在关系型数据库中就大量应用了这种锁机制，如行锁、表锁、读锁、写锁。都是在操作前先上锁。Java中<strong>synchronized</strong>就是很直观的体现。</p>
<h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>​    乐观锁总是假设一直都是最好的情况。每次获取时都认为别人不会修改，所以不会上锁，但是在更新时会判断在此期间别人有没有更新这个数据，可以使用版本号实现。乐观锁适用于<strong>读多写少</strong>的场景。这样可以提升系统吞吐量，而CAS就是一种乐观锁的实现。</p>
<h2 id="CAS的典型问题"><a href="#CAS的典型问题" class="headerlink" title="CAS的典型问题"></a>CAS的典型问题</h2><p>​    CAS看起来很好，但是其实现过程中会出现三个典型问题，分别为<strong>ABA、循环时间开销大、只能保证一个共享变量的原子操作</strong>。</p>
<h3 id="ABA"><a href="#ABA" class="headerlink" title="ABA"></a>ABA</h3><p>​    根据之前的讲解CAS操作，其实现重要思路是需要取出内存地址中某个时刻的数据，而在下时刻比较并替换，那么在这个时间差就有可能导致数据的变化。</p>
<p>​    一个线程a将数值改成了b，接着又改成了a，此时CAS认为是没有变化，其实是已经变化过了，这种过程就叫ABA问题。</p>
<p>​    对于ABA问题的解决，常见的解决方式就是通过添加数据版本号实现，避免该问题的发生。后续讲到的原子类就是基于版本号避免ABA问题的出现。</p>
<h3 id="循环时间长开销大"><a href="#循环时间长开销大" class="headerlink" title="循环时间长开销大"></a>循环时间长开销大</h3><p>​    CAS会基于CPU进行自旋操作，如果CAS失效，就会一直进行尝试，如果自旋时间过长，会给CPU带来巨大性能开销。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CasTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Cas 自旋操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">accumulation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//自旋</span></span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="comment">//获取旧值</span></span><br><span class="line">            <span class="keyword">int</span> oldValue = count.get();</span><br><span class="line">            <span class="comment">//比较并且交换</span></span><br><span class="line">            <span class="keyword">boolean</span> flag = count.compareAndSet(oldValue, oldValue + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//如果成功退出自旋</span></span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//失败打印信息再来一次</span></span><br><span class="line">            System.out.println(<span class="string">&quot;数据已被修改自旋再来一次&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//五个线程再跑</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//每个线程让count自增100000次</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">100000</span>; n++) &#123;</span><br><span class="line">                        accumulation();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">       TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/2/assets/image-20200728172201973.png" alt="image-20200728172201973"></p>
<p>​    可以看到在高并发下，compareAndSet会很大概率失败，因此导致了CPU不断自旋，造成CPU性能浪费。</p>
<h3 id="只能保证一个共享变量的原子操作"><a href="#只能保证一个共享变量的原子操作" class="headerlink" title="只能保证一个共享变量的原子操作"></a>只能保证一个共享变量的原子操作</h3><p>​    当对一个变量执行操作时，可以使用CAS循环方式保证原子操作，但对多个变量操作时，CAS则无法保证操作的原子性。因为对于一个内存地址来说，其内部只会存储一个变量。如果要对多个变量操作的话，则需要使用到锁或者进行合并(i=2,j=3 -&gt; 合并ij为一个变量 -&gt; 包装为一个引用类型 -&gt; 进行原子操作)。</p>
]]></content>
      <categories>
        <category>Java并发编程</category>
      </categories>
      <tags>
        <tag>CAS</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发编程01--线程、并发基础</title>
    <url>/jwangcloud/2347443716/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/juc.jpeg" width="1000" height="200" align="middle">



<p>​    Java从诞生开始，其就已经内置了对于多线程的支持。当多个线程能够同时执行时，大多数情况下都能够显著提升系统性能，尤其现在的计算机普遍都是多核的，所以性能的提升会更加明显。但是，多线程在使用中也需要注意诸多的问题，如果使用不当，也会对系统性能造成非常严重的影响。<br>​<br>​<span id="more"></span></p>
<h2 id="并发编程核心概念"><a href="#并发编程核心概念" class="headerlink" title="并发编程核心概念"></a>并发编程核心概念</h2><p>要理解并发编程，务必要先理解三个概念，分别为：原子性、可见性、有序性。</p>
<h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>​    所谓原子性即：一个或者多个操作，要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。</p>
<p>​    在原子操作中，本质上拒绝多线程操作的，不论是单核或多核服务器，当要对某一个数据进行原子操作时，同一时刻只有有一个线程能够对其进行操作，简单来说，在整个操作过程中不会被线程调度器打断，如a=1就是一个原子操作，但a++则不是一个原子操作，因为其内部会额外产生一个新的Integer对象。</p>
<p>​    举个例子，假设对一个32位的变量赋值，操作分为两步：低16位赋值、高16位赋值。当线程A对低16位数据写入成功后，线程A被中断。而此时另外的线程B去读取a的值，那么读取到的就是错误的数据。</p>
<p>​    在Java中的原子性操作包括：</p>
<ul>
<li>基本类型的读取和赋值操作，且赋值必须是数字赋值给变量，变量之间的相互赋值不是原子性操作。</li>
<li>所有引用的赋值操作。</li>
<li>java.concurrent.Atomic.* 包中所有原子操作类的一切操作。</li>
</ul>
<h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p>​    所谓可见性：即当多个线程访问同一个共享变量时，一个线程修改了该共享变量的值后，其他线程能够立即查看到修改后的值。</p>
<p>​    在多线程环境下，一个线程对共享变量的操作对其他线程是默认是不可见的，也就是说一个线程对某一共享的修改，默认其他线程是无法进行查看的。而如果要做到可见，Java中的volatile、synchronized、Lock都能保证可见性。如一个变量被volatile修饰后，表示当一个线程修改共享变量后，其会立即被更新到主内存中，其他线程读取共享变量时，会直接从主内存中读取。而synchronized和Lock能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程启动了&quot;</span>);</span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="comment">//当a=3 跳出死循环</span></span><br><span class="line">                    <span class="keyword">if</span>(a==<span class="number">3</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程停止了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程启动了&quot;</span>);</span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="comment">//当a=3 跳出死循环</span></span><br><span class="line">                    <span class="keyword">if</span>(a==<span class="number">3</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程停止了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//在主线程里边修改变量，测试其他线程是否对这个修改可见</span></span><br><span class="line">        a=<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    通过上述程序运行效果可以发现，对于变量a如果没有加volatile关键字，则线程1和线程2会进入死循环，因为在主线程中修改变量a，线程1和线程2是无法感知的。而当对变量a添加了volatile关键字后，则不会死循环，因为其已经可以保证线程可见性。</p>
<h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p>​    所谓有序性：即程序执行的顺序会按照代码的先后顺序执行。</p>
<p>​    其可以理解为<strong>在本线程内，所有的操作都是有序的。而如果在A线程中观察B线程，所有的操作都是无序的</strong>。在JMM中为了提升程序的执行效率，允许编译器和处理器对<strong>指令重排序</strong>。对于单线程来说，指令重排并不会产生问题，而在多线程下则不可以。</p>
<p>​    在Java中可以通过synchronized和Lock来保证有序性，synchronized和Lock保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。</p>
<p>​    另外还可以通过volatile来保证一定的有序性。最著名的例子就是单例模式的DCL（双重检查锁）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == instance) &#123; </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">null</span> == instance) &#123;   </span><br><span class="line">                    </span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();   </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;    </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>对于并发编程来说，要想保证程序的正确执行，对于原子性、可见性、有序性的保证是非常重要的！！！</strong></p>
<h2 id="进程、线程"><a href="#进程、线程" class="headerlink" title="进程、线程"></a>进程、线程</h2><h3 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h3><p>​    进程可以理解为就是应用程序的启动实例。如微信、Idea、Navicat等，当打开它们后，就相当于开启了一个进程。每个进程都会在操作系统中拥有独立的内存空间、地址、文件资源、数据资源等。<strong>进程是资源分配和管理的最小单位</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200723204916791.png" alt="image-20200723204916791"></p>
<h3 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h3><p>​    线程从属于进程，是程序的实际执行者，一个进程中可以包含若干个线程，并且也可以把线程称为轻量级进程。每个线程都会拥有自己的计数器、堆栈、局部变量等属性，并且能够访问共享的内存变量。<strong>线程是操作系统（CPU）调度和执行的最小单位</strong>。CPU会在这些线程上来回切换，让使用者感觉线程是在同时执行的。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200723204935791.png" alt="image-20200723204935791"></p>
<h3 id="线程使用带来的问题"><a href="#线程使用带来的问题" class="headerlink" title="线程使用带来的问题"></a>线程使用带来的问题</h3><p>​    有很多人都会存在一个误区，在代码中使用多线程，一定会为系统带来性能提升，这个观点是错误的。并发编程的目的是为了让程序运行的更快，但是，绝对不是说启动的线程越多，性能提升的就越大，其会受到很多因素的影响，如锁问题、线程状态切换问题、线程上下文切换问题，还会受到硬件资源的影响，如CPU核数。</p>
<h4 id="什么叫做线程上下文切换"><a href="#什么叫做线程上下文切换" class="headerlink" title="什么叫做线程上下文切换"></a>什么叫做线程上下文切换</h4><p>​    不管是在多核甚至单核处理器中，都是能够以多线程形式执行代码的，CPU通过给每个线程分配CPU时间片来实现线程执行间的快速切换。 所谓的时间片就是CPU分配给每个线程的执行时间，当某个线程获取到CPU时间片后，就会在一定时间内执行，当时间片到期，则该线程会进入到挂起等待状态。时间片一般为几十毫秒，通过在CPU的高速切换，让使用者感觉是在同时执行。</p>
<p>​    同时还要保证线程在切换的过程中，要记录线程被挂起时，已经执行了哪些指令、变量值是多少，那这点则是通过每个线程内部的程序计数器来保证。 </p>
<p>​    简单来说：线程从挂起到再加载的过程，就是一次上下文切换。其是比较耗费资源的。</p>
<p>引起上下文切换的几种情况：</p>
<ul>
<li>时间片用完，CPU正常调度下一个任务。</li>
<li>被其他优先级更高的任务抢占。</li>
<li>执行任务碰到IO阻塞，调度器挂起当前任务，切换执行下一个任务。</li>
<li>用户代码主动挂起当前任务让出CPU时间。</li>
<li>多任务抢占资源，由于没有抢到被挂起。</li>
<li>硬件中断。</li>
</ul>
<h2 id="CPU时间片轮转机制-amp-优化"><a href="#CPU时间片轮转机制-amp-优化" class="headerlink" title="CPU时间片轮转机制&amp;优化"></a>CPU时间片轮转机制&amp;优化</h2><p>​    之前已经提到了线程的执行，是依赖于CPU给每个线程分配的时间来进行。在CPU时间片轮转机制中，如果一个线程的时间片到期，则CPU会挂起该线程并给另一个线程分配一定的时间分片。如果进程在时间片结束前阻塞或结束，则 CPU 会立即进行切换。</p>
<p>​    时间片太短会导致频繁的进程切换，降低了 CPU 效率: 而太长又可能引起对短的交互请求的响应变差。时间片为 <strong>100ms</strong> 通常是一个比较合理的折衷。</p>
<h2 id="并行与并发的理解"><a href="#并行与并发的理解" class="headerlink" title="并行与并发的理解"></a>并行与并发的理解</h2><p>​    对于这两个概念，如果刚看到的话，可能会很不屑。但是真的理解什么叫做并行，什么叫做并发吗？</p>
<p>​    所谓并发即让多个任务能够<strong>交替</strong>执行，一般都会附带一个时间单位，也就是所谓的在单位时间内的并发量有多少。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200723205250316.png" alt="image-20200723205250316"></p>
<p>所谓并行即让多个任务能够<strong>同时</strong>执行。比如说：你可以一遍上厕所，一遍吃饭。  </p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200723205302865.png" alt="image-20200723205302865"></p>
<h2 id="线程启动-amp-中止"><a href="#线程启动-amp-中止" class="headerlink" title="线程启动&amp;中止"></a>线程启动&amp;中止</h2><p>​    线程的实现方式有两种：继承Thread类、实现Runnable接口。但是有一些书籍或者文章会说有三种方式，即实现Callable接口。但通过该接口定义线程并不是Java标准的定义方式，而是基于Future思想来完成。 Java官方说明中，已经明确指出，只有两种方式。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200723205452047.png" alt="image-20200723205452047"></p>
<p>​    那么Thread和Runnable有什么区别和联系呢？ 一般来说，Thread是对一个线程的抽象，而Runnable是对业务逻辑的抽象，并且Thread 可以接受任意一个 Runnable 的实例并执行。</p>
<h3 id="线程启动"><a href="#线程启动" class="headerlink" title="线程启动"></a>线程启动</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新建线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UseThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;: use thread&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UseRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;: use runnable&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;: use main&quot;</span>);</span><br><span class="line"></span><br><span class="line">        UseThread useThread = <span class="keyword">new</span> UseThread();</span><br><span class="line">        useThread.start();</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> UseRunnable());</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优化：启动线程前，最好为这个线程设置特定的线程名称，这样在出现问题时，给开发人员一些提示，快速定位到问题线程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread.currentThread().setName(<span class="string">&quot;Runnable demo&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="线程中止"><a href="#线程中止" class="headerlink" title="线程中止"></a>线程中止</h3><p>​    线程在正常下当run执行完，或出现异常都会让该线程中止。</p>
<h4 id="理解suspend-、resume-、stop"><a href="#理解suspend-、resume-、stop" class="headerlink" title="理解suspend()、resume()、stop()"></a>理解suspend()、resume()、stop()</h4><p>​    这三个方法对应的是暂停、恢复和中止。对于这三个方法的使用效果演示如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Srs</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            DateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;run at&quot;</span>+dateFormat.format(<span class="keyword">new</span> Date()));</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启线程</span></span><br><span class="line">        System.out.println(<span class="string">&quot;开启线程&quot;</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//暂停线程</span></span><br><span class="line">        System.out.println(<span class="string">&quot;暂停线程&quot;</span>);</span><br><span class="line">        thread.suspend();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//恢复线程</span></span><br><span class="line">        System.out.println(<span class="string">&quot;恢复线程&quot;</span>);</span><br><span class="line">        thread.resume();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//中止线程</span></span><br><span class="line">        System.out.println(<span class="string">&quot;中止线程&quot;</span>);</span><br><span class="line">        thread.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">开启线程</span><br><span class="line">my threadrun at22:<span class="number">42</span>:<span class="number">24</span></span><br><span class="line">my threadrun at22:<span class="number">42</span>:<span class="number">25</span></span><br><span class="line">my threadrun at22:<span class="number">42</span>:<span class="number">26</span></span><br><span class="line">暂停线程</span><br><span class="line">恢复线程</span><br><span class="line">my threadrun at22:<span class="number">42</span>:<span class="number">30</span></span><br><span class="line">my threadrun at22:<span class="number">42</span>:<span class="number">31</span></span><br><span class="line">my threadrun at22:<span class="number">42</span>:<span class="number">32</span></span><br><span class="line">中止线程</span><br></pre></td></tr></table></figure>

<p>​    可以看到这三个方式，很好的完成了其本职工作。但是三个已经在Java源码中被标注为过期方法。那这三个方式为什么会被标记为过期方法呢？</p>
<p>​    当调用**suspend()**时，线程不会将当前持有的资源释放(如锁)，而是占有者资源进入到暂停状态，这样的话，容易造成死锁问题的出现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Srs</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  Object obj = <span class="keyword">new</span> Object();<span class="comment">//作为一个锁</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line"></span><br><span class="line">                DateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;run at&quot;</span>+dateFormat.format(<span class="keyword">new</span> Date()));</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread(),<span class="string">&quot;正常线程&quot;</span>);</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread(),<span class="string">&quot;死锁线程&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启线程</span></span><br><span class="line">        thread.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//暂停线程</span></span><br><span class="line">        thread.suspend();</span><br><span class="line">        System.out.println(<span class="string">&quot;暂停线程&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        thread1.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//恢复线程</span></span><br><span class="line">        <span class="comment">/*thread.resume();</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;恢复线程&quot;);</span></span><br><span class="line"><span class="comment">        TimeUnit.SECONDS.sleep(3);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//中止线程</span></span><br><span class="line">        <span class="comment">/*thread.stop();</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;中止线程&quot;);*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    在上述代码中，正常线程持有了锁，当调用**suspend()**时，因为该方法不会释放锁，所以死锁线程因为获取不到锁而导致无法执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">正常线程run at23:<span class="number">37</span>:<span class="number">28</span></span><br><span class="line">正常线程run at23:<span class="number">37</span>:<span class="number">29</span></span><br><span class="line">正常线程run at23:<span class="number">37</span>:<span class="number">30</span></span><br><span class="line">暂停线程</span><br></pre></td></tr></table></figure>

<p>​    当调用stop()时，会<strong>立即停止run()中剩余的操作</strong>。因此可能会导致一些的工作得不到完成，如文件流，数据库等关闭。并且<strong>会立即释放该线程所持有的所有的锁</strong>，导致数据得不到同步的处理，出现数据不一致的问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopProblem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        TestObject testObject = <span class="keyword">new</span> TestObject();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                testObject.print(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">//让子线程有执行时间</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        t1.stop();</span><br><span class="line">        System.out.println(<span class="string">&quot;first : &quot;</span> + testObject.getFirst() + <span class="string">&quot; &quot;</span> + <span class="string">&quot;second : &quot;</span> + testObject.getSecond());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String first = <span class="string">&quot;ja&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String second = <span class="string">&quot;va&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String first, String second)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">this</span>.first = first;</span><br><span class="line">        <span class="comment">//2.模拟数据不一致</span></span><br><span class="line">        <span class="comment">//TimeUnit.SECONDS.sleep(3);</span></span><br><span class="line">        <span class="keyword">this</span>.second = second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSecond</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="线程中止的安全且优雅姿势"><a href="#线程中止的安全且优雅姿势" class="headerlink" title="线程中止的安全且优雅姿势"></a>线程中止的安全且优雅姿势</h4><p>​    Java对于线程安全中止设计了一个<strong>中断属性</strong>，其可以理解是线程的一个标识位属性。它用于表示一个运行中的线程是否被其他线程进行了中断操作。好比其他线程对这个线程打了一个招呼，告诉它你该中断了。通过**interrupt()**实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterruptDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot; is running&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread(),<span class="string">&quot;myThread&quot;</span>);</span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    添加该方法后，会出现一个异常，但是可以发现并不会线程的继续执行。</p>
<p>​    线程通过检查自身是否被中断来进行响应，可以通过**isInterrupted()**进行判断，如果返回值为true，代表添加了中断标识，返回false，代表没有添加中断标识。通过它可以对线程进行中断操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterruptDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//while (true)&#123;</span></span><br><span class="line">            <span class="keyword">while</span> (!Thread.currentThread().isInterrupted())&#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot; is running&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; Interrupt flag is : &quot;</span>+Thread.currentThread().isInterrupted());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread(),<span class="string">&quot;myThread&quot;</span>);</span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    对线程中断属性的判断，可以利用其进行线程执行的中断操作。</p>
<p>​    线程也可以通过静态方法**Thread.interrupted()**查询线程是否被中断，并对中断标识进行复位，如果该线程已经被添加了中断标识，当使用了该方法后，会将线程的中断标识由true改为false。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200727142422111.png" alt="image-20200727142422111"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterruptDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//while (true)&#123;</span></span><br><span class="line">            <span class="comment">//while (!Thread.currentThread().isInterrupted())&#123;</span></span><br><span class="line">            <span class="keyword">while</span> (!Thread.interrupted())&#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot; is running&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; Interrupt flag is : &quot;</span>+Thread.currentThread().isInterrupted());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread(),<span class="string">&quot;myThread&quot;</span>);</span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时要注意：<strong>处于死锁下的线程，无法被中断</strong></p>
<h2 id="深入线程操作常见方法"><a href="#深入线程操作常见方法" class="headerlink" title="深入线程操作常见方法"></a>深入线程操作常见方法</h2><h3 id="理解run-amp-start"><a href="#理解run-amp-start" class="headerlink" title="理解run()&amp;start()"></a>理解run()&amp;start()</h3><p>​    这两个方法都可以启动线程，但是它俩是有本质上的区别的。当线程执行了 start()方法后，才真正意义上的启动线程，其会让一个线程进入就绪状态等待分配CPU时间片，分到时间片后才会调用run()。注意，同一个线程的start(<strong>)不能被重复调用</strong>，否则会出现异常，因为重复调用了，start方法，线程的state就不是new了，那么threadStatus就不等于0了。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//start源码分析</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        Java里面创建线程之后，必须要调用start方法才能创建一个线程，该方法会通过虚拟机启动一个本地线程，本地线程的创建会调用当前系统去创建线程的方法进行创建线程。</span></span><br><span class="line"><span class="comment">        最终会调用run()将线程真正执行起来</span></span><br><span class="line"><span class="comment">        0这个状态，等于‘New’这个状态。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 线程会加入到线程分组，然后执行start0() */</span></span><br><span class="line">    group.add(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        start0();</span><br><span class="line">        started = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">                group.threadStartFailed(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">            <span class="comment">/* do nothing. If start0 threw a Throwable then</span></span><br><span class="line"><span class="comment">                  it will be passed up the call stack */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200723210331930.png" alt="image-20200723210331930"></p>
<p>​    而run()则仅仅是一个普通方法，与类中的成员方法意义相同。在该方法中可以实现线程执行的业务逻辑。但并不会以异步的方式将线程启动，换句话说就是并不会去开启一个新的线程。其可以单独执行，也<strong>可以重复执行</strong>。</p>
<h3 id="wait-、notify"><a href="#wait-、notify" class="headerlink" title="wait()、notify()"></a>wait()、notify()</h3><p>wait()、notify()、notifyAll()是三个定义在Object类里的方法，可以用来控制线程的状态。</p>
<p><strong>注意：一定要在线程同步中使用,并且是同一个锁的资源</strong></p>
<p>wait和notify方法例子，打开关闭开关：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitNotify</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">static</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建等待线程</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">                <span class="keyword">while</span> (!flag)&#123;</span><br><span class="line">                    <span class="comment">//条件不满足，进入等待</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot; flag is false,waiting&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//条件满足，退出等待</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot; flag is true&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NotifyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot; hold lock&quot;</span>);</span><br><span class="line">                lock.notify();</span><br><span class="line">                flag=<span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> WaitThread(),<span class="string">&quot;wait&quot;</span>).start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> NotifyThread(),<span class="string">&quot;notify&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200727175738217.png" alt="image-20200727175738217"></p>
<p>1）WaitThread首先获取对象锁。</p>
<p>2）WaitThread调用对象的wait()方法，放弃锁并进入对象的等待队列WaitQueue，进行<strong>等待状态</strong>。</p>
<p>3）由于WaitThread释放了对象锁，NotifyThread随机获取对象锁。</p>
<p>4）NotifyThread获取对象锁成功后，调用notify()或notifyAll()，将WaitThread从等待队列WaitQueue移到同步队列</p>
<p>SynchronizedQueue，此时WaitThread为<strong>阻塞状态</strong>。</p>
<p>5）NotifyThread释放锁后，WaitThread再次获取锁并从wait()方法继续执行。</p>
<h4 id="等待通知范式"><a href="#等待通知范式" class="headerlink" title="等待通知范式"></a>等待通知范式</h4><p>​    多线程的等待通知是一道非常常见的面试题，常见于笔试中。对于等待通知来说，需要有生产者（通知方）与消费者（等待方）</p>
<p>等待方：</p>
<ul>
<li>获取对象锁。</li>
<li>如果条件不满足，那么调用对象的wait方法，被通知后仍要检查条件。</li>
<li>条件满足则执行对应逻辑。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(对象)&#123;</span><br><span class="line">    <span class="keyword">while</span>(条件不满足)&#123;</span><br><span class="line">        对象.wait();</span><br><span class="line">    &#125;</span><br><span class="line">    条件满足，执行业务逻辑。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通知方：</p>
<ul>
<li>获取对象锁。</li>
<li>改变条件。</li>
<li>通知等待在该对象上的线程。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(对象)&#123;</span><br><span class="line">    改变条件</span><br><span class="line">    对象.notify()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="wait与sleep区别"><a href="#wait与sleep区别" class="headerlink" title="wait与sleep区别"></a>wait与sleep区别</h3><ul>
<li><p>对于sleep()方法，首先要知道该方法是属于Thread类中的。而wait()方法，则是属于Object类中的。</p>
</li>
<li><p>sleep()方法导致了程序暂停执行指定的时间，让出cpu调度其他线程，但是他的监控状态依然保持者，当指定的时间到了又会自动恢复运行状态。</p>
<p>wait()是把控制权交出去，然后进入等待此对象的等待锁定池处于等待状态，只有针对此对象调用notify()方法后本线程才进入对象锁定池准备获取对象锁进入运行状态。</p>
</li>
<li><p>在调用sleep()方法的过程中，线程不会释放锁。而当调用wait()方法的时候，线程会释放锁。</p>
</li>
</ul>
<h3 id="理解yield"><a href="#理解yield" class="headerlink" title="理解yield()"></a>理解yield()</h3><p>​    当某个线程调用了这个方法后，该线程立即释放自己持有的时间片。线程会进入到就绪状态，同时CPU会重新选择一个线程赋予时间分片，但注意，调用了这个方法的线程，也有可能被CPU再次选中赋予执行。</p>
<p>​    而且<strong>该方法不会释放锁</strong>。 如需释放锁的话，可以在调用该方法前自己手动释放。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YieldDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot; : &quot;</span>+i);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">5</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName());</span><br><span class="line">                    Thread.yield();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread()).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread()).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread()).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从结果看出，当调用了该方法后线程会让出自己的时间分片，但也有可能被再次选中执行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Thread-3 0</span><br><span class="line">Thread-1 0</span><br><span class="line">Thread-5 0</span><br><span class="line">Thread-5 1</span><br><span class="line">Thread-5 2</span><br><span class="line">Thread-5 3</span><br><span class="line">Thread-5 4</span><br><span class="line">Thread-5 5</span><br><span class="line">Thread-5</span><br><span class="line">Thread-1 1</span><br><span class="line">Thread-1 2</span><br><span class="line">Thread-1 3</span><br><span class="line">Thread-1 4</span><br><span class="line">Thread-1 5</span><br><span class="line">Thread-1</span><br><span class="line">Thread-1 6</span><br><span class="line">Thread-1 7</span><br><span class="line">Thread-1 8</span><br><span class="line">Thread-1 9</span><br><span class="line">Thread-3 1</span><br><span class="line">Thread-3 2</span><br><span class="line">Thread-3 3</span><br><span class="line">Thread-3 4</span><br><span class="line">Thread-3 5</span><br><span class="line">Thread-3</span><br><span class="line">Thread-5 6</span><br><span class="line">Thread-5 7</span><br><span class="line">Thread-5 8</span><br><span class="line">Thread-5 9</span><br><span class="line">Thread-3 6</span><br><span class="line">Thread-3 7</span><br><span class="line">Thread-3 8</span><br><span class="line">Thread-3 9</span><br></pre></td></tr></table></figure>

<h3 id="理解join"><a href="#理解join" class="headerlink" title="理解join()"></a>理解join()</h3><p>​    该方法的使用，在实际开发中，应用的是比较少的。但在面试中，常常伴随着产生一个问题，如何保证线程的执行顺序？ 就可以通过该方法来设置。</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>​    当线程调用了该方法后，线程状态会从就绪状态进入到运行状态。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        Thread previousThread; <span class="comment">//上一个线程</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(Thread previousThread,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.previousThread=previousThread;</span><br><span class="line">            <span class="keyword">this</span>.i=i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//调用上一个线程的join方法. 不使用join方法解决是不确定的</span></span><br><span class="line">            <span class="comment">//previousThread.join();</span></span><br><span class="line">            System.out.println(<span class="string">&quot;num:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread previousThread=Thread.currentThread();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//每一个线程实现都持有前一个线程的引用。</span></span><br><span class="line">            MyThread joinDemo=<span class="keyword">new</span> MyThread(previousThread,i);</span><br><span class="line">            joinDemo.start();</span><br><span class="line">            previousThread=joinDemo;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">num:0</span><br><span class="line">num:2</span><br><span class="line">num:3</span><br><span class="line">num:6</span><br><span class="line">num:7</span><br><span class="line">num:1</span><br><span class="line">num:5</span><br><span class="line">num:9</span><br><span class="line">num:8</span><br><span class="line">num:4</span><br></pre></td></tr></table></figure>

<p>可以等到开启了join之后，结果就是有序的了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">num:0</span><br><span class="line">num:1</span><br><span class="line">num:2</span><br><span class="line">num:3</span><br><span class="line">num:4</span><br><span class="line">num:5</span><br><span class="line">num:6</span><br><span class="line">num:7</span><br><span class="line">num:8</span><br><span class="line">num:9</span><br></pre></td></tr></table></figure>

<p>根据结果可以看到，当前线程需要等待previousThread线程终止之后才从thread.join返回。可以理解为，线程会在join处等待。</p>
<h4 id="原理剖析"><a href="#原理剖析" class="headerlink" title="原理剖析"></a>原理剖析</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    join(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">long</span> millis)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> base = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">long</span> now = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (millis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;timeout value is negative&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否携带阻塞的超时时间，等于0表示没有设置超时时间</span></span><br><span class="line">    <span class="keyword">if</span> (millis == <span class="number">0</span>) &#123; </span><br><span class="line">        <span class="comment">//isAlive获取线程状态，无限等待直到previousThread线程结束</span></span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">            <span class="comment">//调用Object中的wait方法实现线程的阻塞</span></span><br><span class="line">            wait(<span class="number">0</span>); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">//阻塞直到超时</span></span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123; </span><br><span class="line">            <span class="keyword">long</span> delay = millis - now;</span><br><span class="line">            <span class="keyword">if</span> (delay &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            wait(delay);</span><br><span class="line">            now = System.currentTimeMillis() - base;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    可以看到该方法是被synchronized修饰的，因为在其内部对于线程阻塞的实现，是通过Object中wait方法实现的，而要调用wait()，则必须添加synchronized。</p>
<p>​    总的来说，Thread.join其实底层是通过wait/notifyall来实现线程的通信达到线程阻塞的目的；当线程执行结束以后，会触发两个事情，第一个是设置native线程对象为null、第二个是通过notifyall方法，让等待在previousThread对象锁上的wait方法被唤醒。</p>
<h2 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h2><p>​    操作对于线程执行，是通过CPU时间片来调用运行的。那么一个线程被分配的时间片的多少，就决定了其使用资源的多少。而线程优先级就是决定线程需要能够使用资源多少的线程属性。</p>
<p>​    线程优先级的<strong>范围是1~10</strong>。一个线程的<strong>默认优先级是5</strong>，可以在构建线程时，通过**setPriority()**修改该线程的优先级。优先级高的线程分配时间片的数量会高于优先级低的线程。</p>
<p>​    一般来说对于频繁阻塞的线程需要设置优先级高点，而偏重计算的线程优先级会设置低些，确保处理器不会被独占。</p>
<p>​    但<strong>注意，线程优先级不能作为线程执行正确性的依赖，因为不同的操作系统可能会忽略优先级的设置。</strong></p>
<h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>​    守护线程是一种支持型的线程，我们之前创建的线程都可以称之为用户线程。通过守护线程可以完成一些支持性的工作，如GC、分布式锁续期。守护线程会伴随着用户线程的结束而结束。</p>
<p>​    对于守护线程的创建，可以通过setDaemon()设置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaemonDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">              System.out.println(Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread());</span><br><span class="line">        <span class="comment">//设置守护线程</span></span><br><span class="line">        thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    当线程实例没有被设置为守护线程时，该线程并不会随着主线程的结束而结束。但是当被设置为守护线程后，当主线程结束，该线程也会伴随着结束。同时守护线程<strong>不一定</strong>会执行finally代码块。所以当线程被设定为守护线程后，无法确保清理资源等操作一定会被执行。</p>
<h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><p>​    理解了上述方法后，再来看一下这些对于线程状态转换能起到什么样的影响。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200723221434772.png" alt="image-20200723221434772"></p>
<p>​    </p>
]]></content>
      <categories>
        <category>Java并发编程</category>
      </categories>
      <tags>
        <tag>并发基础</tag>
        <tag>线程</tag>
        <tag>守护线程</tag>
        <tag>线程状态</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发编程03--volatile关键字</title>
    <url>/jwangcloud/3511257114/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/juc.jpeg" width="1000" height="200" align="middle">


<span id="more"></span>

<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>​    Java中提供了一种较弱的同步机制，即volatile关键字。可以把它看成是synchronized的轻量级实现，但是<strong>其并不能完全替代synchronized，或者说将其当做锁来使用</strong>。volatile具有可见性与有序性，但不具有原子性。即通过volatile修饰的共享变量（<strong>类的成员变量和静态成员变量</strong>）不直接存在于工作线程的副本，而是存在于主内存中。线程每次读取时，都会去主内存中进行读取，从而保证其他线程每次对于该成员变量都能获取最新值。</p>
<p>​    简单来说，一个共享变量一旦被volatile修饰后，其就具备了两个特性：</p>
<ul>
<li>保证多线程下对该变量的可见性。</li>
<li>保证多线程下对该变量的有序性。</li>
</ul>
<h2 id="特性详解"><a href="#特性详解" class="headerlink" title="特性详解"></a>特性详解</h2><h3 id="不能保证共享变量的原子性"><a href="#不能保证共享变量的原子性" class="headerlink" title="不能保证共享变量的原子性"></a>不能保证共享变量的原子性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicityTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">int</span> inc = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inc++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> AtomicityTest test = <span class="keyword">new</span> AtomicityTest();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++) &#123;</span><br><span class="line">                        test.increment();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保证前面的线程都执行完</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        System.out.println(test.inc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    通过上述程序运行结果可以发现，最终结果并非期望的10000，因为volatile并不能保证原子性，因此在多线程下操作时，一个线程可能会读取到另外一个线程并未修改的数据。</p>
<h3 id="能够保证共享变量的可见性"><a href="#能够保证共享变量的可见性" class="headerlink" title="能够保证共享变量的可见性"></a>能够保证共享变量的可见性</h3><p>​    通过volatile修饰的变量，JMM并不会将其放入线程的本地内存，而是放入主内存中。从而该变量对于其他线程都是立即可见的。</p>
<h3 id="能够保证共享变量的有序性"><a href="#能够保证共享变量的有序性" class="headerlink" title="能够保证共享变量的有序性"></a>能够保证共享变量的有序性</h3><p>​    volatile能够<strong>禁止指令重排</strong>，因此能够在一定程度上保证有序性。当对volatile变量操作时，其前面的操作肯定全部已经执行完毕，其后面的操作肯定还没有执行。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>​    通过前面的讲解可知，volatile不具备原子性，因此其并不能当做锁来使用。一般来说通过volatile修饰的变量都会独立于任何程序，一般volatile会通过与synchronized组合来保证并发时能够正确执行。对其的使用必须同时满足下面两个条件才能保证在并发环境的线程安全：</p>
<ul>
<li>对变量的写操作不依赖于当前值（比如 i++），或者说是单纯的变量赋值（boolean flag = true）</li>
<li>该变量没有包含在具有其他变量的不变式中，也就是说，不同的 volatile 变量之间，不能互相依赖。只有在状态真正独立于程序内其他内容时才能使用 volatile。</li>
</ul>
<p>​    同时volatile更适用于读多写少的场景。如有N个线程在读值，而只有一个线程在写值，则该值可以通过volatile修饰，即可保证多线程下的可见性，也可以保证变量的原子性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n =<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">200</span>;i++)&#123;</span><br><span class="line">                        add();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (n&lt;<span class="number">100</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    如果n不加volatile，程序会进入死循环，因为n对于子线程来说是不可见的。当对n添加了volatile后，则程序可以结束。</p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p><strong>单例模式的DCL为什么要添加volatile</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  <span class="comment">//1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == instance) &#123;   <span class="comment">//2</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;<span class="comment">//3</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">null</span> == instance) &#123;   <span class="comment">//4</span></span><br><span class="line">                    </span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();       <span class="comment">//5 </span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;    </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    在上述代码中对于<code>instance = new Singleton();</code>在执行时，其内部主要会发生三件事：分配内存、对象初始化、设置instance指向刚分配的地址。因此多线程下在编译时，有可能发生指令重排，假设当线程A在执行第5行代码时，B线程进来执行到第2行代码。假设此时A执行的过程中发生了指令重排序，即先执行了a和c，没有执行b。那么由于A线程执行了c导致instance指向了一段地址，所以B线程判断instance不为null，会直接跳到第6行并返回一个未初始化的对象。</p>
]]></content>
      <categories>
        <category>Java并发编程</category>
      </categories>
      <tags>
        <tag>volatile</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发编程02--synchronized</title>
    <url>/jwangcloud/3357090801/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/juc.jpeg" width="1000" height="200" align="middle">



<h2 id="synchronized基本使用"><a href="#synchronized基本使用" class="headerlink" title="synchronized基本使用"></a>synchronized基本使用</h2><p>​    对于线程来说，如果多个线程只是相互间单独执行的话，本身是没有太大意义的，一般来说，都是需要多个线程，相互间协作来进行工作的，这样使用，才会对系统带来实际的意义。</p>
<span id="more"></span>

<p>​    在Java中支持多个线程同时访问一个对象或对象中的成员变量，但是如果没有任何保护机制的话，就会出现数据不一致的情况，效果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCount</span><span class="params">(<span class="keyword">long</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">incrCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        SyncTest syncTest;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(SyncTest syncTest)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.syncTest = syncTest;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                syncTest.incrCount();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        SyncTest syncTest = <span class="keyword">new</span> SyncTest();</span><br><span class="line"></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread(syncTest));</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread(syncTest));</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(syncTest.getCount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    根据结果可以，预计结果值是两万，但是并没有达到期望的效果。</p>
<p>​    现在要解决这个问题的话，就可以使用锁来进行解决。synchronized可以修饰方法或者以同步块的形式来进行使用，它主要确保多个线程在同一个时刻，只能有一个线程处于方法或者同步块中，它保证了线程对变量访问的可见性和排他性，又称为内置锁机制。</p>
<p>​    简单来说就像吃饭一样很多人一起来抢，我可能抢不到，但是我加了把锁，我进去先锁上门，等我吃完了，打开门，其他的人才能进来，synchronized 就是java多线程中的那把锁。</p>
<p>​    对于synchronized，可以把其加在方法上或者类上，或者添加同步代码块。演示效果如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加在方法上</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">incrCount1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加同步代码块</span></span><br><span class="line"><span class="comment">//需要声明一个锁对象</span></span><br><span class="line"><span class="comment">//作为锁对象</span></span><br><span class="line"><span class="keyword">private</span> Object object = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">incrCount2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (object)&#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    这两种方式都可以保证，当前操作是加锁的，这样的话，在多线程下，只有等到获取到锁的线程将锁释放掉后，下一个线程才能持有锁。通过这种机制，来保证数据的一致性。</p>
<p>​    这种操作方式也可以叫做<strong>对象锁</strong>。但是如果现在通过synchronized锁定的是不同的两个对象的话，还能够保证锁的有效吗？ 这就一定不能了，因为多个线程持有的对象锁是不同的话，这样的话，是没有意义的，线程间仍然是可以并行执行的，使用效果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiffInstance</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceSyn</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> DiffInstance diffInstance;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InstanceSyn</span><span class="params">(DiffInstance diffInstance)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.diffInstance = diffInstance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;TestInstance is running...&quot;</span>+ diffInstance);</span><br><span class="line">            diffInstance.instance();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Instance2Syn</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> DiffInstance diffInstance;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Instance2Syn</span><span class="params">(DiffInstance diffInstance)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.diffInstance = diffInstance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;TestInstance2 is running...&quot;</span>+ diffInstance);</span><br><span class="line">            diffInstance.instance2();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">instance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;synInstance is going...&quot;</span>+<span class="keyword">this</span>.toString());</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;synInstance ended &quot;</span>+<span class="keyword">this</span>.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">instance2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;synInstance2 is going...&quot;</span>+<span class="keyword">this</span>.toString());</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;synInstance2 ended &quot;</span>+<span class="keyword">this</span>.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        DiffInstance instance1 = <span class="keyword">new</span> DiffInstance();</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Instance2Syn(instance1));</span><br><span class="line"></span><br><span class="line">        DiffInstance instance2 = <span class="keyword">new</span> DiffInstance();</span><br><span class="line">        Thread t4 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> InstanceSyn(instance1));</span><br><span class="line">        <span class="comment">//Thread t4 = new Thread(new InstanceSyn(instance2));</span></span><br><span class="line">        t3.start();</span><br><span class="line">        t4.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    对于synchronized，也可以加载类上进行使用。此时可以把它称为<strong>类锁</strong>。此时加锁的就是一个class对象了。</p>
<p>​    但是有一点必须注意的是，其实类锁只是一个概念上的东西，并不是真实存在的，类锁其实锁的是每个类的对应的class对象。类锁和对象锁之间也是互不干扰的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">synClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName()</span><br><span class="line">                       +<span class="string">&quot;synClass going...&quot;</span>);</span><br><span class="line">    SleepTools.second(<span class="number">1</span>);</span><br><span class="line">    System.out.println(Thread.currentThread().getName()</span><br><span class="line">                       +<span class="string">&quot;synClass end&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在使用synchronized时，建议锁定的范围，越小越好。否则的话，容易造成大量资源被锁定。</p>
<h2 id="synchronized错误加锁问题"><a href="#synchronized错误加锁问题" class="headerlink" title="synchronized错误加锁问题"></a>synchronized错误加锁问题</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorSyncTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Integer i;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(Integer i)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.i = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (i)&#123;</span><br><span class="line">                i++;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(myThread).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    根据上述效果可以看到，在多线程执行时，虽然添加了锁，但是仍然不能保证数据的正确性，这是因为什么呢？ 这里主要是因为在执行i++时，其内部是重新新建了一个对象。导致锁定对象出现了不一致。只要让它保证是锁定的同一个对象即可。</p>
<h2 id="synchronized实现原理"><a href="#synchronized实现原理" class="headerlink" title="synchronized实现原理"></a>synchronized实现原理</h2><p>​    很多人对于synchronized的理解都会认为它是一把重量级锁（操作需要经过操作系统）。但是从Java1.6后，已经对synchronized进行了优化改良，在一些情况下它就已经没有那么重了。</p>
<h3 id="实现原理解析"><a href="#实现原理解析" class="headerlink" title="实现原理解析"></a>实现原理解析</h3><p>​    当一个线程访问同步代码块时，它首先需要先获取到锁才能执行，退出或抛出异常时必须释放锁，那么其内部又是如何实现的呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>利用javap工具查看生成的class文件信息来分析Synchronize的实现</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200723223047596.png" alt="image-20200723223047596"></p>
<p>从上述内容可以看出，同步代码块是使用<strong>monitorenter</strong>和<strong>monitorexit</strong>指令实现的。而同步方法是使用另外一种方式实现的，细节在JVM规范里没有详细说明。但是可以肯定的是，同步方法可以使用这两个指令来实现。</p>
<h3 id="锁到底存在哪里-amp-锁里面会存储什么信息"><a href="#锁到底存在哪里-amp-锁里面会存储什么信息" class="headerlink" title="锁到底存在哪里&amp;锁里面会存储什么信息"></a>锁到底存在哪里&amp;锁里面会存储什么信息</h3><p>​    synchronized用的锁会保存在<strong>Java对象头</strong>中。那什么是Java对象头呢？</p>
<p>​    一个Java对象在内存中是由三部分组成的：</p>
<ul>
<li>对象头</li>
<li>实例数据</li>
<li>对齐填充字节</li>
</ul>
<p>​    如果对象不是数组类型，则JVM用2字宽存储对象头。如果是数组类型，则用3字宽存储对象头。在32位虚拟机中，1字宽等于4字节，即32bit。在64位虚拟机中，1字宽相当于8字节，即64bit。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200723223117879.png" alt="image-20200723223117879"></p>
<p>而对象头也是由三部分组成：</p>
<ul>
<li>MarkWord</li>
<li>类型指针</li>
<li>数组长度（只有数组对象有）</li>
</ul>
<p>​    Mark Word用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程 ID、偏向时间戳等等。Java对象头一般占有两个机器码（在32位虚拟机中，1个机器码等于4字节，也就是32bit）。 <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200727234824553.png" alt="image-20200727234824553"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200727232519217.png" alt="image-20200727232519217"></p>
<h3 id="Synchronized锁优化"><a href="#Synchronized锁优化" class="headerlink" title="Synchronized锁优化"></a>Synchronized锁优化</h3><p>​    Java1.6后为了减少获得锁和释放锁而带来的性能消耗，引入了<strong>偏向锁</strong>和<strong>轻量级锁</strong>。此时锁会存在四种状态，级别从低到高分别为：<strong>无锁、偏向锁、轻量级锁、重量级锁</strong>。状态间的转换会随着竞争情况逐渐升级。<strong>锁可以升级但不能降级</strong>，如偏向锁升级为轻量级锁后不能降级为偏向锁。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200723223154992.png" alt="image-20200723223154992"></p>
<h4 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h4><p>​    线程的阻塞和唤醒需要CPU从用户态转为内核态，频繁的阻塞和唤醒对CPU来说是一件负担很重的工作，势必会给系统的并发性能带来很大的压力。同时我们发现在许多应用上面，对象锁的锁状态只会持续很短一段时间，为了这一段很短的时间频繁地阻塞和唤醒线程是非常不值得的。所以引入<strong>自旋锁</strong>。 </p>
<p>​    所谓自旋锁，就是让该线程等待一段时间，不会被立即挂起，看持有锁的线程是否会很快释放锁。怎么等待呢？执行一段无意义的循环即可（自旋）。  </p>
<p>​    自旋等待不能替代阻塞，先不说对处理器数量的要求（多核，貌似现在没有单核的处理器了），虽然它可以避免线程切换带来的开销，但是它占用了处理器的时间。如果持有锁的线程很快就释放了锁，那么自旋的效率就非常好，反之，自旋的线程就会白白消耗掉处理的资源，它不会做任何有意义的工作，典型的占着茅坑不拉屎，这样反而会带来性能上的浪费。所以说，自旋等待的时间（自旋的次数）必须要有一个限度，如果自旋超过了定义的时间仍然没有获取到锁，则应该被挂起。</p>
<p>​    自旋锁在JDK1.4中引入，默认关闭，但是可以使用**-XX:+UseSpinning<strong>开启，在JDK1.6中默认开启。同时自旋的默认次数为10次，可以通过参数</strong>-XX:PreBlockSpin**来调整；</p>
<p>​    如果通过参数**-XX:preBlockSpin**来调整自旋锁的自旋次数，会带来诸多不便。假如我将参数调整为10，但是系统很多线程都是等你刚刚退出的时候就释放了锁（假如你多自旋一两次就可以获取锁），你是不是很尴尬。于是JDK1.6引入自适应的自旋锁，让虚拟机会变得越来越聪明。 </p>
<h4 id="自适应自旋锁"><a href="#自适应自旋锁" class="headerlink" title="自适应自旋锁"></a>自适应自旋锁</h4><p>​        JDK1.6引入了更加聪明的自旋锁，即<strong>自适应自旋锁</strong>。所谓自适应就意味着自旋的次数不再是固定的，它是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。它怎么做呢？线程如果自旋成功了，那么下次自旋的次数会更加多，因为虚拟机认为既然上次成功了，那么此次自旋也很有可能会再次成功，那么它就会允许自旋等待持续的次数更多。反之，如果对于某个锁，很少有自旋能够成功的，那么在以后要或者这个锁的时候自旋的次数会减少甚至省略掉自旋过程，以免浪费处理器资源。<br>​        有了自适应自旋锁，随着程序运行和性能监控信息的不断完善，虚拟机对程序锁的状况预测会越来越准确，虚拟机会变得越来越聪明。 </p>
<h4 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h4><pre><code> 为了保证数据的完整性，我们在进行操作时需要对这部分操作进行同步控制，但是在有些情况下，JVM检测到不可能存在共享数据竞争，这时JVM会对这些同步锁进行锁消除。
</code></pre>
<p>​    锁消除发生在编译阶段，通过对运行上下文的扫描，去除不可能存在共享资源竞争的锁，通过锁消除，可以节省毫无意义的请求锁时间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLockEliminate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getString</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        sb.append(s1);</span><br><span class="line">        sb.append(s2);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> tsStart = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">            getString(<span class="string">&quot;TestLockEliminate &quot;</span>, <span class="string">&quot;Suffix&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;一共耗费：&quot;</span> + (System.currentTimeMillis() - tsStart) + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    已上述代码为例，运行时间大概在500毫秒。那么在运行时，其内部又发生了什么呢？可以看到当前getString()中的StringBuffer是作为方法内部的局部变量，因此它不可能被多个线程同时访问，也就没有资源竞争，但是StringBuffer的append操作却需要执行同步操作:</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200728143709230.png" alt="image-20200728143709230"></p>
<p>​    那么此时的同步锁相当于就是白白浪费系统资源。因此在编译时一旦JVM发现此种情况就会通过锁消除方式来优化性能。在JDK1.8中锁消除是自动开启的。</p>
<p>​    在循环中，让其每次都睡一秒，然后查看当前程序的JVM参数。<code>DoEscapeAnalysis,EliminateLocks</code>.可以发现逃逸分析和锁消除是默认开启的。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200728144049526.png" alt="image-20200728144049526"></p>
<p>​    在程序执行时，关闭逃逸分析和锁消除。<code>-server -XX:-DoEscapeAnalysis -XX:-EliminateLocks</code>。此时可以发现程序执行时间延长了很多。</p>
<h4 id="锁升级过程详解"><a href="#锁升级过程详解" class="headerlink" title="锁升级过程详解"></a>锁升级过程详解</h4><h5 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h5><p><strong>1）加锁</strong></p>
<ol>
<li>当线程初次执行到synchronized代码块时，会通过自旋方式修改MarkWord的锁标志，代表锁对象为偏向锁。</li>
<li>执行完同步代码块后，线程并不会主动释放偏向锁。</li>
<li>当第二次执行同步代码块时，首先会判断MarkWord中的线程ID是否为当前线程。</li>
<li>如果是，则正常往下执行同步代码块。由于之前没有释放锁，这里也就不需要重新加锁。如果自始至终使用锁的线程只有一个，很明显偏向锁几乎没有额外开销，性能极高。</li>
<li>如果线程ID并未指向当前线程，则通过CAS操作替换MarkWork中的线程ID。如果替换成功，则执行同步代码块；如果替换失败，执行步骤6。</li>
<li>如果CAS替换失败，则表示有竞争。当到达全局安全点（safepoint）时获得偏向锁的线程被挂起，偏向锁升级为轻量级锁，然后被阻塞在安全点的线程继续往下执行同步代码。（撤销偏向锁的时候会导致stop the word）</li>
</ol>
<p><strong>2）撤销</strong></p>
<p>​    偏向锁的撤销在上述第六步中有提到。偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程不会主动去释放偏向锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有字节码正在执行），它会首先暂停拥有偏向锁的线程，判断锁对象是否处于被锁定状态，撤销偏向锁后恢复到未锁定（标志位为“01”）或轻量级锁（标志位为“00”）的状态。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200723223236539.png" alt="image-20200723223236539"></p>
<p><strong>3）使用场景</strong></p>
<p>​    始终只有一个线程在执行同步块，在它没有执行完释放锁之前，没有其它线程去执行同步块，在锁无竞争的情况下使用，一旦有了竞争就升级为轻量级锁，升级为轻量级锁的时候需要撤销偏向锁，撤销偏向锁的时候会导致stop the word操作； </p>
<p>​    在有锁竞争时，偏向锁会多做很多额外操作，尤其是撤销偏向所的时候会导致进入安全点，安全点会导致stw，导致性能下降；</p>
<h5 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h5><p>​    轻量级锁是由偏向锁升级来的，偏向锁运行在一个线程进入同步块的情况下，当第二个线程加入锁争用的时候，偏向锁就会升级为轻量级锁； </p>
<p><strong>1）加锁</strong></p>
<ol>
<li>   在进入同步代码块前，JVM会在当前线程的栈帧中创建用于存储锁记录的空间，并将对象头中的MarkWord复制到锁记录中。</li>
<li>然后线程尝试使用自旋将对象头中的MarkWord替换为指向锁记录的指针。</li>
<li>如果成功，当前线程获得轻量级锁，执行同步代码块。</li>
<li>如果失败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁。当自旋次数达到一定次数时，锁就会升级为重量级锁，并阻塞线程。</li>
</ol>
<p><strong>2）解锁</strong></p>
<p>​    解锁时，会使用自旋操作将锁记录替换回到对象头，相当于做一个对比。如果成功，表示没有竞争发生；如果失败，表示当前锁存在竞争，锁已经被升级为重量级锁，会释放锁并唤醒等待的线程。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200723223256861.png" alt="image-20200723223256861"></p>
<p><code>因为自旋操作是依赖于CPU的，为了避免无用的自旋操作(获得锁的线程被阻塞住了)，轻量级锁一旦升级为重量级锁，就不会再恢复到轻量级锁。当锁处于重量级锁时，其他线程试图获取锁时，都会被阻塞住。当持有锁的线程释放锁之后会唤醒其他线程再次开始竞争锁。</code></p>
<h5 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h5><p>​    重量级锁通过对象内部的监视器（monitor）实现，其中monitor的本质是依赖于底层操作系统的Mutex Lock实现，操作系统实现线程之间的切换需要从用户态到内核态的切换，切换成本非常高。 </p>
<p>​    切换成本高的原因在于，当系统检查到是重量级锁之后，会把等待想要获取锁的线程阻塞，被阻塞的线程不会消耗CPU，但是阻塞或者唤醒一个线程，都需要通过操作系统来实现，也就是相当于从用户态转化到内核态，而转化状态是需要消耗时间的 。</p>
<p>​    简单来说就是：竞争失败后，线程阻塞，释放锁后，唤醒阻塞的线程，不使用自旋锁，不会那么消耗CPU，所以重量级锁适合用在同步块执行时间长的情况下。</p>
<h5 id="锁的优缺点对比"><a href="#锁的优缺点对比" class="headerlink" title="锁的优缺点对比"></a>锁的优缺点对比</h5><table>
<thead>
<tr>
<th>锁</th>
<th>优点</th>
<th>缺点</th>
<th>使用场景</th>
</tr>
</thead>
<tbody><tr>
<td>偏向锁</td>
<td>加锁和解锁会存在CAS，没有额外的性能消耗，和执行非同步方法相比，仅存在纳秒级的差距</td>
<td>如果线程间存在锁竞争，会带来额外的锁撤销的消耗</td>
<td>只有一个线程访问同步块或者同步方法的场景</td>
</tr>
<tr>
<td>轻量级锁</td>
<td>竞争的线程不会阻塞，提高程序响应速度</td>
<td>若线程长时间抢不到锁，自旋会消耗CPU性能</td>
<td>追求响应时间。同步代码块执行非常快</td>
</tr>
<tr>
<td>重量级锁</td>
<td>线程竞争不使用自旋，不消耗CPU</td>
<td>线程阻塞，响应时间缓慢,在多线程下,频繁的获取释放锁，会带来巨大的性能消耗</td>
<td>追求吞吐量，同步块或者同步方法执行时间较长的场景</td>
</tr>
</tbody></table>
<h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><p><strong>偏向锁</strong>：在不存在多线程竞争情况下，默认会开启偏向锁。</p>
<p><strong>偏向锁升级轻量级锁</strong>：当一个对象持有偏向锁，一旦第二个线程访问这个对象，如果产生竞争，偏向锁升级为轻量级锁。</p>
<p><strong>轻量级锁升级重量级锁</strong>：一般两个线程对于同一个锁的操作都会错开，或者说稍微等待一下（自旋），另一个线程就会释放锁。但是当自旋超过一定的次数，或者一个线程在持有锁，一个在自旋，又有第三个来访时，轻量级锁膨胀为重量级锁，重量级锁使除了拥有锁的线程以外的线程都阻塞，防止CPU空转。</p>
<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><h3 id="什么是死锁"><a href="#什么是死锁" class="headerlink" title="什么是死锁"></a>什么是死锁</h3><p>​    在多线程环境中，多个线程可以竞争有限数量的资源。当一个线程申请资源时，如果这时没有可用资源，那么这个线程进入等待状态。如果所申请的资源被其他等待线程占有，那么该等待线程有可能再也无法改变状态。这种情况称为<strong>死锁</strong></p>
<p>​    在Java中使用多线程，就会<strong>有可能导致死锁</strong>问题。死锁会让程序一直卡住，不再程序往下执行。我们只能通过<strong>中止并重启</strong>的方式来让程序重新执行。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200723230905234.png" alt="image-20200723230905234"></p>
<h3 id="造成死锁的原因"><a href="#造成死锁的原因" class="headerlink" title="造成死锁的原因"></a>造成死锁的原因</h3><ul>
<li>当前线程<strong>拥有其他线程需要的</strong>资源</li>
<li>当前线程<strong>等待其他线程已拥有</strong>的资源</li>
<li><strong>都不放弃</strong>自己拥有的资源</li>
</ul>
<h3 id="死锁演示"><a href="#死锁演示" class="headerlink" title="死锁演示"></a>死锁演示</h3><p>​    所谓死锁是指多个线程因竞争资源而造成的一种僵局（互相等待），若无外力作用，这些进程都将无法向前推进，两个或两个以上的线程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String value1 = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String value2 = <span class="string">&quot;b&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> DeadLock().deadLock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deadLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;t1 running&quot;</span>);</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (value1)&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;t1 lock value1&quot;</span>);</span><br><span class="line">                        Thread.sleep(<span class="number">3000</span>);<span class="comment">//获取obj1后先等一会儿，让Lock2有足够的时间锁住obj2</span></span><br><span class="line">                        <span class="keyword">synchronized</span>(value2)&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;t1 lock value2&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;t2 running&quot;</span>);</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (value2)&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;t2 lock value2&quot;</span>);</span><br><span class="line">                        Thread.sleep(<span class="number">3000</span>);<span class="comment">//获取obj1后先等一会儿，让Lock2有足够的时间锁住obj2</span></span><br><span class="line">                        <span class="keyword">synchronized</span>(value1)&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;t2 lock value1&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    这段只是用于演示死锁的效果，在实际开发中你可能不会写出这样的代码，但是，在一些复杂场景下，稍有不慎就会出现这样的问题。比方说t1拿到锁后，因为一些异常情况没有释放锁（死循环）。又或者t1释放锁时出现异常，没有释放到。 这些情况下都有可能出现死锁的问题。</p>
<h3 id="死锁排查"><a href="#死锁排查" class="headerlink" title="死锁排查"></a>死锁排查</h3><p>​    在java程序中，死锁的出现有时是你根本无法想到的，如果不了解排查死锁的方法，就会造成线上系统性能的大幅度下降。那对于死锁应该如何排查呢？</p>
<h4 id="通过JDK工具jps-jstack"><a href="#通过JDK工具jps-jstack" class="headerlink" title="通过JDK工具jps+jstack"></a>通过JDK工具jps+jstack</h4><p>​    jps是jdk提供的一个工具，可以查看到正在运行的java进程</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200723233955136.png" alt="image-20200723233955136"></p>
<p>​    jstack也是jdk提供的工具，可以查看java进程中线程堆栈信息。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200723234108779.png" alt="image-20200723234108779"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200723234122006.png" alt="image-20200723234122006"></p>
<p>从输出的堆栈信息中可以发现：Found one Java-level deadLock。表示在这个程序中发现了死锁，后面的详细描述中已经指出了在22行和39行出现死锁。 那就可以根据这些信息快速定位到问题点进行优化处理。</p>
<h4 id="通过JDK工具jconsole"><a href="#通过JDK工具jconsole" class="headerlink" title="通过JDK工具jconsole"></a>通过JDK工具jconsole</h4><p>​    jconsole是JDK提供的一款可视化工具，可以更加方便的排查程序问题，如：内存溢出、死锁。其位于JDK的bin目录中</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200723235323514.png" alt="image-20200723235323514"></p>
<p>在选择好对应程序，点击连接即可。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200723235421257.png" alt="image-20200723235421257"></p>
<p>在该页面那种展示了程序运行的相关详情信息。此时可以选择线程，来查看线程在堆栈中的详细信息。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200723235525526.png" alt="image-20200723235525526"></p>
<p>点击检测死锁，即可看到程序中的死锁信息</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200723235604118.png" alt="image-20200723235604118"></p>
<h4 id="通过JDK工具VisualVM"><a href="#通过JDK工具VisualVM" class="headerlink" title="通过JDK工具VisualVM"></a>通过JDK工具VisualVM</h4><p>​    其也是JDK提供的一款非常强大的程序问题检测工具，可以监控程序性能、查看JVM配置信息、堆栈信息。位于JDK的bin目录中（jvisualvm.exe）。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200723235907826.png" alt="image-20200723235907826"></p>
<p>在左侧列表中，打开你当前要来查看的线程。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200723235953445.png" alt="image-20200723235953445"></p>
<p>进入到线程选项卡，可以看到其已经提示发现死锁，接着点击线程DUMP按钮，即可查看线程堆栈信息。确定死锁位置。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200724000119109.png" alt="image-20200724000119109"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/juc/1/assets/image-20200724000137854.png" alt="image-20200724000137854"></p>
<h4 id="避免死锁的常见方法"><a href="#避免死锁的常见方法" class="headerlink" title="避免死锁的常见方法"></a>避免死锁的常见方法</h4><p>1）避免一个线程同时获取多个锁。</p>
<p>2）避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。</p>
<p>3）尝试使用定时锁，使用lock.tryLock(timeout)来替代使用内部锁机制。</p>
]]></content>
      <categories>
        <category>Java并发编程</category>
      </categories>
      <tags>
        <tag>synchronized</tag>
      </tags>
  </entry>
  <entry>
    <title>Java重要知识积累05--设计模式基础</title>
    <url>/jwangcloud/2708498003/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/first_foots/01.jpeg" width="1000" height="300" align="middle">

<span id="more"></span>


<h2 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h2><p>正常情况下一个类可以创建多个对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">// 默认生成一个公共的空参构造方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 正常情况下一个类可以创建多个对象</span></span><br><span class="line">	Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">	Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">	Person p3 = <span class="keyword">new</span> Person();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是有些时候的某些类, 我们希望只能创建单一的一个对象, 这时候我们需要使用到单例设计模式, 下面我们来介绍一下单例设计模式.</p>
<h3 id="单例设计模式的作用"><a href="#单例设计模式的作用" class="headerlink" title="单例设计模式的作用"></a>单例设计模式的作用</h3><p>单例模式，是一种常用的软件设计模式。<strong>通过单例模式可以保证系统中，应用该模式的这个类只有一个实例</strong>。即一个类只有一个对象实例。</p>
<h3 id="单例设计模式实现步骤"><a href="#单例设计模式实现步骤" class="headerlink" title="单例设计模式实现步骤"></a>单例设计模式实现步骤</h3><ol>
<li>将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。</li>
<li>在该类内部产生一个唯一的实例化对象</li>
<li>定义一个静态方法返回这个唯一对象。</li>
</ol>
<h3 id="饿汉式单例设计模式"><a href="#饿汉式单例设计模式" class="headerlink" title="饿汉式单例设计模式"></a>饿汉式单例设计模式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用饿汉式单例设计模式: 比较着急,不管要不要获取我这个类的对象,先创建了该对象再说</span></span><br><span class="line">    <span class="comment">// 1. 将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 在该类内部产生一个唯一的实例化对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Person p = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 定义一个静态方法返回这个唯一对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = Person.getInstance();</span><br><span class="line">        Person p2 = Person.getInstance();</span><br><span class="line">        Person p3 = Person.getInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(p1);</span><br><span class="line">        System.out.println(p2);</span><br><span class="line">        System.out.println(p3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="懒汉式单例设计模式"><a href="#懒汉式单例设计模式" class="headerlink" title="懒汉式单例设计模式"></a>懒汉式单例设计模式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 懒汉式单例: 不着急,只要当你调用了getInstance静态方法获取对象的时候,就创建,其他时候不创建</span></span><br><span class="line">    <span class="comment">// 1. 将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 在该类内部产生一个唯一的实例化对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Person p ;<span class="comment">// 默认值为null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 定义一个静态方法返回这个唯一对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Person <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建Person类的唯一对象</span></span><br><span class="line">        <span class="comment">// 判断一下,如果p这个成语变量的值为null,就创建,不为null,说明该对象已经创建了,直接返回即可</span></span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>)&#123;</span><br><span class="line">            p = <span class="keyword">new</span> Person();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = Person.getInstance();</span><br><span class="line">        Person p2 = Person.getInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(p1);</span><br><span class="line">        System.out.println(p2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：懒汉单例设计模式在多线程环境下可能会实例化出多个对象，不能保证单例的状态，所以加上关键字：synchronized，保证其同步安全。</p>
</blockquote>
<h2 id="多例设计模式"><a href="#多例设计模式" class="headerlink" title="多例设计模式"></a>多例设计模式</h2><p>多例模式，是一种常用的软件设计模式。通过多例模式可以保证系统中，应用该模式的类有<strong>固定数量</strong>的实例。多例类要自我创建并管理自己的实例，还要向外界提供获取本类实例的方法。</p>
<h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><p>​    1.创建一个类,  将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。</p>
<p>​    2.在该类内部产生固定数量的实例化对象 —-&gt; 集合</p>
<p>​    3.提供一个静态方法来随机获取一个该类的实例化对象</p>
<h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用多例设计模式: 保证程序运行期间该类只有固定数量的对象产生</span></span><br><span class="line">    <span class="comment">// 1.创建一个类,  将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.在该类内部产生固定数量的实例化对象 ----&gt; 集合  只能产生依次固定数量的对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.1 定义一个存放该类对象的集合</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.2 在静态代码块中,创建固定数量的对象,添加到集合中</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 创建固定数量的该类对象</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            Person p = <span class="keyword">new</span> Person();</span><br><span class="line">            list.add(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.提高一个静态方法来随机获取一个该了的实例化对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个Random对象</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">// 随机产生一个list集合的索引</span></span><br><span class="line">        <span class="keyword">int</span> index = r.nextInt(list.size());<span class="comment">// [0,3) 0,1,2</span></span><br><span class="line">        <span class="comment">// 根据索引获取对象</span></span><br><span class="line">        Person p = list.get(index);</span><br><span class="line">        <span class="comment">// 返回对象</span></span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h3 id="不使用枚举存在的问题"><a href="#不使用枚举存在的问题" class="headerlink" title="不使用枚举存在的问题"></a>不使用枚举存在的问题</h3><p>假设我们要定义一个人类，人类中包含姓名和性别。通常会将性别定义成字符串类型，效果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 省略get/set/toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;abc&quot;</span>); <span class="comment">// 因为性别是字符串,所以我们可以传入任意字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不使用枚举存在的问题：可以给性别传入任意的字符串，导致性别是非法的数据，不安全。</p>
<h3 id="枚举的概念"><a href="#枚举的概念" class="headerlink" title="枚举的概念"></a>枚举的概念</h3><p>   枚举是一种引用数据类型,java中的枚举是有固定个数对象的”特殊类”。如果有些类的对象是固定个数的，就可以定义成枚举。比如性别,季节，方向。</p>
<h3 id="定义枚举的格式"><a href="#定义枚举的格式" class="headerlink" title="定义枚举的格式"></a>定义枚举的格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> 枚举名 </span>&#123;</span><br><span class="line">    <span class="comment">// 第一行都是罗列枚举实例,这些枚举实例直接写大写名字即可。</span></span><br><span class="line">    实例,实例,实例,...；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Sex</span> </span>&#123;</span><br><span class="line">   BOY, GIRL; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Season</span> </span>&#123;</span><br><span class="line">    SPRING, SUMMER, AUTUMN, WINTER;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Direction</span></span>&#123; </span><br><span class="line">    UP, RIGHT, DOWN, LEFT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="枚举的使用"><a href="#枚举的使用" class="headerlink" title="枚举的使用"></a>枚举的使用</h3><ol>
<li>定义枚举：BOY表示男，GIRL表示女</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sex</span> </span>&#123;</span><br><span class="line">    BOY, GIRL; <span class="comment">// 男，女</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Perosn中的性别有String类型改为Sex枚举类型</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Sex sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Sex sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略get/set/toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用是只能传入枚举中的固定值</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用枚举格式: 枚举类型.枚举值</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, Sex.BOY);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, Sex.GIRL);</span><br><span class="line">        Person p3 = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;abc&quot;</span>);<span class="comment">// 编译报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li><p>枚举的本质是一个使用了多例设计模式的类，所以枚举中还可以有成员变量，成员方法等。</p>
</li>
<li><p>枚举的本质是一个类，我们刚才定义的Sex枚举最终效果如下：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Sex</span> </span>&#123;</span><br><span class="line">    BOY, GIRL; <span class="comment">// 男，女</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Sex</span> </span>&#123;</span><br><span class="line">    BOY(<span class="number">18</span>), GIRL(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    Sex(<span class="keyword">int</span> age) &#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄是: &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, Sex.BOY);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, Sex.GIRL);</span><br><span class="line"></span><br><span class="line">        Sex.BOY.showAge();</span><br><span class="line">        Sex.GIRL.showAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="工厂设计模式"><a href="#工厂设计模式" class="headerlink" title="工厂设计模式"></a>工厂设计模式</h2><p> 工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式<strong>属于创建型模式</strong>，它提供了一种创建对象的最佳方式。之前我们创建类对象时, 都是使用new 对象的形式创建, 除new 对象方式以外, 工厂模式也可以创建对象.</p>
<p>耦合度: 类与类之间的关系,如果关系比较强,高耦合,  如果关系比较弱,低耦合,而<strong>开发是要尽量低耦合</strong></p>
<p>工厂模式: 定义一个类,专门用来创建这10个类的对象, 并提供获取的方法,那这个时候测试类只需要跟工厂类关联  低耦合</p>
<h3 id="工厂模式的作用"><a href="#工厂模式的作用" class="headerlink" title="工厂模式的作用"></a>工厂模式的作用</h3><p>将前端代码与要创建的对象分开，前端不需要直接创建对象，也就不需要关心创建对象时需要的数据。只需要通过工厂获取对象即可。     </p>
<ul>
<li>解决类与类之间的耦合问题</li>
</ul>
<h3 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><ol>
<li>编写一个Car接口, 提供run方法</li>
<li>编写一个Falali类实现Car接口,重写run方法</li>
<li>编写一个Benchi类实现Car接口,重写run方法</li>
</ol>
<p>提供一个工厂类,可以用来生产汽车对象</p>
<h4 id="实现代码-1"><a href="#实现代码-1" class="headerlink" title="实现代码"></a>实现代码</h4><p>1.编写一个Car接口, 提供run方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.编写一个Falali类实现Car接口,重写run方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Falali</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;法拉利以每小时500公里的速度在奔跑.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.编写一个Benchi类实现Car接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Benchi</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;奔驰汽车以每秒1米的速度在挪动.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.提供一个CarFactory(汽车工厂),用于生产汽车对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id : 车的标识</span></span><br><span class="line"><span class="comment">     *           benchi : 代表需要创建Benchi类对象</span></span><br><span class="line"><span class="comment">     *           falali : 代表需要创建Falali类对象</span></span><br><span class="line"><span class="comment">     *           如果传入的车标识不正确,代表当前工厂生成不了当前车对象,则返回null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">createCar</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;falali&quot;</span>.equals(id))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Falali();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;benchi&quot;</span>.equals(id))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Benchi();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.定义CarFactoryTest测试汽车工厂</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactoryTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CarFactory carFactory = <span class="keyword">new</span> CarFactory();</span><br><span class="line">        Car benchi = carFactory.createCar(<span class="string">&quot;benchi&quot;</span>);</span><br><span class="line">        benchi.run();</span><br><span class="line">        Car falali = carFactory.createCar(<span class="string">&quot;falali&quot;</span>);</span><br><span class="line">        falali.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            对Collection接口进行代理，以前的remove(Object obj)方法是删除集合中第一次出现的元素</span></span><br><span class="line"><span class="comment">            (比如集合中有多个“abc”,调用remove(“abc”)后只会删除一个元素)。</span></span><br><span class="line"><span class="comment">            代理后，要求在调用remove(Object obj)方法后，能够删除集合中所有匹配的元素。【动态代理】</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 创建ArrayList集合</span></span><br><span class="line">        Collection&lt;String&gt; col = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 添加元素</span></span><br><span class="line">        col.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        col.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        col.add(<span class="string">&quot;bac&quot;</span>);</span><br><span class="line">        col.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        col.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        col.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除前:&quot;</span> + col);<span class="comment">// 删除前:[abc, abc, bac, abc, abc, abc]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 动态代理增强remove方法</span></span><br><span class="line">        Collection&lt;String&gt; proxy = (Collection&lt;String&gt;) Proxy.newProxyInstance(col.getClass().getClassLoader(), col.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    invoke方法:</span></span><br><span class="line"><span class="comment">                        参数1proxy:表示生成的代理对象,一般不用</span></span><br><span class="line"><span class="comment">                        参数2method:表示代理对象调用的方法</span></span><br><span class="line"><span class="comment">                        参数3args:表示代理对象调用方法传入的实际参数</span></span><br><span class="line"><span class="comment">                        返回值:表示代理对象调用方法的返回值</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="comment">// 代理对象调用方法就会来到这里,所以增强方法的代码就写在这,就可以了</span></span><br><span class="line">                <span class="comment">// 被代理对象执行一次代理对象调用的方法,来确定返回值  删除一个</span></span><br><span class="line"></span><br><span class="line">                Object res = method.invoke(col, args);<span class="comment">// col.remove(&quot;abc&quot;)  col.toArray();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;remove&quot;</span>)) &#123;</span><br><span class="line">                    <span class="comment">// 删除剩余的</span></span><br><span class="line">                    <span class="comment">// 获取col集合对象的迭代器</span></span><br><span class="line">                    Iterator&lt;String&gt; it = col.iterator();</span><br><span class="line">                    <span class="comment">// 使用迭代器进行遍历</span></span><br><span class="line">                    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                        <span class="comment">// 在循环中,判断遍历出来的元素是否是要删除的元素</span></span><br><span class="line">                        String e = it.next();</span><br><span class="line">                        <span class="keyword">if</span> (e.equals(args[<span class="number">0</span>])) &#123;</span><br><span class="line">                            <span class="comment">// 如果是,就删除</span></span><br><span class="line">                            it.remove();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;toArray&quot;</span>)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;增强toArray方法...&quot;</span>);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 代理对象删除元素</span></span><br><span class="line">        <span class="keyword">boolean</span> res = proxy.remove(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        System.out.println(res);<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;删除后:&quot;</span> + col);<span class="comment">// 删除后:[bac]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Object[] arr = proxy.toArray();</span><br><span class="line">        System.out.println(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        // 集合对象删除元素</span></span><br><span class="line"><span class="comment">        boolean res = col.remove(&quot;abc&quot;);</span></span><br><span class="line"><span class="comment">        System.out.println(res);// true</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;删除后:&quot;+col);// 删除后:[abc, bac, abc, abc, abc]*/</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java知识积累</category>
      </categories>
      <tags>
        <tag>单例模式</tag>
        <tag>多例模式</tag>
        <tag>枚举</tag>
        <tag>工厂模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java重要知识积累04--常用API</title>
    <url>/jwangcloud/3250697702/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/first_foots/01.jpeg" width="1000" height="300" align="middle">

<span id="more"></span>


<h2 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在Java中提供了四种访问权限，使用不同的访问权限修饰符修饰时，被修饰的内容会有不同的访问权限，</p>
<ul>
<li>public：公共的</li>
<li>protected：受保护的</li>
<li>(空的)：默认的</li>
<li>private：私有的</li>
</ul>
<h3 id="不同权限的访问能力"><a href="#不同权限的访问能力" class="headerlink" title="不同权限的访问能力"></a>不同权限的访问能力</h3><table>
<thead>
<tr>
<th></th>
<th>public</th>
<th>protected</th>
<th>（空的）</th>
<th>private</th>
</tr>
</thead>
<tbody><tr>
<td>同一类中</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>同一包中(子类与无关类)</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>不同包的子类</td>
<td>√</td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>不同包中的无关类</td>
<td>√</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>可见，public具有最大权限。private则是最小权限。</p>
<p>编写代码时，如果没有特殊的考虑，建议这样使用权限：</p>
<ul>
<li><p>成员变量使用<code>private</code> ，隐藏细节。</p>
</li>
<li><p>构造方法使用<code> public</code> ，方便创建对象。</p>
</li>
<li><p>成员方法使用<code>public</code> ，方便调用方法。</p>
</li>
</ul>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><h3 id="构造代码块"><a href="#构造代码块" class="headerlink" title="构造代码块"></a>构造代码块</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">格式: &#123;&#125;</span><br><span class="line">位置: 类中,方法外</span><br><span class="line">执行: 每次在调用构造方法的时候,就会执行</span><br><span class="line">使用场景: 统计创建了多少个该类对象</span><br><span class="line"></span><br><span class="line">例如:</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        构造代码块执行了</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            构造代码块:</span></span><br><span class="line"><span class="comment">                格式: &#123;&#125;</span></span><br><span class="line"><span class="comment">                位置: 类中,方法外</span></span><br><span class="line"><span class="comment">                执行: 每次执行构造方法之前都会执行一次</span></span><br><span class="line"><span class="comment">                使用场景: 例如统计对象的个数 也就是每次执行构造方法之前要执行的代码就可以放在构造代码块中</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">格式:<span class="keyword">static</span>&#123;&#125;</span><br><span class="line">位置: 类中,方法外</span><br><span class="line">执行: 当类被加载的时候执行,并只执行一次</span><br><span class="line">使用场景: 例如加载驱动,这种只需要执行一次的代码就可以放在静态代码块中         </span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.itheima.demo3_代码块.demo2_静态代码块;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>：pengzhilin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/10 9:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person 静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person 构造代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person 构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">         静态代码块:</span></span><br><span class="line"><span class="comment">            格式: static&#123;&#125;</span></span><br><span class="line"><span class="comment">            位置: 类中,方法外</span></span><br><span class="line"><span class="comment">            执行: 随着类的加载而执行,并且只执行一次</span></span><br><span class="line"><span class="comment">            使用场景: 例如读取配置文件中的数据,加载驱动,也就是说程序中只需要执行一次的代码就可以放在静态代码块中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            执行优先级:  静态代码块 &gt;  构造代码块  &gt;  构造方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="局部代码块"><a href="#局部代码块" class="headerlink" title="局部代码块"></a>局部代码块</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">格式:&#123;&#125;</span><br><span class="line">位置: 方法中</span><br><span class="line">执行: 调用方法,执行到局部代码块的时候就执行</span><br><span class="line">使用场景: 节省内存空间,没有多大的意义</span><br><span class="line">例如:</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            局部代码块:</span></span><br><span class="line"><span class="comment">                格式: &#123;&#125;</span></span><br><span class="line"><span class="comment">                位置: 方法中</span></span><br><span class="line"><span class="comment">                执行: 调用方法,执行到了局部代码块的时候执行</span></span><br><span class="line"><span class="comment">                使用场景: 节省内存空间,没有太多意义</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;局部代码块&quot;</span>);</span><br><span class="line">        &#125;<span class="comment">// 把局部代码块中的变量占用的空间会释放</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><ul>
<li><p><code>java.lang.Object</code>类是Java语言中的根类，即所有类的父类。</p>
<p>如果一个类没有特别指定父类，    那么默认则继承自Object类。例如：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> /*<span class="keyword">extends</span> <span class="title">Object</span>*/ </span>&#123;</span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">  <span class="comment">// 间接继承Object类: Zi继承Fu,Fu继承Object类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Object类是java中的根类</li>
<li>java中所有的类都是直接或者间接继承Object类,也就意味着,java中所有的类都拥有Object类中的那11个方法</li>
</ul>
<h3 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h3><ul>
<li><code>public String toString()</code>：返回该对象的字符串表示，其实该字符串内容就是：对象的类型名+@+内存地址值。</li>
</ul>
<p>由于toString方法返回的结果是内存地址，而在开发中，经常需要按照对象的属性得到相应的字符串表现形式，因此也需要重写它。</p>
<h4 id="重写toString方法"><a href="#重写toString方法" class="headerlink" title="重写toString方法"></a>重写toString方法</h4><p>如果不希望使用toString方法的默认行为，则可以对它进行覆盖重写。例如自定义的Person类：</p>
<p>在IntelliJ IDEA中，可以点击<code>Code</code>菜单中的<code>Generate...</code>，也可以使用快捷键<code>alt+insert</code>，点击<code>toString()</code>选项。选择需要包含的成员变量并确定。</p>
<blockquote>
<p>小贴士： 在我们直接使用输出语句输出对象名的时候,其实通过该对象调用了其toString()方法。</p>
</blockquote>
<ul>
<li>toString方法默认返回的字符串内容格式: 对象的类型+@+十六进制数的地址值</li>
<li>特点:打印对象的时候,其实就是打印该对象调用toString方法返回的字符串内容</li>
<li>如果打印对象的时候不希望打印的是地址值的形式,那么就可以去重写toString方法,指定返回的字符串内容格式  —-&gt;一般开发中,重写toString方法—alt+insert—&gt;toString() 回车</li>
</ul>
<h3 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h3><ul>
<li><code>public boolean equals(Object obj)</code>：指示其他某个对象是否与此对象“相等”。</li>
</ul>
<h4 id="equals方法的使用"><a href="#equals方法的使用" class="headerlink" title="equals方法的使用"></a>equals方法的使用</h4><ul>
<li>Object类的equals()方法默认实心是==比较,也就是比较2个对象的地址值,对于我们来说没有用</li>
</ul>
<h5 id="对象内容比较"><a href="#对象内容比较" class="headerlink" title="对象内容比较"></a>对象内容比较</h5><p>如果希望进行对象的内容比较，即所有或指定的部分成员变量相同就判定两个对象相同，则可以覆盖重写equals方法。例如：</p>
<h2 id="Objects类"><a href="#Objects类" class="headerlink" title="Objects类"></a>Objects类</h2><p>在<strong>JDK7</strong>添加了一个Objects工具类，它提供了一些方法来操作对象，它由一些静态的实用方法组成，这些方法是null-save（空指针安全的）或null-tolerant（容忍空指针的），用于计算对象的hashCode、返回对象的字符串表示形式、比较两个对象。</p>
<p>在比较两个对象的时候，Object的equals方法容易抛出空指针异常，而Objects类中的equals方法就优化了这个问题。方法如下：</p>
<ul>
<li><code>public static boolean equals(Object a, Object b)</code>:判断两个对象是否相等。</li>
</ul>
<p>我们可以查看一下源码，学习一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object a, Object b)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> (a == b) || (a != <span class="keyword">null</span> &amp;&amp; a.equals(b));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Objects类: 避免空指针异常(容忍空指针)</span></span><br><span class="line"><span class="comment">                public static boolean equals(Object a, Object b):判断两个对象是否相等。</span></span><br><span class="line"><span class="comment">                源码:</span></span><br><span class="line"><span class="comment">                     public static boolean equals(Object a, Object b) &#123;</span></span><br><span class="line"><span class="comment">                        return (a == b) || (a != null &amp;&amp; a.equals(b));</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String name1 = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        String name2 = <span class="keyword">new</span> String(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        String name3 = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(name1);<span class="comment">// 张三</span></span><br><span class="line">        System.out.println(name2);<span class="comment">// 张三</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 比较name1和name2字符串内容是否相同</span></span><br><span class="line">        <span class="comment">//System.out.println(name1.equals(name2));// true</span></span><br><span class="line">        <span class="comment">//System.out.println(name3.equals(name1));// 空指针异常NullPointerException,因为null不能调用方法</span></span><br><span class="line"></span><br><span class="line">        System.out.println(Objects.equals(name1, name2));<span class="comment">// true</span></span><br><span class="line">        System.out.println(Objects.equals(name3, name1));<span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="native方法"><a href="#native方法" class="headerlink" title="native方法"></a>native方法</h2><p>在Object类的源码中定义了 <strong>native</strong> 修饰的方法， native 修饰的方法称为本地方法。这种方法是没有方法体的</p>
<ul>
<li>本地方法的作用： 就是当Java调用非<a href="https://baike.baidu.com/item/Java/85979">Java</a>代码的接口。方法的实现由非Java语言实现，比如C或C++。 </li>
</ul>
<blockquote>
<p>Object类源码(部分)：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Object</span> </span>&#123;</span><br><span class="line">	<span class="comment">//本地方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">registerNatives</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        registerNatives();</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h2><p><code> java.util.Date</code>类 表示一个日期和时间，内部精确到毫秒。</p>
<h3 id="Date类中的构造方法"><a href="#Date类中的构造方法" class="headerlink" title="Date类中的构造方法"></a>Date类中的构造方法</h3><ul>
<li><code>public Date()</code>：从运行程序的此时此刻到时间原点经历的毫秒值,转换成Date对象，分配Date对象并初始化此对象，以表示分配它的时间（精确到毫秒）。</li>
<li><code>public Date(long date)</code>：将指定参数的毫秒值date,转换成Date对象，分配Date对象并初始化此对象，以表示自从标准基准时间（称为“历元（epoch）”，即1970年1月1日00:00:00 GMT）以来的指定毫秒数。</li>
</ul>
<blockquote>
<p>tips: 由于中国处于东八区（GMT+08:00）是比世界协调时间/格林尼治时间（GMT）快8小时的时区，当格林尼治标准时间为0:00时，东八区的标准时间为08:00。</p>
</blockquote>
<p>简单来说：使用无参构造，可以自动设置当前系统时间的毫秒时刻；指定long类型的构造参数，可以自定义毫秒时刻。例如：</p>
<blockquote>
<p>tips:在使用println方法时，会自动调用Date类中的toString方法。Date类对Object类中的toString方法进行了覆盖重写，所以结果为指定格式的字符串。</p>
</blockquote>
<h3 id="Date类中的常用方法"><a href="#Date类中的常用方法" class="headerlink" title="Date类中的常用方法"></a>Date类中的常用方法</h3><p>Date类中的多数方法已经过时，常用的方法有：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTime</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">获取当前日期对象距离标准基准时间的毫秒值。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(<span class="keyword">long</span> time)</span> </span></span><br><span class="line"><span class="function">设置当前日期对象距离标准基准时间的毫秒值.也就意味着改变了当前日期对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">after</span><span class="params">(Date when)</span> </span></span><br><span class="line"><span class="function">测试此日期是否在指定日期之后。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">before</span><span class="params">(Date when)</span> </span></span><br><span class="line"><span class="function">测试此日期是否在指定日期之前。</span></span><br></pre></td></tr></table></figure>


<h2 id="DateFormat类"><a href="#DateFormat类" class="headerlink" title="DateFormat类"></a>DateFormat类</h2><p><code>java.text.DateFormat</code> 是日期/时间格式化子类的抽象类，我们通过这个类可以帮我们完成日期和文本之间的转换,也就是可以在Date对象与String对象之间进行来回转换。</p>
<ul>
<li><strong>格式化</strong>：按照指定的格式，把Date对象转换为String对象。</li>
<li><strong>解析</strong>：按照指定的格式，把String对象转换为Date对象。</li>
</ul>
<p>由于DateFormat为抽象类，不能直接使用，所以需要常用的子类<code>java.text.SimpleDateFormat</code>。这个类需要一个模式（格式）来指定格式化或解析的标准。构造方法为：</p>
<ul>
<li><code>public SimpleDateFormat(String pattern)</code>：用给定的模式和默认语言环境的日期格式符号构造SimpleDateFormat。参数pattern是一个字符串，代表日期时间的自定义格式。</li>
</ul>
<h3 id="格式规则"><a href="#格式规则" class="headerlink" title="格式规则"></a>格式规则</h3><table>
<thead>
<tr>
<th>标识字母（区分大小写）</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>y</td>
<td>年</td>
</tr>
<tr>
<td>M</td>
<td>月</td>
</tr>
<tr>
<td>d</td>
<td>日</td>
</tr>
<tr>
<td>H</td>
<td>时</td>
</tr>
<tr>
<td>m</td>
<td>分</td>
</tr>
<tr>
<td>s</td>
<td>秒</td>
</tr>
</tbody></table>
<blockquote>
<p>备注：更详细的格式规则，可以参考SimpleDateFormat类的API文档。</p>
</blockquote>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>DateFormat类的常用方法有：</p>
<ul>
<li><p><code>public String format(Date date)</code>：将Date对象格式化为字符串。</p>
</li>
<li><p><code>public Date parse(String source)</code>：将字符串解析为Date对象。</p>
</li>
</ul>
<h2 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h2><ul>
<li>java.util.Calendar类表示一个“日历类”，可以进行日期运算。它是一个抽象类，不能创建对象，我们可以使用它的子类：java.util.GregorianCalendar类。</li>
<li>有两种方式可以获取GregorianCalendar对象：<ul>
<li>直接创建GregorianCalendar对象；</li>
<li>通过Calendar的静态方法getInstance()方法获取</li>
</ul>
</li>
</ul>
<h3 id="Calendar类的常用方法"><a href="#Calendar类的常用方法" class="headerlink" title="Calendar类的常用方法"></a>Calendar类的常用方法</h3><ul>
<li><code>public static Calendar getInstance()</code> 获取当前日期的日历对象</li>
<li><code>public int get(int field)</code> 获取某个字段的值。<ul>
<li>参数field:表示获取哪个字段的值,可以使用Calender中定义的常量来表示</li>
<li>Calendar.YEAR : 年<br>Calendar.MONTH ：月<br>Calendar.DAY_OF_MONTH：月中的日期<br>Calendar.HOUR：小时<br>Calendar.MINUTE：分钟<br>Calendar.SECOND：秒<br>Calendar.DAY_OF_WEEK：星期</li>
</ul>
</li>
<li><code>public void set(int field,int value) </code>设置某个字段的值</li>
<li><code>public void add(int field,int amount)</code>为某个字段增加/减少指定的值</li>
<li>额外扩展2个方法:<ul>
<li><code>void setTime(Date date)</code>  使用给定的 Date 设置此 Calendar 的时间。</li>
<li><code>boolean before(Object when) </code>判断此 Calendar 表示的时间是否在指定 Object 表示的时间之前，返回判断结果。<ul>
<li>调用before方法的日历对象是否在参数时间对象之前,<ul>
<li> 如果在之前就返回true     例如: 2017年11月11日   2019年12月18日   true</li>
<li>如果不在之前就返回false  例如: 2019年12月18日    2017年11月11日  false</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li>1.中国人:一个星期的第一天是星期一,外国人:一个星期的第一天是星期天</li>
<li>2.日历对象中的月份是: 0-11</li>
</ul>
<h2 id="BigInteger类"><a href="#BigInteger类" class="headerlink" title="BigInteger类"></a>BigInteger类</h2><p>java.math.BigInteger 类，不可变的任意精度的整数。如果运算中，数据的范围超过了long类型后，可以使用<br>BigInteger类实现，该类的计算整数是不限制长度的。</p>
<h3 id="BigInteger类的构造方法"><a href="#BigInteger类的构造方法" class="headerlink" title="BigInteger类的构造方法"></a>BigInteger类的构造方法</h3><ul>
<li>BigInteger(String value) 将 BigInteger 的十进制字符串表示形式转换为 BigInteger。超过long类型的范围，已经不能称为数字了，因此构造方法中采用字符串的形式来表示超大整数，将超大整数封装成BigInteger对象。</li>
</ul>
<h3 id="BigInteger类成员方法"><a href="#BigInteger类成员方法" class="headerlink" title="BigInteger类成员方法"></a>BigInteger类成员方法</h3><p>BigInteger类提供了对很大的整数进行加add、减subtract、乘multiply、除divide的方法，注意：都是与另一个BigInteger对象进行运算。</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>add(BigInteger value)</td>
<td>返回其值为 (this + val) 的 BigInteger，超大整数加法运算</td>
</tr>
<tr>
<td>subtract(BigInteger value)</td>
<td>返回其值为 (this - val) 的 BigInteger，超大整数减法运算</td>
</tr>
<tr>
<td>multiply(BigInteger value)</td>
<td>返回其值为 (this * val) 的 BigInteger，超大整数乘法运算</td>
</tr>
<tr>
<td>divide(BigInteger value)</td>
<td>返回其值为 (this / val) 的 BigInteger，超大整数除法运算，除不尽取整数部分</td>
</tr>
</tbody></table>
<h2 id="BigDecimal类"><a href="#BigDecimal类" class="headerlink" title="BigDecimal类"></a>BigDecimal类</h2><h3 id="BigDecimal类的概述"><a href="#BigDecimal类的概述" class="headerlink" title="BigDecimal类的概述"></a>BigDecimal类的概述</h3><p>使用基本类型做浮点数运算精度问题；</p>
<p>看程序说结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="number">0.09</span> + <span class="number">0.01</span>);</span><br><span class="line">    System.out.println(<span class="number">1.0</span> - <span class="number">0.32</span>);</span><br><span class="line">    System.out.println(<span class="number">1.015</span> * <span class="number">100</span>);</span><br><span class="line">    System.out.println(<span class="number">1.301</span> / <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>对于浮点运算，不要使用基本类型，而使用”BigDecimal类”类型</strong></p>
</li>
<li><p><strong>java.math.BigDecimal(类):提供了更加精准的数据计算方式。</strong> </p>
</li>
</ul>
<h3 id="BigDecimal类构造方法"><a href="#BigDecimal类构造方法" class="headerlink" title="BigDecimal类构造方法"></a>BigDecimal类构造方法</h3><table>
<thead>
<tr>
<th>构造方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>BigDecimal(double val)</td>
<td>将double类型的数据封装为BigDecimal对象</td>
</tr>
<tr>
<td>BigDecimal(String val)</td>
<td>将 BigDecimal 的字符串表示形式转换为 BigDecimal</td>
</tr>
</tbody></table>
<p>注意：推荐使用第二种方式，第一种存在精度问题；</p>
<h3 id="BigDecimal类常用方法"><a href="#BigDecimal类常用方法" class="headerlink" title="BigDecimal类常用方法"></a>BigDecimal类常用方法</h3><p>BigDecimal类中使用最多的还是提供的进行四则运算的方法，如下：</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>public BigDecimal add(BigDecimal value)</td>
<td>加法运算</td>
</tr>
<tr>
<td>public BigDecimal subtract(BigDecimal value)</td>
<td>减法运算</td>
</tr>
<tr>
<td>public BigDecimal multiply(BigDecimal value)</td>
<td>乘法运算</td>
</tr>
<tr>
<td>public BigDecimal divide(BigDecimal value)</td>
<td>除法运算</td>
</tr>
</tbody></table>
<p>注意：对于divide方法来说，如果除不尽的话，就会出现java.lang.ArithmeticException异常。此时可以使用divide方法的另一个重载方法；</p>
<blockquote>
<p>BigDecimal divide(BigDecimal divisor, int scale, RoundingMode roundingMode): divisor：除数对应的BigDecimal对象；scale:精确的位数；roundingMode取舍模式</p>
</blockquote>
<p>RoundingMode枚举: RoundingMode.HALF_UP 四舍五入 </p>
<h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><p>java.util.Arrays类：该类包含用于操作数组的各种方法（如排序和搜索）</p>
<h3 id="Arrays类常用方法"><a href="#Arrays类常用方法" class="headerlink" title="Arrays类常用方法"></a>Arrays类常用方法</h3><ul>
<li><p>public static void sort(int[] a)：按照数字顺序排列指定的数组</p>
</li>
<li><p>public static String toString(int[] a)：返回指定数组的内容的字符串表示形式</p>
</li>
</ul>
<h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>Java提供了两个类型系统，基本类型与引用类型，使用基本类型在于效率，然而很多情况，会创建对象使用，因为对象可以做更多的功能，如果想要我们的基本类型像对象一样操作，就可以使用基本类型对应的包装类，如下：</p>
<table>
<thead>
<tr>
<th>基本类型</th>
<th>对应的包装类（位于java.lang包中）</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td><strong>Integer</strong></td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>char</td>
<td><strong>Character</strong></td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
</tbody></table>
<h3 id="Integer类"><a href="#Integer类" class="headerlink" title="Integer类"></a>Integer类</h3><p>包装一个对象中的原始类型 int 的值</p>
<h4 id="Integer类构造方法及静态方法"><a href="#Integer类构造方法及静态方法" class="headerlink" title="Integer类构造方法及静态方法"></a>Integer类构造方法及静态方法</h4><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public Integer(int   value)</td>
<td>根据 int 值创建 Integer 对象(过时)</td>
</tr>
<tr>
<td>public Integer(String s)</td>
<td>根据 String 值创建 Integer 对象(过时)</td>
</tr>
<tr>
<td>public static Integer valueOf(int i)</td>
<td>返回表示指定的 int 值的 Integer   实例</td>
</tr>
<tr>
<td>public static Integer valueOf(String s)</td>
<td>返回保存指定String值的 Integer 对象</td>
</tr>
</tbody></table>
<h3 id="装箱与拆箱"><a href="#装箱与拆箱" class="headerlink" title="装箱与拆箱"></a>装箱与拆箱</h3><p>基本类型与对应的包装类对象之间，来回转换的过程称为”装箱“与”拆箱“：</p>
<ul>
<li><strong>装箱</strong>：从基本类型转换为对应的包装类对象。</li>
<li><strong>拆箱</strong>：从包装类对象转换为对应的基本类型。</li>
</ul>
<h4 id="自动装箱与自动拆箱"><a href="#自动装箱与自动拆箱" class="headerlink" title="自动装箱与自动拆箱"></a>自动装箱与自动拆箱</h4><p>由于我们经常要做基本类型与包装类之间的转换，从Java 5（JDK 1.5）开始，基本类型与包装类的装箱、拆箱动作可以自动完成。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 装箱</span></span><br><span class="line">    <span class="comment">// int---&gt;Integer</span></span><br><span class="line">    Integer i1 = <span class="keyword">new</span> Integer(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">// i1对象表示的整数就是10</span></span><br><span class="line">    Integer i2 = Integer.valueOf(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//    i2对象表示的整数就是10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拆箱</span></span><br><span class="line">    <span class="comment">// Integer---&gt;int</span></span><br><span class="line">    <span class="keyword">int</span> num1 = i1.intValue();</span><br><span class="line">    <span class="keyword">int</span> num2 = i2.intValue();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;==========================&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自动装箱</span></span><br><span class="line">    Integer i3 = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自动拆箱</span></span><br><span class="line">    <span class="keyword">int</span> num3 = i3;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="基本类型与字符串之间的转换"><a href="#基本类型与字符串之间的转换" class="headerlink" title="基本类型与字符串之间的转换"></a>基本类型与字符串之间的转换</h2><h3 id="基本类型转换为String"><a href="#基本类型转换为String" class="headerlink" title="基本类型转换为String"></a>基本类型转换为String</h3><ul>
<li>转换方式</li>
<li>方式一：直接在数字后加一个空字符串</li>
<li>方式二：通过String类静态方法valueOf()</li>
<li>示例代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//int --- String</span></span><br><span class="line">        <span class="keyword">int</span> number = <span class="number">100</span>;</span><br><span class="line">        <span class="comment">//方式1</span></span><br><span class="line">        String s1 = number + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        <span class="comment">//方式2</span></span><br><span class="line">        <span class="comment">//public static String valueOf(int i)</span></span><br><span class="line">        String s2 = String.valueOf(number);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="String转换成基本类型"><a href="#String转换成基本类型" class="headerlink" title="String转换成基本类型"></a>String转换成基本类型</h3><p>除了Character类之外，<strong>其他所有包装类都具有parseXxx静态方法可以将字符串参数转换为对应的基本类型</strong>：</p>
<ul>
<li><code>public static byte parseByte(String s)</code>：将字符串参数转换为对应的byte基本类型。</li>
<li><code>public static short parseShort(String s)</code>：将字符串参数转换为对应的short基本类型。</li>
<li><strong><code>public static int parseInt(String s)</code>：将字符串参数转换为对应的int基本类型。</strong></li>
<li><strong><code>public static long parseLong(String s)</code>：将字符串参数转换为对应的long基本类型。</strong></li>
<li><code>public static float parseFloat(String s)</code>：将字符串参数转换为对应的float基本类型。</li>
<li><code>public static double parseDouble(String s)</code>：将字符串参数转换为对应的double基本类型。</li>
<li><code>public static boolean parseBoolean(String s)</code>：将字符串参数转换为对应的boolean基本类型。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         <span class="comment">// 基本类型---&gt;字符串:</span></span><br><span class="line">        String str1 = <span class="number">100</span> + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">// str1字符串的内容:&quot;100&quot;</span></span><br><span class="line">        String str2 = String.valueOf(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">// str2字符串的内容: &quot;100&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字符串---&gt;基本类型:</span></span><br><span class="line">        <span class="keyword">int</span> num1 = Integer.parseInt(str1);</span><br><span class="line">        <span class="keyword">int</span> num2 = Integer.parseInt(str2);</span><br><span class="line">        System.out.println(num1+num2);<span class="comment">// 200</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意:如果字符串参数的内容无法正确转换为对应的基本类型，则会抛出<code>java.lang.NumberFormatException</code>异常。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java知识积累</category>
      </categories>
      <tags>
        <tag>权限修饰符</tag>
        <tag>BigInteger</tag>
        <tag>BigDecimal</tag>
      </tags>
  </entry>
  <entry>
    <title>Java重要知识积累03--String和StringBuilder和ArrayList</title>
    <url>/jwangcloud/3937920951/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/first_foots/01.jpeg" width="1000" height="300" align="middle">

<span id="more"></span>

<h2 id="String类的常用方法"><a href="#String类的常用方法" class="headerlink" title="String类的常用方法"></a>String类的常用方法</h2><p>String 类代表字符串，Java 程序中的所有字符串文字（例如“abc”）都被实现为此类的实例。也就是说，Java 程序中所有的双引号字符串，都是 String 类的对象。String 类在 java.lang 包下，所以使用的时候不需要导包！</p>
<h3 id="String类的构造方法"><a href="#String类的构造方法" class="headerlink" title="String类的构造方法"></a>String类的构造方法</h3><ul>
<li>常用的构造方法</li>
</ul>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public   String()</td>
<td>创建一个空白字符串对象，不含有任何内容</td>
</tr>
<tr>
<td>public   String(char[] chs)</td>
<td>根据字符数组的内容，来创建字符串对象</td>
</tr>
<tr>
<td>public   String(byte[] bys)</td>
<td>根据字节数组的内容，来创建字符串对象</td>
</tr>
<tr>
<td>String s =   “abc”;</td>
<td>直接赋值的方式创建字符串对象，内容就是abc</td>
</tr>
</tbody></table>
<h3 id="使用String类的构造方法"><a href="#使用String类的构造方法" class="headerlink" title="使用String类的构造方法"></a>使用String类的构造方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>：pengzhilin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/9 8:44</span></span><br><span class="line"><span class="comment"> * 构造方法通过new来调用</span></span><br><span class="line"><span class="comment"> * 成员方法:</span></span><br><span class="line"><span class="comment"> *      非静态成员方法:通过对象名来调用</span></span><br><span class="line"><span class="comment"> *      静态成员方法:通过类名来调用</span></span><br><span class="line"><span class="comment"> * 方法:</span></span><br><span class="line"><span class="comment"> *      无返回值:直接调用</span></span><br><span class="line"><span class="comment"> *      有返回值:</span></span><br><span class="line"><span class="comment"> *          直接调用</span></span><br><span class="line"><span class="comment"> *          赋值调用</span></span><br><span class="line"><span class="comment"> *          输出调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public   String() 创建一个空白字符串对象，不含有任何内容</span></span><br><span class="line"><span class="comment">            public   String(char[] chs) 根据字符数组的内容，来创建字符串对象</span></span><br><span class="line"><span class="comment">            public   String(char[] value, int offset, int count) 根据指定字符数组范围的内容，来创建字符串对象</span></span><br><span class="line"><span class="comment">            public   String(byte[] bys) 根据字节数组的内容，来创建字符串对象</span></span><br><span class="line"><span class="comment">            public   String(byte[] bytes, int offset, int length)根据指定字节数组范围的内容，来创建字符串对象</span></span><br><span class="line"><span class="comment">            String s =   “abc”;直接赋值的方式创建字符串对象，内容就是abc</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 创建空白字符串对象</span></span><br><span class="line">        String str1 = <span class="keyword">new</span> String();<span class="comment">// str1字符串内容: &quot;&quot;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=&quot;</span>+str1+<span class="string">&quot;=&quot;</span>);<span class="comment">// ==</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据字符数组的内容，来创建字符串对象</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>&#125;;</span><br><span class="line">        String str2 = <span class="keyword">new</span> String(chs);<span class="comment">// str2字符串内容:&quot;abcd&quot;</span></span><br><span class="line">        System.out.println(str2);<span class="comment">// abcd</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据指定字符数组范围的内容，来创建字符串对象</span></span><br><span class="line">        String str3 = <span class="keyword">new</span> String(chs, <span class="number">0</span>, <span class="number">3</span>);<span class="comment">// str3字符串内容:&quot;abc&quot;</span></span><br><span class="line">        System.out.println(str3);<span class="comment">// abc</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据字节数组的内容，来创建字符串对象</span></span><br><span class="line">        <span class="keyword">byte</span>[] bys = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>,<span class="number">101</span>,<span class="number">102</span>&#125;;</span><br><span class="line">        String str4 = <span class="keyword">new</span> String(bys);<span class="comment">// str4字符串内容:&quot;abcdef&quot;</span></span><br><span class="line">        System.out.println(str4);<span class="comment">// abcdef</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据指定字节数组范围的内容，来创建字符串对象</span></span><br><span class="line">        String str5 = <span class="keyword">new</span> String(bys, <span class="number">2</span>, <span class="number">3</span>);<span class="comment">// str5字符串内容:&quot;cde&quot;</span></span><br><span class="line">        System.out.println(str5);<span class="comment">// cde</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 直接赋值的方式创建字符串对象</span></span><br><span class="line">        String str6 = <span class="string">&quot;abc&quot;</span>;<span class="comment">// str6字符串内容:&quot;abc&quot;</span></span><br><span class="line">        System.out.println(str6);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="创建字符串对象两种方式的区别"><a href="#创建字符串对象两种方式的区别" class="headerlink" title="创建字符串对象两种方式的区别"></a>创建字符串对象两种方式的区别</h3><h4 id="通过构造方法创建"><a href="#通过构造方法创建" class="headerlink" title="通过构造方法创建"></a>通过构造方法创建</h4><ul>
<li>通过 new 创建的字符串对象，每一次 new 都会申请一个内存空间，虽然字符串内容相同，但是地址值不同</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span>[] chs = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">String s1 = <span class="keyword">new</span> String(chs);<span class="comment">// s1字符串的内容: abc</span></span><br><span class="line">String s2 = <span class="keyword">new</span> String(chs);<span class="comment">// s2字符串的内容: abc</span></span><br><span class="line"><span class="comment">// 上面的代码中,JVM首先会先创建一个字符数组,然后每一次new的时候都会有一个新的地址,只不过s1和s2参考的字符串内容是相同的</span></span><br></pre></td></tr></table></figure>

<h4 id="直接赋值方式创建"><a href="#直接赋值方式创建" class="headerlink" title="直接赋值方式创建"></a>直接赋值方式创建</h4><ul>
<li>以“”方式给出的字符串，只要字符序列相同(顺序和大小写)，无论在程序代码中出现几次，JVM 都只会建立一个 String 对象，并在字符串池中维护  </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s3 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">String s4 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="comment">// 上面的代码中,针对第一行代码,JVM会建立一个String对象放在字符串池中,并给s3参考;第二行代码,则让s4直接参考字符串池中String对象,也就是说他们本质上是同一个对象</span></span><br></pre></td></tr></table></figure>

<h4 id="绘制内存图"><a href="#绘制内存图" class="headerlink" title="绘制内存图"></a>绘制内存图</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] chs = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">        String s1 = <span class="keyword">new</span> String(chs);<span class="comment">// s1字符串的内容: abc</span></span><br><span class="line">        String s2 = <span class="keyword">new</span> String(chs);<span class="comment">// s2字符串的内容: abc</span></span><br><span class="line">        System.out.println(s1 == s2);<span class="comment">// 比较s1和s2的地址值 false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 直接赋值方式创建</span></span><br><span class="line">        String str1 = <span class="string">&quot;abc&quot;</span>;<span class="comment">// str1字符串的内容: abc</span></span><br><span class="line">        String str2 = <span class="string">&quot;abc&quot;</span>;<span class="comment">// str2字符串的内容: abc</span></span><br><span class="line">        System.out.println(str1 == str2);<span class="comment">// 比较str1和str2的地址值 true</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/Java/string/img/1582730449429.png" alt="1582730449429"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/Java/string/img/1584169790187.png" alt="1584169790187"></p>
<ul>
<li>通过new创建的字符串对象,每一次都会新开辟空间</li>
<li>通过””方式直接创建的字符串对象,是常量,在常量池中,只有一份</li>
</ul>
<h3 id="String类的特点"><a href="#String类的特点" class="headerlink" title="String类的特点"></a>String类的特点</h3><ul>
<li><p>String类的字符串不可变，它们的值在创建后不能被更改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">s1 += <span class="string">&quot;d&quot;</span>;</span><br><span class="line">System.out.println(s1); <span class="comment">// &quot;abcd&quot; </span></span><br><span class="line"><span class="comment">// 内存中有&quot;abc&quot;，&quot;abcd&quot;,&quot;d&quot;,3个对象，s1从指向&quot;abc&quot;，改变指向，指向了&quot;abcd&quot;。</span></span><br></pre></td></tr></table></figure></li>
<li><p>虽然 String 的值是不可变的，但是它们可以被共享</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">String s2 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="comment">// 内存中只有一个&quot;abc&quot;对象被创建，同时被s1和s2共享。</span></span><br></pre></td></tr></table></figure></li>
<li><p>字符串效果上相当于字符数组( char[] )</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例如： </span><br><span class="line">String str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line">相当于： </span><br><span class="line"><span class="keyword">char</span>[] data = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;     </span><br><span class="line">String str = <span class="keyword">new</span> String(data);</span><br><span class="line"><span class="comment">// String底层是靠字符数组实现的,jdk9底层是字节数组。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] bys = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>&#125;;</span><br><span class="line">String str = <span class="keyword">new</span> String(bys);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="字符串的比较"><a href="#字符串的比较" class="headerlink" title="字符串的比较"></a>字符串的比较</h3><ul>
<li>比较字符串内容是否相等,区分大小写,需要使用String类的equals方法,<strong>千万不要用 == 比较</strong></li>
<li>如果比较字符串内容是否相等,不区分大小写,需要使用String类的equalsIgnoreCase()方法</li>
</ul>
<h4 id="号的比较"><a href="#号的比较" class="headerlink" title="==号的比较"></a>==号的比较</h4><ul>
<li>比较基本数据类型：比较的是具体的值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> num2 = <span class="number">20</span>;</span><br><span class="line">num1 == num2  ===&gt; <span class="number">10</span>==<span class="number">20</span>  结果:<span class="keyword">false</span></span><br></pre></td></tr></table></figure>

<ul>
<li>比较引用数据类型：比较的是对象地址值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">String str2 = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">str1 == str2 ===&gt; </span><br><span class="line">str1存储的对象地址值 == str2存储的对象地址值  </span><br><span class="line">结果: <span class="keyword">false</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo02</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//构造方法的方式得到对象</span></span><br><span class="line">      <span class="keyword">char</span>[] chs = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">      String s1 = <span class="keyword">new</span> String(chs);</span><br><span class="line">      String s2 = <span class="keyword">new</span> String(chs);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//直接赋值的方式得到对象</span></span><br><span class="line">      String s3 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">      String s4 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//比较字符串对象地址是否相同</span></span><br><span class="line">      System.out.println(s1 == s2);<span class="comment">// </span></span><br><span class="line">      System.out.println(s1 == s3);<span class="comment">// </span></span><br><span class="line">      System.out.println(s3 == s4);<span class="comment">// </span></span><br><span class="line">      System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="equals方法的作用"><a href="#equals方法的作用" class="headerlink" title="equals方法的作用"></a>equals方法的作用</h4><ul>
<li><p>字符串是对象,它比较内容是否相同,是通过一个方法来实现的,就是equals()方法</p>
</li>
<li><p>方法介绍</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object s)</span>     </span></span><br><span class="line"><span class="function">比较两个字符串内容是否相同、区分大小写</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code> public boolean equalsIgnoreCase (String anotherString)</code> ：将此字符串与指定对象进行比较，忽略大小写。</li>
</ul>
<h3 id="String类获取功能的方法"><a href="#String类获取功能的方法" class="headerlink" title="String类获取功能的方法"></a>String类获取功能的方法</h3><ul>
<li>public int length () ：返回此字符串的长度。</li>
<li>public String concat (String str) ：将指定的字符串连接到该字符串的末尾。拼接</li>
<li>public char charAt (int index) ：返回指定索引处的 char值。</li>
<li>public int indexOf (String str) ：返回指定子字符串第一次出现在该字符串内的索引。</li>
<li>public int indexOf(String str, int fromIndex)  返回从指定索引位置查找,该子字符串第一次出现在该字符串内的索引。</li>
<li>public int lastIndexOf(String str) 返回指定子字符串最后一次出现在该字符串内的索引。</li>
<li>public int lastIndexOf(String str, int fromIndex) 返回从指定索引位置查找,,该子字符串最后一次出现在该字符串内的索引。</li>
<li>public String substring (int beginIndex) ：返回一个子字符串，从beginIndex开始截取字符串到字符串结尾。</li>
<li>public String substring (int beginIndex, int endIndex) ：返回一个子字符串，从beginIndex到endIndex截取字符串。含beginIndex，不含endIndex。</li>
</ul>
<h2 id="StringBuilder类"><a href="#StringBuilder类" class="headerlink" title="StringBuilder类"></a>StringBuilder类</h2><h3 id="字符串拼接问题"><a href="#字符串拼接问题" class="headerlink" title="字符串拼接问题"></a>字符串拼接问题</h3><p>由于String类的对象内容不可改变，所以每当进行字符串拼接时，总是会在内存中创建一个新的对象。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        s += <span class="string">&quot;World&quot;</span>;<span class="comment">// s = s + &quot;World&quot;;</span></span><br><span class="line">        System.out.println(s);<span class="comment">// HelloWorld</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在API中对String类有这样的描述：字符串是常量，它们的值在创建后不能被更改。</p>
<p>根据这句话分析我们的代码，其实总共产生了三个字符串，即<code>&quot;Hello&quot;</code>、<code>&quot;World&quot;</code>和<code>&quot;HelloWorld&quot;</code>。引用变量s首先指向<code>Hello</code>对象，最终指向拼接出来的新字符串对象，即<code>HelloWord</code> 。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/Java/string/img/String%E6%8B%BC%E6%8E%A5%E9%97%AE%E9%A2%98.bmp"></p>
<p>由此可知，如果对字符串进行拼接操作，每次拼接，都会构建一个新的String对象，<strong>既耗时，又浪费空间</strong>。为了解决这一问题，可以使用<code>java.lang.StringBuilder</code>类。</p>
<h3 id="StringBuilder类概述以及与String类的区别"><a href="#StringBuilder类概述以及与String类的区别" class="headerlink" title="StringBuilder类概述以及与String类的区别"></a>StringBuilder类概述以及与String类的区别</h3><p>StringBuilder 是一个可变的字符串类，我们可以把它看成是一个容器，这里的可变指的是 StringBuilder 对象中的内容是可变的</p>
<h4 id="StringBuilder类和String类的区别"><a href="#StringBuilder类和String类的区别" class="headerlink" title="StringBuilder类和String类的区别"></a>StringBuilder类和String类的区别</h4><ul>
<li><p>String类：内容是不可变的</p>
</li>
<li><p>StringBuilder类：内容是可变的</p>
</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/Java/string/img/06-StringBuilder%E7%9A%84%E5%8E%9F%E7%90%86.png" alt="06-StringBuilder的原理"></p>
<h3 id="StringBuilder类的构造方法"><a href="#StringBuilder类的构造方法" class="headerlink" title="StringBuilder类的构造方法"></a>StringBuilder类的构造方法</h3><ul>
<li>常用的构造方法</li>
</ul>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public StringBuilder()</td>
<td>创建一个空白可变字符串对象，不含有任何内容</td>
</tr>
<tr>
<td>public StringBuilder(String   str)</td>
<td>根据字符串的内容，来创建可变字符串对象</td>
</tr>
</tbody></table>
<ul>
<li>示例代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            StringBuilder类的构造方法:</span></span><br><span class="line"><span class="comment">            public StringBuilder() </span></span><br><span class="line"><span class="comment">            创建一个空白可变字符串对象，不含有任何内容</span></span><br><span class="line"><span class="comment">            public StringBuilder(String str) </span></span><br><span class="line"><span class="comment">            根据字符串的内容，来创建可变字符串对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 创建空白可变字符串对象  &quot;&quot;</span></span><br><span class="line">        StringBuilder sb1 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        System.out.println(<span class="string">&quot;sb1:&quot;</span>+sb1+<span class="string">&quot;=&quot;</span>);<span class="comment">// sb1:=</span></span><br><span class="line">        System.out.println(<span class="string">&quot;sb1的长度:&quot;</span>+sb1.length());<span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把不可变字符串转换为可变字符串</span></span><br><span class="line">        String str = <span class="string">&quot;itheima&quot;</span>;</span><br><span class="line">        <span class="comment">// 不可变的字符串</span></span><br><span class="line">        StringBuilder sb2 = <span class="keyword">new</span> StringBuilder(str);</span><br><span class="line">        <span class="comment">// 可变的字符串,字符串内容是:itheima</span></span><br><span class="line">        System.out.println(<span class="string">&quot;sb2:&quot;</span>+sb2);<span class="comment">// sb2:itheima</span></span><br><span class="line">        System.out.println(<span class="string">&quot;sb2的长度:&quot;</span>+sb2.length());<span class="comment">// 7</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="StringBuilder类拼接和反转方法"><a href="#StringBuilder类拼接和反转方法" class="headerlink" title="StringBuilder类拼接和反转方法"></a>StringBuilder类拼接和反转方法</h3><ul>
<li>添加和反转方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(任意类型)</span> 拼接数据，并返回对象本身</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, 任意类型)</span> 在指定位置插入数据,并返回对象本身</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">reverse</span><span class="params">()</span>  反转字符串,并返回对象本身</span></span><br></pre></td></tr></table></figure>


<h3 id="StringBuilder和String相互转换"><a href="#StringBuilder和String相互转换" class="headerlink" title="StringBuilder和String相互转换"></a>StringBuilder和String相互转换</h3><h4 id="String转换为StringBuilder"><a href="#String转换为StringBuilder" class="headerlink" title="String转换为StringBuilder"></a>String转换为StringBuilder</h4><p><code>public StringBuilder(String s)</code>：通过StringBuilder的构造方法就可以实现把 String 转换为 StringBuilder</p>
<h4 id="StringBuilder转换为String"><a href="#StringBuilder转换为String" class="headerlink" title="StringBuilder转换为String"></a>StringBuilder转换为String</h4><p><code>public String toString()</code>：通过StringBuilder类中的 toString() 就可以实现把 StringBuilder 转换为 String</p>
<h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><ul>
<li>集合: 是一个大小可变的容器,可以用来存储多个引用类型的数据</li>
<li>集合和数组的区别:<ul>
<li>数组大小是固定</li>
<li>集合大小是可变</li>
</ul>
</li>
</ul>
<h3 id="ArrayList类概述"><a href="#ArrayList类概述" class="headerlink" title="ArrayList类概述"></a>ArrayList类概述</h3><ul>
<li>概述: ArrayList类底层是一个大小可变的数组实现</li>
<li>使用ArrayList<E>类的时候,在E出现的位置使用引用数据类型替换,表示该集合可以存储哪种引用类型的元素</E></li>
</ul>
<h3 id="ArrayList类构造方法"><a href="#ArrayList类构造方法" class="headerlink" title="ArrayList类构造方法"></a>ArrayList类构造方法</h3><ul>
<li><code>ArrayList()</code>  构造一个初始容量为 10 的空列表。 </li>
</ul>
<h3 id="ArrayList类添加元素方法"><a href="#ArrayList类添加元素方法" class="headerlink" title="ArrayList类添加元素方法"></a>ArrayList类添加元素方法</h3><ul>
<li><p>ArrayList添加元素的方法</p>
<ul>
<li> public boolean add(E e)：将指定的元素追加到此集合的末尾</li>
<li> public void add(int index,E element)：在此集合中的指定位置插入指定的元素</li>
</ul>
</li>
</ul>
<h3 id="扩展–集合存储基本数据类型以及指定位置添加元素的注意事项"><a href="#扩展–集合存储基本数据类型以及指定位置添加元素的注意事项" class="headerlink" title="扩展–集合存储基本数据类型以及指定位置添加元素的注意事项"></a>扩展–集合存储基本数据类型以及指定位置添加元素的注意事项</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建ArrayList集合对象,限制集合中元素的类型为Integer类型</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 往集合中添加元素</span></span><br><span class="line">        list.add(<span class="number">10</span>);</span><br><span class="line">        list.add(<span class="number">20</span>);</span><br><span class="line">        list.add(<span class="number">30</span>);</span><br><span class="line">        list.add(<span class="number">40</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list:&quot;</span>+list);<span class="comment">// list:[10, 20, 30, 40]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 思考一:指定索引为4的位置添加一个元素50,是否可以?---可以</span></span><br><span class="line">        list.add(<span class="number">4</span>,<span class="number">50</span>);<span class="comment">// 相当于list.add(50);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;list:&quot;</span>+list);<span class="comment">// list:[10, 20, 30, 40, 50]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 思考二:指定索引为6的位置添加一个元素100,是否可以?----不可以</span></span><br><span class="line">        <span class="comment">//list.add(6,100);</span></span><br><span class="line">        <span class="comment">// 运行报异常,IndexOutOfBoundsException索引越界异常</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="ArrayList类常用方法"><a href="#ArrayList类常用方法" class="headerlink" title="ArrayList类常用方法"></a>ArrayList类常用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span>   <span class="title">remove</span><span class="params">(Object o)</span> </span></span><br><span class="line"><span class="function">删除指定的元素，返回删除是否成功</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E   <span class="title">remove</span><span class="params">(<span class="keyword">int</span>   index)</span> </span></span><br><span class="line"><span class="function">删除指定索引处的元素，返回被删除的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E   <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E  element)</span> </span></span><br><span class="line"><span class="function">修改指定索引处的元素，返回被修改的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E   <span class="title">get</span><span class="params">(<span class="keyword">int</span>   index)</span> </span></span><br><span class="line"><span class="function">返回指定索引处的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span>   <span class="title">size</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">返回集合中的元素的个数</span></span><br></pre></td></tr></table></figure>


<ul>
<li>注意事项</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//  public boolean remove(Object o) </span></span><br><span class="line">      删除指定的元素，返回删除是否成功</span><br><span class="line">      <span class="comment">//  public E   remove(int   index) </span></span><br><span class="line">      删除指定索引处的元素，返回被删除的元素</span><br><span class="line">      <span class="comment">// 1.创建ArrayList集合对象,限制集合中元素的类型为Integer</span></span><br><span class="line">      ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2.往集合中存储int类型的整数</span></span><br><span class="line">      list.add(<span class="number">1</span>);</span><br><span class="line">      list.add(<span class="number">2</span>);</span><br><span class="line">      list.add(<span class="number">3</span>);</span><br><span class="line">      list.add(<span class="number">4</span>);</span><br><span class="line">      System.out.println(list);<span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">      list.remove(<span class="number">1</span>);<span class="comment">// 删除索引为1的元素</span></span><br><span class="line">      System.out.println(list);<span class="comment">// [1, 3, 4]</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 删除1这个元素,需要传入1的Integer对象</span></span><br><span class="line">      list.remove(<span class="keyword">new</span> Integer(<span class="number">1</span>));</span><br><span class="line">      System.out.println(list);<span class="comment">// [3, 4]</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Java知识积累</category>
      </categories>
      <tags>
        <tag>Java数据类型</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Java重要知识积累02--从数据结构到Java常用集合</title>
    <url>/jwangcloud/3265662706/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/first_foots/01.jpeg" width="1000" height="300" align="middle">

<h1 id="从数据结构到Java常用集合"><a href="#从数据结构到Java常用集合" class="headerlink" title="从数据结构到Java常用集合"></a>从数据结构到Java常用集合</h1><ul>
<li>常用的数据结构可根据数据访问的特点分为<strong>线性结构</strong>和<strong>非线性结构</strong>。线性结构包括常见的链表、栈、队列等，非线性结构包括<strong>树</strong>、<strong>图</strong>等。数据结构种类繁多，本篇内容将通过图解的方式对常用的数据结构以及在java中的实现进行介绍</li>
</ul>
<span id="more"></span>

<p><strong>数据结构组织图</strong></p>
<p><img data-src="https://img-blog.csdnimg.cn/20200526095818285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlZXdvcmtzaG9w,size_16,color_FFFFFF,t_70" alt="å¨è¿éæå¥å¾çæè¿°"> </p>
<p><strong>Java集合组织图</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/999804-20170918091025493-1734810124.png" alt="img"> </p>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>​    数组可以说是最基本最常见的数据结构。数组一般用来存储相同类型的数据，可通过数组名和下标进行数据的访问和更新。数组中元素的存储是按照先后顺序进行的，同时，在内存中也是按照这个顺序进行连续存放。数组相邻元素之间的内存地址的间隔一般就是数组数据类型的大小。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200811092114529.png" alt="image-20200811092114529"></p>
<h2 id="ArrayList概述"><a href="#ArrayList概述" class="headerlink" title="ArrayList概述"></a>ArrayList概述</h2><ul>
<li><p>ArrayList是可以动态增长和缩减的索引序列，它<strong>是基于数组实现</strong>的List类。</p>
</li>
<li><p>该类封装了一个动态再分配的Object[]数组，每一个类对象都有一个capacity属性，表示它们所封装的Object[]数组的长度，当向ArrayList中添加元素时，该属性值会自动增加。</p>
</li>
<li><p>ArrayList的用法和Vector向类似，但是Vector是一个较老的集合，具有很多缺点，不建议使用。</p>
</li>
<li><p>另外，ArrayList和Vector的区别是：ArrayList是线程不安全的，当多条线程访问同一个ArrayList集合时，程序需要手动保证该集合的同步性，而Vector则是线程安全的。</p>
</li>
<li><p>ArrayList和Collection的关系：</p>
</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/999804-20171018145151287-1709338098.png" alt="img"></p>
<h2 id="ArrayList的数据结构"><a href="#ArrayList的数据结构" class="headerlink" title="ArrayList的数据结构"></a>ArrayList的数据结构</h2><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/999804-20171018145259474-886553593.png" alt="img"></p>
<ul>
<li>底层的数据结构就是数组，数组元素类型为Object类型，即可以存放所有类型数据。我们对ArrayList类的实例的所有的操作底层都是基于数组的。</li>
</ul>
<h2 id="ArrayList源码分析"><a href="#ArrayList源码分析" class="headerlink" title="ArrayList源码分析"></a>ArrayList源码分析</h2><h3 id="继承结构和层次关系"><a href="#继承结构和层次关系" class="headerlink" title="继承结构和层次关系"></a>继承结构和层次关系</h3><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/999804-20171018145449709-655616177.png" alt="img"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/999804-20171018145519068-1615466435.png" alt="img"></p>
<ul>
<li><p>为什么要先继承AbstractList，而让AbstractList先实现List<E>？而不是让ArrayList直接实现List<E>？</E></E></p>
<ul>
<li>这里是有一个思想，接口中全都是抽象的方法，而抽象类中可以有抽象方法，还可以有具体的实现方法，正是利用了这一点，让AbstractList实现接口中一些通用的方法，而具体的类，如ArrayList就继承这个AbstractList类，拿到一些通用的方法，然后自己在实现一些自己特有的方法，这样一来，让代码更简洁，就继承结构最底层的类中通用的方法都抽取出来，先一起实现了，减少重复代码。所以一般看到一个类上面还有一个抽象类，应该就是这个作用。</li>
</ul>
</li>
</ul>
<h3 id="类中的属性"><a href="#类中的属性" class="headerlink" title="类中的属性"></a>类中的属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 版本号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8683452581122892189L</span>;</span><br><span class="line">    <span class="comment">// 缺省容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 空对象数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line">    <span class="comment">// 缺省空对象数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line">    <span class="comment">// 元素数组</span></span><br><span class="line">    <span class="keyword">transient</span> Object[] elementData;</span><br><span class="line">    <span class="comment">// 实际元素大小，默认为0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="comment">// 最大数组容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/999804-20171018150642912-329826692.png" alt="img"></p>
<h4 id="无参构造方法"><a href="#无参构造方法" class="headerlink" title="无参构造方法"></a>无参构造方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*Constructs an empty list with an initial capacity of ten.　　</span></span><br><span class="line"><span class="comment">*这里就说明了默认会给10的大小，所以说一开始arrayList的容量是10.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//ArrayList中储存数据的其实就是一个数组，这个数组就是elementData，</span></span><br><span class="line"><span class="comment">//在123行定义的 private transient Object[] elementData;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;　　</span><br><span class="line">    <span class="keyword">super</span>();        </span><br><span class="line">    <span class="comment">//调用父类中的无参构造方法，父类中的是个空的构造方法</span></span><br><span class="line">    <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    <span class="comment">//EMPTY_ELEMENTDATA：是个空的Object[]， 将elementData初始化，</span></span><br><span class="line">    	 <span class="comment">//elementData也是个Object[]类型。空的Object[]会给默认大小10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="有参构造函数一"><a href="#有参构造函数一" class="headerlink" title="有参构造函数一"></a>有参构造函数一</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(); <span class="comment">//父类中空的构造方法</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)    </span><br><span class="line">    <span class="comment">//判断如果自定义大小的容量小于0，则报下面这个非法数据异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity]; </span><br><span class="line">    <span class="comment">//将自定义的容量大小当成初始化elementData的大小</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>arrayList的构造方法就做一件事情，就是初始化一下储存数据的容器，其实本质上就是一个数组，在其中就叫elementData。</li>
</ul>
<h3 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h3><h4 id="add-方法"><a href="#add-方法" class="headerlink" title="add()方法"></a>add()方法</h4><p><img data-src="https://images2017.cnblogs.com/blog/999804/201710/999804-20171018162356787-2047160796.png" alt="img"></p>
<h5 id="boolean-add-E-；-默认直接在末尾添加元素"><a href="#boolean-add-E-；-默认直接在末尾添加元素" class="headerlink" title="boolean add(E)；//默认直接在末尾添加元素"></a>boolean add(E)；//默认直接在末尾添加元素</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 把元素添加到集合的末尾</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//确定数组容量是否足够，size是数据个数，所以+1. </span></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>); </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在数组中正确的位置上添加元素e，并size++</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>ensureCapacityInternal(xxx);</strong>　确定内部容量的方法　　</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用于确定数组容量</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断初始化elementdata是否为一个空数组</span></span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果是，相当于是空数组没有长度，则获取“默认的容量”和“传入参数”两者之间的最大值</span></span><br><span class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//确认实际的容量，判断是否需要进行扩容操作</span></span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>ensureExplicitCapacity(xxx)；</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断是否需要扩容</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//记录修改次数</span></span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果最小大小 减 数组长度 大于0 -&gt; 进行数组扩容</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//实际进入扩容机制</span></span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>grow(xxx); arrayList核心的方法，能扩展数组大小的真正秘密。</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* ArrayList扩容的核心方法。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// oldCapacity为旧容量，newCapacity为新容量</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将扩充前的elementData大小给oldCapacity</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//将oldCapacity 右移一位，其效果相当于oldCapacity/2</span></span><br><span class="line">    <span class="comment">//newCapacity就是1.5倍的oldCapacity</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//检查新容量是否大于最小需要容量，若小于最小需要容量，那么就把最小需要容量当作数组的新容量</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查新容量是否超出了ArrayList所定义的最大容量，</span></span><br><span class="line"><span class="comment">     * 若超出了，则调用hugeCapacity()来比较minCapacity和 MAX_ARRAY_SIZE，</span></span><br><span class="line"><span class="comment">     * 如果minCapacity大于MAX_ARRAY_SIZE，则新容量则为Interger.MAX_VALUE，否则，新容量大小则为 MAX_ARRAY_SIZE。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//比较minCapacity和 MAX_ARRAY_SIZE</span></span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//新的容量大小已经确定好了，就copy数组，改变容量大小</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>hugeCapacity();</strong>  </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个就是上面用到的方法，很简单，就是用来赋最大值。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">    <span class="comment">//如果minCapacity都大于MAX_ARRAY_SIZE，那么就Integer.MAX_VALUE返回，反之将MAX_ARRAY_SIZE返回</span></span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ？Integer.MAX_VALUE:MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="void-add-int，E-；在特定位置添加元素，也就是插入元素"><a href="#void-add-int，E-；在特定位置添加元素，也就是插入元素" class="headerlink" title="void add(int，E)；在特定位置添加元素，也就是插入元素"></a>void add(int，E)；在特定位置添加元素，也就是插入元素</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 在此列表中的指定位置插入指定的元素。 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*先调用 rangeCheckForAdd 对index进行界限检查；然后调用 ensureCapacityInternal 方法保证capacity足够大；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*再将从index开始之后的所有成员后移一个位置；将element插入index位置；最后size加1。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//arraycopy()方法实现数组自己复制自己</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>rangeCheckForAdd(index)　　</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)   </span><br><span class="line">    <span class="comment">//插入的位置肯定不能大于size 和小于0</span></span><br><span class="line">	 <span class="comment">//如果是，就报这个越界异常</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="remove-方法"><a href="#remove-方法" class="headerlink" title="remove()方法"></a>remove()方法</h4><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/999804-20171018154558896-1270971770.png" alt="img"><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/999804-20171018154624115-1149460965.png" alt="img"></p>
<ul>
<li>其中fastRemove(int)方法是private的，是提供给remove(Object)这个方法用的。</li>
</ul>
<h5 id="remove-int-：删除指定位置上的元素"><a href="#remove-int-：删除指定位置上的元素" class="headerlink" title="remove(int)：删除指定位置上的元素"></a><strong>remove(int)：</strong>删除指定位置上的元素</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);<span class="comment">//检查index的合理性</span></span><br><span class="line"></span><br><span class="line">    modCount++;<span class="comment">//增加修改次数</span></span><br><span class="line">    E oldValue = elementData(index);<span class="comment">//通过索引直接找到该元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;<span class="comment">//计算要移动的位数。</span></span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//用来移动元素的。</span></span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    <span class="comment">//将--size上的位置赋值为null，让gc(垃圾回收机制)更快的回收它。</span></span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">    <span class="comment">//返回删除的元素。</span></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="remove-Object-：这个方法可以看出来，arrayList是可以存放null值得。"><a href="#remove-Object-：这个方法可以看出来，arrayList是可以存放null值得。" class="headerlink" title="remove(Object)：这个方法可以看出来，arrayList是可以存放null值得。"></a><strong>remove(Object)：</strong>这个方法可以看出来，arrayList是可以存放null值得。</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过元素来删除该元素，就依次遍历，如果有这个元素，就将该元素的索引传给fastRemobe(index)，使用这个方法来删除该元素，</span></span><br><span class="line"><span class="comment">//fastRemove(index)方法的内部跟remove(index)的实现几乎一样，这里最主要是知道arrayList可以存储null值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200811141939777.png" alt="image-20200811141939777"></p>
<h5 id="clear-：将elementData中每个元素都赋值为null，等待垃圾回收将这个给回收掉，所以叫clear"><a href="#clear-：将elementData中每个元素都赋值为null，等待垃圾回收将这个给回收掉，所以叫clear" class="headerlink" title="clear()：将elementData中每个元素都赋值为null，等待垃圾回收将这个给回收掉，所以叫clear"></a>clear()：<strong>将elementData中每个元素都赋值为null，等待垃圾回收将这个给回收掉，所以叫clear</strong></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// clear to let GC do its work</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        elementData[i] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​      </p>
<h4 id="set-方法"><a href="#set-方法" class="headerlink" title="set()方法"></a>set()方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 检验索引是否合法</span></span><br><span class="line">    rangeCheck(index);</span><br><span class="line">    <span class="comment">// 旧值</span></span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line">    <span class="comment">// 赋新值</span></span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    <span class="comment">// 返回旧值</span></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>设定指定下标索引的元素值</li>
</ul>
<h4 id="indexOf-方法"><a href="#indexOf-方法" class="headerlink" title="indexOf()方法"></a>indexOf()方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从首开始查找数组里面是否存在指定元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123; <span class="comment">// 查找的元素为空</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) </span><br><span class="line">        <span class="comment">// 遍历数组，找到第一个为空的元素，返回下标</span></span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 查找的元素不为空</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) </span><br><span class="line">        <span class="comment">// 遍历数组，找到第一个和指定元素相等的元素，返回下标</span></span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 没有找到，返回空</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>从头开始查找与指定元素相等的元素，注意，是可以查找null元素的，意味着ArrayList中可以存放null元素的。与此函数对应的lastIndexOf，表示从尾部开始查找。</li>
</ul>
<h4 id="get-方法"><a href="#get-方法" class="headerlink" title="get()方法"></a>get()方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 检验索引是否合法</span></span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> elementData(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>get函数会检查索引值是否合法（只检查是否大于size，而没有检查是否小于0），值得注意的是，在get函数中存在element函数，element函数用于返回具体的元素，具体函数如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">E <span class="title">elementData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>返回的值都经过了向下转型（Object -&gt; E），这些是对我们应用程序屏蔽的小细节。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>arrayList可以存放null。</li>
<li>arrayList本质上就是一个elementData数组。</li>
<li>arrayList区别于数组的地方在于能够自动扩展大小，其中关键的方法就是grow()方法。</li>
<li>arrayList中removeAll(collection c)和clear()的区别就是removeAll可以删除批量指定的元素，而clear是全删除集合中的元素。</li>
<li>arrayList由于本质是数组，所以它在数据的查询方面会很快，而在插入删除这些方面，性能下降很多，有移动很多数据才能达到应有的效果</li>
<li>arrayList实现了RandomAccess，所以在遍历它的时候推荐使用for循环。</li>
</ul>
<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200811143924271.png" alt="image-20200811143924271"></p>
<h2 id="链表类型"><a href="#链表类型" class="headerlink" title="链表类型"></a><strong>链表类型</strong></h2><h3 id="单向链表："><a href="#单向链表：" class="headerlink" title="单向链表："></a>单向链表：</h3><ul>
<li><p>element：用来存放元素</p>
</li>
<li><p>next：用来指向下一个节点元素</p>
</li>
<li><p>通过每个结点的指针指向下一个结点从而链接起来的结构，最后一个节点的next指向null。</p>
</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/999804-20171018163705615-546509635.png" alt="img"></p>
<h3 id="单向循环链表"><a href="#单向循环链表" class="headerlink" title="单向循环链表"></a>单向循环链表</h3><ul>
<li><p>element、next 跟前面一样</p>
</li>
<li><p>在单向链表的最后一个节点的next会指向头节点，而不是指向null，这样存成一个环</p>
</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/999804-20171018163849318-946854643.png" alt="img"></p>
<h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><ul>
<li><p>element：存放元素</p>
</li>
<li><p>pre：用来指向前一个元素</p>
</li>
<li><p>next：指向后一个元素</p>
</li>
<li><p>双向链表是包含两个指针的，pre指向前一个节点，next指向后一个节点，但是第一个节点head的pre指向null，最后一个节点的tail指向null。</p>
</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/999804-20171018164025990-1035906814.png" alt="img"></p>
<h3 id="双向循环链表"><a href="#双向循环链表" class="headerlink" title="双向循环链表"></a>双向循环链表</h3><ul>
<li><p>element、pre、next 跟前面的一样</p>
</li>
<li><p>第一个节点的pre指向最后一个节点，最后一个节点的next指向第一个节点，也形成一个“环”。</p>
</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/999804-20171018164246521-25397602.png" alt="img"></p>
<h3 id="链表和数组对比"><a href="#链表和数组对比" class="headerlink" title="链表和数组对比"></a><strong>链表和数组对比</strong></h3><ul>
<li>单链表和数组的区别进行了对比和总结。</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>数组</th>
<th>链表</th>
</tr>
</thead>
<tbody><tr>
<td>内存地址</td>
<td>连续的内存空间</td>
<td>非连续的内存空间</td>
</tr>
<tr>
<td>数据长度</td>
<td>长度固定，一般不可动态扩容</td>
<td>长度可动态变化</td>
</tr>
<tr>
<td>增删效率</td>
<td>低，需要移动被修改元素之后的所有元素</td>
<td>高，只需要修改指针指向</td>
</tr>
<tr>
<td>查询效率</td>
<td>高，可用过数组名和下标直接访问</td>
<td>低，只能通过遍历节点依次查询</td>
</tr>
<tr>
<td>数据访问方式</td>
<td>随机访问</td>
<td>顺序访问</td>
</tr>
</tbody></table>
<h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/999804-20171018185451506-2136799134.png" alt="img"></p>
<ul>
<li>是一种可以在任何位置进行高效地插入和移除操作的<strong>有序序列</strong>，它是基于<strong>双向链表</strong>实现的。</li>
<li>是一个继承于AbstractSequentialList的双向链表。它也可以被当作堆栈、队列或双端队列进行操作。</li>
<li>实现 List 接口，能对它进行队列操作。</li>
<li>实现 Deque 接口，即能将LinkedList当作双端队列使用。</li>
<li>实现了Cloneable接口，即覆盖了函数clone()，能克隆。</li>
<li>实现java.io.Serializable接口，这意味着LinkedList支持序列化，能通过序列化去传输。</li>
<li>是非同步，线程不安全的。</li>
</ul>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/999804-20171018164511396-1020210450.png" alt="img"></p>
<ul>
<li>如上图所示，LinkedList底层使用的双向链表结构，有一个头结点和一个尾结点，双向链表意味着我们可以从头开始正向遍历，或者是从尾开始逆向遍历，并且可以针对头部和尾部进行相应的操作。</li>
</ul>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul>
<li>异步，也就是非线程安全</li>
<li>双向链表。由于实现了list和Deque接口，能够当作队列来使用。<ul>
<li>链表：查询效率不高，但是插入和删除这种操作性能好。</li>
</ul>
</li>
<li>是顺序存取结构</li>
</ul>
<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="类的属性"><a href="#类的属性" class="headerlink" title="类的属性"></a>类的属性</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实际元素个数，链表长度</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头结点</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尾结点</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</span><br></pre></td></tr></table></figure>

<ul>
<li>LinkedList的属性非常简单，一个头结点、一个尾结点、一个表示链表中实际元素个数的变量。</li>
</ul>
<h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><ul>
<li>空参构造函数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>有参构造函数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将集合c中的各个元素构建成LinkedList链表。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用无参构造函数</span></span><br><span class="line">    <span class="keyword">this</span>();</span><br><span class="line">    <span class="comment">// 添加集合中所有的元素</span></span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="内部类（Node）"><a href="#内部类（Node）" class="headerlink" title="内部类（Node）"></a>内部类（Node）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E item; <span class="comment">// 数据域（当前节点的值）</span></span><br><span class="line">    Node&lt;E&gt; next; <span class="comment">// 后继（指向当前一个节点的后一个节点）</span></span><br><span class="line">    Node&lt;E&gt; prev; <span class="comment">// 前驱（指向当前节点的前一个节点）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数，赋值前驱后继</span></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>内部类Node就是实际的结点，用于存放实际元素的地方。　　　　　</li>
</ul>
<h4 id="add-方法-1"><a href="#add-方法-1" class="headerlink" title="add()方法"></a>add()方法</h4><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/999804-20171018180421865-139109156.png" alt="img"></p>
<ul>
<li>add(E)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 添加到末尾</span></span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>LinkLast()</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Links e as last element.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;    </span><br><span class="line">    <span class="comment">//临时节点l(L的小写)保存last，也就是l指向了最后一个节点</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//将e封装为节点，并且e.prev指向了最后一个节点</span></span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="comment">//newNode成为了最后一个节点，所以last指向了它</span></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)    </span><br><span class="line">    <span class="comment">//判断是不是一开始链表中就什么都没有，如果没有，则newNode就成为了第一个节点，first和last都要指向它</span></span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    <span class="comment">//正常的在最后一个节点后追加，那么原先的最后一个节点的next就要指向现在真正的最后一个节点，原先的最后一个节点就变成了倒数第二个节点</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;<span class="comment">//添加一个节点，size自增</span></span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>举例：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; lists = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">lists.add(<span class="string">&quot;e1&quot;</span>);</span><br><span class="line">lists.add(<span class="string">&quot;e2&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>一开始，first和last都为null，此时链表什么都没有，当第一次调用该方法后，first和last均指向了第一个新加的节点E1：</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200811160819443.png" alt="image-20200811160819443"></p>
<ul>
<li>第二次调用该方法，加入新节点E2。首先，将last引用赋值给l，接着new了一个新节点E2，并且E2的prve指向l，接着将新节点E2赋值为last</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200811161146898.png" alt="image-20200811161146898"></p>
<ul>
<li>接着判断l==null? 所以走的else语句，将l的next引用指向新节点E2</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200811161204522.png" alt="image-20200811161204522"></p>
<ul>
<li>最后，size+1，modCount+1，退出该方法，局部变量l销毁</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200811161244413.png" alt="image-20200811161244413"></p>
<h5 id="remove-Object-o"><a href="#remove-Object-o" class="headerlink" title="remove(Object o)"></a>remove(Object o)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先通过看上面的注释，我们可以知道，如果我们要移除的值在链表中存在多个一样的值</span></span><br><span class="line"><span class="comment">//那么我们会移除index最小的那个，也就是最先找到的那个值，如果不存在这个值，那么什么也不做</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里可以看到，linkedList也能存储null</span></span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//循环遍历链表，直到找到null值，然后使用unlink移除该值。下面的这个else中也一样</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x.item == <span class="keyword">null</span>) &#123;</span><br><span class="line">                unlink(x);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                unlink(x);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>unlink(xxxx)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Unlinks non-null node x.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//不能传一个null值过，注意，看之前要注意之前的next、prev这些都是谁。</span></span><br><span class="line"><span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert x != null;</span></span><br><span class="line"><span class="comment">//拿到节点x的三个属性</span></span><br><span class="line">    <span class="keyword">final</span> E element = x.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里开始往下就进行移除该元素之后的操作，也就是把指向哪个节点搞定。</span></span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//说明移除的节点是头节点，则first头节点应该指向下一个节点</span></span><br><span class="line">        first = next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//不是头节点，prev.next=next：有1、2、3，将1.next指向3</span></span><br><span class="line">        prev.next = next;</span><br><span class="line"><span class="comment">//然后解除x节点的前指向。</span></span><br><span class="line">        x.prev = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//说明移除的节点是尾节点</span></span><br><span class="line">        last = prev;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//不是尾节点，有1、2、3，将3.prev指向1. 然后将2.next=解除指向。</span></span><br><span class="line">        next.prev = prev;</span><br><span class="line">        x.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//x的前后指向都为null了，也把item为null，让gc回收它</span></span><br><span class="line">    x.item = <span class="keyword">null</span>;</span><br><span class="line">    size--;    <span class="comment">//移除一个节点，size自减</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;    <span class="comment">//由于一开始已经保存了x的值到element，所以返回。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="get-index"><a href="#get-index" class="headerlink" title="get(index)"></a>get(index)</h5><ul>
<li>get(index)查询元素的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里没有什么，重点还是在node(index)中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="keyword">return</span> node(index).item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>node(index)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the (non-null) Node at the specified element index.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//这里查询使用的是先从中间分一半查找</span></span><br><span class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line">     <span class="comment">//这个if中就是查询前半部分</span></span><br><span class="line">     <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//前半部分没找到，所以找后半部分</span></span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="indexOf-Object-o"><a href="#indexOf-Object-o" class="headerlink" title="indexOf(Object o)"></a>indexOf(Object o)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个很简单，就是通过实体元素来查找到该元素在链表中的位置。跟remove中的代码类似，只是返回类型不一样。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x.item == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (o.equals(x.item))</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ul>
<li>linkedList本质上是一个<strong>双向链表</strong>，通过一个Node内部类实现的这种链表结构。</li>
<li>能存储null值</li>
<li>跟arrayList相比较，就真正的知道了，LinkedList在删除和增加等操作上性能好，而ArrayList在查询的性能上好</li>
<li>从源码中看，它不存在容量不足的情况</li>
<li>linkedList不光能够向前迭代，还能像后迭代，并且在迭代的过程中，可以修改值、添加值、还能移除值。</li>
<li>linkedList不光能当链表，还能当队列使用，这个就是因为实现了Deque接口。</li>
</ul>
<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li><p>栈是一种比较简单的数据结构，常用一句话描述其特性，<strong>先进后出</strong>。栈本身是一个线性表，但是在这个表中只有一个口子允许数据的进出</p>
</li>
<li><p>栈的常用操作包括<strong>入栈push</strong>和<strong>出栈pop</strong>，对应于数据的压入和压出。还有访问栈顶数据、判断栈是否为空和判断栈的大小等。由于栈后进先出的特性，常可以作为数据操作的临时容器，对数据的顺序进行调控，与其它数据结构相结合可获得许多灵活的处理。</p>
</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/20200526101351156.gif" alt="在这里插入图片描述"></p>
<h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><ul>
<li>Stack是栈。它的特性是：先进后出(FILO, First In Last Out)。java工具包中的Stack是继承于Vector(矢量队列)的，由于Vector是通过数组实现的，这就意味着，Stack也是通过数组实现的，而非链表。当然，我们也可以将LinkedList当作栈来使用。Stack的继承关系</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200620035809710.png" alt="image-20200620035809710"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1224463164541339165L</span>;</span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// push函数：将元素存入栈顶</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">push</span><span class="params">(E item)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将元素存入栈顶。</span></span><br><span class="line">    <span class="comment">// addElement()的实现在Vector.java中</span></span><br><span class="line">    addElement(item);</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pop函数：返回栈顶元素，并将其从栈中删除</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    E   obj;</span><br><span class="line">    <span class="keyword">int</span>  len = size();</span><br><span class="line">    obj = peek();</span><br><span class="line">    <span class="comment">// 删除栈顶元素，removeElementAt()的实现在Vector.java中</span></span><br><span class="line">    removeElementAt(len - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// peek函数：返回栈顶元素，不执行删除操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>  len = size();</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">    <span class="comment">// 返回栈顶元素，elementAt()具体实现在Vector.java中</span></span><br><span class="line">    <span class="keyword">return</span> elementAt(len - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找“元素o”在栈中的位置：由栈底向栈顶方向数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取元素索引，elementAt()具体实现在Vector.java中</span></span><br><span class="line">    <span class="keyword">int</span> i = lastIndexOf(o);</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> size() - i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><ul>
<li>队列是栈的兄弟结构，与栈的后进先出相对应，队列是一种先进先出的数据结构。顾名思义，队列的数据存储是如同排队一般，先存入的数据先被压出。常与栈一同配合，可发挥最大的实力。</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/20200526101424265.gif" alt="在这里插入图片描述"></p>
<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="树的基本概念"><a href="#树的基本概念" class="headerlink" title="树的基本概念"></a>树的基本概念</h2><ul>
<li><p>树是数据结构中非常重要的一个存在。在Java中对树进行了大量的使用，如TreeMap、HashMap等。并且如MySQL、MongoDB也都使用到了树。</p>
</li>
<li><p>树是由N个节点组成的，每个节点中都会进行数据的存储。当N=0时，被称为空树。在任何一颗树中，有且只有一个根节点，在根节点下可以继续进行扩展，形成互不相交的集合。其中每个集合本身又可以理解为是一颗树，他们则被称为子树。</p>
</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200811181101295.png" alt="image-20200811181101295"></p>
<table>
<thead>
<tr>
<th>节点</th>
<th>树中的元素</th>
</tr>
</thead>
<tbody><tr>
<td>节点的度</td>
<td>节点拥有子树的个数，二叉树的度不能大于2</td>
</tr>
<tr>
<td>高度</td>
<td>叶子节点的高度为1，叶子节点的父节点高度为2，依次类推。</td>
</tr>
<tr>
<td>根节点</td>
<td>树的顶部节点。</td>
</tr>
<tr>
<td>子节点</td>
<td>父节点的下层节点。</td>
</tr>
<tr>
<td>叶子节点</td>
<td>没有子节点的节点，也被称为终端节点、度为0的节点。</td>
</tr>
</tbody></table>
<ul>
<li>树的种类也非常的多：二叉树、平衡二叉树、红黑树、B树、B+树、哈夫曼树、B*树等等。</li>
</ul>
<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li>二叉树的特点是树的每个节点最多只能有两个子节点。其中一棵树叫做根的左子树，另一颗叫根的右子树。</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200811190601991.png" alt="image-20200811190601991"></p>
<ul>
<li>如果节点数量超过两个，则不能叫做二叉树，而叫做多路树。</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200811190425678.png" alt="image-20200811190425678"></p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>每个节点最多有两颗子树，所以二叉树中不存在度(该结点孩子的个数)大于2的节点。</li>
<li>左子树和右子树是有顺序的。</li>
<li>即使树中某节点只有一颗子树， 也要区分它是左子树还是右子树。</li>
</ul>
<h3 id="特殊的二叉树"><a href="#特殊的二叉树" class="headerlink" title="特殊的二叉树"></a>特殊的二叉树</h3><h4 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h4><ul>
<li><p>在一棵二叉树中。如果所有分支结点都存在<strong>左子树和右子树</strong>，并且<strong>所有叶子都在同一层上</strong>，这样的二叉树称为满二叉树。其特点如下：</p>
<ul>
<li>假设深度为k，且含有2^k-1个结点的树。</li>
<li>叶子只能出现在最下一层。出现在其它层就不可能达成平衡。</li>
<li>非叶子结点的度一定是2。</li>
<li>在同样深度的二叉树中，满二叉树的结点个数最多，叶子数最多。</li>
</ul>
</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200811192235886.png" alt="image-20200811192235886"></p>
<h4 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h4><ul>
<li><p>完全二叉树是一颗特殊的二叉树。假设一个二叉树的高度为h，如果说它是一颗完全二叉树的话，需要满足以下规则：</p>
<ul>
<li>叶子结点只能出现在最下层和次下层。</li>
<li>最下层的叶子结点集中在树的左部。</li>
<li>倒数第二层若存在叶子结点，一定在右部连续位置。</li>
<li>如果结点度为1，则该结点只有左孩子，即没有右子树。</li>
</ul>
</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200811193944229.png" alt="image-20200811193944229"></p>
<h4 id="斜树"><a href="#斜树" class="headerlink" title="斜树"></a>斜树</h4><ul>
<li>所有的节点都之后左子树的二叉树叫做左斜树，同理还存在右斜树。一旦产生这种情况，相当于树结构退化为了链表，查找一个节点的时间复杂度为O(n)，查询效率严重降低。</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200811230829771.png" alt="image-20200811230829771"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200811230952490.png" alt="image-20200811230952490"></p>
<h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><ul>
<li>二叉树的顺序存储结构就是使用一维数组存储二叉树中的结点，并且结点的存储位置，就是数组的下标索引。</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200811232239278.png" alt="image-20200811232239278"></p>
<ul>
<li>当二叉树为完全二叉树时，结点数刚好填满数组。</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200811232514640.png" alt="image-20200811232514640"></p>
<ul>
<li>当不为完全二叉树时，采用顺序存储又是什么样子呢？</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200811232851079.png" alt="image-20200811232851079"></p>
<ul>
<li>其中，∧表示数组中此位置没有存储结点。此时可以发现，顺序存储结构中已经出现了空间浪费的情况。</li>
</ul>
<p>在极端的右斜树极端情况对应的顺序存储结构。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200811233033805.png" alt="image-20200811233033805"></p>
<ul>
<li>可以看出，对于这种右斜树极端情况，采用顺序存储的方式是十分浪费空间的。因此，顺序存储一般适用于完全二叉树。</li>
</ul>
<h3 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p><strong>二叉树的遍历</strong>是指从二叉树的根结点出发，按照某种次序依次访问二叉树中的所有结点，使得每个结点被访问一次，且仅被访问一次。<br>二叉树的访问次序可以分为四种：</p>
<ul>
<li>前序遍历</li>
<li>中序遍历</li>
<li>后序遍历</li>
<li>层序遍历</li>
</ul>
<h4 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h4><ul>
<li>从根结点出发，当<strong>第一次</strong>到达结点时就输出结点数据，按照<strong>先向左再向右的方向</strong>访问。简单理解就是：父节点-&gt;左子树-&gt;右子树</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200811235242745.png" alt="image-20200811235242745"></p>
<h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><ul>
<li>从根结点出发，当<strong>第二次到达结点</strong>时则输出结点数据，按照先向左再向右的方向访问。简单理解就是：左子树-&gt;父节点-&gt;右子树</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812000716284.png" alt="image-20200812000716284"></p>
<ul>
<li><p>流程如下：</p>
<ul>
<li>从根节点触发，则第一次到达结点A，不输出A，继续向左访问，第一次到达结点B，不输出B，继续到达D、H，都不进行输出。</li>
<li>到达H，H左子树为空，则返回到H，此时是第二次访问H，则输出H。</li>
</ul>
</li>
</ul>
<h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><p>​    从根结点出发，当第三次到达结点时则输出输出，按照先向左后向右的方式访问。简单理解就是：左子树 -&gt; 右子树 -&gt;父节点</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812001640297.png" alt="image-20200812001640297"></p>
<h4 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h4><ul>
<li>按照树的层次自上而下的遍历二叉树。最终结果为：<strong>ABCDEFGHIJ</strong></li>
</ul>
<h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ul>
<li><p>二叉搜索树，也被称为二叉查找树、二叉排序树。对于基础二叉树来说，数据查找、数据变动的效率都是非常低效的。因此才产生了二叉搜索树。</p>
</li>
<li><p>其定义规则如下：</p>
<ul>
<li>若左子树不为空，则左子树上的各个结点的值，均<strong>小于</strong>它的父节点的值。</li>
<li>若右子树不为空，则右子树上的各个结点的值，均<strong>大于</strong>它的父节点的值。</li>
<li>没有值相等的结点。</li>
<li>左右子树也分别为二叉搜索树。</li>
<li>不一定是一颗完全二叉树，因此，二叉搜索树不能用数组来存储。</li>
</ul>
</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812004718795.png" alt="image-20200812004718795"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812004836213.png" alt="image-20200812004836213"></p>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ul>
<li><p>流程：</p>
<ul>
<li>（1）如果树是空的，则查找结束，无匹配。</li>
<li>（2）如果被查找的值和节点的值相等，查找成功。</li>
<li>（3）如果被查找的值小于节点的值，递归查找左子树。</li>
<li>（4）如果被查找的值大于节点的值，递归查找右子树。</li>
</ul>
</li>
</ul>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><ul>
<li>图解：</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812005834866.png" alt="image-20200812005834866"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812005900285.png" alt="image-20200812005900285"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812005932267.png" alt="image-20200812005932267"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812010233539.png" alt="image-20200812010233539"></p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><h4 id="删除节点为叶子节点"><a href="#删除节点为叶子节点" class="headerlink" title="删除节点为叶子节点"></a>删除节点为叶子节点</h4><ul>
<li>该方式最简单，只需找到对应节点，直接删除即可。</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812010738152.png" alt="image-20200812010738152"></p>
<h4 id="删除的节点只有左子树"><a href="#删除的节点只有左子树" class="headerlink" title="删除的节点只有左子树"></a>删除的节点只有左子树</h4><ul>
<li>需要将节点的左子树替代被删除节点的位置。</li>
</ul>
<p> <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812010956148.png" alt="image-20200812010956148"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812011121765.png" alt="image-20200812011121765"></p>
<h4 id="删除的节点只有右子树"><a href="#删除的节点只有右子树" class="headerlink" title="删除的节点只有右子树"></a>删除的节点只有右子树</h4><ul>
<li>需要将右子树替代被删除节点的位置。与左子树思想一致。</li>
</ul>
<h4 id="删除的节点拥有左右子树"><a href="#删除的节点拥有左右子树" class="headerlink" title="删除的节点拥有左右子树"></a>删除的节点拥有左右子树</h4><ul>
<li><p>此情况操作起来最为复杂。操作流程如下：</p>
<ul>
<li>（1）遍历待删除节点的左子树，找到其左子树中的最大节点。</li>
<li>（2）将最大节点代替被删除节点。</li>
<li>（3）删除左子树中的最大节点。</li>
</ul>
</li>
<li><p>同理，也可以选取右子树中的最小值取代它并删除原结点。</p>
</li>
</ul>
<h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><ul>
<li>二叉搜索树一定程度上可以提高搜索效率，但是当有序序列为{1,2,3,4,5,6}时，此时构造的二叉搜索树为右斜树。可以发现二叉树已经退化为了单链表，搜索效率降低为O(n)。</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812121026874.png" alt="image-20200812121026874"></p>
<ul>
<li>在此二叉搜索树中查找元素6需要查找6次。二叉搜索树的查找效率取决于树的高度，因此树的高度越低，其查询效率就会越高。同样的序列，更改存储方式，查找元素6时只需要比较三次，查询效率提升一倍。</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812121258289.png" alt="image-20200812121258289"></p>
<ul>
<li>可以看出当节点数目一定，保持树的左右两端保持平衡，树的查找效率最高。这种<strong>左右子树的高度相差不超过1的树为平衡二叉树</strong>。 </li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812121843134.png" alt="image-20200812121843134"></p>
<h3 id="平衡因子"><a href="#平衡因子" class="headerlink" title="平衡因子"></a>平衡因子</h3><p>​    <strong>定义：</strong>某节点的左子树与右子树的高度(深度)差即为该节点的平衡因子（BF,Balance Factor），平衡二叉树中不存在平衡因子大于1的节点。在一棵平衡二叉树中，节点的平衡因子只能取-1、1或者0。</p>
<h3 id="左旋与右旋"><a href="#左旋与右旋" class="headerlink" title="左旋与右旋"></a>左旋与右旋</h3><h4 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h4><ul>
<li>如图所示的平衡二叉树</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812144003778.png" alt="image-20200812144003778"></p>
<ul>
<li>如在此平衡二叉树插入节点62，树结构变为：</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812144025384.png" alt="image-20200812144025384"></p>
<ul>
<li>左旋流程：</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812144139196.png" alt="image-20200812144139196"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812144238932.png" alt="image-20200812144238932"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812144307930.png" alt="image-20200812144307930"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812144409076.png" alt="image-20200812144409076"></p>
<h4 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h4><ul>
<li><p>右旋操作与左旋类似，操作流程为：</p>
<ul>
<li>（1）原根节点的左孩子代表此节点</li>
<li>（2）原根节点的左孩子的右子树变为节点的左子树。</li>
<li>（3）原根节点作为左孩子节点的右子树。</li>
</ul>
</li>
<li><p>过程如下：</p>
</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812144551327.png" alt="image-20200812144551327"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812144614420.png" alt="image-20200812144614420"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812144931963.png" alt="image-20200812144931963"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812145020443.png" alt="image-20200812145020443"></p>
<h3 id="插入-1"><a href="#插入-1" class="headerlink" title="插入"></a>插入</h3><ul>
<li>假设一颗 AVL 树的某个节点为A，有时会使 A 的左右子树高度差大于 1，从而破坏了原有 AVL 树的平衡性。平衡二叉树插入节点的情况分为以下2种：</li>
</ul>
<h4 id="A的左孩子的左子树插入节点"><a href="#A的左孩子的左子树插入节点" class="headerlink" title="A的左孩子的左子树插入节点"></a><strong>A的左孩子的左子树插入节点</strong></h4><ul>
<li>假设现在有这样的一颗平衡二叉树：</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812145217565.png" alt="image-20200812145217565"></p>
<ul>
<li>节点A的左孩子为B，B的左子树为D，无论在节点D的左子树或者右子树中插入F均会导致节点A失衡。因此需要对节点A进行旋转操作。A的平衡因子为2，值为正，因此对A进行右旋操作。</li>
</ul>
<p>过程如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812145401573.png" alt="image-20200812145401573"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812145421078.png" alt="image-20200812145421078"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812145436943.png" alt="image-20200812145436943"></p>
<h4 id="A的右孩子的右子树插入节点"><a href="#A的右孩子的右子树插入节点" class="headerlink" title="A的右孩子的右子树插入节点"></a><strong>A的右孩子的右子树插入节点</strong></h4><ul>
<li>插入节点F后，节点A的平衡因子为-2，对节点A进行左旋操作。</li>
</ul>
<h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><ul>
<li>平衡二叉树的节点删除与二叉搜索树删除方法一致，但是需要在节点删除后判断树是否仍然保持平衡，若出现失衡情况，需要进行调整。</li>
</ul>
<h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><ul>
<li><p><strong>红黑树</strong>是树的数据结构中最为重要的一种。Java的容器TreeSet、TreeMap均使用红黑树实现。JDK1.8中HashMap中也加入了红黑树。每个节点都带有颜色属性，颜色为<strong>红色</strong>或<strong>黑色</strong>。除了二叉查找树一般要求以外，对于任何有效的红黑树还增加了如下的额外要求:</p>
</li>
<li><p>1）节点要么是黑色要么是红色。</p>
</li>
<li><p>2）根结点一定是黑色的。</p>
</li>
<li><p>3）每个叶子节点都带有两个空(NIL)的黑色节点。</p>
</li>
<li><p>4）每个红色节点的两个子节点一定是黑色，因此不会存在两个连续的红色节点，红色节点的父节点一定是黑色节点。</p>
</li>
<li><p>5）从任一节点到它所能到达的叶子节点的所有路径都包含相同数目的黑色节点。从而达到黑色平衡。（平衡二叉树是一个完美平衡的树，红黑树是非完美平衡树，但是一个完美的黑色平衡二叉查找树）。</p>
</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812152853784.png" alt="image-20200812152853784"></p>
<h3 id="节点名称"><a href="#节点名称" class="headerlink" title="节点名称"></a>节点名称</h3><pre><code>**父节点——P(Parent)**
**祖父节点——G(GrandParent)**
**叔叔节点——U(Uncle)**
**当前节点——C(Current)**
**兄弟节点——B(Brother)**
**左孩子——L(Left)**
**右孩子——R(Right)**
</code></pre>
<h2 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h2><ul>
<li><p>大部分数据库的索引都采用树的结构存储，这是因为树的查询效率相对较高，且保持有序。<br>​- 对于二叉搜索树的时间复杂度是**O(logN)**，在算法以及逻辑上来分析，二叉搜索树的查找速度以及数据比较次数都是较小的。但是我们不得不考虑一个新的问题。数据量是远大于内存大小的，那我们在查找数据时并不能将全部数据同时加载至内存。既然不能全部加载至内存中就只能逐步的去加载磁盘中某个页，简而言之就是逐一的去加载磁盘，加数据分块的加载至内存进行查找与比较。</p>
</li>
<li><p>如图所示，在树中查找10，树的每个节点代表一个磁盘页，相当于每次访问一个新节点代表一次磁盘IO。</p>
</li>
</ul>
<ul>
<li>通过查找过程可以看出，磁盘IO次数与树的高度相关，在最坏情况下，磁盘IO次数等于树的高度。由于磁盘IO过程是相对耗时效率较低的，因此，在设计数据存储结构时需要降低树的高度，即将一棵“瘦高”的树变得“矮胖”。</li>
<li>当数据数目相同，在保持有序前提下，降低树高度，只需将节点中存储的key值增加，即二叉搜索树中每个节点只有一个数据元素，而在<strong>B树中每个节点可以有多个数据元素</strong>。</li>
</ul>
<h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><ul>
<li><p>B树也成B-树。它是一颗多路平衡查找树（所有的叶子节点拥有相同的高度）。当描述一颗B树时需要指定它的<strong>阶数</strong>，阶数表示一个节点最多有多少个孩子节点，一般用字母m表示。当m取2时，就是一颗二叉查找树。</p>
</li>
<li><p>要定义一颗m阶的B树，需要遵循以下五条原则：</p>
<ul>
<li>1）根节点最少可以只有一个元素，且至少要有两个子节点。</li>
<li>2）每个节点最多有m-1个元素。</li>
<li>3）非根节点至少有(m/2)-1个元素。m/2要进行向上取整，如m/2=1.5=2。</li>
<li>4）每个结点中的元素都按照从小到大的顺序排列，每个元素的左子树中的所有元素都小于它，而右子树中的所有元素都大于它。</li>
<li>5）所有叶子节点都位于同一层，相当于根节点到每个叶子节点的长度相同。</li>
</ul>
</li>
</ul>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ul>
<li>B树的查找其实是对二叉搜索树查找的扩展， 与二叉搜索树不同的地方是，B-树中每个节点有不止一棵子树。在B-树中查找某个结点时，需要先判断要查找的结点在哪棵子树上，然后在结点中逐个查找目标结点。B树的查找过程相对简单，与二叉搜索树类似，因此不再赘述。</li>
</ul>
<h4 id="插入-2"><a href="#插入-2" class="headerlink" title="插入"></a>插入</h4><ul>
<li><p>B树的插入操作是指在树种插入一条新记录，即（key, value）的键值对。如果B树中已存在需要插入的键值对，则用需要插入的value替换旧的value。若B树不存在这个key，则一定是在叶子结点中进行插入操作。</p>
</li>
<li><p>插入流程如下：</p>
<ul>
<li>1）根据要插入的key的值，对B树执行查找操作，查找到待插入数据的当前节点位置。</li>
<li>2）判断<strong>当前节点key的个数是否小于等于m-1</strong>，若满足，则直接插入数据。</li>
<li>3）若不满足，以<strong>节点中间的key</strong>为中心分裂成<strong>左右两部分</strong>，然后将这个<strong>中间的key插入到父节点中</strong>，这个key的左子树指向分裂后的左半部分，这个key的右子树指向分裂后的右半部分，然后将当前节点指向父节点，继续执行第三步。</li>
</ul>
</li>
</ul>
<ul>
<li>下面以5阶B树为例，介绍B树的插入操作，在5阶B树中，结点最多有4个key，最少有2个key。</li>
</ul>
<p>1：<strong>插入38，此时为空树，直接插入，并作为根节点。继续插入22、76、40，符合情形（2），直接插入。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812193205493.png" alt="image-20200812193205493"></p>
<p>2：<strong>插入51，符合情形（3），执行分裂。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812193415970.png" alt="image-20200812193415970"></p>
<p>3：<strong>按照相同的步骤继续插入13、21</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812193649389.png" alt="image-20200812193649389"></p>
<p>4：<strong>插入39，符合情形（3），导致节点分裂。选择中值22作为父节点，并将22节点上移，与40节点进行合并。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812193754228.png" alt="image-20200812193754228"></p>
<p>5：<strong>按照同样的插入规则，继续向树中插入key为30、27、33、36、35、34、24、29的数据。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812210944524.png" alt="image-20200812210944524"></p>
<p>6：<strong>继续插入key为26的数据，插入之后需要执行节点分裂。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812211108009.png" alt="image-20200812211108009"></p>
<p>7：<strong>将key为27的数据节点上移至父节点</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812211157198.png" alt="image-20200812211157198"></p>
<p>8：<strong>此时父节点已经有4个key，插入key27的数据后需要执行节点分裂，树的高度加1。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812211227694.png" alt="image-20200812211227694"></p>
<p>9：<strong>再依次插入14，23，28，29，31，32。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812211332462.png" alt="image-20200812211332462"></p>
<h4 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h4><p>1：<strong>首先删除21，符合情形（2）直接删除。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812212450909.png" alt="image-20200812212450909"></p>
<p>2：<strong>继续删除27，符合情形（1），使用后继节点28替代27，并删除28。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812212701762.png" alt="image-20200812212701762"></p>
<p>3：<strong>删除28后，节点中只有29一个key，因此需要按照情形（3）调整。29左兄弟节点有三个节点，将28下移，兄弟节点中26上移。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812213149187.png" alt="image-20200812213149187"></p>
<p>4：<strong>继续删除32。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812213457870.png" alt="image-20200812213457870"></p>
<p>5：<strong>删除32后，需要按照情形（3）进行调整。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812213606267.png" alt="image-20200812213606267"></p>
<p>6：<strong>当前节点的兄弟节点只有2个key，则将父节点下移，将当前节点与一个兄弟节点合并，调整完毕。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812213719819.png" alt="image-20200812213719819"></p>
<p>7：<strong>继续删除39节点。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812213922242.png" alt="image-20200812213922242"></p>
<p>8：<strong>删除39节点后，需要按照情形（4）进行调整。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812213959770.png" alt="image-20200812213959770"></p>
<p>9：<strong>调整过后，当前节点变为只有key40的节点，需要按照情形（3）进行调整。执行节点合并，合并操作包含根节点，导致合并之后，树的高度减1。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812214145220.png" alt="image-20200812214145220"></p>
<h2 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h2><ul>
<li><strong>B+树</strong>是在B树基础进一步优化得到的一种数据结构。B+树相比于B树具有更高的查询效率。</li>
</ul>
<h3 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h3><ul>
<li><p>1）B+树包含2种类型的结点：内部结点（也称索引结点）和叶子结点。</p>
</li>
<li><p>2）根结点本身即可以是内部结点，也可以是叶子结点。根结点的关键字个数最少可以只有1个。</p>
</li>
<li><p>3）B+树与B树最大的不同是内部结点不保存数据，只用于索引，所有数据（或者说记录）都保存在叶子结点中。</p>
</li>
<li><p>4） m阶B+树表示了<strong>内部结点最多有m-1个关键字</strong>，阶数m同时限制了<strong>叶子结点最多存储m-1个数据</strong>。</p>
</li>
<li><p>5）内部结点中的key都按照从小到大的顺序排列，对于内部结点中的一个key，左树中的所有key都小于它，右子树中的key都大于等于它。叶子结点中的数据也按照key的大小排列。</p>
</li>
<li><p>6）<strong>每个叶子结点都存有相邻叶子结点的指针</strong>，叶子结点本身依关键字的大小自小而大顺序链接。</p>
</li>
</ul>
<ul>
<li>如图所示的B+树中，灰色节点代表索引节点，索引节点中只有key，而不含数据data。橙色节点代表叶子节点，叶子节点中既有key值又有数据data。叶子节点采用单链表的方式链接。</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/image-20200812215025439.png" alt="image-20200812215025439"></p>
<h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul>
<li><p>1）索引节点的key值均会出现在叶子节点中。</p>
</li>
<li><p>2）索引节点中的key值在叶子节点中或者为最大值或者为最小值。</p>
</li>
<li><p>3）叶子节点使用单链表的形式链接起来。</p>
</li>
</ul>
<h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><ul>
<li><strong>查找性能</strong><ul>
<li>1）在相同数量的待查数据下，B+树查找过程中需要调用的磁盘IO操作要少于普通B-树。由于B+树所在的磁盘存储背景下，因此B+树的查找性能要好于B-树。 </li>
<li>2）B+树的查找效率更加稳定，因为所有叶子结点都处于同一层中，而且查找所有关键字都必须走完从根结点到叶子结点的全部历程。因此同一颗B+树中，任何关键字的查找比较次数都是一样的。而B树的查找是不稳定的。 
 </li>
</ul>
</li>
<li><strong>插入性能</strong><ul>
<li>B+树的插入过程与B树类似，性能也基本一致。</li>
</ul>
</li>
<li><strong>删除性能</strong><ul>
<li>删除性能与B树也基本一致。</li>
</ul>
</li>
</ul>
<h2 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h2><h3 id="hashmap为什么使用红黑树而不用别的树"><a href="#hashmap为什么使用红黑树而不用别的树" class="headerlink" title="hashmap为什么使用红黑树而不用别的树"></a>hashmap为什么使用红黑树而不用别的树</h3><p>​    红黑树是一个比较特殊的树，跟他能产生对比的是平衡二叉树。但是平衡二叉树的严格平衡牺牲了插入、删除操作的性能，来保证了查询的高效。 而红黑树则采用了折中策略，即不牺牲太大的插入删除性能，同时又保证稳定高效的查找效率。</p>
<h3 id="为什么MongoDB索引使用B树，而MySQL使用B-树"><a href="#为什么MongoDB索引使用B树，而MySQL使用B-树" class="headerlink" title="为什么MongoDB索引使用B树，而MySQL使用B+树"></a>为什么MongoDB索引使用B树，而MySQL使用B+树</h3><p>​    MongoDB是一个非关系型数据库，对于遍历数据的需求很低，更多的是在做一些单一记录查询。而对于MySQL这种关系型数据库来说，进行遍历关联查询的需求就会很高。</p>
<p>​    结合B树与B+树的特点来说，B树的查询效率不固定，最好的情况是O（1），所以在做单一数据查询时，B树的平均性能会更好。但如果要对B树进行遍历的话，由于各个节点间没有指针相连，所以性能会很低。</p>
<p>​    而B+树最大的特点是数据只会出现在叶子节点，因此对于单条数据查询，其一定会进入到叶子节点上，因此平均性能没有B树好。但B+树的叶子节点有指针相连，在进行遍历时，其效率会明显优于B树。</p>
<h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><p>​- 堆通常是一个可以被看做一棵树的数组对象。堆的具体实现一般不通过指针域，而是通过构建一个一维数组与二叉树的父子结点进行对应，因此堆总是一颗完全二叉树。</p>
<ul>
<li><p>对于任意一个父节点的序号n来说（这里n从0算），它的子节点的序号一定是2n+1，2n+2，因此可以直接用数组来表示一个堆。</p>
</li>
<li><p>不仅如此，堆还有一个性质：堆中某个节点的值总是不大于或不小于其父节点的值。将根节点最大的堆叫做最大堆或<strong>大根堆</strong>，根节点最小的堆叫做最小堆或<strong>小根堆</strong>。</p>
</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/database/assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlZXdvcmtzaG9w,size_16,color_FFFFFF,t_7015" alt="在这里插入图片描述"></p>
<ul>
<li>堆常用来实现优先队列，与排序有关，比如堆排序、topK问题等。由于堆的根节点是序列中最大或者最小值，因而可以在建堆以及重建堆的过程中，筛选出数据序列中的极值，从而达到排序或者挑选topK值的目的。</li>
</ul>
<h2 id="案例PriorityBlockingQueue中二叉堆的使用"><a href="#案例PriorityBlockingQueue中二叉堆的使用" class="headerlink" title="案例PriorityBlockingQueue中二叉堆的使用"></a>案例PriorityBlockingQueue中二叉堆的使用</h2><h3 id="put过程"><a href="#put过程" class="headerlink" title="put过程"></a>put过程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        offer(e); <span class="comment">// never need to block</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">        lock.lock();<span class="comment">//加锁</span></span><br><span class="line">        <span class="keyword">int</span> n, cap;</span><br><span class="line">        Object[] array;</span><br><span class="line">     	<span class="comment">//如果元素个数大于等于数组长度，开始扩容</span></span><br><span class="line">        <span class="keyword">while</span> ((n = size) &gt;= (cap = (array = queue).length))</span><br><span class="line">            tryGrow(array, cap);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//一开始构建队列的时候传入comparator</span></span><br><span class="line">            Comparator&lt;? <span class="keyword">super</span> E&gt; cmp = comparator;</span><br><span class="line">            <span class="keyword">if</span> (cmp == <span class="keyword">null</span>)</span><br><span class="line">                <span class="comment">//使用元素自带的comparator进行比较，并排序</span></span><br><span class="line">                siftUpComparable(n, e, array);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="comment">//使用comparator进行比较，并排序</span></span><br><span class="line">                siftUpUsingComparator(n, e, array, cmp);</span><br><span class="line">            size = n + <span class="number">1</span>;<span class="comment">//增加元素个数</span></span><br><span class="line">            notEmpty.signal();<span class="comment">//唤醒take线程</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();<span class="comment">//解锁</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新元素堆内上浮实现</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">siftUpComparable</span><span class="params">(<span class="keyword">int</span> k, T x, Object[] array)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//尝试转化插入对象为Comparable实例</span></span><br><span class="line">        Comparable&lt;? <span class="keyword">super</span> T&gt; key = (Comparable&lt;? <span class="keyword">super</span> T&gt;) x; </span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 新元素x的数组下标为k，对应的父节点的下标为(k-1)/2</span></span><br><span class="line">            <span class="keyword">int</span> parent = (k - <span class="number">1</span>) &gt;&gt;&gt; <span class="number">1</span>; </span><br><span class="line">            Object e = array[parent];</span><br><span class="line">            <span class="comment">//如果子节点已经比父节点还要大，不需要再跟上层节点比较，新元素上浮结束</span></span><br><span class="line">            <span class="keyword">if</span> (key.compareTo((T) e) &gt;= <span class="number">0</span>) </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//如果子节点已经比父节点小，父节点下沉，新元素上浮一次</span></span><br><span class="line">            array[k] = e; </span><br><span class="line">            k = parent; <span class="comment">//新元素上浮后继续与新的父节点比较大小，直到k=0或者新的父节点小于新元素</span></span><br><span class="line">        &#125;</span><br><span class="line">        array[k] = key;<span class="comment">//新元素在堆中插入正确的位置。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">tryGrow</span><span class="params">(Object[] array, <span class="keyword">int</span> oldCap)</span> </span>&#123;</span><br><span class="line">     	<span class="comment">//扩容期间需要解锁，能够让其他线程继续执行</span></span><br><span class="line">        lock.unlock(); <span class="comment">// must release and then re-acquire main lock</span></span><br><span class="line">        Object[] newArray = <span class="keyword">null</span>;<span class="comment">//新数组</span></span><br><span class="line">     	<span class="comment">//cas标识，如果为0，表示当前没有线程对数组扩容</span></span><br><span class="line">        <span class="keyword">if</span> (allocationSpinLock == <span class="number">0</span> &amp;&amp;</span><br><span class="line">            <span class="comment">//cas方式设置值0-&gt;1</span></span><br><span class="line">            UNSAFE.compareAndSwapInt(<span class="keyword">this</span>, allocationSpinLockOffset,</span><br><span class="line">                                     <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//开始扩容</span></span><br><span class="line">                <span class="comment">//计算新的数组长度</span></span><br><span class="line">                <span class="keyword">int</span> newCap = oldCap + ((oldCap &lt; <span class="number">64</span>) ?</span><br><span class="line">                                       (oldCap + <span class="number">2</span>) : <span class="comment">// grow faster if small</span></span><br><span class="line">                                       (oldCap &gt;&gt; <span class="number">1</span>));</span><br><span class="line">                <span class="comment">//计算容量不能超过最大大小</span></span><br><span class="line">                <span class="keyword">if</span> (newCap - MAX_ARRAY_SIZE &gt; <span class="number">0</span>) &#123;    <span class="comment">// possible overflow</span></span><br><span class="line">                    <span class="keyword">int</span> minCap = oldCap + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (minCap &lt; <span class="number">0</span> || minCap &gt; MAX_ARRAY_SIZE)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">                    newCap = MAX_ARRAY_SIZE;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (newCap &gt; oldCap &amp;&amp; queue == array)</span><br><span class="line">                    newArray = <span class="keyword">new</span> Object[newCap];<span class="comment">//创建新的数组用来保存元素</span></span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                allocationSpinLock = <span class="number">0</span>;<span class="comment">//重置标识，表示扩容完毕</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newArray == <span class="keyword">null</span>) <span class="comment">// back off if another thread is allocating</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">        lock.lock();<span class="comment">//重新加锁</span></span><br><span class="line">     	<span class="comment">//如果数组还是原来的数组</span></span><br><span class="line">        <span class="keyword">if</span> (newArray != <span class="keyword">null</span> &amp;&amp; queue == array) &#123;</span><br><span class="line">            queue = newArray;<span class="comment">//设置为新数组</span></span><br><span class="line">            System.arraycopy(array, <span class="number">0</span>, newArray, <span class="number">0</span>, oldCap);<span class="comment">//转移元素到新数组</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="take过程"><a href="#take过程" class="headerlink" title="take过程"></a>take过程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> E <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">        lock.lockInterruptibly();<span class="comment">//加锁</span></span><br><span class="line">        E result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> ( (result = dequeue()) == <span class="keyword">null</span>)</span><br><span class="line">                notEmpty.await();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = size - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;<span class="comment">//队列为空</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Object[] array = queue;</span><br><span class="line">            E result = (E) array[<span class="number">0</span>];<span class="comment">//取出第一个,二叉堆中第一个最小</span></span><br><span class="line">            E x = (E) array[n];</span><br><span class="line">            array[n] = <span class="keyword">null</span>;<span class="comment">//设置为空</span></span><br><span class="line">            Comparator&lt;? <span class="keyword">super</span> E&gt; cmp = comparator;</span><br><span class="line">            <span class="keyword">if</span> (cmp == <span class="keyword">null</span>)</span><br><span class="line">                siftDownComparable(<span class="number">0</span>, x, array, n);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                siftDownUsingComparator(<span class="number">0</span>, x, array, n, cmp);</span><br><span class="line">            size = n;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//空元素堆内下沉实现</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">siftDownComparable</span><span class="params">(<span class="keyword">int</span> k, T x, Object[] array, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Comparable&lt;? <span class="keyword">super</span> T&gt; key = (Comparable&lt;? <span class="keyword">super</span> T&gt;) x;</span><br><span class="line">            <span class="keyword">int</span> half = n &gt;&gt;&gt; <span class="number">1</span>; <span class="comment">// loop while a non-leaf  half最后一个有子节点的父节点下标</span></span><br><span class="line">            <span class="keyword">while</span> (k &lt; half) &#123; </span><br><span class="line">                <span class="keyword">int</span> child = (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>; <span class="comment">// assume left child is least</span></span><br><span class="line">                Object c = array[child];</span><br><span class="line">                <span class="keyword">int</span> right = child + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (right &lt; n</span><br><span class="line">                        &amp;&amp; ((Comparable&lt;? <span class="keyword">super</span> T&gt;) c)</span><br><span class="line">                                .compareTo((T) array[right]) &gt; <span class="number">0</span>)</span><br><span class="line">                    c = array[child = right];  <span class="comment">//比较出左右子节点更小的那个子节点</span></span><br><span class="line">                <span class="keyword">if</span> (key.compareTo((T) c) &lt;= <span class="number">0</span>) <span class="comment">//如果左右子节点的最小值大于数组末尾的值，那么数组末尾的值直接放到父节点，空节点下沉结束</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                array[k] = c; <span class="comment">// 如果子节点最小值小于数据末尾的值，子节点上浮到父空节点</span></span><br><span class="line">                k = child; <span class="comment">//空节点下滑到最小子节点的位置</span></span><br><span class="line">            &#125;</span><br><span class="line">            array[k] = key; <span class="comment">// 最后空节点填充数组最后的值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>Java知识积累</category>
      </categories>
      <tags>
        <tag>Java集合 - 数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Java重要知识积累01--面相对象</title>
    <url>/jwangcloud/1572511114/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/first_foots/02.jpeg" width="1000" height="300" align="middle">

<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><span id="more"></span>

<h3 id="面向对象和面向过程编程思想"><a href="#面向对象和面向过程编程思想" class="headerlink" title="面向对象和面向过程编程思想"></a>面向对象和面向过程编程思想</h3><h4 id="面向过程编程思想"><a href="#面向过程编程思想" class="headerlink" title="面向过程编程思想"></a>面向过程编程思想</h4><ul>
<li><strong>强调的是过程,必须清楚每一个步骤,然后按照步骤一步一步去实现</strong></li>
</ul>
<h4 id="面向对象编程思想"><a href="#面向对象编程思想" class="headerlink" title="面向对象编程思想"></a>面向对象编程思想</h4><ul>
<li><strong>强调的是对象, 通过调用对象的行为来实现功能，而不是自己一步一步的去操作实现。</strong></li>
</ul>
<h4 id="举例对比2种编程思想"><a href="#举例对比2种编程思想" class="headerlink" title="举例对比2种编程思想"></a>举例对比2种编程思想</h4><ul>
<li>java程序:  需求:打印数组中所有的元素,打印格式为: [元素1，元素2，元素3，元素，…，元素n]</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.面向过程来实现该需求</span></span><br><span class="line">    <span class="comment">// 1.1 定义一个数组,并且初始化数组中的元素</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.2 按照指定格式去打印</span></span><br><span class="line">    <span class="comment">// 1.2.1 先打印一个左中括号 &quot;[&quot;</span></span><br><span class="line">    System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.2.2 循环遍历元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 1.2.3 判断遍历的元素是否是最后一个元素</span></span><br><span class="line">        <span class="keyword">int</span> e = arr[i];</span><br><span class="line">        <span class="keyword">if</span> (i == arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 1.2.5 如果是最后一个元素,那么打印格式就是 &quot;元素]&quot;</span></span><br><span class="line">            System.out.print(e+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 1.2.4 如果不是最后一个元素,那么打印格式就是 &quot;元素, &quot;</span></span><br><span class="line">            System.out.print(e+<span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.面向对象来实现该需求</span></span><br><span class="line">    <span class="comment">// Arrays数组的工具类,toString()方法,可以帮助我们按照该指定格式打印数组</span></span><br><span class="line">    System.out.println(Arrays.toString(arr));<span class="comment">// [10, 20, 30, 40, 50]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="类的概述"><a href="#类的概述" class="headerlink" title="类的概述"></a>类的概述</h3><ul>
<li>类是用来描述一类具有<strong>共同属性和行为事物的统称</strong>。所以其实类在客观世界里是不存在的，<strong>是抽象的</strong>，只是用来描述数据信息的。</li>
</ul>
<h4 id="类的组成"><a href="#类的组成" class="headerlink" title="类的组成"></a>类的组成</h4><ul>
<li>属性：就是该事物的状态信息。</li>
<li>行为：就是该事物能够做什么。</li>
</ul>
<h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><ul>
<li>手机类<ul>
<li>属性：品牌、价格—-成员变量</li>
<li>行为：打电话、发短信—-成员方法</li>
</ul>
</li>
</ul>
<h3 id="对象的概述"><a href="#对象的概述" class="headerlink" title="对象的概述"></a>对象的概述</h3><ul>
<li>对象是类的一个实例，<strong>具体存在的，看得见摸得着的</strong>，并且具备该类事物的属性和行为<ul>
<li>对象的属性:对象的属性具有特定的值</li>
<li>对象的行为:对象可以操作的行为</li>
</ul>
</li>
<li>手机类: 描述手机<ul>
<li>对象:袁芳老师的手机</li>
</ul>
</li>
</ul>
<h3 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h3><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/Java/OA/img/1_%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt="1584029135069"></p>
<h3 id="类的定义【应用】"><a href="#类的定义【应用】" class="headerlink" title="类的定义【应用】"></a>类的定义【应用】</h3><p>类的组成是由属性和行为两部分组成</p>
<ul>
<li>属性：该类事物的状态信息,在类中通过成员变量来体现（类中方法外的变量）</li>
<li>行为：该类事物有什么功能,在类中通过成员方法来体现（和前面的方法相比去掉static关键字即可）</li>
</ul>
<h4 id="类的定义格式"><a href="#类的定义格式" class="headerlink" title="类的定义格式"></a>类的定义格式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123;<span class="comment">// 定义一个类</span></span><br><span class="line">	<span class="comment">// 类里面:属性(成员变量),行为(成员方法)</span></span><br><span class="line">    <span class="comment">// 定义成员变量</span></span><br><span class="line">    数据类型 变量名<span class="number">1</span>;</span><br><span class="line">    数据类型 变量名<span class="number">2</span>;</span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 定义成员方法</span></span><br><span class="line">    方法;  去掉<span class="keyword">static</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="对象的创建和使用"><a href="#对象的创建和使用" class="headerlink" title="对象的创建和使用"></a>对象的创建和使用</h3><h4 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h4><ul>
<li>创建对象的格式：<ul>
<li><code>类名 对象名 = new 类名();</code></li>
<li>类其实就是对象的数据类型,类是引用数据类型<ul>
<li>例: Phone p1 = new Phone ();   创建了一个手机对象(Phone类的对象)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h4><ul>
<li>调用成员的格式：<ul>
<li>访问成员变量<ul>
<li>获取成员变量的值: 对象名.成员变量名</li>
<li>给成员变量赋值: 对象名.成员变量名=值;</li>
</ul>
</li>
<li>访问成员方法<ul>
<li>对象名.成员方法名(实参);</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="成员变量是有默认值"><a href="#成员变量是有默认值" class="headerlink" title="成员变量是有默认值"></a>成员变量是有默认值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">整数类型    默认值         <span class="number">0</span></span><br><span class="line">小数类型    默认值         <span class="number">0.0</span></span><br><span class="line">字符类型    默认值         不可见字符 <span class="string">&#x27;\u0000&#x27;</span></span><br><span class="line">布尔类型    默认值         <span class="keyword">false</span></span><br><span class="line">引用数据类型 默认值        <span class="keyword">null</span></span><br></pre></td></tr></table></figure>


<h3 id="对象内存图相关使用的测试类"><a href="#对象内存图相关使用的测试类" class="headerlink" title="对象内存图相关使用的测试类"></a>对象内存图相关使用的测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 属性: 姓名,年龄</span></span><br><span class="line">    String name;<span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">int</span> age;<span class="comment">// 年龄</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 行为:学习功能</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在努力学Java...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="单个对象内存图"><a href="#单个对象内存图" class="headerlink" title="单个对象内存图"></a>单个对象内存图</h3><ul>
<li>只要创建对象,就会在堆区开辟一块空间</li>
<li>只要调用方法,就会在栈区开辟一块空间,用来执行该方法</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/Java/OA/img/2_%E5%8D%95%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="1584072556325"></p>
<h3 id="多个对象内存图"><a href="#多个对象内存图" class="headerlink" title="多个对象内存图"></a>多个对象内存图</h3><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/Java/OA/img/image-20200607105906300.png" alt="image-20200607105906300"></p>
<ul>
<li>多个对象在堆内存中，都有不同的内存划分，成员变量存储在各自的内存区域中，成员方法多个对象共用的一份</li>
<li>凡是new就会重新在堆区开辟一块新空间</li>
<li>对象和对象之间的关系是相互独立的</li>
</ul>
<h3 id="多个变量指向相同对象内存图"><a href="#多个变量指向相同对象内存图" class="headerlink" title="多个变量指向相同对象内存图"></a>多个变量指向相同对象内存图</h3><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/Java/OA/img/4_%E5%A4%9A%E4%B8%AA%E5%8F%98%E9%87%8F%E6%8C%87%E5%90%91%E7%9B%B8%E5%90%8C%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="1584081535183"></p>
<ul>
<li>当多个对象的引用指向同一个内存空间（变量所记录的地址值是一样的）</li>
<li>只要有任何一个对象修改了内存中的数据，随后，无论使用哪一个对象进行数据获取，都是修改后的数据。</li>
</ul>
<h3 id="成员变量和局部变量的区别"><a href="#成员变量和局部变量的区别" class="headerlink" title="成员变量和局部变量的区别"></a>成员变量和局部变量的区别</h3><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/Java/OA/img/1582716017361.png" alt="1582716017361"></p>
<ul>
<li>类中位置不同：成员变量（类中方法外）局部变量（方法内部或方法声明上）</li>
<li>内存中位置不同：成员变量（堆内存）局部变量（栈内存）</li>
<li>生命周期不同：成员变量（随着对象的存在而存在，随着对象的消失而消失）局部变量（随着方法的调用而存在，随着方法的调用完毕而消失）</li>
<li>初始化值不同：成员变量（有默认初始化值）局部变量（没有默认初始化值，必须先定义，赋值才能使用）</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/Java/OA/img/5_%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt="1584082793302"></p>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h3 id="private关键字"><a href="#private关键字" class="headerlink" title="private关键字"></a>private关键字</h3><ul>
<li>概述: private是一个权限修饰符，代表最小权限。</li>
<li>特点:<ul>
<li>可以修饰成员变量和成员方法。</li>
<li>被private修饰后的成员变量和成员方法，只在本类中才能访问。</li>
</ul>
</li>
</ul>
<h4 id="private的使用格式"><a href="#private的使用格式" class="headerlink" title="private的使用格式"></a>private的使用格式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// private关键字修饰成员变量</span></span><br><span class="line"><span class="keyword">private</span> 数据类型 变量名 ；</span><br><span class="line"></span><br><span class="line"><span class="comment">// private关键字修饰成员方法</span></span><br><span class="line"><span class="keyword">private</span> 返回值类型 方法名(参数列表)&#123;</span><br><span class="line">    代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    String name;<span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;<span class="comment">// 年龄</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(age);<span class="comment">// 可以访问</span></span><br><span class="line">        study();<span class="comment">// 可以访问</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在努力学Java&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(stu.name);</span><br><span class="line">        <span class="comment">//System.out.println(stu.age);// 编译报错,没有访问权限</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//stu.study();// 编译报错,没有访问权限</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 间接访问</span></span><br><span class="line">        stu.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="对属性封装的步骤"><a href="#对属性封装的步骤" class="headerlink" title="对属性封装的步骤"></a>对属性封装的步骤</h3><h4 id="为什么要对属性进行封装"><a href="#为什么要对属性进行封装" class="headerlink" title="为什么要对属性进行封装"></a>为什么要对属性进行封装</h4><ul>
<li>通过对象名直接访问成员变量的方式来对属性赋值,会存在数据安全隐患,应该怎么解决呢?</li>
<li>解决方式: 不让外界直接访问成员变量(也就是要对属性进行封装)</li>
</ul>
<h4 id="对属性封装的步骤-1"><a href="#对属性封装的步骤-1" class="headerlink" title="对属性封装的步骤"></a>对属性封装的步骤</h4><ol>
<li>使用private修饰成员变量</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 类的属性 ---&gt; 成员变量</span></span><br><span class="line">   <span class="comment">// 姓名(name)</span></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 年龄(age)</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 类的行为 ---&gt; 成员方法</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;姓名:&quot;</span>+name+<span class="string">&quot;,年龄:&quot;</span>+age);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>对需要访问的成员变量,提供对应的<code>getXxx</code>方法(获取属性的值) 、<code>setXxx</code> 方法(给属性赋值)。</li>
</ol>
<h3 id="set和get方法"><a href="#set和get方法" class="headerlink" title="set和get方法"></a>set和get方法</h3><ul>
<li><p>由于属性使用了private关键字修饰,在其他类中无法直接访问,所以得提供公共的访问方法,我们把这张方法叫做set和get方法</p>
<ul>
<li>get方法:  提供“get变量名()”方法，用于获取成员变量的值，方法用public修饰</li>
</ul>
<ul>
<li>set方法: 提供“set变量名(参数)”方法，用于设置成员变量的值，方法用public修饰</li>
</ul>
</li>
</ul>
<h4 id="set和get方法的书写"><a href="#set和get方法的书写" class="headerlink" title="set和get方法的书写"></a>set和get方法的书写</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    age = a;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">set方法的书写规律:</span><br><span class="line">    <span class="number">1.</span>set方法一定是一个公共的方法(<span class="keyword">public</span>)</span><br><span class="line">        <span class="number">2.</span>set方法一定没有返回值(<span class="keyword">void</span>)</span><br><span class="line">        <span class="number">3.</span>set方法的方法名一定是set+属性名,并且属性名首字母大写</span><br><span class="line">        <span class="number">4.</span>set方法一定有参数</span><br><span class="line">        <span class="number">5.</span>set方法一定会给属性赋值</span><br><span class="line"></span><br><span class="line">get方法的书写规律:</span><br><span class="line">    <span class="number">1.</span>get方法一定是一个公共的方法(<span class="keyword">public</span>)</span><br><span class="line">        <span class="number">2.</span>get方法一定有返回值,并且返回值类型与获取的属性类型一致</span><br><span class="line">        <span class="number">3.</span>get方法的方法名一定是get+属性名,并且属性名首字母大写</span><br><span class="line">        <span class="number">4.</span>get方法一定没有参数</span><br><span class="line">        <span class="number">5.</span>get方法一定会返回属性的值</span><br></pre></td></tr></table></figure>



<h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><ul>
<li><code>setXxx</code> 方法中的形参名字并不符合见名知意的规定，那么如果修改与成员变量名一致，是否就见名知意了呢？</li>
</ul>
<ul>
<li>经过修改和测试，我们发现新的问题，成员变量赋值失败了。也就是说，在修改了<code>setXxx()</code> 的形参变量名后，方法并没有给成员变量赋值！这是由于形参变量名与成员变量名重名，导致成员变量名被隐藏，方法中的变量名，无法访问到成员变量，从而赋值失败。所以，我们只能使用this关键字，来解决这个重名问题。</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/Java/OA/img/5_%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%90%8C%E5%90%8D%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90.png" alt="1584082793302"></p>
<h4 id="this的含义和使用"><a href="#this的含义和使用" class="headerlink" title="this的含义和使用"></a>this的含义和使用</h4><ul>
<li><p>this含义: this代表当前调用方法的引用，哪个对象调用this所在的方法，this就代表哪一个对象</p>
</li>
<li><p>this关键字其主要作用是区分同名的局部变量和成员变量</p>
<ul>
<li>方法的形参如果与成员变量同名，不带this修饰的变量指的是形参，而不是成员变量</li>
<li>方法的形参没有与成员变量同名，不带this修饰的变量指的是成员变量</li>
</ul>
</li>
<li><p>this的使用格式:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.成员变量名</span><br></pre></td></tr></table></figure></li>
<li><p>使用 <code>this</code> 修饰方法中的变量，解决成员变量被隐藏的问题</p>
</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/Java/OA/img/6_this%E5%85%B3%E9%94%AE%E5%AD%97.png"></p>
<blockquote>
<p>小贴士：方法中只有一个变量名时，默认也是使用 <code>this</code> 修饰，可以省略不写。</p>
</blockquote>
<h3 id="this内存原理"><a href="#this内存原理" class="headerlink" title="this内存原理"></a>this内存原理</h3><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/Java/OA/img/image-20200601121319604.png"></p>
<h3 id="封装概述"><a href="#封装概述" class="headerlink" title="封装概述"></a>封装概述</h3><ul>
<li>是面向对象三大特征之一（封装，继承，多态）</li>
<li>是面向对象编程语言对客观世界的模拟，客观世界里成员变量都是<strong>隐藏</strong>在对象内部的，外界是无法直接操作的</li>
</ul>
<h4 id="封装原则"><a href="#封装原则" class="headerlink" title="封装原则"></a>封装原则</h4><ul>
<li>将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问</li>
<li>例如:成员变量使用private修饰，提供对应的getXxx()/setXxx()方法</li>
</ul>
<h4 id="封装好处"><a href="#封装好处" class="headerlink" title="封装好处"></a>封装好处</h4><ul>
<li>通过方法来控制成员变量的操作，提高了代码的安全性</li>
<li>把代码用方法进行封装，提高了代码的复用性</li>
</ul>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><h3 id="构造方法概述"><a href="#构造方法概述" class="headerlink" title="构造方法概述"></a>构造方法概述</h3><ul>
<li>构造方法是一种特殊的方法,主要是完成对象的创建和对象数据的初始化</li>
</ul>
<h4 id="构造方法的定义"><a href="#构造方法的定义" class="headerlink" title="构造方法的定义"></a>构造方法的定义</h4><ul>
<li><p>格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 空参构造方法</span></span><br><span class="line">修饰符 类名()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有参构造方法</span></span><br><span class="line">修饰符 类名(参数列表)&#123;</span><br><span class="line">	<span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>特点:</p>
<ul>
<li>构造方法的写法上，方法名与它所在的类名相同</li>
<li>构造方法没有返回值，所以不需要返回值类型，甚至不需要void</li>
</ul>
</li>
<li><p>示例代码：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法:</span></span><br><span class="line">    <span class="comment">// 空参构造方法</span></span><br><span class="line">    <span class="comment">// 创建对象,属性为默认值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;<span class="comment">//空参构造</span></span><br><span class="line">        System.out.println(<span class="string">&quot;空参构造方法执行了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;<span class="comment">// 满参构造方法</span></span><br><span class="line">        <span class="comment">// 给属性赋值</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span></span>&#123;<span class="comment">// 有参构造方法</span></span><br><span class="line">        <span class="comment">// 给属性赋值</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名:&quot;</span>+name+<span class="string">&quot;,年龄:&quot;</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1Student</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用构造方法</span></span><br><span class="line">        <span class="comment">// 创建Student对象:  类名 对象名 = new 类名();</span></span><br><span class="line">        <span class="comment">// 调用空参构造方法创建对象,对象的属性为默认值</span></span><br><span class="line">        Student stu1 = <span class="keyword">new</span> Student();<span class="comment">// 等于号的右边其实就是调用空参构造方法</span></span><br><span class="line">        stu1.show();<span class="comment">// 姓名:null,年龄:0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用满参构造方法创建对象,对象的属性会被赋值</span></span><br><span class="line">        Student stu2 = <span class="keyword">new</span> Student(<span class="string">&quot;冰冰&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        stu2.show();<span class="comment">// 姓名:冰冰,年龄:18</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用有参构造方法创建对象,对象的部分属性会被赋值</span></span><br><span class="line">        Student stu3 = <span class="keyword">new</span> Student(<span class="string">&quot;小泽老师&quot;</span>);</span><br><span class="line">        stu3.show();<span class="comment">// // 姓名:小泽老师,年龄:0</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="构造方法的注意事项"><a href="#构造方法的注意事项" class="headerlink" title="构造方法的注意事项"></a>构造方法的注意事项</h3><ul>
<li><p>构造方法的创建</p>
<ul>
<li>如果没有定义构造方法，系统将给出一个默认的无参数构造方法</li>
<li>如果定义了构造方法，系统将不再提供默认的构造方法</li>
</ul>
</li>
<li><p>构造方法可以重载，既可以定义参数，也可以不定义参数。</p>
</li>
<li><p>示例代码</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        s1.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Student(String name)</span></span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        s2.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Student(int age)</span></span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="number">30</span>);</span><br><span class="line">        s3.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Student(String name,int age)</span></span><br><span class="line">        Student s4 = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>,<span class="number">30</span>);</span><br><span class="line">        s4.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="标准类制作"><a href="#标准类制作" class="headerlink" title="标准类制作"></a>标准类制作</h3><h4 id="标准类的组成"><a href="#标准类的组成" class="headerlink" title="标准类的组成"></a>标准类的组成</h4><p><code>JavaBean</code> 是 Java语言编写类的一种标准规范。符合<code>JavaBean</code> 的类，要求类必须是公共的，属性使用private修饰,并且具有无参数的构造方法，提供用来操作成员变量的<code>set</code> 和<code>get</code> 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span>&#123;</span><br><span class="line">  <span class="comment">//成员变量  private</span></span><br><span class="line">  <span class="comment">//构造方法</span></span><br><span class="line">  <span class="comment">//无参构造方法【必须】</span></span><br><span class="line">  <span class="comment">//满参构造方法【建议】</span></span><br><span class="line">  <span class="comment">//getXxx()</span></span><br><span class="line">  <span class="comment">//setXxx()</span></span><br><span class="line">  <span class="comment">//成员方法	</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ul>
<li><p>什么是API</p>
<p>​    API (Application Programming Interface) ：应用程序编程接口。Java API是一本程序员的<code>字典</code> ，是JDK中提供给我们使用的类的<strong>说明文档</strong>。这些类将底层的代码实现封装了起来，我们不需要关心这些类是如何实现的，只需要学习这些类如何使用即可。所以我们可以通过查询API的方式，来学习Java提供的类，并得知如何使用它们。</p>
<ul>
<li>API其实就是jdk中核心类库的说明文档</li>
<li>对于jdk中的核心类库只需要知道如何使用,无须关心他是如何实现的</li>
</ul>
</li>
</ul>
<h3 id="API的使用步骤"><a href="#API的使用步骤" class="headerlink" title="API的使用步骤"></a>API的使用步骤</h3><ol>
<li>打开API帮助文档。</li>
<li>点击显示，找到索引，看到输入框。</li>
<li>你要找谁？在输入框里输入，然后回车。</li>
<li>看包。java.lang下的类不需要导包，其他需要。  </li>
<li>看类的解释和说明。</li>
<li>看构造方法。</li>
<li>看成员方法。</li>
</ol>
]]></content>
      <categories>
        <category>Java知识积累</category>
      </categories>
      <tags>
        <tag>面相对象</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux操作系统02--Linux权限</title>
    <url>/jwangcloud/4264740339/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/Linux.jpeg" width="1000" height="200" align="middle">

<h2 id="进制计算"><a href="#进制计算" class="headerlink" title="进制计算"></a>进制计算</h2><span id="more"></span>    

<pre><code>二进制 ： 以111（2） 为例：1*2^0 + 1*2^1 + 1*2^2 =7 
十六进制：以16为底：0～9 A～F
三十六进制：以32为低：0-9 A-Z 除开 i o s z
</code></pre>
<h2 id="Linux权限"><a href="#Linux权限" class="headerlink" title="Linux权限"></a>Linux权限</h2><ol>
<li>例：使用ls -lh 文件属性字段显示信息如下<pre><code> d  rwx  r_x  r_x  d(文件夹) r(可读) w(可写) x(可执行) 
   111  101  101
    7    5    5
    u    g    o
  
</code></pre>
整个信息段表示：文件属性字段 文件硬链接数/目录子文件数 文件拥有者 文件拥有者所在组 文件大小（以字节为单位） 文件创建时间 文件名（–&gt;符号为指向目标文件夹）</li>
<li> 修改权限：chmod 权限的十进制 文件名 （chmod 755 1.txt）权限最高为777<br>修改文件夹权限：chmod -R</li>
<li>修改某一个权限：chmod u-x 文件名 （u-x 为 user 用户去掉可执行，还可以为u+x、u-wx、g+rx）</li>
</ol>
<h2 id="编码表"><a href="#编码表" class="headerlink" title="编码表"></a>编码表</h2><p>最早的字符编码表：Ascil码（不能存汉字）</p>
<p>中文编码：gbk（简体） big5(繁体)</p>
<p>世界性文字编码：unicode32  通过加工–通用编码：utf-8(可变长)、utf-16(即固定又可变)、utf-32(固定)</p>
]]></content>
      <categories>
        <category>Linux操作系统</category>
      </categories>
      <tags>
        <tag>Linux权限</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux操作系统01--Linux入门</title>
    <url>/jwangcloud/1737435959/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/Linux.jpeg" width="1000" height="200" align="middle">

<h3 id="Linux版本之间的区别"><a href="#Linux版本之间的区别" class="headerlink" title="Linux版本之间的区别"></a>Linux版本之间的区别</h3><span id="more"></span>


<pre><code>             redhat  RHEL CentOs 
                     Fedora               --&gt; 稳定版本
             Debian  Ubuntu
     Linux           Mint Linux   knopix  --&gt; 最新版本
             SlackWare  SUSE   SLEs
                               openSuse
             其它发行家族 
</code></pre>
<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><pre><code>top : 查看电脑当前状态，比如CPU的使用率，物理内存（Physcmem）,可看作一个
任务管理器（使用q键退出）
date：日期。其中取的时区为CST 代表 中国上海
cal ：日历
echo : 将字符串输出到屏幕  &gt; ：输出重定向  &gt;&gt; : 输出追加重定向
echo &#39;hello&#39; &gt; tmp.txt : 将字符串输出重定向，若当前目录下没有该文件，
则会新建该文件并将字符串输出到文件，若存在该文件，则会覆盖该文件中的内容
echo &#39;hello&#39; &gt;&gt; tmp.txt : 与上述一样，但存在该文件时会在该文件内容后
追加字符串
2&gt; : 标准错误截获，将错误提示输出到文件中
unix时间戳（timestamp）: 以格林威治时间为准，计算机开始时间1970开始
Tab键：命令自动补全，多个相同命令则按两下，会将全部相似的命令显示在屏幕上
</code></pre>
<h3 id="文件夹操作"><a href="#文件夹操作" class="headerlink" title="文件夹操作"></a>文件夹操作</h3><pre><code>cd  进入目标文件夹中
cd .  当前目录
cd ..  返回上一个文件夹下
ls  查看当前所在文件夹下面所拥有的文件夹清单
pwd 查看当前所在文件夹路径，属于绝对路径
mkdir 创建文件夹
rm -r -f 删除文件夹（不可恢复）
/ 文件路径分隔符  \ 转义字符
～ 用户根目录  ./ 当前目录
ls -la 可显示隐藏文件  隐藏文件的创建为在名字前+“.”,例如：.match
less 文件名  查看文件内信息  more可查看部分文件内信息
cp 文件夹1 文件夹2  考本文件夹1到文件夹2（需要是文件夹全名）与文件操作一样
</code></pre>
<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><pre><code>cp -r   : 文件复制
cp -r &#123;文件1，文件2&#125; 目标文件夹   ： 拷贝多个文件到一个文件夹中
rm -rf  : 删除任何相关的文件或文件夹 删除多个使用 空格隔开或者通配符
touch   : 新建文件（使用通配符可创建多个）
mkdir -p : 可以创建一个新文件夹下创建新文件
&gt; text.txt : 创建空文件
</code></pre>
]]></content>
      <categories>
        <category>Linux操作系统</category>
      </categories>
      <tags>
        <tag>Linux入门</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux操作系统03--vim操作、ssh</title>
    <url>/jwangcloud/2793636500/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/Linux.jpeg" width="1000" height="200" align="middle">

<h2 id="翻墙基础知识"><a href="#翻墙基础知识" class="headerlink" title="翻墙基础知识"></a>翻墙基础知识</h2><span id="more"></span>
<p>1.海底光缆：CN1（日本）CN2（美国加州） GIA</p>
<p>2.端口 ：一台服务器（一个IP）可有多个程序或功能，每一个程序或功能都会被分配一个不可重复的端口，端口号1024已经被系统应用占据，我们可以使用1024-65535之间的端口号，配置多个端口需写一个配置文件.</p>
<p>3.墙：国家监管，若浏览不正当网站会直接关闭</p>
<p>4.解决“墙”的问题：</p>
<pre><code>              加密      解密
解决方案： 本地 ----&gt; 墙 ----&gt; 美国服务器
       （加密软件）          （解密软件）
</code></pre>
<h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><ol>
<li><p>ssh:加密登录方式（多用于银行，军队），我们常用的https就是一个加密协议，不会被监控</p>
</li>
<li><p>加密方式：RSA加密  （第一个加密方式：凯撒加密CASER，常见加密方式BASE 64）</p>
</li>
<li><p>RSA原理：双方交换公钥，但保留私钥，用私钥加密，公钥解密</p>
</li>
<li><p>查看密钥 ：其保存在～/.ssh/文件夹中 使用less命令拷贝密钥</p>
</li>
<li><p>创建密钥 ：ssh -keygen</p>
</li>
<li><p>交换密钥：ssh-copy-id root@对方ip -p 端口号</p>
<pre><code> 若失败，需要重新创建密钥
 若成功，运行：ssh root@对方ip -p 端口号 可免密码登录
</code></pre>
</li>
<li><p>使用ssh远程拷贝文件：scp -P 端口 文件名 root@远程服务器ip:绝对路径</p>
</li>
</ol>
<h2 id="实现步骤（简易版单人）"><a href="#实现步骤（简易版单人）" class="headerlink" title="实现步骤（简易版单人）"></a>实现步骤（简易版单人）</h2><p>1.登陆远程服务器：ssh root@远程服务器ip地址 -p 端口 （需要输入远程服务器密码，在买服务器网站的个人信息中）</p>
<p>2.安装解密软件： pip install shadowsocks  (远程服务器上)</p>
<p>3.设置端口、密码：ssserver -p 端口 -k 密码 -m 加密方式  （远程服务器）</p>
<p>4.本地下载加密软件： 官网下载shadowsocks-NG </p>
<h2 id="Linux文档编辑器（vim）"><a href="#Linux文档编辑器（vim）" class="headerlink" title="Linux文档编辑器（vim）"></a>Linux文档编辑器（vim）</h2><h3 id="vim-基础"><a href="#vim-基础" class="headerlink" title="vim 基础"></a>vim 基础</h3><ol>
<li>安装vim：yum install vim </li>
<li>确认是否安装：vi   (Shift+q :退出)</li>
<li>vim text.txt ：新建txt文件并编辑</li>
<li>vim两种模式<pre><code> 输入模式：可以在其中输入文本，与文档编辑器一样，esc键退出该模式，esc+i:进入该模式，esa+a:在光标之后进入该模式
 命令模式：只能进行命令操作，shift+: 进入长命令输入，下方
</code></pre>
</li>
</ol>
<h3 id="vim常用命令"><a href="#vim常用命令" class="headerlink" title="vim常用命令"></a>vim常用命令</h3><ol>
<li>x: 消除光标之前字符</li>
<li>hjkl:上下左右移动</li>
<li>yy:复制光标所在行内容</li>
<li>p:粘贴复制内容</li>
<li>dd:删除光标所在行内容</li>
<li>N（数字键）+ yy/dd:批量复制/删除光标之下的N行</li>
<li>u:撤销上一步操作</li>
<li>I：将光标移到光标所在行行首，并进入编辑模式</li>
<li>A：光标移到行尾</li>
<li>shift+:下输入wq:保存并退出（进入直接：vim 文件名）</li>
<li>数字(N) gg：光标移到第N行；gg:跳到首行</li>
<li>o:在光标下新开一行并进入编辑模式</li>
</ol>
<h2 id="高级步骤（多人端口版）"><a href="#高级步骤（多人端口版）" class="headerlink" title="高级步骤（多人端口版）"></a>高级步骤（多人端口版）</h2><ol>
<li>端口文件配置shadow.conf，<pre><code> &#123;
 &quot;server&quot;:&quot;93.179.99.149&quot;,
 &quot;local_address&quot;: &quot;127.0.0.1&quot;,
 &quot;local_port&quot;:1080,
 &quot;port_password&quot;: &#123;
         &quot;55501&quot;: &quot;add55555&quot;,
         &quot;55502&quot;: &quot;add55555&quot;,
         &quot;55503&quot;: &quot;add55555&quot;（此处无逗号） 
 &#125;,
 &quot;timeout&quot;:300,
 &quot;method&quot;:&quot;aes-256-cfb&quot;,
 &quot;fast_open&quot;: false     
 
</code></pre>
</li>
<li>登陆远程服务器并在其中编写该端口文件配置</li>
<li>读取该配置文件：ssserver -c shadow.conf (该命令可先运行，检测成功性) -d start （之后运行完整命令）</li>
<li>运行成功</li>
</ol>
<pre><code>    小提示：1.su 直接切换到超级用户
            2.sudo 代替执行超级用户的权限
</code></pre>
]]></content>
      <categories>
        <category>Linux操作系统</category>
      </categories>
      <tags>
        <tag>vim</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB数据库03--mongodb实践</title>
    <url>/jwangcloud/449959058/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/MongoDB.jpeg" width="1000" height="200" align="middle">



<h2 id="mongodb的业务场景"><a href="#mongodb的业务场景" class="headerlink" title="mongodb的业务场景"></a>mongodb的业务场景</h2><span id="more"></span>

<p>​    mongodb并没有说哪个业务场景必须一定要使用它才能完成。但是现在也有很多项目在使用mongodb。应用较多的会通过它来记录日志信息、记录监控数据。从目前<a href="https://link.zhihu.com/?target=https://www.aliyun.com/product/mongodb">阿里云 MongoDB 云数据库</a>上的用户看，MongoDB 的应用已经渗透到各个领域，比如游戏、物流、电商、内容管理、社交、物联网、视频直播等。</p>
<ul>
<li>游戏场景，使用 MongoDB 存储游戏用户信息，用户的装备、积分等直接以内嵌文档的形式存储，方便查询、更新</li>
<li>物流场景，使用 MongoDB 存储订单信息，订单状态在运送过程中会不断更新，以 MongoDB 内嵌数组的形式来存储，一次查询就能将订单所有的变更读取出来。</li>
<li>社交场景，使用 MongoDB 存储存储用户信息，以及用户发表的朋友圈信息，通过地理位置索引实现附近的人、地点等功能</li>
<li>物联网场景，使用 MongoDB 存储所有接入的智能设备信息，以及设备汇报的日志信息，并对这些信息进行多维度的分析</li>
<li>视频直播，使用 MongoDB 存储用户信息、礼物信息等</li>
</ul>
<p>如何来决定是否需要mongodb，主要考虑如下几点问题：</p>
<ul>
<li>应用不需要事务及复杂 join 支持，需求会变，数据模型无法确定，想快速迭代开发。</li>
<li>应用需要TB甚至 PB 级别数据存储</li>
<li>应用发展迅速，需要能快速水平扩展</li>
<li>应用需要99.999%高可用</li>
<li>应用需要大量的地理位置查询、文本查询</li>
</ul>
<h2 id="MongoDB有哪些优势"><a href="#MongoDB有哪些优势" class="headerlink" title="MongoDB有哪些优势"></a>MongoDB有哪些优势</h2><ul>
<li>面向文档的存储：以 JSON 格式的文档保存数据。</li>
<li>任何属性都可以建立索引。</li>
<li>丰富的数据类型</li>
<li>复制以及高可扩展性。</li>
<li>自动分片。</li>
<li>丰富的查询功能。</li>
<li>快速的即时更新。</li>
<li>来自 MongoDB 的专业支持，文档非常全面。</li>
</ul>
<h2 id="你怎么理解的非关系型数据库"><a href="#你怎么理解的非关系型数据库" class="headerlink" title="你怎么理解的非关系型数据库"></a>你怎么理解的非关系型数据库</h2><p>非关系型数据库是对不同于传统关系型数据库的统称。非关系型数据库的显著特点是不使用SQL作为查询语言，数据存储不需要特定的表格模式。</p>
<h2 id="MongoDB中的分片是什么"><a href="#MongoDB中的分片是什么" class="headerlink" title="MongoDB中的分片是什么"></a>MongoDB中的分片是什么</h2><p>分片是将数据水平切分到不同的物理节点。当应用数据越来越大的时候，数据量也会越来越大。当数据量增长时，单台机器有可能无法存储数据或可接受的读取写入吞吐量。利用分片技术可以添加更多的机器来应对数据量增加以及读写操作的要求。</p>
<h2 id="MongoDB集群一般存在多少台服务器"><a href="#MongoDB集群一般存在多少台服务器" class="headerlink" title="MongoDB集群一般存在多少台服务器"></a>MongoDB集群一般存在多少台服务器</h2><p>​    一般为奇数台，因为涉及到选主，有超过半数的概念。是由hash进行分片，但是会存在非均匀分布。</p>
<h2 id="mongodb支持的数据类型"><a href="#mongodb支持的数据类型" class="headerlink" title="mongodb支持的数据类型"></a>mongodb支持的数据类型</h2><ul>
<li>String</li>
<li>Integer</li>
<li>Double</li>
<li>Boolean</li>
<li>Object</li>
<li>Object ID</li>
<li>Arrays</li>
<li>Min/Max Keys</li>
<li>Datetime</li>
<li>Code</li>
</ul>
<h2 id="set是什么"><a href="#set是什么" class="headerlink" title="$set是什么"></a>$set是什么</h2><p>​    通过它可以完成对数据的更新，并且不会对原有的未修改值进行变动。 </p>
<h2 id="什么是聚合"><a href="#什么是聚合" class="headerlink" title="什么是聚合"></a>什么是聚合</h2><p>​    聚合操作能够处理数据记录并返回计算结果。聚合操作能将多个文档中的值组合起来，对成组数据执行各种操作，返回单一的结果。它相当于 SQL 中的 count(*) 组合 group by。对于 MongoDB 中的聚合操作，应该使用<code>aggregate()</code>方法。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mongodb实践</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql数据库04--存储过程、触发器、事件</title>
    <url>/jwangcloud/898521826/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/mysql.jpeg" width="1000" height="200" align="middle">

<h2 id="mysql进阶"><a href="#mysql进阶" class="headerlink" title="mysql进阶"></a>mysql进阶</h2><span id="more"></span>

<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><p>1.存储函数（stored function）。返回一个计算结果，该结果可以用在表达式里。<br>2.存储过程（stored procedure）。不直接返回一个结果，但可以用来完成一般的运算或是生成一个结果集并传递回客户。<br>3.触发器（trigger）。与数据表相关联，当那个数据表被INSERT、DELETE或UPDATE语句修改时，触发器将自动执行。<br>4.事件（event）。根据时间表在预定时刻自动执行。</p>
<h3 id="2-存储过程"><a href="#2-存储过程" class="headerlink" title="2.存储过程"></a>2.存储过程</h3><p>1.存储过程和存储函数的区别<br>    使用存储过程的情况主要有两种：<br>    （1）只需通过运算来实现某种效果或动作而无需返回一个值，<br>    （2）运算会返回多个结果集（函数做不到这一点）。这只是些指导性建议，不是硬性规定。<br>    存储函数要用CREATE FUNCTION语句来创建，存储过程要用CREATE PROCEDURE语句来创建，为了与数据表或数据列的名字有所区别，给参数起名字时将使用p_前缀。</p>
<p>2.分隔符,由于mysql默认分隔符是 ; 如果我们使用了;表示存储过程已经结束,但是mysql默认语句也是;结束,如果我们想要在存储过程中多加几个sql语句怎么办？我们需要先修改分割符,然后写sql语句和存储过程然后恢复到默认的分隔符。</p>
<p>3.delimiter命令把mysql程序的语句分隔符重定义为另一个字符或字符串，它必须是在存储例程的定义里没有出现过的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建存储过程：</span><br><span class="line">delimiter $</span><br><span class="line">create procedure show_born()</span><br><span class="line">begin</span><br><span class="line">select 1;</span><br><span class="line">select 2;</span><br><span class="line">end$</span><br><span class="line">delimiter ;</span><br><span class="line">存储过程调用：</span><br><span class="line">call show_born</span><br><span class="line">存储过程参数传入：</span><br><span class="line">create procedure p1 (p_id INT) begin select p_id; end$</span><br><span class="line"></span><br><span class="line">创建存储函数：</span><br><span class="line">delimiter $</span><br><span class="line">create function show()</span><br><span class="line">begin</span><br><span class="line">select 1;</span><br><span class="line">select 2;</span><br><span class="line">end$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-触发器"><a href="#3-触发器" class="headerlink" title="3.触发器"></a>3.触发器</h3><p>1.触发器是与特定数据表相关联的存储过程，当相应的数据表被INSERT、DELETE或UPDATE语句修改时，触发器将自动执行。<br>触发器可以被设置成在这几种语句处理每个数据行之前或之后触发。触发器的定义包括一条将在触发器被触发时执行的语句。</p>
<p>2.创建触发器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">每次创建新值的时候,新的数据列test2都会变成999:</span><br><span class="line">create trigger test1_t before insert on test1 for each row begin set NEW.test2&#x3D;999; end$</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-事件"><a href="#4-事件" class="headerlink" title="4.事件"></a>4.事件</h3><p>1.我们可以把数据库操作安排在预定时间执行。事件是与一个时间表相关联的存储程序，时间表用来定义事件发生的时间、次数以及何时消失。事件非常适合用来执行各种无人值守的系统管理任务，如定期更新汇总报告、清理过期失效的数据、对日志数据表进行轮转等。</p>
<p>2.默认条件下，事件不会执行，需要启动事件调度器：</p>
<pre><code>把以下语句添加到一个选项文件中（服务器在启动时将读取）： [mysqld] event_scheduler=ON
</code></pre>
<p>3.查看事件调度器状态：show variables like ‘event_scheduler’</p>
<p>4.创建事件：</p>
<pre><code>create event e1 on schedule every 5 second do insert into test1 (test1)values(&#39;8888&#39;);

do 定义语句部分
</code></pre>
<p>5.事件禁用和激活</p>
<pre><code>事件禁用：
    alter event e1 disable;
事件激活：
    alter event e1 enable;
</code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql存储器</tag>
        <tag>mysql触发器</tag>
        <tag>mysql事件</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql数据库05--索引、引擎</title>
    <url>/jwangcloud/1501163261/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/mysql.jpeg" width="1000" height="200" align="middle">

<h3 id="索引与优化"><a href="#索引与优化" class="headerlink" title="索引与优化"></a>索引与优化</h3><span id="more"></span>

<p>1.MySQL官方对索引的定义为：索引（Index）是帮助MySQL高效获取数据的数据结构。提取句子主干，就可以得到索引的本质：索引是数据结构</p>
<p>2.索引优缺点：</p>
<pre><code>优点：
    1.所有的MySql列类型(字段类型)都可以被索引，也就是可以给任意字段设置索引
    2.大大加快数据的查询速度
缺点：
    1.创建索引和维护索引要耗费时间，并且随着数据量的增加所耗费的时间也会增加
    2.索引也需要占空间，我们知道数据表中的数据也会有最大上线设置的，如果我们有大量的索引，索引文件
      可能会比数据文件更快达到上线值
    4.当对表中的数据进行增加、删除、修改时，索引也需要动态的维护，降低了数据的维护速度。
    
</code></pre>
<p>3.使用</p>
<pre><code>1.对经常更新的表就避免对其进行过多的索引，对经常用于查询的字段应该创建索引
2.数据量小的表最好不要使用索引，因为由于数据较少，可能查询全部数据花费的时间比遍历索引的时间还要短，
  索引就可能不会产生优化效果。
3.在一同值少的列上(字段上)不要建立索引，比如在学生表的&quot;性别&quot;字段上只有男，女两个不同值。相反的，
  在一个字段上不同值较多可是建立索引。
  
</code></pre>
<h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><h4 id="1-索引的类型"><a href="#1-索引的类型" class="headerlink" title="1.索引的类型"></a>1.索引的类型</h4><p>1.普通索引 index(key)： MySQL中基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和空值，纯粹为了查询数据更快一点。</p>
<p>2.唯一索引 unique： 索引列中的值必须是唯一的，但是允许为空值</p>
<p>3.主键索引 primary key： 是一种特殊的唯一索引，不允许有空值</p>
<p>4.全文索引 fulltext: 只能在CHAR,VARCHAR,TEXT类型字段上使用全文索引，介绍了要求，说说什么是全文索引，就是在一堆文字中，通过其中的某个关键字等，就能找到该字段所属的记录行，比如有”好人，二货 …”</p>
<p>5.空间索引 spatial: 空间索引是对空间数据类型的字段建立的索引，MySQL中的空间数据类型有四种，GEOMETRY、POINT、LINESTRING、POLYGON。在创建空间索引时，使用SPATIAL关键字。</p>
<h4 id="2-存储数据结构"><a href="#2-存储数据结构" class="headerlink" title="2.存储数据结构"></a>2.存储数据结构</h4><p>1.HASH 只有Memory存储引擎显示支持hash索引，是Memory表的默认索引类型，尽管Memory表也可以使用B-Tree索引。</p>
<pre><code>(1)由于索引仅包含hash code和记录指针，所以，MySQL不能通过使用索引避免读取记录。但是访问内存中的记
    录是非常迅速的，不会对性造成太大的影响。 
(2)不能使用hash索引排序。 
(3)Hash索引不支持键的部分匹配，因为是通过整个索引值来计算hash值的。 
(4)Hash索引只支持等值比较，例如使用=，IN( )和&lt;=&gt;。对于WHERE price&gt;100并不能加速查询。
</code></pre>
<p>2.b-tree BTREE索引就是一种将索引值按一定的算法，存入一个树形的数据结构中每次查询都是从树的入口root开始，依次遍历node，获取leaf。这是MySQL里默认和最常用的索引类型。</p>
<h4 id="3-单列索引和组合索引"><a href="#3-单列索引和组合索引" class="headerlink" title="3.单列索引和组合索引"></a>3.单列索引和组合索引</h4><p>1.单列索引：一个索引只包含单个列，但一个表中可以有多个单列索引。 这里不要搞混淆了。</p>
<pre><code>普通索引: MySQL中基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和空值，纯粹为了查询数据更快
一点。
唯一索引：索引列中的值必须是唯一的，但是允许为空值
主键索引：是一种特殊的唯一索引，不允许有空值。
</code></pre>
<p>2.组合索引(复合索引)</p>
<p>在表中的多个字段组合上创建的索引，只有在查询条件中使用了这些字段的左边字段时，索引才会被使用，使用组合索<br>引时遵循最左前缀集合。</p>
<pre><code>1.需要加索引的字段，要在where条件中
2.数据量少的字段不需要加索引
3.如果where条件中是OR关系，加索引不起作用
4.符合最左原则
</code></pre>
<p>对于复合索引:Mysql从左到右的使用索引中的字段，一个查询可以只使用索引中的一部份，但只能是最左侧部分。例如索引是key index (a,b,c). 可以支持a | a,b| a,b,c 3种组合进行查找，但不支持 b,c进行查找 .当最左侧字段是常量引用时，索引就十分有效。</p>
<h3 id="索引语句"><a href="#索引语句" class="headerlink" title="索引语句"></a>索引语句</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.创建索引</span><br><span class="line">以User表的username字段(类型为VARCHAR(50))为例，使用username字段的6个字符前缀来创建索引。</span><br><span class="line">CREATE INDEX idx_user_username ON user (username(6));</span><br><span class="line"></span><br><span class="line">CREATE INDEX可对表增加普通索引或UNIQUE索引</span><br><span class="line">--例,只能添加这两种索引;</span><br><span class="line">CREATE INDEX index_name ON table_name (column_list)</span><br><span class="line">CREATE UNIQUE INDEX index_name ON table_name (column_list)</span><br><span class="line"></span><br><span class="line">2.删除索引</span><br><span class="line"></span><br><span class="line">ALTER TABLE table_name DROP INDEX index_name;</span><br><span class="line"></span><br><span class="line">3.修改索引：先删除再创建同名索引</span><br><span class="line"></span><br><span class="line">--先删除</span><br><span class="line">ALTER TABLE user DROP INDEX idx_user_username;</span><br><span class="line">--再以修改后的内容创建同名索引</span><br><span class="line">CREATE INDEX idx_user_username ON user (username(8));</span><br><span class="line"></span><br><span class="line">4.查看索引</span><br><span class="line"></span><br><span class="line">--如果查看索引前，没有使用user db_name等命令指定具体的数据库，则必须加上FROM db_name</span><br><span class="line">SHOW INDEX FROM table_name [FROM db_name]</span><br><span class="line">--如果查看索引前，没有使用user db_name等命令指定具体的数据库，则必须加上db_name.前缀</span><br><span class="line">SHOW INDEX FROM [db_name.]table_name</span><br><span class="line"></span><br><span class="line">5.查看是否使用了索引进行查询</span><br><span class="line">EXPLAIN SELECT * FROM book WHERE year_publication &#x3D; 1990;</span><br><span class="line"></span><br><span class="line">6.添加索引</span><br><span class="line">ALTER TABLE 表名 ADD 索引类型 （unique,primary key,fulltext,index）[索引名]（字段名）</span><br><span class="line">ALTER TABLE book ADD INDEX BkNameIdx(bookname(30));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="引擎"><a href="#引擎" class="headerlink" title="引擎"></a>引擎</h3><p>概述<br>存储引擎就是指表的类型。数据库的存储引擎决定了表在计算机中的存储方式。存储引擎的概念是MySQl的特点，而且是一个插入式的存储引擎概念。这就决定了MySQl数据库中的表可以使用不同的存储方式存储。用户可以根据自己的不同要求，选择不同的存储方式、是否进行事务处理等。</p>
<h4 id="引擎分类"><a href="#引擎分类" class="headerlink" title="引擎分类"></a>引擎分类</h4><p>InnoDB存储引擎</p>
<pre><code>InnoDB是Mysql数据库的一种存储引擎。InnoDB给Mysql的表提供了 事务、回滚、崩溃修复能力、多版本并发控制
的事务安全、间隙锁（可以有效的防止幻读的出现）、支持辅助索引、聚簇索引、自适应hash索引、支持热备、行级
锁。还有InnoDB是Mysql上唯一一个提供了外键约束的引擎。

InnoDB存储引擎中，创建的表的表结构是单独存储的并且存储在.frm文件中。数据和索引存储在一起的并且存储在表
空间中。但是默认情况下mysql会将数据库的所有InnoDB表存储在一个表空间中的。其实这种方式管理起来非常的不
方便而且还不支持高级功能所以建议每个表存储为一个表空间实现方式为：使用服务器变量
innodb_file_per_table = 1。

如果需要频繁的进行更新、删除操作的数据库也可选择InnoDB存储引擎。因为该存储引擎可以实现事务提交和回滚。
</code></pre>
<p>MyISAM存储引擎</p>
<pre><code>MyISAM存储引擎是Mysql中常见的存储引擎，MyISAM存储引擎是基于ISAM存储引擎发展起来的。MyISAM支持全文索
引、压缩存放、空间索引（空间函数）、表级锁、延迟更新索引键。但是MyISAM不支持事务、行级锁、更无法忍受的
是崩溃后不能保证完全恢复（只能手动修复）。

MyISAM存储引擎的表存储成3个文件。文件的名字和表的名字相同。扩展名包含frm、MYD、MYI。其中frm为扩展名的
文件存储表的结构；MYD为扩展名的文件存储数据，其是MYData的缩写；MYI为扩展名的文件存储索引，其为MYIndex
的缩写。

MyISAM存储引擎的插入数据很快，空间和内存使用比较低。如果表主要是用于插入新记录和读出记录，那么选择
MyISAM存储引擎能够实现处理的高效率。如果应用的完整性、并发性要求很低，也可以选择MyISAM存储引擎。
</code></pre>
<p>MEMORY存储引擎</p>
<pre><code>MEMORY存储引擎是Mysql中的一类特殊的存储引擎。其使用存储在内存中的内存来创建表，而且所有数据保存在内存
中。数据安全性很低，但是查找和插入速度很快。如果内存出现异常就会影响到数据的完整性，如果重启或关机，表中
的所有数据就会丢失，因此基于MEMORY存储引擎的表的生命周期很短，一般都是一次性的。适用于某些特殊场景像查
找和映射，缓存周期性的聚合数据等等。
</code></pre>
<p>NDB 集群引擎</p>
<pre><code>作为sql和NDB元素协议之间的接口,用于mysql,ndb集群存储引擎,分布式等
</code></pre>
<h3 id="优化建议"><a href="#优化建议" class="headerlink" title="优化建议"></a>优化建议</h3><pre><code>1.尽可能让所有的数据检索都通过索引来完成
2.合理设计索引，使索引键上面加锁的时候尽可能准确，尽可能的缩小锁定范围，避免造成不必要的锁定而影响其他
Query的执行；
3.尽量控制事务的大小，减少锁定的资源量和锁定时间长度
4.尽可能减少基于范围的数据检索过滤条件，避免因为间隙锁带来的负面影响而锁定了不该锁定的记录
5.尽可能按照相同的访问顺序来访问，防止产生死锁
6.尽可能做到一次锁定所需要的所有资源，减少死锁产生概率
</code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql索引</tag>
        <tag>mysql引擎</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql数据库06--锁</title>
    <url>/jwangcloud/1196357161/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/mysql.jpeg" width="1000" height="200" align="middle">

<h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><span id="more"></span>

<p>数据库锁定机制简单来说，就是数据库为了保证数据的一致性，而使各种共享资源在被并发访问变得有序所设计的一种规则。</p>
<h4 id="1-读写锁"><a href="#1-读写锁" class="headerlink" title="1.读写锁"></a>1.读写锁</h4><p>1.1 共享锁：对某一资源加共享锁，自身可以读该资源，其他人也可以读该资源（也可以再继续加共享锁，即 共享锁可多个共存），但无法修改。要想修改就必须等所有共享锁都释放完之后。</p>
<pre><code>    语法为：select * from table lock in share mode
</code></pre>
<p>1.2 排他锁：对某一资源加排他锁，自身可以进行增删改查，其他人无法进行任何操作。</p>
<pre><code>    语法为：select * from table for update --增删改自动加了排他锁
    
</code></pre>
<p>1.3 数据库规定同一资源上不能同时共存共享锁和排他锁</p>
<pre><code>命令窗1:select * from table lock in share mode
命令窗2:update table set column1=&#39;hello&#39;

在1未完成前 2无法运行：T2 之所以要等，是因为 T2 在执行 update 前，试图对 table 表加一个排他锁，而数据
库规定同一资源上不能同时共存共享锁和排他锁。所以 T2 必须等 T1 执行完，释放了全部的共享锁，才能加上排他
锁，然后才能开始执行 update 语句。
</code></pre>
<h4 id="2-锁的大小（颗粒度）"><a href="#2-锁的大小（颗粒度）" class="headerlink" title="2.锁的大小（颗粒度）"></a>2.锁的大小（颗粒度）</h4><p>2.1 表级锁定（table-level）</p>
<p>表级别的锁定是MySQL各存储引擎中最大颗粒度的锁定机制。由于表级锁一次会将整个表锁定，所以可以很好的避免困扰我们的死锁问题。使用表级锁定的主要是MyISAM，MEMORY，CSV等一些非事务性存储引擎。</p>
<p>2.2 行级锁定（row-level）</p>
<p>行级锁定最大的特点就是锁定对象的颗粒度很小，也是目前各大数据库管理软件所实现的锁定颗粒度最小的。由于锁定颗粒度很小，所以发生锁定资源争用的概率也最小，能够给予应用程序尽可能大的并发处理能力而提高一些需要高并发应用系统的整体性能。使用行级锁定的主要是InnoDB存储引擎。</p>
<p>2.3 页级锁定（page-level）</p>
<p>页级锁定是MySQL中比较独特的一种锁定级别，在其他数据库管理软件中也并不是太常见。使用页级锁定的主要是BerkeleyDB存储引擎。</p>
<h4 id="3-myisam的锁"><a href="#3-myisam的锁" class="headerlink" title="3.myisam的锁"></a>3.myisam的锁</h4><p>由于MyISAM存储引擎使用的锁定机制完全是由MySQL提供的表级锁定实现，所以我们以MyISAM存储引擎作为示例存储引擎。</p>
<p>3.1 MySQL表级锁的锁模式</p>
<pre><code>MySQL的表级锁有两种模式：表共享读锁（Table Read Lock）和表独占写锁（Table Write Lock）。

锁模式的兼容性：
1.对MyISAM表的读操作，不会阻塞其他用户对同一表的读请求，但会阻塞对同一表的写请求；
2.对MyISAM表的写操作，则会阻塞其他用户对同一表的读和写操作；
3.MyISAM表的读操作与写操作之间，以及写操作之间是串行的。当一个线程获得对一个表的写锁后，只有持有锁的线
程可以对表进行更新操作。其他线程的读、写操作都会等待，直到锁被释放为止。
</code></pre>
<p>3.2 MyISAM在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此，用户一般不需要直接用LOCK TABLE命令给MyISAM表显式加锁。</p>
<h4 id="4-innodb的锁"><a href="#4-innodb的锁" class="headerlink" title="4.innodb的锁"></a>4.innodb的锁</h4><p> 行级锁定不是MySQL自己实现的锁定方式，而是由其他存储引擎自己所实现的，如广为大家所知的InnoDB存储引擎，以及MySQL的分布式存储引擎NDBCluster等都是实现了行级锁定。</p>
<p> 4.1 InnoDB锁定模式及实现机制</p>
<p>  InnoDB的锁定机制和Oracle数据库有不少相似之处。InnoDB的行级锁定同样分为两种类型，共享锁和排他锁，而在锁定机制的实现过程中为了让行级锁定和表级锁定共存，InnoDB也同样使用了意向锁（表级锁定）的概念，也就有了意向共享锁和意向排他锁这两种。</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">共享锁s</th>
<th align="center">排他锁x</th>
<th align="center">意向共享锁is</th>
<th align="center">意向拍他锁</th>
</tr>
</thead>
<tbody><tr>
<td align="center">S</td>
<td align="center">兼容</td>
<td align="center">冲突</td>
<td align="center">兼容</td>
<td align="center">冲突</td>
</tr>
<tr>
<td align="center">x</td>
<td align="center">冲突</td>
<td align="center">冲突</td>
<td align="center">冲突</td>
<td align="center">冲突</td>
</tr>
<tr>
<td align="center">IS</td>
<td align="center">兼容</td>
<td align="center">冲突</td>
<td align="center">兼容</td>
<td align="center">兼容</td>
</tr>
<tr>
<td align="center">IX</td>
<td align="center">冲突</td>
<td align="center">冲突</td>
<td align="center">兼容</td>
<td align="center">兼容</td>
</tr>
</tbody></table>
<pre><code>如果一个事务请求的锁模式与当前的锁兼容，InnoDB就将请求的锁授予该事务；反之，如果两者不兼容，该事务就要
等待锁释放。

意向锁是InnoDB自动加的，不需用户干预。对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及数据集加排
他锁（X)；对于普通SELECT语句，InnoDB不会加任何锁；事务可以通过以下语句显示给记录集加共享锁或排他锁。

共享锁（S）：SELECT * FROM table_name WHERE ... LOCK IN SHARE MODE
排他锁（X)：SELECT * FROM table_name WHERE ... FOR UPDATE
</code></pre>
<p>4.2 InnoDB行锁实现方式 InnoDB行锁是通过给索引上的索引项加锁来实现的，只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁</p>
<pre><code>1.在不通过索引条件查询的时候，InnoDB确实使用的是表锁，而不是行锁。
2.由于MySQL的行锁是针对索引加的锁，不是针对记录加的锁，所以虽然是访问不同行的记录，但是如果是使用相同的
索引键，是会出现锁冲突的。
3.当表有多个索引的时候，不同的事务可以使用不同的索引锁定不同的行，另外，不论是使用主键索引、唯一索引或普
通索引，InnoDB都会使用行锁来对数据加锁。
4.即便在条件中使用了索引字段，但是否使用索引来检索数据是由MySQL通过判断不同执行计划的代价来决定的，如果
MySQL认为全表扫描效率更高，比如对一些很小的表，它就不会使用索引，这种情况下InnoDB将使用表锁，而不是行
锁。因此，在分析锁冲突时，别忘了检查SQL的执行计划，以确认是否真正使用了索引
</code></pre>
<h4 id="5-乐观锁-vs-悲观锁（重点）"><a href="#5-乐观锁-vs-悲观锁（重点）" class="headerlink" title="5.乐观锁 vs 悲观锁（重点）"></a>5.乐观锁 vs 悲观锁（重点）</h4><p>5.1 乐观锁</p>
<p>总是认为不会产生并发问题，每次去取数据的时候总认为不会有其他线程对数据进行修改，因此不会上锁，但是在更新<br>时会判断其他线程在这之前有没有对数据进行修改，一般会使用版本号机制或CAS操作实现。</p>
<p>version方式：一般是在数据表中加上一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version值会加一。当线程A要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到<br>的version值为当前数据库中的version值相等时才更新，否则重试更新操作，直到更新成功。</p>
<pre><code>update table set x=x+1, version=version+1 where id=#&#123;id&#125; and version=#&#123;version&#125;;  
</code></pre>
<p>CAS操作方式：即compare and swap 或者 compare and set，涉及到三个操作数，数据所在的内存值，预期值，新值。当需要更新时，判断当前内存值与之前取到的值是否相等，若相等，则用新值更新，若失败则重试，一般情况下是一个自旋操作，即不断的重试。</p>
<p>5.2 悲观锁</p>
<p>总是假设最坏的情况，每次取数据时都认为其他线程会修改，所以都会加锁（读锁、写锁、行锁等），当其他线程想要访问数据时，都需要阻塞挂起。可以依靠数据库实现，如行锁、读锁和写锁等，都是在操作之前加锁. 所以说我们上面所说的读锁,写锁都是属于悲观锁</p>
<p>5.3 优缺点</p>
<p>两种锁各有优缺点，不可认为一种好于另一种，像乐观锁适用于写比较少的情况下，即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果经常产生冲突，上层应用会不断的进行retry，这样反倒是降低了性能，所以这种情况下用悲观锁就比较合适。</p>
<h4 id="6-gap和record-lock"><a href="#6-gap和record-lock" class="headerlink" title="6.gap和record lock"></a>6.gap和record lock</h4><p>6.1 Gap lock 间隙锁 </p>
<p>在索引记录之间的间隙中加锁，或者是在某一条索引记录之前或者之后加锁，并不包括该索引记录本身</p>
<pre><code>mysql&gt; select * from emp where empid &gt; 100 for update;
是一个范围条件的检索，InnoDB不仅会对符合条件的empid值为101的记录加锁，也会对empid大于101（这些记录并
不存在）的“间隙”加锁。

InnoDB使用间隙锁的目的： 防止幻读，以满足相关隔离级别的要求。对于上面的例子，要是不使用间隙锁，如果其他
事务插入了empid大于100的任何记录，那么本事务如果再次执行上述语句，就会发生幻读；
</code></pre>
<p>6.2 Record lock </p>
<p>单条索引记录上加锁，record lock锁住的永远是索引，而非记录本身，即使该表上没有任何索引，那么innodb会在后台创建一个隐藏的聚集主键索引，那么锁住的就是这个隐藏的聚集主键索引。</p>
<p>6.3 Next-Key</p>
<p>就是Record lock和gap lock的结合，即除了锁住记录本身，还要再锁住索引之间的间隙。</p>
<h4 id="7-死锁"><a href="#7-死锁" class="headerlink" title="7.死锁"></a>7.死锁</h4><p>概述</p>
<p>所谓死锁DeadLock: 是指两个或两个以上的进程在执行过程中,因争夺资源而造成的一种互相等待的现象,若无外力作用,它们都将无法推进下去.此时称系统处于死锁状态或系统产生了死锁,这些永远在互相等带的进程称为死锁进程.表级锁不会产生死锁.所以解决死锁主要还是针对于最常用的InnoDB.</p>
<pre><code>死锁的关键在于：两个(或以上)的Session加锁的顺序不一致。那么对应的解决死锁问题的关键就是：让不同的
session加锁有次序    
</code></pre>
<h3 id="加锁方法"><a href="#加锁方法" class="headerlink" title="加锁方法"></a>加锁方法</h3><pre><code>select .. from  
不加任何类型的锁

select...from lock in share mode
共享锁
select...from lock for update
排它锁

update..where   
delete from..where 
排他锁
</code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql锁</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB数据库01--MongoDB概述</title>
    <url>/jwangcloud/207375873/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/MongoDB.jpeg" width="1000" height="200" align="middle">

<h2 id="MongoDB简介"><a href="#MongoDB简介" class="headerlink" title="MongoDB简介"></a>MongoDB简介</h2><span id="more"></span>

<h3 id="为什么要使用MongoDB"><a href="#为什么要使用MongoDB" class="headerlink" title="为什么要使用MongoDB"></a>为什么要使用MongoDB</h3><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/1564300991182-1592442209458.png" alt="1564300991182"> </p>
<p>文章评论功能存在以下特点：</p>
<ol>
<li>数据量大</li>
<li>写入操作频繁</li>
<li>价值较低</li>
</ol>
<p>对于这样的数据，我们更适合使用MongoDB来实现数据的存储</p>
<h3 id="什么是MongoDB"><a href="#什么是MongoDB" class="headerlink" title="什么是MongoDB"></a>什么是MongoDB</h3><p>​    MongoDB是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供==可扩展的高性能数据存储解决方案==。<br>​    MongoDB是一个介于关系数据库和非关系数据库之间的产品，是<strong>非关系数据库</strong>当中功能最丰富，最像关系数据库的。它支持的数据结构非常松散，是类似json的bson(数据类型)格式，因此可以存储比较复杂的数据类型。</p>
<h3 id="MongoDB特点"><a href="#MongoDB特点" class="headerlink" title="MongoDB特点"></a>MongoDB特点</h3><p>​    Mongo最大的特点是它支持的<strong>查询语言非常强大</strong>，其语法有点类似于<strong>面向对象的查询语言</strong>，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立<strong>索引</strong>。(正则表达式支持索引)</p>
<p>它的特点是高性能、易部署、易使用，存储数据非常方便。主要功能特性有：</p>
<ol>
<li>面向集合存储，易存储对象类型的数据。(集合相当于表)</li>
<li>模式自由。</li>
<li>支持动态查询。</li>
<li>支持完全索引，包含内部对象。</li>
<li>支持查询。</li>
<li>支持复制和故障恢复。(高可用)</li>
<li>使用高效的二进制数据存储，包括大型对象（如视频等）。</li>
<li>自动处理碎片，以支持云计算层次的扩展性。（mapreduce）</li>
<li>支持RUBY，PYTHON，JAVA，C++，PHP，C#等多种语言。</li>
<li>文件存储格式为BSON（一种JSON的扩展）。</li>
</ol>
<h3 id="MongoDB体系结构"><a href="#MongoDB体系结构" class="headerlink" title="MongoDB体系结构"></a>MongoDB体系结构</h3><p>​    MongoDB 的逻辑结构是一种层次结构。主要由：**文档(document)<strong>、</strong>集合(collection)<strong>、</strong>数据库(database)**这三部分组成的。逻辑结构是面向用户的，用户使用 MongoDB 开发应用程序使用的就是逻辑结构。</p>
<ol>
<li> MongoDB 的文档（document），相当于关系数据库中的一行记录。</li>
<li> 多个文档组成一个集合（collection），相当于关系数据库的表。</li>
<li> 多个集合（collection），逻辑上组织在一起，就是数据库（database）。</li>
<li> 一个 MongoDB 实例支持多个数据库（database）。</li>
</ol>
<p>文档(document)、集合(collection)、数据库(database)的层次结构如下图:</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/1559303526465.png" alt="1559303526465"></p>
<table>
<thead>
<tr>
<th>MongoDb</th>
<th>关系型数据库Mysql</th>
</tr>
</thead>
<tbody><tr>
<td>数据库(databases)</td>
<td>数据库(databases)</td>
</tr>
<tr>
<td>集合(collections)</td>
<td>表(table)</td>
</tr>
<tr>
<td>文档(document)</td>
<td>行(row)</td>
</tr>
</tbody></table>
<h3 id="MongoDB数据类型"><a href="#MongoDB数据类型" class="headerlink" title="MongoDB数据类型"></a>MongoDB数据类型</h3><table>
<thead>
<tr>
<th>数据类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>String</td>
<td>字符串。存储数据常用的数据类型。在  MongoDB 中，UTF-8 编码的字符串才是合法的。</td>
</tr>
<tr>
<td>Integer</td>
<td>整型数值。用于存储数值。根据你所采用的服务器，可分为  32 位或 64 位。</td>
</tr>
<tr>
<td>Boolean</td>
<td>布尔值。用于存储布尔值（真/假）。</td>
</tr>
<tr>
<td>Double</td>
<td>双精度浮点值。用于存储浮点值。</td>
</tr>
<tr>
<td>Array</td>
<td>用于将数组或列表或多个值存储为一个键。</td>
</tr>
<tr>
<td>Timestamp</td>
<td>时间戳。记录文档修改或添加的具体时间。</td>
</tr>
<tr>
<td>Object</td>
<td>用于内嵌文档。</td>
</tr>
<tr>
<td>Null</td>
<td>用于创建空值。</td>
</tr>
<tr>
<td>Date</td>
<td>日期时间。用  UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。</td>
</tr>
<tr>
<td>Object  ID</td>
<td>对象  ID。用于创建文档的 ID。</td>
</tr>
<tr>
<td>Binary  Data</td>
<td>二进制数据。用于存储二进制数据。</td>
</tr>
<tr>
<td>Code</td>
<td>代码类型。用于在文档中存储  JavaScript 代码。</td>
</tr>
<tr>
<td>Regular  expression</td>
<td>正则表达式类型。用于存储正则表达式。</td>
</tr>
</tbody></table>
<p>特殊说明：</p>
<ol>
<li><p>ObjectId</p>
<p>ObjectId 类似唯一主键，可以很快的去生成和排序，包含 12 bytes，含义是：</p>
<ul>
<li>前 4 个字节表示创建 unix 时间戳，格林尼治时间 UTC 时间，比北京时间晚了 8 个小时</li>
<li>接下来的 3 个字节是机器标识码</li>
<li>紧接的两个字节由进程 id 组成 PID</li>
<li>最后三个字节是随机数</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/1559617643826.png" alt="1559617643826"></p>
<p>MongoDB 中存储的文档必须有一个 _id 键。这个键的值可以是任何类型的，默认是个 ObjectId 对象</p>
</li>
<li><p>时间戳</p>
<p>BSON 有一个特殊的时间戳类型，与普通的日期类型不相关。时间戳值是一个 64 位的值。其中：</p>
<ul>
<li>前32位是一个 time_t 值【与Unix新纪元（1970年1月1日）相差的秒数】</li>
<li>后32位是在某秒中操作的一个递增的序数</li>
</ul>
<p>在单个 mongod 实例中，时间戳值通常是唯一的。</p>
</li>
<li><p>日期</p>
<p>表示当前距离 Unix新纪元（1970年1月1日）的毫秒数。日期类型是有符号的, 负数表示 1970 年之前的日期。</p>
</li>
</ol>
<h3 id="MongoDB和Redis比较"><a href="#MongoDB和Redis比较" class="headerlink" title="MongoDB和Redis比较"></a>MongoDB和Redis比较</h3><table>
<thead>
<tr>
<th>比较指标</th>
<th>MongoDB(海量数据)</th>
<th>Redis（热点数据）</th>
<th>比较说明</th>
</tr>
</thead>
<tbody><tr>
<td>实现语言</td>
<td>c++</td>
<td>c/c++</td>
<td>-</td>
</tr>
<tr>
<td>协议</td>
<td>==BSON,自定义二进制==</td>
<td>==类telnet(TCP/IP)==</td>
<td>-</td>
</tr>
<tr>
<td>性能</td>
<td>==依赖内存 (内存映射文件技术)==</td>
<td>==依赖内存==（纯内存）</td>
<td>Redis优于MongoDB</td>
</tr>
<tr>
<td>可操作性</td>
<td>丰富的数据表达,索引;最类似于关系型数据库,支持丰富的查询语句</td>
<td>数据类型丰富,较少的IO</td>
<td>-</td>
</tr>
<tr>
<td>内存及存储</td>
<td>适合大数据量存储,依赖系统虚拟内存,采用镜像文件存储;内存占用率比较高,官方建议独立部署在64位系统</td>
<td>Redis2.0后支持虚拟内存特性(VM) 突破物理内存限制;数据可以设置时效性,类似于memcache</td>
<td>不同的应用场景,各有千秋</td>
</tr>
<tr>
<td>可用性</td>
<td>支持master-slave,replicatset(内部采用paxos选举算法,自动故障恢复),auto sharding机制,对客户端屏蔽了故障转移和切片机制</td>
<td>依赖客户端来实现分布式读写;主从复制时,每次从节点重新连接主节点都要依赖整个快照,无增量复制;不支持auto sharding,需要依赖程序设定一致性hash机制</td>
<td>MongoDB优于Redis；单点问题上,MongoDB应用简单,相对用户透明,Redis比较复杂,需要客户端主动解决.(MongoDB一般使用replicasets和sharding相结合,replicasets侧重高可用性以及高可靠,sharding侧重性能,水平扩展)</td>
</tr>
<tr>
<td>可靠性</td>
<td>从1.8版本后,采用binlog方式(类似Mysql) 支持持久化</td>
<td>依赖快照进行持久化;AOF增强可靠性;增强性的同时,影响访问性能</td>
<td>mongodb在启动时，专门初始化一个线程不断循环（除非应用crash掉），用于在一定时间周期内来从defer队列中获取要持久化的数据并写入到磁盘的journal(日志)和mongofile(数据)处，当然它不是在用户添加记录时就写到磁盘上</td>
</tr>
<tr>
<td>一致性</td>
<td>==以前版本不支持事务,靠客户端保证==  ==最新4.x的支持事务==</td>
<td>==支持事务,比较脆,仅能保证事务中的操作按顺序执行==</td>
<td>-</td>
</tr>
<tr>
<td>数据分析</td>
<td>内置数据分析功能(mapreduce)</td>
<td>不支持</td>
<td>MongoDB优于Redis</td>
</tr>
<tr>
<td>应用场景</td>
<td>==海量数据存储和访问效率提升==</td>
<td>==热点数据的存储==</td>
<td>-</td>
</tr>
</tbody></table>
<h2 id="MongoDB安装"><a href="#MongoDB安装" class="headerlink" title="MongoDB安装"></a>MongoDB安装</h2><h3 id="Docker-环境下MongoDB安装"><a href="#Docker-环境下MongoDB安装" class="headerlink" title="Docker 环境下MongoDB安装"></a>Docker 环境下MongoDB安装</h3><p>在Linux虚拟机中创建mongo容器，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载mongo镜像</span></span><br><span class="line">docker pull mongo</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装容器</span></span><br><span class="line">docker run -d -p 27017:27017 -v mongo_configdb:/data/configdb -v mongo_db:/data/db --name mongo docker.io/mongo</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200810110620581.png" alt="image-20200810110620581"></p>
<h3 id="客户端的安装和使用"><a href="#客户端的安装和使用" class="headerlink" title="客户端的安装和使用"></a>客户端的安装和使用</h3><p>studio3t是mongodb优秀的客户端工具。官方地址在<a href="https://studio3t.com/">https://studio3t.com/</a></p>
<p>下载studio3t</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200810110147338.png" alt="image-20200810110147338"></p>
<p>安装并启动：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200810110200568.png" alt="image-20200810110200568"></p>
<p>创建一个新连接：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200810110213361.png" alt="image-20200810110213361"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200810110304448.png" alt="image-20200810110304448"></p>
<p>连接成功：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200810110459020.png" alt="image-20200810110459020"></p>
<p>修改字体：</p>
<p>默认Studio3t的字体太小，需要修改字体：</p>
<p>点击菜单：Edit—&gt;Preferences</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200810110523490.png" alt="image-20200810110523490"></p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="选择和创建数据库"><a href="#选择和创建数据库" class="headerlink" title="选择和创建数据库"></a>选择和创建数据库</h3><p>连接mongodb客户端</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it cccb7dc0ee79  /bin/bash</span><br><span class="line"></span><br><span class="line">mongo mongodb://localhost:27017</span><br></pre></td></tr></table></figure>

<p>选择和创建数据库的语法格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use 数据库名称</span><br></pre></td></tr></table></figure>


<p>如果数据库存在则选择该数据库，如果数据库不存在则自动创建。以下语句创建commentdb数据库：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use commentdb</span><br></pre></td></tr></table></figure>

<p>查看数据库：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> dbs</span><br></pre></td></tr></table></figure>

<p>查看集合，需要先选择数据库之后，才能查看该数据库的集合：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> collections</span><br></pre></td></tr></table></figure>

<p>创建集合</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.createCollection(name, options)</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.createCollection(&quot;comment&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="插入与查询文档"><a href="#插入与查询文档" class="headerlink" title="插入与查询文档"></a>插入与查询文档</h3><p>选择数据库后，使用集合来对文档进行操作，插入文档语法格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.集合名称.<span class="keyword">insert</span>(数据);</span><br></pre></td></tr></table></figure>

<p>插入以下测试数据：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.comment.insert(&#123;content:&quot;加强课&quot;,userid:&quot;1011&quot;&#125;)</span><br></pre></td></tr></table></figure>

<p>查询集合的语法格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.集合名称.find()</span><br></pre></td></tr></table></figure>

<p>查询集合的所有文档，输入以下命令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.comment.find()</span><br></pre></td></tr></table></figure>

<p>​    发现文档会有一个叫_id的字段，这个相当于我们原来关系数据库中表的主键，当你在插入文档记录时没有指定该字段，MongoDB会自动创建，其类型是ObjectID类型。如果我们在插入文档记录时指定该字段也可以，其类型可以是ObjectID类型，也可以是MongoDB支持的任意类型。</p>
<p>输入以下测试语句:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.comment.insert(&#123;<span class="attr">_id</span>:<span class="string">&quot;1&quot;</span>,<span class="attr">content</span>:<span class="string">&quot;到底为啥出错&quot;</span>,<span class="attr">username</span>:<span class="string">&quot;张三&quot;</span>,<span class="attr">userid</span>:<span class="string">&quot;1012&quot;</span>,<span class="attr">thumbup</span>:<span class="number">2020</span>,<span class="attr">tags</span>:[<span class="string">&quot;很好&quot;</span>,<span class="string">&quot;十分认同&quot;</span>],<span class="attr">tupuser</span>:[&#123;<span class="attr">name</span>:<span class="string">&quot;李大&quot;</span>,<span class="attr">sex</span>:<span class="string">&quot;女&quot;</span>,<span class="attr">age</span>:<span class="number">10</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&quot;李二&quot;</span>,<span class="attr">sex</span>:<span class="string">&quot;男&quot;</span>,<span class="attr">age</span>:<span class="number">42</span>&#125;],<span class="attr">lastModifiedDate</span>:<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;);</span><br><span class="line"></span><br><span class="line">db.comment.insert(&#123;<span class="attr">_id</span>:<span class="string">&quot;2&quot;</span>,<span class="attr">content</span>:<span class="string">&quot;加班到半夜&quot;</span>,<span class="attr">username</span>:<span class="string">&quot;李  四&quot;</span>,<span class="attr">userid</span>:<span class="string">&quot;1013&quot;</span>,<span class="attr">thumbup</span>:<span class="number">1023</span>,<span class="attr">tags</span>:[<span class="string">&quot;一般&quot;</span>,<span class="string">&quot;不给力&quot;</span>],<span class="attr">tupuser</span>:[&#123;<span class="attr">name</span>:<span class="string">&quot;李二&quot;</span>,<span class="attr">sex</span>:<span class="string">&quot;男&quot;</span>,<span class="attr">age</span>:<span class="number">42</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&quot;李三&quot;</span>,<span class="attr">sex</span>:<span class="string">&quot;女&quot;</span>,<span class="attr">age</span>:<span class="number">12</span>&#125;],<span class="attr">lastModifiedDate</span>:<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;);</span><br><span class="line"></span><br><span class="line">db.comment.insert(&#123;<span class="attr">_id</span>:<span class="string">&quot;3&quot;</span>,<span class="attr">content</span>:<span class="string">&quot;手机流量超了咋办&quot;</span>,<span class="attr">username</span>:<span class="string">&quot;王五&quot;</span>,<span class="attr">userid</span>:<span class="string">&quot;1013&quot;</span>,<span class="attr">thumbup</span>:<span class="number">111</span>,<span class="attr">tags</span>:[<span class="string">&quot;很好&quot;</span>,<span class="string">&quot;给力&quot;</span>],<span class="attr">tupuser</span>:[&#123;<span class="attr">name</span>:<span class="string">&quot;李三&quot;</span>,<span class="attr">sex</span>:<span class="string">&quot;女&quot;</span>,<span class="attr">age</span>:<span class="number">12</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&quot;李四&quot;</span>,<span class="attr">sex</span>:<span class="string">&quot;男&quot;</span>,<span class="attr">age</span>:<span class="number">17</span>&#125;],<span class="attr">lastModifiedDate</span>:<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;);</span><br><span class="line"></span><br><span class="line">db.comment.insert(&#123;<span class="attr">_id</span>:<span class="string">&quot;4&quot;</span>,<span class="attr">content</span>:<span class="string">&quot;坚持就是胜利&quot;</span>,<span class="attr">username</span>:<span class="string">&quot;赵六&quot;</span>,<span class="attr">userid</span>:<span class="string">&quot;1014&quot;</span>,<span class="attr">thumbup</span>:<span class="number">1223</span>,<span class="attr">tags</span>:[<span class="string">&quot;不好&quot;</span>,<span class="string">&quot;说的不对&quot;</span>],<span class="attr">tupuser</span>:[&#123;<span class="attr">name</span>:<span class="string">&quot;李四&quot;</span>,<span class="attr">sex</span>:<span class="string">&quot;男&quot;</span>,<span class="attr">age</span>:<span class="number">17</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&quot;李五&quot;</span>,<span class="attr">sex</span>:<span class="string">&quot;女&quot;</span>,<span class="attr">age</span>:<span class="number">26</span>&#125;],<span class="attr">lastModifiedDate</span>:<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;);</span><br><span class="line"></span><br><span class="line">db.comment.insert(&#123;<span class="attr">_id</span>:<span class="string">&quot;5&quot;</span>,<span class="attr">content</span>:<span class="string">&quot;手机没电了啊&quot;</span>,<span class="attr">username</span>:<span class="string">&quot;李云龙&quot;</span>,<span class="attr">userid</span>:<span class="string">&quot;1014&quot;</span>,<span class="attr">thumbup</span>:<span class="number">923</span>,<span class="attr">tags</span>:[<span class="string">&quot;很好&quot;</span>,<span class="string">&quot;十分认同&quot;</span>],<span class="attr">tupuser</span>:[&#123;<span class="attr">name</span>:<span class="string">&quot;李五&quot;</span>,<span class="attr">sex</span>:<span class="string">&quot;女&quot;</span>,<span class="attr">age</span>:<span class="number">26</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&quot;李六&quot;</span>,<span class="attr">sex</span>:<span class="string">&quot;男&quot;</span>,<span class="attr">age</span>:<span class="number">39</span>&#125;],<span class="attr">lastModifiedDate</span>:<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;);</span><br><span class="line"></span><br><span class="line">db.comment.insert(&#123;<span class="attr">_id</span>:<span class="string">&quot;6&quot;</span>,<span class="attr">content</span>:<span class="string">&quot;这个手机好&quot;</span>,<span class="attr">username</span>:<span class="string">&quot;风清扬&quot;</span>,<span class="attr">userid</span>:<span class="string">&quot;1014&quot;</span>,<span class="attr">thumbup</span>:<span class="number">123</span>,<span class="attr">tags</span>:[<span class="string">&quot;很好&quot;</span>,<span class="string">&quot;十分认同&quot;</span>],<span class="attr">tupuser</span>:[&#123;<span class="attr">name</span>:<span class="string">&quot;李六&quot;</span>,<span class="attr">sex</span>:<span class="string">&quot;男&quot;</span>,<span class="attr">age</span>:<span class="number">39</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&quot;李七&quot;</span>,<span class="attr">sex</span>:<span class="string">&quot;男&quot;</span>,<span class="attr">age</span>:<span class="number">62</span>&#125;],<span class="attr">lastModifiedDate</span>:<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;);</span><br></pre></td></tr></table></figure>

<p>按一定条件来查询，比如查询userid为1013的记录，只要在find()中添加参数即可，参数也是json格式，如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.comment.find(&#123;userid:&#x27;1013&#x27;&#125;)</span><br></pre></td></tr></table></figure>

<p>只需要返回符合条件的第一条数据，我们可以使用findOne命令来实现：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.comment.findOne(&#123;userid:&#x27;1013&#x27;&#125;)</span><br></pre></td></tr></table></figure>

<p>返回指定条数的记录，可以在find方法后调用limit来返回结果，例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.comment.find().limit(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h3 id="修改与删除文档"><a href="#修改与删除文档" class="headerlink" title="修改与删除文档"></a>修改与删除文档</h3><p>修改文档的语法结构：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.集合名称.update(条件,修改后的数据)</span><br></pre></td></tr></table></figure>

<p>修改_id为1的记录，点赞数为1000，输入以下语句：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.comment.update(&#123;_id:&quot;1&quot;&#125;,&#123;thumbup:1000&#125;)</span><br></pre></td></tr></table></figure>

<p>执行后发现，这条文档除了thumbup字段其它字段都不见了。</p>
<p>为了解决这个问题，我们需要使用修改器**$set**来实现，命令如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.comment.update(&#123;_id:&quot;2&quot;&#125;,&#123;$set:&#123;thumbup:2000&#125;&#125;)</span><br></pre></td></tr></table></figure>

<p>删除文档的语法结构：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.集合名称.remove(条件)</span><br></pre></td></tr></table></figure>

<p>以下语句可以将数据全部删除，慎用~</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.comment.remove(&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>删除条件可以放到大括号中，例如删除thumbup为1000的数据，输入以下语句：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.comment.remove(&#123;thumbup:1000&#125;)</span><br></pre></td></tr></table></figure>

<p>###1.4 统计条数</p>
<p>统计记录条件使用count()方法。以下语句统计集合的记录数：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.comment.<span class="built_in">count</span>()</span><br></pre></td></tr></table></figure>

<p>按条件统计 ，例如统计userid为1013的记录条数：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.comment.count(&#123;userid:&quot;1013&quot;&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="1-5-模糊查询"><a href="#1-5-模糊查询" class="headerlink" title="1.5 模糊查询"></a>1.5 模糊查询</h3><p>MongoDB的模糊查询是通过正则表达式的方式实现的。格式为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/模糊查询字符串/</span><br></pre></td></tr></table></figure>

<p>查询评论内容包含“流量”的所有文档，代码如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.comment.find(&#123;content:/流量/&#125;)</span><br></pre></td></tr></table></figure>

<p>查询评论内容中以“加班”开头的，代码如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.comment.find(&#123;content:/^加班/&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="1-6-大于-小于-不等于"><a href="#1-6-大于-小于-不等于" class="headerlink" title="1.6 大于 小于 不等于"></a>1.6 大于 小于 不等于</h3><p>&lt;, &lt;=, &gt;, &gt;= 这个操作符也是很常用的，格式如下:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.集合名称.find(&#123; &quot;field&quot; : &#123; $gt: value &#125;&#125;) // 大于: field &gt; value</span><br><span class="line">db.集合名称.find(&#123; &quot;field&quot; : &#123; $lt: value &#125;&#125;) // 小于: field &lt; value</span><br><span class="line">db.集合名称.find(&#123; &quot;field&quot; : &#123; $gte: value &#125;&#125;) // 大于等于: field &gt;= value</span><br><span class="line">db.集合名称.find(&#123; &quot;field&quot; : &#123; $lte: value &#125;&#125;) // 小于等于: field &lt;= value</span><br><span class="line">db.集合名称.find(&#123; &quot;field&quot; : &#123; $ne: value &#125;&#125;) // 不等于: field != value</span><br></pre></td></tr></table></figure>

<p>查询评论点赞数大于1000的记录：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.comment.find(&#123;thumbup:&#123;$gt:1000&#125;&#125;)</span><br></pre></td></tr></table></figure>

<p>###1.7 包含与不包含</p>
<p>包含使用**$in**操作符</p>
<p>查询评论集合中userid字段包含1013和1014的文档：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.comment.find(&#123;userid:&#123;$in:[&quot;1013&quot;,&quot;1014&quot;]&#125;&#125;)</span><br></pre></td></tr></table></figure>

<p>不包含使用**$nin**操作符</p>
<p>查询评论集合中userid字段不包含1013和1014的文档：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.comment.find(&#123;userid:&#123;$nin:[&quot;1013&quot;,&quot;1014&quot;]&#125;&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="条件连接"><a href="#条件连接" class="headerlink" title="条件连接"></a>条件连接</h3><p>我们如果需要查询同时满足两个以上条件，需要使用<code>**$and**</code>操作符将条件进行关联（相当于SQL的and）。格式为：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">$and:[ &#123;条件&#125;,&#123;条件&#125;,&#123;条件&#125; ]</span><br></pre></td></tr></table></figure>

<p>查询评论集合中thumbup大于等于1000 并且小于2000的文档：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.comment.find(&#123;$and:[ &#123;thumbup:&#123;$gte:1000&#125;&#125; ,&#123;thumbup:&#123;$lt:2000&#125; &#125;]&#125;)</span><br></pre></td></tr></table></figure>

<p>如果两个以上条件之间是或者的关系，我们使用操作符进行关联，与前面and的使用方式相同，格式为：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">$or:[ &#123;条件&#125;,&#123;条件&#125;,&#123;条件&#125; ]</span><br></pre></td></tr></table></figure>

<p>查询评论集合中userid为1013，或者点赞数小于2000的文档记录：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.comment.find(&#123;$or:[ &#123;userid:&quot;1013&quot;&#125; ,&#123;thumbup:&#123;$lt:2000&#125; &#125;]&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="列值增长"><a href="#列值增长" class="headerlink" title="列值增长"></a>列值增长</h3><p>对某列值在原有值的基础上进行增加或减少，可以使用<code>**$inc**</code>运算符：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.comment.update(&#123;_id:&quot;2&quot;&#125;,&#123;$inc:&#123;thumbup:1&#125;&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="索引的使用"><a href="#索引的使用" class="headerlink" title="索引的使用"></a>索引的使用</h2><h3 id="索引简介"><a href="#索引简介" class="headerlink" title="索引简介"></a>索引简介</h3><p>​    索引支持在MongoDB中高效执行查询。没有索引，MongoDB必须执行全表扫描，即扫描集合中的每个文档，以选择与查询语句匹配的那些文档。如果查询存在适当的索引，则MongoDB可以使用该索引来限制它必须检查的文档数。索引是特殊的<a href="https://docs.mongodb.com/manual/indexes/#b-tree">数据结构</a>，它以易于遍历的形式存储集合数据集的一小部分。索引存储一个特定字段或一组字段的值，按该字段的值排序。索引条目的排序支持有效的相等匹配和基于范围的查询操作。另外，MongoDB可以使用索引中的顺序返回排序的结果。</p>
<p>下图说明了使用索引选择和排序匹配文档的查询：</p>
<p>​    <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/index-for-sort.bakedsvg.svg"></p>
<p> 从根本上讲，MongoDB中的索引类似于其他数据库系统中的索引。MongoDB在<a href="https://docs.mongodb.com/manual/reference/glossary/#term-collection">集合</a> 级别定义索引，并支持MongoDB集合中文档的任何字段或子字段的索引。 </p>
<h3 id="索引基本操作"><a href="#索引基本操作" class="headerlink" title="索引基本操作"></a>索引基本操作</h3><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><p><strong>基本语法</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.collection.createIndex(keys, options)</span><br></pre></td></tr></table></figure>

<p>​    <strong>keys</strong>：可写为要配置索引的字段如{“articleid”:1},其中，1 为指定按升序创建索引，如果你想按降序来创建索引指定为 -1 即可。但是字段不能指定为_id，因为该字段默认会创建索引。</p>
<p>​    <strong>注意:</strong> <em>注意在 3.0.0 版本前创建索引方法为 db.collection.ensureIndex()，之后的版本使用了 db.collection.createIndex() 方法，ensureIndex() 还能用，但只是 createIndex() 的别名。</em> </p>
<p>​    <strong>options</strong>：表示创建索引时的设置，这个在索引属性中单独说明：</p>
<p><strong>ex:</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//为articleid字段创建升序索引</span></span><br><span class="line">db.comment.createIndex(&#123;<span class="string">&quot;articleid&quot;</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>也可以创建多个字段的联合索引，比如：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建article升序字段和userid降序字段的联合索引</span></span><br><span class="line">db.comment.createIndex(&#123;<span class="string">&quot;articleid&quot;</span>:<span class="number">1</span>,<span class="string">&quot;userid&quot;</span>:-<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>这种索引只支持：</strong></p>
<p>​    db.comment.find().sort({“articleid”:1,”userid”:-1})或者db.comment.find().sort({“articleid”:-1,”userid”:1})的查询使用该索引，其他情况如db.comment.find().sort({“articleid”:1,”userid”:1})则不能使用，这种情景和关系型数据库中的联合索引表现是一致的。 有关排序顺序和复合索引的更多信息，请参见 <a href="https://docs.mongodb.com/manual/tutorial/sort-results-with-indexes/">使用索引对查询结果进行排序</a>。 </p>
<h4 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h4><p>查看当前数据库中该集合的所有索引</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.comment.getIndexes()</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.comment.aggregate( [ &#123; <span class="attr">$indexStats</span>: &#123; &#125; &#125; ] )</span><br></pre></td></tr></table></figure>

<h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><p>删除所有索引</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.comment.dropIndexes() </span><br></pre></td></tr></table></figure>

<p>删除指定索引</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.comment.dropIndex(索引名称)</span><br></pre></td></tr></table></figure>

<h4 id="修改索引"><a href="#修改索引" class="headerlink" title="修改索引"></a>修改索引</h4><p> 要修改现有索引，您需要删除并重新创建索引。<a href="https://docs.mongodb.com/manual/core/index-ttl/">TTL索引</a>是此规则的例外 ，可以通过<a href="https://docs.mongodb.com/manual/reference/command/collMod/#dbcmd.collMod"><code>collMod</code></a>命令与<a href="https://docs.mongodb.com/manual/reference/command/collMod/#index"><code>index</code></a>收集标志一起 修改<a href="https://docs.mongodb.com/manual/core/index-ttl/">TTL索引</a>。 </p>
<h3 id="索引属性"><a href="#索引属性" class="headerlink" title="索引属性"></a>索引属性</h3><p>索引属性参数列表：</p>
<table>
<thead>
<tr>
<th align="left">Parameter</th>
<th align="left">Type</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">background</td>
<td align="left">Boolean</td>
<td align="left">建索引过程会阻塞其它数据库操作，background可指定以后台方式创建索引，即增加 “background” 可选参数。 “background” 默认值为<strong>false</strong>。</td>
</tr>
<tr>
<td align="left">unique</td>
<td align="left">Boolean</td>
<td align="left">建立的索引是否唯一。指定为true创建唯一索引。默认值为<strong>false</strong>.</td>
</tr>
<tr>
<td align="left">name</td>
<td align="left">string</td>
<td align="left">索引的名称。如果未指定，MongoDB的通过连接索引的字段名和排序顺序生成一个索引名称。</td>
</tr>
<tr>
<td align="left">dropDups</td>
<td align="left">Boolean</td>
<td align="left"><strong>3.0+版本已废弃。</strong>在建立唯一索引时是否删除重复记录,指定 true 创建唯一索引。默认值为 <strong>false</strong>.</td>
</tr>
<tr>
<td align="left">sparse</td>
<td align="left">Boolean</td>
<td align="left">对文档中不存在的字段数据不启用索引；这个参数需要特别注意，如果设置为true的话，在索引字段中不会查询出不包含对应字段的文档.。默认值为 <strong>false</strong>.</td>
</tr>
<tr>
<td align="left">expireAfterSeconds</td>
<td align="left">integer</td>
<td align="left">指定一个以秒为单位的数值，完成 TTL设定，设定集合的生存时间。</td>
</tr>
<tr>
<td align="left">v</td>
<td align="left">index version</td>
<td align="left">索引的版本号。默认的索引版本取决于mongod创建索引时运行的版本。</td>
</tr>
<tr>
<td align="left">weights</td>
<td align="left">document</td>
<td align="left">索引权重值，数值在 1 到 99,999 之间，表示该索引相对于其他索引字段的得分权重。</td>
</tr>
<tr>
<td align="left">default_language</td>
<td align="left">string</td>
<td align="left">对于文本索引，该参数决定了停用词及词干和词器的规则的列表。 默认为英语</td>
</tr>
<tr>
<td align="left">language_override</td>
<td align="left">string</td>
<td align="left">对于文本索引，该参数指定了包含在文档中的字段名，语言覆盖默认的language，默认值为 language.</td>
</tr>
</tbody></table>
<h4 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h4><p> 唯一索引可确保索引字段不会存储重复值；即对索引字段实施唯一性。默认情况下， 在创建集合期间，MongoDB在<a href="https://docs.mongodb.com/manual/core/document/#document-id-field">_id</a>字段上创建唯一索引。 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建articleid字段的唯一索引</span></span><br><span class="line">db.comment.createIndex(&#123;<span class="string">&quot;userId&quot;</span>:<span class="number">1</span>&#125;,&#123; <span class="attr">unique</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure>

<p>和mysql一样，复合索引也可创建为唯一索引</p>
<h4 id="部分索引"><a href="#部分索引" class="headerlink" title="部分索引"></a>部分索引</h4><p><em>3.2版中的新功能。</em></p>
<p><a href="https://docs.mongodb.com/manual/core/index-partial/">部分索引</a>仅索引集合中符合指定过滤器表达式的文档。通过索引集合中文档的子集，部分索引具有较低的存储需求，并降低了索引创建和维护的性能成本。</p>
<p> 要创建部分索引，请将该 <a href="https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/#db.collection.createIndex"><code>db.collection.createIndex()</code></a>方法与 <code>partialFilterExpression</code>选项一起使用。该<code>partialFilterExpression</code> 选项接受使用以下命令指定过滤条件的文档</p>
<ul>
<li>等式表达式（即或使用 运算符），<code>field: value</code><a href="https://docs.mongodb.com/manual/reference/operator/query/eq/#op._S_eq"><code>$eq</code></a></li>
<li><a href="https://docs.mongodb.com/manual/reference/operator/query/exists/#op._S_exists"><code>$exists: true</code></a> 表达，</li>
<li><a href="https://docs.mongodb.com/manual/reference/operator/query/gt/#op._S_gt"><code>$gt</code></a>，<a href="https://docs.mongodb.com/manual/reference/operator/query/gte/#op._S_gte"><code>$gte</code></a>，<a href="https://docs.mongodb.com/manual/reference/operator/query/lt/#op._S_lt"><code>$lt</code></a>，<a href="https://docs.mongodb.com/manual/reference/operator/query/lte/#op._S_lte"><code>$lte</code></a>表达，</li>
<li><a href="https://docs.mongodb.com/manual/reference/operator/query/type/#op._S_type"><code>$type</code></a> 表达式，</li>
<li><a href="https://docs.mongodb.com/manual/reference/operator/query/and/#op._S_and"><code>$and</code></a> 仅限顶级运营商</li>
</ul>
<p>ex:只给该集合点赞数大于900的评论的thumbup字段创建索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.comment.createIndex(</span><br><span class="line">   &#123; thumbup: 1&#125;,</span><br><span class="line">   &#123; partialFilterExpression: &#123; thumbup: &#123; $gt: 900 &#125; &#125; &#125;</span><br><span class="line">) </span><br></pre></td></tr></table></figure>

<h4 id="TTL指数"><a href="#TTL指数" class="headerlink" title="TTL指数"></a>TTL指数</h4><p>​    TTL索引是特殊的单字段索引，MongoDB可以使用它们在一定时间后或在特定时间自动从集合中删除文档。数据到期对于某些类型的信息很有用，例如机器生成的事件数据，日志和会话信息，它们仅需要在数据库中保留有限的时间。</p>
<p>​    要创建TTL索引，请将该<a href="https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/#db.collection.createIndex"><code>db.collection.createIndex()</code></a> 方法与<code>expireAfterSeconds</code>选项结合使用，该方法的值（索引字段类型）是<a href="https://docs.mongodb.com/manual/reference/bson-types/#document-bson-type-date">日期</a>或包含<a href="https://docs.mongodb.com/manual/reference/bson-types/#document-bson-type-date">日期值</a>的数组。ex:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当前时间如果在lastModifiedDate的10s之后，则标记该文档过期</span></span><br><span class="line">db.comment.createIndex(&#123;<span class="string">&quot;lastModifiedDate&quot;</span>:<span class="number">1</span>&#125;,&#123;<span class="attr">expireAfterSeconds</span>:<span class="number">10</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>mongo后台的TTL线程会每隔60s删除一次被ttl索引标记为过期的文档</p>
<h3 id="索引分析"><a href="#索引分析" class="headerlink" title="索引分析"></a>索引分析</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对查询进行分析</span></span><br><span class="line">db.comment.find().explain()</span><br></pre></td></tr></table></figure>

<ul>
<li><p>作用和mysql的explain关键字一样都是用来分析执行计划的</p>
</li>
<li><p>queryPlanner：执行计划</p>
<ul>
<li>winningPlan：竞争成功的计划<ul>
<li>如果该计划使用了索引，会有以下参数<ul>
<li>indexName：索引名称</li>
<li>isMultiKey：是否为多键索引</li>
<li>isUnique：是否唯一索引</li>
<li>isSparse：是否是稀疏索引</li>
<li>isPartial：是否是部分索引</li>
</ul>
</li>
<li>如果没有以上参数，表示没有使用索引</li>
</ul>
</li>
<li>rejectedPlans：竞争失败的计划</li>
</ul>
</li>
</ul>
<h2 id="mongo聚合查询"><a href="#mongo聚合查询" class="headerlink" title="mongo聚合查询"></a>mongo聚合查询</h2><p>MongoDB的<a href="https://docs.mongodb.com/manual/core/aggregation-pipeline/">聚合框架</a>以数据处理管道的概念为模型。文档进入多阶段流水线，该流水线将文档转换成汇总结果。例如：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200831174430522.png" alt="image-20200831174430522"></p>
<p> 在这个例子中 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.orders.aggregate([</span><br><span class="line">   &#123; <span class="attr">$match</span>: &#123; <span class="attr">status</span>: <span class="string">&quot;A&quot;</span> &#125; &#125;,</span><br><span class="line">   &#123; <span class="attr">$group</span>: &#123; <span class="attr">_id</span>: <span class="string">&quot;$cust_id&quot;</span>, <span class="attr">total</span>: &#123; <span class="attr">$sum</span>: <span class="string">&quot;$amount&quot;</span> &#125; &#125; &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<p> <strong>第一阶段</strong>：<a href="https://docs.mongodb.com/manual/reference/operator/aggregation/match/#pipe._S_match"><code>$match</code></a>阶段按<code>status</code>字段过滤文档，并将<code>status</code>等于的文档传递到下一阶段<code>&quot;A&quot;</code>。 </p>
<p> <strong>第二阶段</strong>：该<a href="https://docs.mongodb.com/manual/reference/operator/aggregation/group/#pipe._S_group"><code>$group</code></a>阶段按<code>cust_id</code>字段将文档分组，以计算每个唯一值的总和<code>cust_id</code>。 </p>
<p>最基本的管道阶段提供<em>过滤器</em>，其操作类似于查询和修改输出文档形式的<em>文档转换</em>。</p>
<p>其他管道操作提供了用于按特定字段对文档进行分组和排序的工具，以及用于聚合包括文档数组在内的数组内容的工具。另外，管道阶段可以将<a href="https://docs.mongodb.com/manual/reference/operator/aggregation/#aggregation-expression-operators">运算符</a>用于诸如计算平均值或连接字符串之类的任务。</p>
<p>管道使用MongoDB中的本机操作提供有效的数据聚合，并且是MongoDB中数据聚合的首选方法。</p>
<p>聚合管道可以操作 <a href="https://docs.mongodb.com/manual/sharding/">分片集合</a>。</p>
<p>聚合管道可以在某些阶段使用索引来提高其性能。另外，聚合管道具有内部优化阶段。有关详细信息，请参见<a href="https://docs.mongodb.com/manual/core/aggregation-pipeline/#aggregation-pipeline-operators-and-performance">管道运算符和索引</a>以及 <a href="https://docs.mongodb.com/manual/core/aggregation-pipeline-optimization/">聚合管道优化</a>。</p>
<p>ex:<strong>获取当前点赞数大于200并统计用户的总点赞数</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.comment.aggregate([</span><br><span class="line">   &#123; <span class="attr">$match</span>: &#123; <span class="attr">thumbup</span>: &#123;<span class="attr">$gt</span>:<span class="number">200</span>&#125; &#125; &#125;,</span><br><span class="line">   &#123; <span class="attr">$group</span>: &#123; <span class="attr">_id</span>: <span class="string">&quot;$userid&quot;</span>, <span class="attr">total</span>: &#123; <span class="attr">$sum</span>: <span class="string">&quot;$thumbup&quot;</span> &#125; &#125; &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<h2 id="mongodb-driver使用"><a href="#mongodb-driver使用" class="headerlink" title="mongodb-driver使用"></a>mongodb-driver使用</h2><p>​    mongodb-driver是mongo官方推出的java连接mongoDB的驱动包，相当于JDBC驱动。我们现在来使用mongodb-driver完成对Mongodb的操作。</p>
<p>添加以下依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mongodb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mongodb-driver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用步骤:</p>
<ol>
<li>创建客户端连接 mongoclient</li>
<li>获取数据库</li>
<li>获取集合</li>
<li>操作集合</li>
</ol>
<h3 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建连接</span></span><br><span class="line">    MongoClient client = <span class="keyword">new</span> MongoClient(<span class="string">&quot;192.168.184.136&quot;</span>);</span><br><span class="line">    <span class="comment">//打开数据库</span></span><br><span class="line">    MongoDatabase commentdb = client.getDatabase(<span class="string">&quot;commentdb&quot;</span>);</span><br><span class="line">    <span class="comment">//获取集合</span></span><br><span class="line">    MongoCollection&lt;Document&gt; comment = commentdb.getCollection(<span class="string">&quot;comment&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询</span></span><br><span class="line">    FindIterable&lt;Document&gt; documents = comment.find();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询记录获取文档集合</span></span><br><span class="line">    <span class="keyword">for</span> (Document document : documents) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;_id：&quot;</span> + document.get(<span class="string">&quot;_id&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;内容：&quot;</span> + document.get(<span class="string">&quot;content&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;用户ID:&quot;</span> + document.get(<span class="string">&quot;userid&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;点赞数：&quot;</span> + document.get(<span class="string">&quot;thumbup&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭连接</span></span><br><span class="line">    client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="根据-id查询"><a href="#根据-id查询" class="headerlink" title="根据_id查询"></a>根据_id查询</h3><p>每次使用都要用到MongoCollection，进行抽取：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> MongoClient client;</span><br><span class="line"><span class="keyword">private</span> MongoCollection&lt;Document&gt; comment;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建连接</span></span><br><span class="line">    client =<span class="keyword">new</span> MongoClient(<span class="string">&quot;192.168.184.136&quot;</span>);</span><br><span class="line">    <span class="comment">//打开数据库</span></span><br><span class="line">    MongoDatabase commentdb = client.getDatabase(<span class="string">&quot;commentdb&quot;</span>);</span><br><span class="line">    <span class="comment">//获取集合</span></span><br><span class="line">    comment = commentdb.getCollection(<span class="string">&quot;comment&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@After</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    client.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试根据_id查询：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    FindIterable&lt;Document&gt; documents = comment.find(<span class="keyword">new</span> BasicDBObject(<span class="string">&quot;_id&quot;</span>, <span class="string">&quot;1&quot;</span>));</span><br><span class="line">    <span class="keyword">for</span> (Document document : documents) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;_id：&quot;</span> + document.get(<span class="string">&quot;_id&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;内容：&quot;</span> + document.get(<span class="string">&quot;content&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;用户ID:&quot;</span> + document.get(<span class="string">&quot;userid&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;点赞数：&quot;</span> + document.get(<span class="string">&quot;thumbup&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDoc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; info = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    info.put(<span class="string">&quot;_id&quot;</span>, <span class="string">&quot;8&quot;</span>);</span><br><span class="line">    info.put(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;很棒！&quot;</span>);</span><br><span class="line">    info.put(<span class="string">&quot;userid&quot;</span>, <span class="string">&quot;9999&quot;</span>);</span><br><span class="line">    info.put(<span class="string">&quot;thumbup&quot;</span>, <span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">    Document document = <span class="keyword">new</span> Document(info);</span><br><span class="line">    comment.insertOne(document);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-修改"><a href="#1-4-修改" class="headerlink" title="1.4 修改"></a>1.4 修改</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//条件</span></span><br><span class="line">    Bson condition = <span class="keyword">new</span> BasicDBObject(<span class="string">&quot;_id&quot;</span>,<span class="string">&quot;8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Bson update = <span class="keyword">new</span> BasicDBObject(<span class="string">&quot;$set&quot;</span>,<span class="keyword">new</span> Document(<span class="string">&quot;userid&quot;</span>,<span class="string">&quot;6666&quot;</span>));</span><br><span class="line"></span><br><span class="line">    comment.updateOne(condition,update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Bson condition = <span class="keyword">new</span> BasicDBObject(<span class="string">&quot;_id&quot;</span>,<span class="string">&quot;8&quot;</span>);</span><br><span class="line">    comment.deleteOne(condition);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB数据库02--SpringDataMongoDB</title>
    <url>/jwangcloud/376953633/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/MongoDB.jpeg" width="1000" height="200" align="middle">


<h2 id="开发准备"><a href="#开发准备" class="headerlink" title="开发准备"></a>开发准备</h2><span id="more"></span>

<p>​    SpringDataMongoDB是SpringData家族成员之一，用于操作MongoDb的持久层框架，封装了底层的==mongodb-driver==。本功能使用SpringDataMongoDB进行开发</p>
<p>步骤:</p>
<ol>
<li><p>创建maven项目</p>
</li>
<li><p>添加SpringDataMongoDB起步依赖 </p>
</li>
<li><p>在application.yml里面配置MongoDB</p>
</li>
<li><p>创建pojo(和集合对应)</p>
<ol>
<li>@Document(collection=”集合名称”)</li>
<li>@Id标记主键</li>
</ol>
</li>
<li><p>创建一个Dao接口继承MongoRepository</p>
</li>
</ol>
<ul>
<li>添加依赖：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>添加配置文件：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">mongodb:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.131</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line">      <span class="attr">database:</span> <span class="string">commentdb</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建实体类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Document(collection = &quot;comment&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Comment</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String _id;</span><br><span class="line">    <span class="keyword">private</span> String articleid;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> String userid;</span><br><span class="line">    <span class="keyword">private</span> String parentid;</span><br><span class="line">    <span class="keyword">private</span> Date publishdate;</span><br><span class="line">    <span class="keyword">private</span> Integer thumbup;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CRUD实现"><a href="#CRUD实现" class="headerlink" title="CRUD实现"></a>CRUD实现</h2><h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><ul>
<li>CommentRepository</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CommentRepository</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">Comment</span>,<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>CommentService</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IdWorker idWorker;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommentRepository commentRepository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Comment comment)</span> </span>&#123;</span><br><span class="line">        String id = idWorker.nextId() + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        comment.set_id(id);</span><br><span class="line">        <span class="comment">//初始化数据</span></span><br><span class="line">        comment.setPublishdate(<span class="keyword">new</span> Date());</span><br><span class="line">        comment.setThumbup(<span class="number">0</span>);</span><br><span class="line">        commentRepository.save(comment);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>业务: </p>
<ol>
<li>主键删除</li>
</ol>
<ul>
<li>CommentService</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    commentRepository.deleteById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><ul>
<li>CommentService</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Comment comment)</span> </span>&#123;</span><br><span class="line">    commentRepository.save(comment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方式的缺陷就是会覆盖原本的数据，应该只修改要修改的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateInfo</span><span class="params">(Comment comment)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Query condition = <span class="keyword">new</span> Query();</span><br><span class="line">    condition.addCriteria(<span class="keyword">new</span> Criteria(<span class="string">&quot;_id&quot;</span>).is(comment.get_id()));</span><br><span class="line"></span><br><span class="line">    Update update = <span class="keyword">new</span> Update();</span><br><span class="line">    update.set(<span class="string">&quot;content&quot;</span>,<span class="string">&quot;66666666&quot;</span>);</span><br><span class="line">    mongoTemplate.updateFirst(condition,update,<span class="string">&quot;comment&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h3><ul>
<li>CommentService</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Comment&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> commentRepository.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="根据id查询"><a href="#根据id查询" class="headerlink" title="根据id查询"></a>根据id查询</h3><ul>
<li>CommentService</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Comment <span class="title">findById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> commentRepository.findById(id).get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取当前点赞数大于200并统计用户的总点赞数"><a href="#获取当前点赞数大于200并统计用户的总点赞数" class="headerlink" title="获取当前点赞数大于200并统计用户的总点赞数"></a>获取当前点赞数大于200并统计用户的总点赞数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Map&gt; <span class="title">findTotalThumbupByUserId</span><span class="params">()</span></span>&#123;</span><br><span class="line">    TypedAggregation&lt;Comment&gt; commentTypedAggregation = Aggregation.newAggregation(Comment.class,</span><br><span class="line">                                                                                   Aggregation.match(Criteria.where(<span class="string">&quot;thumbup&quot;</span>).gt(<span class="number">200</span>)),</span><br><span class="line">                                                                                   Aggregation.group(<span class="string">&quot;userid&quot;</span>).sum(<span class="string">&quot;thumbup&quot;</span>).as(<span class="string">&quot;sum&quot;</span>));</span><br><span class="line">    </span><br><span class="line">    AggregationResults&lt;Map&gt; aggregate = mongoTemplate.aggregate(commentTypedAggregation, mongoTemplate.getCollectionName(Comment.class), Map.class);</span><br><span class="line">    <span class="keyword">return</span> aggregate.getMappedResults();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="按照点赞数排序，查询前3条评论"><a href="#按照点赞数排序，查询前3条评论" class="headerlink" title="按照点赞数排序，查询前3条评论"></a>按照点赞数排序，查询前3条评论</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> current;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pages;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PageResult&lt;Comment&gt; <span class="title">findByPage</span><span class="params">(<span class="keyword">int</span> current,<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Sort sort = Sort.by(Sort.Direction.DESC,<span class="string">&quot;thumbup&quot;</span>);</span><br><span class="line">    Query query = <span class="keyword">new</span> Query();</span><br><span class="line">    <span class="keyword">long</span> total = mongoTemplate.count(query, Comment.class);</span><br><span class="line">    <span class="keyword">int</span> offset=(current-<span class="number">1</span>)*size;</span><br><span class="line"></span><br><span class="line">    List&lt;Comment&gt; list = mongoTemplate.find(query.with(sort).limit(size).skip(offset),</span><br><span class="line">                                            Comment.class,</span><br><span class="line">                                            mongoTemplate.getCollectionName(Comment.class));</span><br><span class="line"></span><br><span class="line">    PageResult&lt;Comment&gt; pageResult = <span class="keyword">new</span> PageResult&lt;&gt;();</span><br><span class="line">    pageResult.setCurrent(current);</span><br><span class="line">    pageResult.setData(list);</span><br><span class="line">    pageResult.setPages((<span class="keyword">int</span>)(total/size)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> pageResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SpringDataMongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql数据库03--事务</title>
    <url>/jwangcloud/864966898/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/mysql.jpeg" width="1000" height="200" align="middle">

<h3 id="mysql隔离级别"><a href="#mysql隔离级别" class="headerlink" title="mysql隔离级别"></a>mysql隔离级别</h3><span id="more"></span>

<p>隔离级别是mysql进行事务提交的时候,对数据的一种表现形式</p>
<h4 id="1-事务的基本要素（ACID）"><a href="#1-事务的基本要素（ACID）" class="headerlink" title="1. 事务的基本要素（ACID）"></a>1. 事务的基本要素（ACID）</h4><p>1.1 原子性（Atomicity）：</p>
<p>事务开始后所有操作，要么全部做完，要么全部不做，不可能停滞在中间环节。事务执行过程中出错，会回滚到事务开始前的状态，所有的操作就像没有发生一样。也就是说事务是一个不可分割的整体，就像化学中学过的原子，是物质构成的基本单位。</p>
<p>1.2 一致性（Consistency）：</p>
<p>事务开始前和结束后，数据库的完整性约束没有被破坏 。比如A向B转账，不可能A扣了钱，B却没收到。</p>
<p>1.3 隔离性（Isolation）：</p>
<p>同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如A正在从一张银行卡中取钱，在A取钱的过程结束前，B不能向这张卡转账。</p>
<p>1.4 持久性（Durability）：</p>
<p>事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚。</p>
<h4 id="2-事务的操作方式"><a href="#2-事务的操作方式" class="headerlink" title="2. 事务的操作方式"></a>2. 事务的操作方式</h4><p>提交使用commit 回滚使用 rollback</p>
<pre><code>begin

&#39;&#39;&#39;&#39;&#39;语句快

commit
</code></pre>
<h4 id="3-事务的并发问题"><a href="#3-事务的并发问题" class="headerlink" title="3.事务的并发问题"></a>3.事务的并发问题</h4><p>3.1 脏读：事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</p>
<p>3.2 不可重复读：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果 不一致。</p>
<p>3.3 幻读：系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</p>
<table>
<thead>
<tr>
<th align="center">事物隔离级别</th>
<th align="center">胀读</th>
<th align="center">不可重复读</th>
<th align="center">幻读</th>
</tr>
</thead>
<tbody><tr>
<td align="center">读未提交（read-uncommitted）</td>
<td align="center">是</td>
<td align="center">是</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">不可重复读（read-committed）</td>
<td align="center">否</td>
<td align="center">是</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">可重复读（repeatable-read）</td>
<td align="center">否</td>
<td align="center">否</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">串行化（serializable）</td>
<td align="center">否</td>
<td align="center">否</td>
<td align="center">否</td>
</tr>
</tbody></table>
<p>3.4 语句实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">说明: 我们使用a,b两个端 a负责开启事务,并且修改数据。b负责开启事务,并且在a执行事务的时候不断去获取数</span><br><span class="line">	  据。以此研究数据的影响.a先执行,因为a需要去修改数据,所以a要首先获取到锁才行</span><br><span class="line"></span><br><span class="line">1.脏读:</span><br><span class="line">首先在b中去设置隔离级别</span><br><span class="line">a客户端</span><br><span class="line">	start transaction</span><br><span class="line">	update &#96;Employee&#96; set Name&#x3D;&#39;test2&#39; where Id&#x3D;1</span><br><span class="line">b客户端</span><br><span class="line">	set session transaction isolation level read uncommitted</span><br><span class="line">	start transaction</span><br><span class="line">	select * from &#96;Employee&#96;</span><br><span class="line">可以看到a中修改的数据,b中已经可以查看到,但是a的数据并没有commit,b读取到了a还没有提交上</span><br><span class="line">去的脏数据,称为脏读</span><br><span class="line"></span><br><span class="line">2.不可复读:</span><br><span class="line">a客户端</span><br><span class="line">	start transaction</span><br><span class="line">	update &#96;Employee&#96; set Name&#x3D;&#39;test2&#39; where Id&#x3D;1</span><br><span class="line">b客户端</span><br><span class="line">	set session transaction isolation level read committed</span><br><span class="line">	start transaction</span><br><span class="line">	select * from &#96;Employee&#96;</span><br><span class="line">这时候再去查看数据就不会出现脏读的情况,但是在a提交之后,再使用b去查看的话就会有一定的问题</span><br><span class="line"></span><br><span class="line">a客户端</span><br><span class="line">	commit</span><br><span class="line">b客户端</span><br><span class="line">	select * from &#96;Employee&#96;</span><br><span class="line">这时候b的中表的数据就变了,虽然没有脏读的情况,但是b中的数据两次不一样, 所以称之为不可复读</span><br><span class="line"></span><br><span class="line">3.幻读:</span><br><span class="line">a客户端</span><br><span class="line">	start transaction</span><br><span class="line">	update &#96;Employee&#96; set Name&#x3D;&#39;test2&#39; where Id&#x3D;1</span><br><span class="line">b客户端</span><br><span class="line">	set session transaction isolation level REPEATABLE read</span><br><span class="line">	start transaction</span><br><span class="line">	select * from &#96;Employee&#96;</span><br><span class="line">这个时候,b中查看的数据没有没有问题,他看到的一直都是老数据。这里使用了mvvc技术</span><br><span class="line"></span><br><span class="line">a客户端</span><br><span class="line">	commit</span><br><span class="line">b客户端</span><br><span class="line">	select * from &#96;Employee&#96;</span><br><span class="line">但是有一个问题,当a表去Insert一条数据数据并且commit了之后,b去select的时候就会看到a表中新加的数据,就像幻读</span><br><span class="line">一样,多出了一条数据来</span><br><span class="line"></span><br><span class="line">a</span><br><span class="line">	start transaction</span><br><span class="line">	insert into &#96;Employee&#96; (name,id)value(&#39;test&#39;,10</span><br><span class="line">	commit</span><br><span class="line">为了避免这个问题,b可以设置</span><br><span class="line">	set session transaction isolation level serializable</span><br><span class="line">在a操作事务的时候,b操作事务会一直卡住,直到a表操作完成b才能去select操作，这就是串行化</span><br><span class="line"></span><br><span class="line">4. mysql默认的级别是不可复读</span><br></pre></td></tr></table></figure>


<p>3.5 不可重复读 和 幻读</p>
<p>不可复读是针对同一条数据两次读取会有变化 幻读是说当select到数据id=9的时候,这个时候我们可以去插入id=10的数据,但是其他的事务已经插入了id=10的记录,这个时候就会报错。但是从本事务的观点来看id为10的东西是不存在的。所以就想有幻觉一样,称为幻读。</p>
<p>其实对于 幻读, MySQL的InnoDB引擎默认的RR级别已经通过MVCC自动帮我们(部分)解决了。因为当其他事务增加一条数据的时候。我们两次执行查询语句结果都是一样的。这是使用了mvcc模式来实现的,在RR模式下面，事务每次读取的都是一个快照。同一个事务中每次都读取同一份快照。所以就算数据更新了。读的也是老数据</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql数据库事务</tag>
      </tags>
  </entry>
  <entry>
    <title>集群高可用--redis</title>
    <url>/jwangcloud/2097771556/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="集群高可用"><a href="#集群高可用" class="headerlink" title="集群高可用"></a>集群高可用</h1><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/redis.jpeg" width="1000" height="200" align="middle">

<h2 id="集群概述"><a href="#集群概述" class="headerlink" title="集群概述"></a>集群概述</h2><h3 id="什么是集群"><a href="#什么是集群" class="headerlink" title="什么是集群"></a>什么是集群</h3><h4 id="集群概念"><a href="#集群概念" class="headerlink" title="集群概念"></a>集群概念</h4><p>集群是一种计算机系统， 它通过一组松散集成的计算机软件和/或硬件连接起来高度紧密地协作完成计算工作。在某种意义上，他们可以被看作是一台计算机。集群系统中的单个计算机通常称为节点，通常通过局域网连接，但也有其它的可能连接方式。集群计算机通常用来改进单个计算机的计算速度和/或可靠性。一般情况下集群计算机比单个计算机，比如工作站或超级计算机性能价格比要高得多。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1553819096449.png" alt="1553819096449"></p>
<h4 id="集群的特点"><a href="#集群的特点" class="headerlink" title="集群的特点"></a>集群的特点</h4><p>集群拥有以下两个特点：</p>
<ol>
<li>可扩展性：集群的性能不限制于单一的服务实体，新的服务实体可以动态的添加到集群，从而增强集群的性能。</li>
<li>高可用性：集群当其中一个节点发生故障时，这台节点上面所运行的应用程序将在另一台节点被自动接管，消除单点故障对于增强数据可用性、可达性和可靠性是非常重要的。</li>
</ol>
<h4 id="集群的两大能力"><a href="#集群的两大能力" class="headerlink" title="集群的两大能力"></a>集群的两大能力</h4><p>集群必须拥有以下两大能力：</p>
<ol>
<li>负载均衡：负载均衡把任务比较均匀的分布到集群环境下的计算和网络资源，以提高数据吞吐量。</li>
<li>错误恢复：如果集群中的某一台服务器由于故障或者维护需要无法使用，资源和应用程序将转移到可用的集群节点上。这种由于某个节点的资源不能工作，另一个可用节点中的资源能够透明的接管并继续完成任务的过程，叫做错误恢复。</li>
</ol>
<p>负载均衡和错误恢复要求各服务实体中有执行同一任务的资源存在，而且对于同一任务的各个资源来说，执行任务所需的信息视图必须是相同的。</p>
<h3 id="集群与分布式的区别"><a href="#集群与分布式的区别" class="headerlink" title="集群与分布式的区别"></a>集群与分布式的区别</h3><p>说到集群，可能大家会立刻联想到另一个和它很相近的一个词—-“分布式”。那么集群和分布式是一回事吗？有什么联系和区别呢?</p>
<p>相同点：</p>
<p>分布式和集群都是需要有很多节点服务器通过网络协同工作完成整体的任务目标。</p>
<p>不同点：</p>
<p>分布式是指将业务系统进行拆分，即分布式的每一个节点都是实现不同的功能。而集群每个节点做的是同一件事情。</p>
<p>如下图，每个人都有不同的分工，一起协作干一件事，叫做“分布式”</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1553819130753.png" alt="1553819130753"></p>
<p>再看下图：每个划桨人干的都是一样的活，叫做集群。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1553999551061.png" alt="1553999551061"></p>
<p>分布式的每一个节点也可以做成集群。其实这个赛龙舟的图，总整体来看属于分布式,包括打鼓和划桨两个分布式节点，而划桨的节点又是集群的形态。</p>
<h2 id="Eureka集群"><a href="#Eureka集群" class="headerlink" title="Eureka集群"></a>Eureka集群</h2><h3 id="Eureka简介"><a href="#Eureka简介" class="headerlink" title="Eureka简介"></a>Eureka简介</h3><h4 id="什么是Eureka"><a href="#什么是Eureka" class="headerlink" title="什么是Eureka"></a>什么是Eureka</h4><p>​    Eureka是一种基于REST（Representational State Transfer）的服务，主要用于AWS，用于定位服务，以实现中间层服务器的负载平衡和故障转移。我们将此服务称为Eureka Server。Eureka还附带了一个基于Java的客户端组件Eureka Client，它使与服务的交互变得更加容易。客户端还有一个内置的负载均衡器，可以进行基本的循环负载均衡。在Netflix，一个更复杂的负载均衡器包装Eureka，根据流量，资源使用，错误条件等多种因素提供加权负载平衡，以提供卓越的弹性。</p>
<p>理解：</p>
<p>​    Eureka是一个服务注册与发现的注册中心。类似于dubbo中的zookeeper.</p>
<p>官网地址：</p>
<p>​         <a href="https://github.com/Netflix/eureka/wiki/Eureka-at-a-glance">https://github.com/Netflix/eureka/wiki/Eureka-at-a-glance</a></p>
<h5 id="Eureka的架构"><a href="#Eureka的架构" class="headerlink" title="Eureka的架构"></a>Eureka的架构</h5><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1558513888400.png" alt="1558513888400"></p>
<p>application Service :相当于服务提供者</p>
<p>application Client :相当于服务消费者</p>
<p>make remote call :服务调用过程</p>
<p>us-east-1c d e 都是region:us-east-1 的可用区域。</p>
<p>简单可以理解为：</p>
<p>​     每一个erurak都是一个节点，默认启动时就是以集群的方式。</p>
<p>区别：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">erurak:集群，各个节点的数据一致，各个节点都属于同等级别的注册中心，不存在leader的概念。</span><br><span class="line">zookeeper：Zookeeper集群存在Leader节点，并且会进行Leader选举，Leader具有最高权限。</span><br></pre></td></tr></table></figure>



<h3 id="搭建Eureka集群"><a href="#搭建Eureka集群" class="headerlink" title="搭建Eureka集群"></a>搭建Eureka集群</h3><p>配置host文件<code>C:\Windows\System32\drivers\etc\hosts</code>文件，添加映射</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1 eureka-server1</span><br><span class="line">127.0.0.1 eureka-server2</span><br><span class="line">127.0.0.1 eureka-server3</span><br></pre></td></tr></table></figure>



<h4 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h4><p>第1台application.yml:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">port</span>: <span class="string">8761</span></span><br><span class="line"><span class="attr">eureka</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">instance</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">hostname</span>: <span class="string">eureka-server1</span></span><br><span class="line">  <span class="attr">client</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">register-with-eureka</span>: <span class="string">false</span></span><br><span class="line">    <span class="meta">fetch-registry</span>: <span class="string">false</span></span><br><span class="line">    <span class="meta">service-url</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">defaultZone</span>: <span class="string">http://eureka-server2:8762/eureka/,http://eureka-server3:8763/eureka/</span></span><br></pre></td></tr></table></figure>

<p>第2台application.yml</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">port</span>: <span class="string">8762</span></span><br><span class="line"><span class="attr">eureka</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">instance</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">hostname</span>: <span class="string">eureka-server2</span></span><br><span class="line">  <span class="attr">client</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">register-with-eureka</span>: <span class="string">false</span></span><br><span class="line">    <span class="meta">fetch-registry</span>: <span class="string">false</span></span><br><span class="line">    <span class="meta">service-url</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">defaultZone</span>: <span class="string">http://eureka-server1:8761/eureka/,http://eureka-server3:8763/eureka/</span></span><br></pre></td></tr></table></figure>

<p>第3台application.yml配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">port</span>: <span class="string">8763</span></span><br><span class="line"><span class="attr">eureka</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">instance</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">hostname</span>: <span class="string">eureka-server3</span></span><br><span class="line">  <span class="attr">client</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">register-with-eureka</span>: <span class="string">false</span></span><br><span class="line">    <span class="meta">fetch-registry</span>: <span class="string">false</span></span><br><span class="line">    <span class="meta">service-url</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">defaultZone</span>: <span class="string">http://eureka-server1:8761/eureka/,http://eureka-server2:8762/eureka/</span></span><br></pre></td></tr></table></figure>



<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><a href="http://localhost:8761/">http://localhost:8761/</a></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1565935274654.png" alt="1565935274654"></p>
<p><a href="http://localhost:8762/">http://localhost:8762/</a></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1565935327414.png" alt="1565935327414"></p>
<p><a href="http://localhost:8763/">http://localhost:8763/</a></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1565935358314.png" alt="1565935358314"></p>
<p>项目中使用的时候，将多个写到一起，隔开即可，代码如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1565935455902.png" alt="1565935455902"></p>
<p>上图代码如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">client</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">service-url</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">defaultZone</span>: <span class="string">http://eureka-server1:8761/eureka/,http://eureka-server2:8761/eureka/,http://eureka-server3:8763/eureka/</span></span><br></pre></td></tr></table></figure>





<h2 id="Redis-Cluster"><a href="#Redis-Cluster" class="headerlink" title="Redis Cluster"></a>Redis Cluster</h2><h3 id="Redis-Cluster简介"><a href="#Redis-Cluster简介" class="headerlink" title="Redis-Cluster简介"></a>Redis-Cluster简介</h3><h4 id="什么是Redis-Cluster"><a href="#什么是Redis-Cluster" class="headerlink" title="什么是Redis-Cluster"></a>什么是Redis-Cluster</h4><p>为何要搭建Redis集群。Redis是在内存中保存数据的，而我们的电脑一般内存都不大，这也就意味着Redis不适合存储大数据，适合存储大数据的是Hadoop生态系统的Hbase或者是MogoDB。Redis更适合处理高并发，一台设备的存储能力是很有限的，但是多台设备协同合作，就可以让内存增大很多倍，这就需要用到集群。</p>
<p>Redis集群搭建的方式有多种，例如使用客户端分片、Twemproxy、Codis等，但从redis 3.0之后版本支持redis-cluster集群，它是Redis官方提出的解决方案，Redis-Cluster采用无中心结构，每个节点保存数据和整个集群状态,每个节点都和其他所有节点连接。其redis-cluster架构图如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1554000037613.png" alt="1554000037613"></p>
<p>客户端与 redis 节点直连,不需要中间 proxy 层.客户端不需要连接集群所有节点连接集群中任何一个可用节点即可。</p>
<p>所有的 redis 节点彼此互联(PING-PONG 机制),内部使用二进制协议优化传输速度和带宽.</p>
<h5 id="分布存储机制-槽"><a href="#分布存储机制-槽" class="headerlink" title="分布存储机制-槽"></a>分布存储机制-槽</h5><p>（1）redis-cluster 把所有的物理节点映射到[0-16383]slot 上,cluster 负责维护</p>
<p>node&lt;-&gt;slot&lt;-&gt;value</p>
<p>（2）Redis 集群中内置了 16384 个哈希槽，当需要在 Redis 集群中放置一个 key-value 时，redis 先对 key 使用 crc16 算法算出一个结果，然后把结果对 16384 求余数，这样每个key 都会对应一个编号在 0-16383 之间的哈希槽，redis 会根据节点数量大致均等的将哈希槽映射到不同的节点。</p>
<p>​    例如三个节点：槽分布的值如下：</p>
<p>SERVER1:  0-5460</p>
<p>SERVER2:  5461-10922</p>
<p>SERVER3:  10923-16383</p>
<h5 id="容错机制-投票"><a href="#容错机制-投票" class="headerlink" title="容错机制-投票"></a>容错机制-投票</h5><p>（1）选举过程是集群中所有master参与,如果半数以上master节点与故障节点通信超过(cluster-node-timeout),认为该节点故障，自动触发故障转移操作.  故障节点对应的从节点自动升级为主节点</p>
<p>（2）什么时候整个集群不可用(cluster_state:fail)? </p>
<p>如果集群任意master挂掉,且当前master没有slave.集群进入fail状态,也可以理解成集群的slot映射[0-16383]不完成时进入fail状态. </p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1554000104675.png" alt="1554000104675"></p>
<h4 id="搭建Redis-Cluster"><a href="#搭建Redis-Cluster" class="headerlink" title="搭建Redis-Cluster"></a>搭建Redis-Cluster</h4><h5 id="搭建要求"><a href="#搭建要求" class="headerlink" title="搭建要求"></a>搭建要求</h5><p>需要 6 台 redis 服务器。搭建伪集群。</p>
<p>需要 6 个 redis 实例。</p>
<p>需要运行在不同的端口 7001-7006</p>
<h5 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h5><p>（1）安装gcc 【此步省略】</p>
<p>Redis 是 c 语言开发的。安装 redis 需要 c 语言的编译环境。如果没有 gcc 需要在线安装。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure>



<p>（2）使用yum命令安装 ruby  （我们需要使用ruby脚本来实现集群搭建）【此步省略】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install ruby</span><br><span class="line">yum install rubygems</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">----- 知识点小贴士 -----</span><br><span class="line">Ruby，一种简单快捷的面向对象（面向对象程序设计）脚本语言，在20世纪90年代由日本人松本行弘(Yukihiro Matsumoto)开发，遵守GPL协议和Ruby License。它的灵感与特性来自于 Perl、Smalltalk、Eiffel、Ada以及 Lisp 语言。由 Ruby 语言本身还发展出了JRuby（Java平台）、IronRuby（.NET平台）等其他平台的 Ruby 语言替代品。Ruby的作者于1993年2月24日开始编写Ruby，直至1995年12月才正式公开发布于fj（新闻组）。因为Perl发音与6月诞生石pearl（珍珠）相同，因此Ruby以7月诞生石ruby（红宝石）命名</span><br><span class="line">RubyGems简称gems，是一个用于对 Ruby组件进行打包的 Ruby 打包系统</span><br></pre></td></tr></table></figure>

<p>（3）将redis源码包上传到 linux 系统  ，解压redis源码包</p>
<p>（4）编译redis源码  ，进入redis源码文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>

<p>看到以下输出结果，表示编译成功</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1554000161720.png" alt="1554000161720"></p>
<p>（5）创建目录/usr/local/redis-cluster目录，  安装6个redis实例，分别安装在以下目录</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">/usr/local/redis-cluster/redis-1</span></span><br><span class="line"><span class="attr">/usr/local/redis-cluster/redis-2</span></span><br><span class="line"><span class="attr">/usr/local/redis-cluster/redis-3</span></span><br><span class="line"><span class="attr">/usr/local/redis-cluster/redis-4</span></span><br><span class="line"><span class="attr">/usr/local/redis-cluster/redis-5</span></span><br><span class="line"><span class="attr">/usr/local/redis-cluster/redis-6</span></span><br></pre></td></tr></table></figure>

<p>以第一个redis实例为例，命令如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make install PREFIX&#x3D;&#x2F;usr&#x2F;local&#x2F;redis-cluster&#x2F;redis-1</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1554000236118.png" alt="1554000236118"></p>
<p>出现此提示表示成功，按此方法安装其余5个redis实例</p>
<p>（6）复制配置文件  将 /redis-3.0.0/redis.conf 复制到redis下的bin目录下</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[root@localhost</span> <span class="string">redis-3.0.0]# cp redis.conf /usr/local/redis-cluster/redis-1/bin</span></span><br><span class="line"><span class="meta">[root@localhost</span> <span class="string">redis-3.0.0]# cp redis.conf /usr/local/redis-cluster/redis-2/bin</span></span><br><span class="line"><span class="meta">[root@localhost</span> <span class="string">redis-3.0.0]# cp redis.conf /usr/local/redis-cluster/redis-3/bin</span></span><br><span class="line"><span class="meta">[root@localhost</span> <span class="string">redis-3.0.0]# cp redis.conf /usr/local/redis-cluster/redis-4/bin</span></span><br><span class="line"><span class="meta">[root@localhost</span> <span class="string">redis-3.0.0]# cp redis.conf /usr/local/redis-cluster/redis-5/bin</span></span><br><span class="line"><span class="meta">[root@localhost</span> <span class="string">redis-3.0.0]# cp redis.conf /usr/local/redis-cluster/redis-6/bin</span></span><br></pre></td></tr></table></figure>







<h5 id="配置集群"><a href="#配置集群" class="headerlink" title="配置集群"></a>配置集群</h5><p>（1）修改每个redis节点的配置文件redis.conf</p>
<p>​      修改运行端口为7001 （7002 7003 …..）</p>
<p>​      将cluster-enabled yes 前的注释去掉(632行)</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1554000285785.png" alt="1554000285785"></p>
<p>集群：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6个节点</span><br><span class="line">3主</span><br><span class="line">3从</span><br><span class="line"></span><br><span class="line">1)创建6个节点  7001-7006</span><br><span class="line">2)开启集群</span><br><span class="line">3)串联集群[将集群链接到一起]</span><br></pre></td></tr></table></figure>







<p>（2）启动每个redis实例</p>
<p>​    以第一个实例为例，命令如下</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">cd</span> <span class="string">/usr/local/redis-cluster/redis-1/bin/</span></span><br><span class="line"><span class="meta">./redis-server</span> <span class="string">redis.conf</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1554000368400.png" alt="1554000368400"></p>
<p>把其余的5个也启动起来，然后查看一下是不是都启动起来了</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[root@localhost</span> <span class="string">~]# ps -ef | grep redis</span></span><br><span class="line"><span class="attr">root</span>     <span class="string">15776 15775  0 08:19 pts/1    00:00:00 ./redis-server *:7001 [cluster]</span></span><br><span class="line"><span class="attr">root</span>     <span class="string">15810 15784  0 08:22 pts/2    00:00:00 ./redis-server *:7002 [cluster]</span></span><br><span class="line"><span class="attr">root</span>     <span class="string">15831 15813  0 08:23 pts/3    00:00:00 ./redis-server *:7003 [cluster]</span></span><br><span class="line"><span class="attr">root</span>     <span class="string">15852 15834  0 08:23 pts/4    00:00:00 ./redis-server *:7004 [cluster]</span></span><br><span class="line"><span class="attr">root</span>     <span class="string">15872 15856  0 08:24 pts/5    00:00:00 ./redis-server *:7005 [cluster]</span></span><br><span class="line"><span class="attr">root</span>     <span class="string">15891 15875  0 08:24 pts/6    00:00:00 ./redis-server *:7006 [cluster]</span></span><br><span class="line"><span class="attr">root</span>     <span class="string">15926 15895  0 08:24 pts/7    00:00:00 grep redis</span></span><br></pre></td></tr></table></figure>



<p>（3）上传redis-3.0.0.gem ，安装 ruby用于搭建redis集群的脚本。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">[root@localhost</span> <span class="string">~]# gem install redis-3.0.0.gem</span></span><br><span class="line"><span class="attr">Successfully</span> <span class="string">installed redis-3.0.0</span></span><br><span class="line"><span class="attr">1</span> <span class="string">gem installed</span></span><br><span class="line"><span class="attr">Installing</span> <span class="string">ri documentation for redis-3.0.0...</span></span><br><span class="line"><span class="attr">Installing</span> <span class="string">RDoc documentation for redis-3.0.0...</span></span><br></pre></td></tr></table></figure>



<p>（4）使用 ruby 脚本搭建集群。</p>
<p>进入redis源码目录中的src目录  执行下面的命令  <code>redis-trib.rb</code> ruby工具,可以实现Redis集群,<code>create</code>创建集群，<code>--replicas</code>创建主从关系 1：是否随机创建（是）。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">./redis-trib.rb</span> <span class="string">create --replicas 1 192.168.25.140:7001 192.168.25.140:7002 192.168.25.140:7003</span></span><br><span class="line"><span class="meta">192.168.25.140</span>:<span class="string">7004 192.168.25.140:7005 192.168.25.140:7006</span></span><br></pre></td></tr></table></figure>



<p>出现下列提示信息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="string">Creating cluster</span></span><br><span class="line"><span class="attr">Connecting</span> <span class="string">to node 192.168.25.140:7001: OK</span></span><br><span class="line"><span class="attr">Connecting</span> <span class="string">to node 192.168.25.140:7002: OK</span></span><br><span class="line"><span class="attr">Connecting</span> <span class="string">to node 192.168.25.140:7003: OK</span></span><br><span class="line"><span class="attr">Connecting</span> <span class="string">to node 192.168.25.140:7004: OK</span></span><br><span class="line"><span class="attr">Connecting</span> <span class="string">to node 192.168.25.140:7005: OK</span></span><br><span class="line"><span class="attr">Connecting</span> <span class="string">to node 192.168.25.140:7006: OK</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="string">Performing hash slots allocation on 6 nodes...</span></span><br><span class="line"><span class="attr">Using</span> <span class="string">3 masters:</span></span><br><span class="line"><span class="meta">192.168.25.140</span>:<span class="string">7001</span></span><br><span class="line"><span class="meta">192.168.25.140</span>:<span class="string">7002</span></span><br><span class="line"><span class="meta">192.168.25.140</span>:<span class="string">7003</span></span><br><span class="line"><span class="attr">Adding</span> <span class="string">replica 192.168.25.140:7004 to 192.168.25.140:7001</span></span><br><span class="line"><span class="attr">Adding</span> <span class="string">replica 192.168.25.140:7005 to 192.168.25.140:7002</span></span><br><span class="line"><span class="attr">Adding</span> <span class="string">replica 192.168.25.140:7006 to 192.168.25.140:7003</span></span><br><span class="line"><span class="attr">M</span>: <span class="string">1800237a743c2aa918ade045a28128448c6ce689 192.168.25.140:7001</span></span><br><span class="line">   <span class="attr">slots</span>:<span class="string">0-5460 (5461 slots) master</span></span><br><span class="line"><span class="attr">M</span>: <span class="string">7cb3f7d5c60bfbd3ab28800f8fd3bf6de005bf0d 192.168.25.140:7002</span></span><br><span class="line">   <span class="attr">slots</span>:<span class="string">5461-10922 (5462 slots) master</span></span><br><span class="line"><span class="attr">M</span>: <span class="string">436e88ec323a2f8bb08bf09f7df07cc7909fcf81 192.168.25.140:7003</span></span><br><span class="line">   <span class="attr">slots</span>:<span class="string">10923-16383 (5461 slots) master</span></span><br><span class="line"><span class="attr">S</span>: <span class="string">c2a39a94b5f41532cd83bf6643e98fc277c2f441 192.168.25.140:7004</span></span><br><span class="line">   <span class="attr">replicates</span> <span class="string">1800237a743c2aa918ade045a28128448c6ce689</span></span><br><span class="line"><span class="attr">S</span>: <span class="string">b0e38d80273515c84b1a01820d8ecee04547d776 192.168.25.140:7005</span></span><br><span class="line">   <span class="attr">replicates</span> <span class="string">7cb3f7d5c60bfbd3ab28800f8fd3bf6de005bf0d</span></span><br><span class="line"><span class="attr">S</span>: <span class="string">03bf6bd7e3e6eece5a02043224497c2c8e185132 192.168.25.140:7006</span></span><br><span class="line">   <span class="attr">replicates</span> <span class="string">436e88ec323a2f8bb08bf09f7df07cc7909fcf81</span></span><br><span class="line"><span class="attr">Can</span> <span class="string">I set the above configuration? (type &#x27;yes&#x27; to accept): yes</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="string">Nodes configuration updated</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="string">Assign a different config epoch to each node</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="string">Sending CLUSTER MEET messages to join the cluster</span></span><br><span class="line"><span class="attr">Waiting</span> <span class="string">for the cluster to join....</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="string">Performing Cluster Check (using node 192.168.25.140:7001)</span></span><br><span class="line"><span class="attr">M</span>: <span class="string">1800237a743c2aa918ade045a28128448c6ce689 192.168.25.140:7001</span></span><br><span class="line">   <span class="attr">slots</span>:<span class="string">0-5460 (5461 slots) master</span></span><br><span class="line"><span class="attr">M</span>: <span class="string">7cb3f7d5c60bfbd3ab28800f8fd3bf6de005bf0d 192.168.25.140:7002</span></span><br><span class="line">   <span class="attr">slots</span>:<span class="string">5461-10922 (5462 slots) master</span></span><br><span class="line"><span class="attr">M</span>: <span class="string">436e88ec323a2f8bb08bf09f7df07cc7909fcf81 192.168.25.140:7003</span></span><br><span class="line">   <span class="attr">slots</span>:<span class="string">10923-16383 (5461 slots) master</span></span><br><span class="line"><span class="attr">M</span>: <span class="string">c2a39a94b5f41532cd83bf6643e98fc277c2f441 192.168.25.140:7004</span></span><br><span class="line">   <span class="attr">slots</span>: <span class="string">(0 slots) master</span></span><br><span class="line">   <span class="attr">replicates</span> <span class="string">1800237a743c2aa918ade045a28128448c6ce689</span></span><br><span class="line"><span class="attr">M</span>: <span class="string">b0e38d80273515c84b1a01820d8ecee04547d776 192.168.25.140:7005</span></span><br><span class="line">   <span class="attr">slots</span>: <span class="string">(0 slots) master</span></span><br><span class="line">   <span class="attr">replicates</span> <span class="string">7cb3f7d5c60bfbd3ab28800f8fd3bf6de005bf0d</span></span><br><span class="line"><span class="attr">M</span>: <span class="string">03bf6bd7e3e6eece5a02043224497c2c8e185132 192.168.25.140:7006</span></span><br><span class="line">   <span class="attr">slots</span>: <span class="string">(0 slots) master</span></span><br><span class="line">   <span class="attr">replicates</span> <span class="string">436e88ec323a2f8bb08bf09f7df07cc7909fcf81</span></span><br><span class="line"><span class="meta">[OK]</span> <span class="string">All nodes agree about slots configuration.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="string">Check for open slots...</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="string">Check slots coverage...</span></span><br><span class="line"><span class="meta">[OK]</span> <span class="string">All 16384 slots covered.</span></span><br></pre></td></tr></table></figure>



<h4 id="连接Redis-Cluster"><a href="#连接Redis-Cluster" class="headerlink" title="连接Redis-Cluster"></a>连接Redis-Cluster</h4><h5 id="客户端工具连接"><a href="#客户端工具连接" class="headerlink" title="客户端工具连接"></a>客户端工具连接</h5><p>Redis-cli 连接集群：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-cli -p ip地址 -p 端口 -c</span><br></pre></td></tr></table></figure>



<p>-c：代表连接的是 redis 集群</p>
<p>测试值的存取:</p>
<p>（1）从本地连接到集群redis  使用7001端口 加 -c 参数</p>
<p>（2）存入name值为abc ，系统提示此值被存入到了7002端口所在的redis （槽是5798）</p>
<p>（3）提取name的值，可以提取。</p>
<p>（4）退出（quit）</p>
<p>（5）再次以7001端口进入 ，不带-c</p>
<p>（6）查询name值，无法获取，因为值在7002端口的redis上</p>
<p>（7）我们以7002端口进入，获取name值发现是可以获取的,而以其它端口进入均不能获取</p>
<h5 id="springboot连接redis集群"><a href="#springboot连接redis集群" class="headerlink" title="springboot连接redis集群"></a>springboot连接redis集群</h5><p>（1）创建工程 ，打包方式jar包，命名为：changgou-redis-demo</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1558749398424.png" alt="1558749398424"></p>
<p>（2）添加redis起步依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>changgou-redis-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>changgou-redis-demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>redis<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（3）配置application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/changgou_user?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">itcast</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">redis-demo</span></span><br><span class="line">    <span class="comment">#redis配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  rabbitmq:</span></span><br><span class="line"><span class="comment">#    addresses: 192.168.25.130:5672,192.168.25.134:5672</span></span><br><span class="line"><span class="comment">#    username: guest</span></span><br><span class="line"><span class="comment">#    password: guest</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">cluster:</span></span><br><span class="line">      <span class="attr">nodes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.25</span><span class="number">.153</span><span class="string">:7001</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.25</span><span class="number">.153</span><span class="string">:7002</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.25</span><span class="number">.153</span><span class="string">:7003</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.25</span><span class="number">.153</span><span class="string">:7004</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.25</span><span class="number">.153</span><span class="string">:7005</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.25</span><span class="number">.153</span><span class="string">:7006</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">ssl:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9008</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<p>（4）创建测试类进行测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.changgouredisdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChanggouRedisDemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		redisTemplate.boundValueOps(<span class="string">&quot;key111&quot;</span>).set(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">		System.out.println(redisTemplate.boundValueOps(<span class="string">&quot;key111&quot;</span>).get());</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="Redis的持久化"><a href="#Redis的持久化" class="headerlink" title="Redis的持久化"></a>Redis的持久化</h4><h5 id="redis的持久化介绍"><a href="#redis的持久化介绍" class="headerlink" title="redis的持久化介绍"></a>redis的持久化介绍</h5><p>​    Redis的数据都放在内存中。如果机器挂掉，内存的数据就不存在，数据不能恢复，严重影响使用。那么redis本身给我们提供了持久化机制。即时出现这样的问题，也能恢复数据。接下来我们来看下redis的两种持久化方</p>
<h5 id="开启RDB"><a href="#开启RDB" class="headerlink" title="开启RDB"></a>开启RDB</h5><p>RDB:  快照形式  （定期数据保存磁盘中）会产生一个dump.rdb文件,redis默认开启了RDB的持久化方式。</p>
<p>特点：会存在数据丢失，性能较好，用于数据备份。</p>
<p>如图：有一个文件产生</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1558590766000.png" alt="1558590766000"></p>
<p>如图：redis.conf中 的默认的RDB的配置：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1558590788839.png" alt="1558590788839"></p>
<p>解释：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 900 秒内最少有 1 个 key 被改动，或者 300 秒内最少有 10 个 key 被改动，又或者 60 秒内最少有 1000 个 key 被改动，以上三个条件随便满足一个，就触发一次保存操作。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    if(在60秒之内有10000个keys发生变化时)&#123;</span></span><br><span class="line"><span class="comment">#      进行镜像备份</span></span><br><span class="line"><span class="comment">#    &#125;else if(在300秒之内有10个keys发生了变化)&#123;</span></span><br><span class="line"><span class="comment">#      进行镜像备份</span></span><br><span class="line"><span class="comment">#    &#125;else if(在900秒之内有1个keys发生了变化)&#123;</span></span><br><span class="line"><span class="comment">#      进行镜像备份</span></span><br><span class="line"><span class="comment">#    &#125;</span></span><br></pre></td></tr></table></figure>







<h5 id="开启AOF"><a href="#开启AOF" class="headerlink" title="开启AOF"></a>开启AOF</h5><p>AOF : append only file . 所有对redis的操作命令记录在.aof文件中,如果想恢复数据，重新加载文件，执行文件中的命令即可。默认的情况下 redis没有开启，要想开启，必须配置。</p>
<p>特点：每秒保存，数据完整性比较好，耗费性能。</p>
<p>开启AOF: 如图 去掉注释</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1558590810611.png" alt="1558590810611"></p>
<p>配置 AOF的执行策略:</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1558590827986.png" alt="1558590827986"></p>
<p>always:总是执行</p>
<p>everysec:每秒钟执行(默认)</p>
<p>no:不执行。</p>
<p>如果随着时间的推移，AOF文件中的数据越来越大，所以需要进行重写也就是压缩。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1558590856034.png" alt="1558590856034"></p>
<p>如图所示：自动压缩的比例为：</p>
<p>100：上一次AOF文件达到100%的时候进行压缩</p>
<p>64mb ：压缩时最小的文件大小。</p>
<h5 id="模式的抉择应用场景介绍"><a href="#模式的抉择应用场景介绍" class="headerlink" title="模式的抉择应用场景介绍"></a>模式的抉择应用场景介绍</h5><p>AOF 和RDB对比：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>RDB</th>
<th>AOF</th>
</tr>
</thead>
<tbody><tr>
<td>启动优先级</td>
<td>低</td>
<td>高</td>
</tr>
<tr>
<td>体积</td>
<td>小</td>
<td>大</td>
</tr>
<tr>
<td>恢复速度</td>
<td>快</td>
<td>慢</td>
</tr>
<tr>
<td>数据安全性</td>
<td>丢数据</td>
<td>根据策略决定</td>
</tr>
</tbody></table>
<p>RDB的最佳策略：</p>
<ul>
<li>关闭 </li>
<li>集中管理（用于备份数据）</li>
<li>主从模式，从开。</li>
</ul>
<p>AOF的最佳策略：</p>
<ul>
<li>建议 开  每秒刷盘-&gt;aof日志文件中</li>
<li>AOF重写集中管理</li>
</ul>
<p>最佳的策略：</p>
<ul>
<li>小分片（max_memery 4G左右）</li>
<li>监控机器的负载</li>
</ul>
<h4 id="Redis哨兵模式"><a href="#Redis哨兵模式" class="headerlink" title="Redis哨兵模式"></a>Redis哨兵模式</h4><p>Redis在使用过程中服务器毫无征兆的宕机，是一个麻烦的事情，如何保证备份的机器是原始服务器的完整备份呢？这时候就需要哨兵和复制。</p>
<p>Sentinel（哨兵）可以管理多个Redis服务器，它提供了监控，提醒以及自动的故障转移的功能，</p>
<p>Replication（复制）则是负责让一个Redis服务器可以配备多个备份的服务器。</p>
<p>Redis也是利用这两个功能来保证Redis的高可用的</p>
<h5 id="Redis的主从复制实现高可用"><a href="#Redis的主从复制实现高可用" class="headerlink" title="Redis的主从复制实现高可用"></a>Redis的主从复制实现高可用</h5><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1558592619048.png" alt="1558592619048"></p>
<p>如图，通过主从架构，一个主节点，两个从节点。</p>
<p>通过手动监控的方式，监控master的宕机，以及出现故障将故障转移的方式可以做到高可用。</p>
<p>比如：如果主节点宕机，我们手动监控到主节点的宕机，并将某一个Slave变成主节点。 但是这样话，如何手动监控也是很麻烦的事情。所以使用sentinel机制就可以解决了这个问题，Sentinel（哨兵）是Redis 的高可用性解决方案。</p>
<ul>
<li>它能自动进行故障转移。</li>
<li>客户端连接sentinel，不需要关系具体的master。</li>
<li>当master地址改变时由sentinel更新到客户端。</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1558593335136.png" alt="1558593335136"></p>
<p>架构原理如图：</p>
<p>1.多个sentinel 发现并确认master有问题。</p>
<p>2.sentinel内部选举领导</p>
<p>3.选举出slave作为新的master</p>
<p>4.通知其余的slave成为新master的slave</p>
<p>5.通知客户端 主从变化</p>
<p>6.如果老的master重新复活，那么成为新的master的slave</p>
<p>要实现上边的功能的主要细节主要有以下三个定时任务：</p>
<ol>
<li>每10秒，哨兵会向master和slave发送INFO命令(目的就是监控每一个节点信息)</li>
<li>每2秒，哨兵会向master库和slave的频道(<strong>sentinel</strong>:hello)发送自己的信息 （sentinel节点通过__sentinel__:hello频道进行信息交换，比如加入哨兵集群，分享自己节点数据）</li>
<li>每1秒，哨兵会向master和slave以及其他哨兵节点发送PING命令（目的就是 redis节点的状态监控，还有领导选举，主备切换选择等）</li>
</ol>
<p>策略总结：</p>
<p>​    1.尽量为 每一个节点部署一个哨兵</p>
<p>​    2.哨兵也要搭建集群（防止哨兵单点故障）</p>
<p>​    3.每一个节点都同时设置quorum的值超过半数（N/2）+1</p>
<p>面试常问的问题：</p>
<p>​    主从复制，以及哨兵 和集群之间区别。</p>
<p>主从复制 是redis实现高可用的一个策略。将会有主节点 和从节点，从节点的数据完整的从主节点中复制一份。</p>
<p>哨兵：当系统节点异常宕机的时候，开发者可以手动进行故障转移恢复，但是手动比较麻烦，所以通过哨兵机制自动进行监控和恢复。为了解决哨兵也会单点故障的问题，可以建立哨兵集群。</p>
<p>集群：即使使用哨兵，redis每个实例也是全量存储，每个redis存储的内容都是完整的数据，浪费内存且有木桶效应。为了最大化利用内存，可以采用集群，就是分布式存储。这个时候可以使用redis集群。将不同的数据分配到不同的节点中，这样就可以横向扩展，扩容。</p>
<h4 id="redis缓存击穿问题解决"><a href="#redis缓存击穿问题解决" class="headerlink" title="redis缓存击穿问题解决"></a>redis缓存击穿问题解决</h4><h5 id="什么是缓存击穿"><a href="#什么是缓存击穿" class="headerlink" title="什么是缓存击穿"></a>什么是缓存击穿</h5><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1558597517593.png" alt="1558597517593"></p>
<p>如图：</p>
<pre><code> 1. 当用户根据key 查询数据时，先查询缓存，如果缓存有命中，返回，
 2. 但是如果缓存没有命中直接穿过缓存层，访问数据层 如果有，则存储指缓存，
 3. 但是同样如果没有命中，（也就是数据库中也没有数据）直接返回用户，但是不缓存
</code></pre>
<p>这就是缓存的穿透。如果某一个key 请求量很大，但是存储层也没有数据，大量的请求都会达到存储层就会造成数据库压力巨大，有可能宕机的情况。</p>
<h5 id="缓存击穿的解决方案"><a href="#缓存击穿的解决方案" class="headerlink" title="缓存击穿的解决方案"></a>缓存击穿的解决方案</h5><p>如图：</p>
<p>1.当缓存中没有命中的时候，从数据库中获取</p>
<p>2.当数据库中也没有数据的时候，我们直接将null 作为值设置redis中的key上边。</p>
<p>3.此时如果没有数据，一般情况下都需要设置一个过期时间，例如：5分钟失效。（为了避免过多的KEY 存储在redis中）</p>
<p>4.返回给用户，</p>
<p>5.用户再次访问时，已经有KEY了。此时KEY的值是null而已，这样就可以在缓存中命中，解决了缓存穿透的问题。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1558681487990.png" alt="1558681487990"></p>
<p>（2）例如：代码如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1558684609508.png" alt="1558684609508"></p>
<p>注意：缓存空对象会有两个问题：</p>
<p>第一，空值做了缓存，意味着缓存层中存了更多的键，需要更多的内存空间 ( 如果是攻击，问题更严重 )，比较有效的方法是针对这类数据设置一个较短的过期时间，让其自动剔除。</p>
<p> 第二，缓存层和存储层的数据会有一段时间窗口的不一致，可能会对业务有一定影响。例如过期时间设置为 5分钟，如果此时存储层添加了这个数据，那此段时间就会出现缓存层和存储层数据的不一致，此时可以利用消息系统或者其他方式清除掉缓存层中的空对象。</p>
<h4 id="Redis缓存雪崩问题解决"><a href="#Redis缓存雪崩问题解决" class="headerlink" title="Redis缓存雪崩问题解决"></a>Redis缓存雪崩问题解决</h4><h5 id="什么是缓存雪崩"><a href="#什么是缓存雪崩" class="headerlink" title="什么是缓存雪崩"></a>什么是缓存雪崩</h5><p>  如果缓存集中在一段时间内失效，发生大量的缓存穿透，所有的查询都落在数据库上，造成了缓存雪崩。</p>
<h5 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h5><p>这个没有完美解决办法，但可以分析用户行为，尽量让失效时间点均匀分布。</p>
<ul>
<li>限流 加锁排队</li>
</ul>
<p>在缓存失效后，通过对某一个key加锁或者是队列 来控制key的线程访问的数量。例如：某一个key 只允许一个线程进行 操作。</p>
<ul>
<li>限流</li>
</ul>
<p>在缓存失效后，某一个key 做count统计限流，达到一定的阈值，直接丢弃，不再查询数据库。例如：令牌桶算法。等等。</p>
<ul>
<li>数据预热</li>
</ul>
<p>在缓存失效应当尽量避免某一段时间，可以先进行数据预热，比如某些热门的商品。提前在上线之前，或者开放给用户使用之前，先进行loading 缓存中，这样用户使用的时候，直接从缓存中获取。要注意的是，要更加业务来进行过期时间的设置 ，尽量均匀。</p>
<ul>
<li>做缓存降级（二级缓存策略）</li>
</ul>
<p>当分布式缓存失效的时候，可以采用本地缓存，本地缓存没有再查询数据库。这种方式，可以避免很多数据分布式缓存没有，就直接打到数据库的情况。</p>
<h5 id="二级缓存解决雪崩的案例"><a href="#二级缓存解决雪崩的案例" class="headerlink" title="二级缓存解决雪崩的案例"></a>二级缓存解决雪崩的案例</h5><p>分析：</p>
<p>​    基本的思路：通过redis缓存+mybatis的二级缓存整合ehcache来实现。</p>
<p>​    EhCache 是一个纯Java的进程内缓存框架，具有快速、精干等特点，是Hibernate中默认的CacheProvider。</p>
<p>（1）在原来的工程中加入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2）创建dao的接口 使用XML的方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TbUserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名查询用户的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TbUser <span class="title">findOne</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）创建TbUserMapper.xml，如图加入echache的配置 开启二级缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.changgouredisdemo.dao.TbUserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加入使用缓存--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--缓存自创建日期起至失效时的间隔时间一个小时--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;timeToIdleSeconds&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3600&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--缓存创建以后，最后一次访问缓存的日期至失效之时的时间间隔一个小时--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;timeToLiveSeconds&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3600&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置在缓存中保存的对象的最大的个数，这个按照业务进行配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxEntriesLocalHeap&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1000&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--设置在磁盘中最大实体对象的个数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxEntriesLocalDisk&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--缓存淘汰算法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;memoryStoreEvictionPolicy&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LRU&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findOne&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.changgouredisdemo.pojo.TbUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span>&gt;</span></span><br><span class="line">          SELECT * from tb_user where username = #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>（4）配置application.yml</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1558754573194.png" alt="1558754573194"></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 指定mapper映射文件目录</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*Mapper.xml</span></span><br></pre></td></tr></table></figure>



<p>（5）创建controller service 来进行测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.changgouredisdemo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.changgouredisdemo.pojo.TbUser;</span><br><span class="line"><span class="keyword">import</span> com.itheima.changgouredisdemo.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 三国的包子</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> com.itheima.changgouredisdemo.controller *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findOne/&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TbUser <span class="title">findOne</span><span class="params">(<span class="meta">@PathVariable</span> String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findOne(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.itheima.changgouredisdemo.service.impl;</span><br><span class="line"></span><br><span class="line">import com.itheima.changgouredisdemo.dao.TbUserMapper;</span><br><span class="line">import com.itheima.changgouredisdemo.pojo.TbUser;</span><br><span class="line">import com.itheima.changgouredisdemo.service.UserService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 描述</span><br><span class="line"> *</span><br><span class="line"> * @author 三国的包子</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @package com.itheima.changgouredisdemo.service.impl *</span><br><span class="line"> * @since 1.0</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Service</span><br><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private TbUserMapper userMapper;</span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public TbUser findOne(String username) &#123;</span><br><span class="line">        TbUser user &#x3D; (TbUser) redisTemplate.boundValueOps(username).get();</span><br><span class="line">        if (redisTemplate.hasKey(username)) &#123;</span><br><span class="line">            return user;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            &#x2F;&#x2F;没有key 数据库中查询</span><br><span class="line">            TbUser one &#x3D; userMapper.findOne(username);</span><br><span class="line">            System.out.println(&quot;第一次查询数据库&quot;);</span><br><span class="line">            redisTemplate.boundValueOps(username).set(one);</span><br><span class="line">            if (one &#x3D;&#x3D; null) &#123;</span><br><span class="line">                redisTemplate.expire(username, 30, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            return one;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(6)测试：</p>
<p>已知： 数据库中有zhangsan</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1558754733955.png" alt="1558754733955"></p>
<p>准备好redis</p>
<p>浏览器输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:9008&#x2F;user&#x2F;findOne&#x2F;zhangsan</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1558754805646.png" alt="1558754805646"></p>
<p>redis中:    也有数据</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1558754843688.png" alt="1558754843688"></p>
<p>此时：修改数据库的数据zhangsan为zhangsan5,并清空redis缓存。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1558754887756.png" alt="1558754887756"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1558754905648.png" alt="1558754905648"></p>
<p>再次输入浏览器地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:9008&#x2F;user&#x2F;findOne&#x2F;zhangsan</span><br></pre></td></tr></table></figure>

<p>此时数据库总已经没有zhangsan,但是效果却是</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1558754956981.png" alt="1558754956981"></p>
<p>说明数据从二级缓存中也就是本地缓存中获取到了，测试成功。</p>
<h3 id="RabbitMQ集群"><a href="#RabbitMQ集群" class="headerlink" title="RabbitMQ集群"></a>RabbitMQ集群</h3><p>在使用RabbitMQ的过程中，如果只有一个节点，但是一旦单机版宕机，服务不可用，影响比较严重，所以这里我们演示下如何搭建rabbitmq的集群，集群就能避免单点故障的问题。</p>
<p> RabbitMQ 集群分为两种 普通集群 和 镜像集群</p>
<h4 id="普通集群"><a href="#普通集群" class="headerlink" title="普通集群"></a>普通集群</h4><p>以两个节点（rabbit01、rabbit02）为例来进行说明。</p>
<p>rabbit01和rabbit02两个节点仅有相同的元数据，即队列的结构，但消息实体只存在于其中一个节点rabbit01（或者rabbit02）中。<br>​    当消息进入rabbit01节点的Queue后，consumer从rabbit02节点消费时，RabbitMQ会临时在rabbit01、rabbit02间进行消息传输，把A中的消息实体取出并经过B发送给consumer。</p>
<p>所以consumer应尽量连接每一个节点，从中取消息，即对于同一个逻辑队列，要在多个节点建立物理Queue；否则无论consumer连rabbit01或rabbit02，出口总在rabbit01，会产生瓶颈。</p>
<p>​    当rabbit01节点故障后，rabbit02节点无法取到rabbit01节点中还未消费的消息实体。如果做了消息持久化，那么得等rabbit01节点恢复，然后才可被消费；如果没有持久化的话，就会产生消息丢失的现象。</p>
<h4 id="镜像集群"><a href="#镜像集群" class="headerlink" title="镜像集群"></a>镜像集群</h4><p>​    在普通集群的基础上，把需要的队列做成镜像队列，消息实体会主动在镜像节点间同步，而不是在客户端取数据时临时拉取，也就是说多少节点消息就会备份多少份。该模式带来的副作用也很明显，除了降低系统性能外，如果镜像队列数量过多，加之大量的消息进入，集群内部的网络带宽将会被这种同步通讯大大消耗掉。所以在对可靠性要求较高的场合中适用</p>
<p>由于镜像队列之间消息自动同步，且内部有选举master机制，即使master节点宕机也不会影响整个集群的使用，达到去中心化的目的，从而有效的防止消息丢失及服务不可用等问题。</p>
<h4 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h4><p>​    集群搭建的方式 可以使用使用多台虚拟机来模拟，也可以使用docker来进行搭建。这里我们采用使用docker来进行搭建的方式要简单一些。</p>
<p>​    </p>
<h5 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h5><p>准备一个虚拟机 里面安装docker引擎。这里为了测试我们采用2台rabbitmq的实例，也就是两个docker容器来模拟2个rabbitmq服务器器。</p>
<ul>
<li>准备一台虚拟机 我的机器ip为192.168.211.128 .也可以使用畅购的虚拟机。</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1580361560798.png" alt="1580361560798"></p>
<ul>
<li>安装docker引擎</li>
</ul>
<p>这个不再演示</p>
<h5 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h5><p>执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq:3.6.15-management</span><br></pre></td></tr></table></figure>



<h5 id="创建rabbitmq容器"><a href="#创建rabbitmq容器" class="headerlink" title="创建rabbitmq容器"></a>创建rabbitmq容器</h5><ul>
<li>创建rabbitmq容器1：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --hostname rabbit1 --name myrabbit1 -p 15672:15672 -p 5672:5672 -e RABBITMQ_ERLANG_COOKIE=&#x27;rabbitcookie&#x27; rabbitmq:3.6.15-management</span><br></pre></td></tr></table></figure>



<ul>
<li>创建rabbitmq容器2：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d --hostname rabbit2 --name myrabbit2 -p 15673:15672 -p 5673:5672 --link&#x3D;myrabbit1:rabbit1 -e RABBITMQ_ERLANG_COOKIE&#x3D;&#39;rabbitcookie&#39; rabbitmq:3.6.15-management</span><br></pre></td></tr></table></figure>







<p>解释：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--link &lt;name or id&gt;:alias</span><br><span class="line">其中，name和id是源容器的name和id，alias是源容器在link下的别名。</span><br><span class="line"></span><br><span class="line">--link  用于在容器中进行通信的时候需要使用到的。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-e RABBITMQ_ERLANG_COOKIE&#x3D;&#39;rabbitcookie&#39;</span><br><span class="line">其中 -e 设置环境变量  变量名为：RABBITMQ_ERLANG_COOKIE  值为：rabbitcookie  该值可以任意。 但是一定要注意，两个容器的cookie值一定要一样才行。他的作用用于发现不同的节点，并通过该cookie进行自动校验和通信使用。</span><br><span class="line"></span><br><span class="line">--hostname rabbit2  </span><br><span class="line">其中：--hostname 用于设置容器内部的hostname名称，如果不设置，那就会自动随机生成一个hostname字，如下图。</span><br><span class="line">这里一定要设置。因为rabbitmq的节点数据进行通信加入集群的时候需要用hostname作为集群名称。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1580365684227.png" alt="1580365684227"></p>
<h4 id="配置rabbitmq集群"><a href="#配置rabbitmq集群" class="headerlink" title="配置rabbitmq集群"></a>配置rabbitmq集群</h4><p>这里我们使用 集群名 rabbit@rabbit1 ,将节点2 加入到节点1号中。</p>
<h5 id="配置rabbit1"><a href="#配置rabbit1" class="headerlink" title="配置rabbit1"></a>配置rabbit1</h5><ul>
<li>进入到myrabbit1容器内部</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it myrabbit1 bash</span><br></pre></td></tr></table></figure>



<ul>
<li>配置节点</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>



<p>解释：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmqctl stop_app  --- 表示关闭节点</span><br><span class="line">rabbitmqctl reset     --- 重新设置节点配置</span><br><span class="line">rabbitmqctl start_app --- 重新启动 （此处不需要设置 ，将该节点作为集群master,其他节点加入到该节点中）</span><br><span class="line">exit ---退出容器</span><br></pre></td></tr></table></figure>





<h5 id="配置rabbitmq2"><a href="#配置rabbitmq2" class="headerlink" title="配置rabbitmq2"></a>配置rabbitmq2</h5><ul>
<li>进入到myrabbit2容器内部</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it myrabbit2 bash</span><br></pre></td></tr></table></figure>



<ul>
<li>配置节点</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl join_cluster --ram rabbit@rabbit1</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>





<p>解释：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmqctl join_cluster --ram rabbit@rabbit1</span><br><span class="line"></span><br><span class="line">--  用于将该节点加入到集群中  </span><br><span class="line">--  ram   设置为内存存储，默认为 disc 磁盘存储，如果为磁盘存储可以不用配置ram</span><br><span class="line">-- rabbit@rabbit1   该 配置 为节点集群名称：集群名称为：rabbit@server  而server指定就是hostname的名称。</span><br></pre></td></tr></table></figure>





<p>配置完成，打开web管理界面，如下图所示：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1580366249061.png" alt="1580366249061"></p>
<h4 id="配置镜像队列"><a href="#配置镜像队列" class="headerlink" title="配置镜像队列"></a>配置镜像队列</h4><p>如上，我们已经搭建好了集群，但是并不能做到高可用，所以需要配置升级为镜像队列。</p>
<p>在任意的节点（A或者B）中执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmqctl set_policy ha-all &quot;^&quot; &#39;&#123;&quot;ha-mode&quot;:&quot;all&quot;&#125;&#39;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">解释</span><br><span class="line">rabbitmqctl set_policy </span><br><span class="line">	用于设置策略</span><br><span class="line">ha-all </span><br><span class="line">	表示设置为镜像队列并策略为所有节点可用 ，意味着 队列会被（同步）到所有的节点，当一个节点被加入到集群中时，也会同步到新的节点中，此策略比较保守，性能相对低，对接使用半数原则方式设置（N&#x2F;2+1），例如：有3个结点 此时可以设置为：ha-two 表示同步到2个结点即可。</span><br><span class="line">&quot;^&quot;  表示针对的队列的名称的正则表达式，此处表示匹配所有的队列名称</span><br><span class="line">&#39;&#123;&quot;ha-mode&quot;:&quot;all&quot;&#125;&#39; 设置一组key&#x2F;value的JSON 设置为高可用模式 匹配所有exchange</span><br></pre></td></tr></table></figure>



<p>此时查看web管理界面：添加一个队列itcast111,如下图已经可以出现结果为有一个结点，并且是ha-all模式（镜像队列模式）</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1558710954128.png" alt="1558710954128"></p>
<h4 id="springboot整合rabbitmq集群使用"><a href="#springboot整合rabbitmq集群使用" class="headerlink" title="springboot整合rabbitmq集群使用"></a>springboot整合rabbitmq集群使用</h4><p>修改原来redis测试的项目，</p>
<p>(1)加入pom.xml依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2）配置application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">192.168</span><span class="number">.25</span><span class="number">.130</span><span class="string">:5672,192.168.25.134:5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br></pre></td></tr></table></figure>



<p>(3)创建controller </p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1558712064320.png" alt="1558712064320"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.changgouredisdemo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.changgouredisdemo.pojo.TbUser;</span><br><span class="line"><span class="keyword">import</span> com.itheima.changgouredisdemo.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 三国的包子</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> com.itheima.changgouredisdemo.controller *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findOne/&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TbUser <span class="title">findOne</span><span class="params">(<span class="meta">@PathVariable</span> String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findOne(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/send&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">ok</span><span class="params">()</span></span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;itcast111&quot;</span>,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>(4)设置监听：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1558712112000.png" alt="1558712112000"></p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.changgouredisdemo.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 三国的包子</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> com.itheima.changgouredisdemo.listener *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;itcast111&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lisnter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;123131&quot;</span>);</span><br><span class="line">        System.out.println(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>测试，在浏览器中输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:9008&#x2F;user&#x2F;send</span><br></pre></td></tr></table></figure>

<p>测试当宕机一台rabbitmq也能发送成功。</p>
<p>如下效果。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/redis/images/1558712149146.png" alt="1558712149146"></p>
]]></content>
      <categories>
        <category>集群高可用</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索和数据分析引擎--Elasticsearch</title>
    <url>/jwangcloud/2538997289/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/ES.jpeg" width="1000" height="200" align="middle">

<h2 id="Elasticsearch-安装"><a href="#Elasticsearch-安装" class="headerlink" title="Elasticsearch 安装"></a>Elasticsearch 安装</h2><span id="more"></span>

<p>docker安装elasticsearch</p>
<p>(1)docker镜像下载</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">pull elasticsearch:5.6.8</span></span><br></pre></td></tr></table></figure>


<p>(2)安装es容器</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run -di --name=jwang_elasticsearch -p 9200:9200 -p 9300:9300 elasticsearch:5.6.8</span></span><br></pre></td></tr></table></figure>

<ul>
<li> 9200端口(Web管理平台端口)  9300(服务默认端口)</li>
</ul>
<p>浏览器输入地址访问：<code>http://192.168.211.132:9200/</code></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1559425749415.png" alt="1559425749415"></p>
<p>(3)开启远程连接</p>
<p>上面完成安装后，es并不能正常使用，elasticsearch从5版本以后默认不开启远程连接，程序直接连接会报如下错误：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">failed to load elasticsearch nodes : org.elasticsearch.client.transport.NoNodeAvailableException: None of the configured nodes are available: [&#123;#transport#-1&#125;&#123;5ttLpMhkRjKLkvoY7ltUWg&#125;&#123;192.168.211.132&#125;&#123;192.168.211.132:9300&#125;]</span><br></pre></td></tr></table></figure>

<p>我们需要修改es配置开启远程链接：</p>
<p>copy elasticsearch.yml文件到宿主机，修改之后在copy回去</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp jwang_elasticsearch:/usr/share/elasticsearch/config/elasticsearch.yml ./</span><br></pre></td></tr></table></figure>

<p>修改elasticsearch.yml文件 vim elasticsearch.yml</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1609080027289.png" alt="1609080027289"></p>
<p>copy回docker容器中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp ./elasticsearch.yml jwang_elasticsearch:/usr/share/elasticsearch/config/</span><br></pre></td></tr></table></figure>



<p>(4)系统参数配置</p>
<p>重启后发现重启启动失败了，这时什么原因呢？这与我们刚才修改的配置有关，因为elasticsearch在启动的时候会进行一些检查，比如最多打开的文件的个数以及虚拟内存区域数量等等，如果你放开了此配置，意味着需要打开更多的文件以及虚拟内存，所以我们还需要系统调优 </p>
<p>修改vi /etc/security/limits.conf ，追加内容 (nofile是单个进程允许打开的最大文件个数 soft nofile 是软限制 hard nofile是硬限制 )</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">*</span> <span class="string">soft nofile 65536</span></span><br><span class="line"><span class="meta">*</span> <span class="string">hard nofile 65536</span></span><br></pre></td></tr></table></figure>

<p>修改vi /etc/sysctl.conf，追加内容 (限制一个进程可以拥有的VMA(虚拟内存区域)的数量 )</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">vm.max_map_count</span>=<span class="string">655360</span></span><br></pre></td></tr></table></figure>

<p>执行下面命令 修改内核参数马上生效</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">sysctl</span> <span class="string">-p</span></span><br></pre></td></tr></table></figure>

<p>重新启动虚拟机，再次启动容器，发现已经可以启动并远程访问 </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">reboot</span></span><br></pre></td></tr></table></figure>



<p>(5)创建es-head插件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull docker.io/mobz/elasticsearch-head:5</span><br><span class="line"></span><br><span class="line">docker run -di --name=es-head -p 9100:9100 docker.io/mobz/elasticsearch-head:5</span><br></pre></td></tr></table></figure>



<p>(6)跨域配置</p>
<p>修改elasticsearch/config下的配置文件：elasticsearch.yml，增加以下三句命令，并重启:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">http.cors.enabled</span>: <span class="string">true</span></span><br><span class="line"><span class="meta">http.cors.allow-origin</span>: <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="meta">network.host</span>: <span class="string">192.168.211.132</span></span><br></pre></td></tr></table></figure>

<p>其中：<br>http.cors.enabled: true：此步为允许elasticsearch跨域访问，默认是false。<br>http.cors.allow-origin: “<em>“：表示跨域访问允许的域名地址（</em>表示任意）。</p>
<p>重启</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">restart jwang_elasticsearch</span></span><br></pre></td></tr></table></figure>

<p>小提示：如果想让容器开启重启，可以执行下面命令</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">update --restart=always 容器名称或者容器id</span></span><br></pre></td></tr></table></figure>



<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1584928112187.png" alt="1584928112187"></p>
<h2 id="IK分词器安装"><a href="#IK分词器安装" class="headerlink" title="IK分词器安装"></a>IK分词器安装</h2><p>(1)安装ik分词器</p>
<p>IK分词器下载地址<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p>
<p>将ik分词器上传到服务器上，然后解压，并改名字为ik</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">unzip</span> <span class="string">elasticsearch-analysis-ik-5.6.8.zip</span></span><br><span class="line"><span class="attr">mv</span> <span class="string">elasticsearch ik</span></span><br></pre></td></tr></table></figure>

<p>将ik目录拷贝到docker容器的plugins目录下</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">cp ./ik jwang_elasticsearch:/usr/share/elasticsearch/plugins</span></span><br></pre></td></tr></table></figure>

<p>重启容器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker restart jwang_elasticsearch</span><br></pre></td></tr></table></figure>

<p>(2)IK分词器测试</p>
<p>访问：<code>http://192.168.211.132:9200/_analyze?analyzer=ik_smart&amp;pretty=true&amp;text=我是程序员</code></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1559427846075.png" alt="1559427846075"></p>
<p>访问：<code>http://192.168.211.132:9200/_analyze?analyzer=ik_max_word&amp;pretty=true&amp;text=我是程序员</code></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1559427892947.png" alt="1559427892947"></p>
<h2 id="Kibana使用-掌握DSL语句"><a href="#Kibana使用-掌握DSL语句" class="headerlink" title="Kibana使用-掌握DSL语句"></a>Kibana使用-掌握DSL语句</h2><p>我们上面使用的是elasticsearch-head插件实现数据查找的，但是elasticsearch-head的功能比较单一，我们这里需要一个更专业的工具实现对日志的实时分析，也就是我们接下来要讲的kibana。</p>
<p>Kibana 是一款开源的数据分析和可视化平台，它是 Elastic Stack 成员之一，设计用于和 Elasticsearch 协作。您可以使用 Kibana 对 Elasticsearch 索引中的数据进行搜索、查看、交互操作。您可以很方便的利用图表、表格及地图对数据进行多元化的分析和呈现。</p>
<p>Kibana 可以使大数据通俗易懂。它很简单，基于浏览器的界面便于您快速创建和分享动态数据仪表板来追踪 Elasticsearch 的实时数据变化。</p>
<p>搭建 Kibana 非常简单。您可以分分钟完成 Kibana 的安装并开始探索 Elasticsearch 的索引数据 — 没有代码、不需要额外的基础设施。</p>
<h3 id="Kibana下载安装"><a href="#Kibana下载安装" class="headerlink" title="Kibana下载安装"></a>Kibana下载安装</h3><p>我们项目中不再使用linux，直接使用Docker，所有这里就不演示在windows的下载安装了。</p>
<p>(1)镜像下载</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">pull docker.io/kibana:5.6.8</span></span><br></pre></td></tr></table></figure>


<p>(2)安装kibana容器</p>
<p>执行如下命令，开始安装kibana容器</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">docker</span> <span class="string">run -it -d -e ELASTICSEARCH_URL=http://192.168.211.132:9200 --name kibana --restart=always -p 5601:5601 kibana:5.6.8</span></span><br></pre></td></tr></table></figure>

<p>ELASTICSEARCH_URL=<a href="http://192.168.211.132:9200：是指链接的ES地址">http://192.168.211.132:9200：是指链接的ES地址</a></p>
<p>restart=always:每次服务都会重启，也就是开启启动</p>
<p>5601:5601:端口号</p>
<p>(3)访问测试</p>
<p>访问<code>http://192.168.211.132:5601</code>如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1559533771948.png" alt="1559533771948"></p>
<h3 id="Kibana使用"><a href="#Kibana使用" class="headerlink" title="Kibana使用"></a>Kibana使用</h3><h4 id="配置索引"><a href="#配置索引" class="headerlink" title="配置索引"></a>配置索引</h4><p>要使用Kibana，您必须至少配置一个索引。索引用于标识Elasticsearch索引以运行搜索和分析。它们还用于配置字段。 </p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1554423078755.png" alt="1554423078755"></p>
<p>我们修改索引名称的匹配方式即可，下面2个选项不用勾选。点击create，会展示出当前配置的索引的域信息，如下图：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1554423578891.png" alt="1554423578891"></p>
<p>域的每个标题选项分别代表如下意思：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1554423779455.png" alt="1554423779455"></p>
<h4 id="数据搜索"><a href="#数据搜索" class="headerlink" title="数据搜索"></a>数据搜索</h4><p>Discover为数据搜索部分，可以对日志信息进行搜索操作。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1554501163624.png" alt="1554501163624"></p>
<p>可以使用Discover实现数据搜索过滤和搜索条件显示以及关键词搜索，如下图：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1554501381459.png" alt="1554501381459"></p>
<h4 id="DSL语句使用"><a href="#DSL语句使用" class="headerlink" title="DSL语句使用"></a>DSL语句使用</h4><h5 id="Query-DSL结构化查询介绍"><a href="#Query-DSL结构化查询介绍" class="headerlink" title="Query DSL结构化查询介绍"></a>Query DSL结构化查询介绍</h5><p>Query DSL是一个Java开源框架用于构建类型安全的SQL查询语句。采用API代替传统的拼接字符串来构造查询语句。目前Querydsl支持的平台包括JPA,JDO，SQL，Java Collections，RDF，Lucene，Hibernate Search。elasticsearch提供了一整套基于JSON的查询DSL语言来定义查询。<br>Query DSL当作是一系列的抽象的查询表达式树(AST)特定查询能够包含其它的查询，(如 bool ), 有些查询能够包含过滤器(如 constant_score), 还有的可以同时包含查询和过滤器 (如 filtered). 都能够从ES支持查询集合里面选择任意一个查询或者是从过滤器集合里面挑选出任意一个过滤器, 这样的话，我们就可以构造出任意复杂（maybe 非常有趣）的查询了。</p>
<h5 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h5><p>(1)查询所有索引</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">GET</span> <span class="string">/_cat/indices?v</span></span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1564603562118.png" alt="1564603562118"></p>
<p>(2)删除某个索引</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">DELETE</span> <span class="string">/skuinfo</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1564603680699.png" alt="1564603680699"></p>
<p>(3)新增索引</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">PUT</span> <span class="string">/user</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1564603974567.png" alt="1564603974567"></p>
<p>(4)创建映射</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">PUT</span> <span class="string">/user/userinfo/_mapping</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;properties&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="meta">&quot;name&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">      <span class="meta">&quot;type&quot;</span>: <span class="string">&quot;text&quot;,</span></span><br><span class="line">      <span class="meta">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;,</span></span><br><span class="line">      <span class="meta">&quot;search_analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;,</span></span><br><span class="line">      <span class="meta">&quot;store&quot;</span>: <span class="string">false</span></span><br><span class="line">    <span class="attr">&#125;,</span></span><br><span class="line">    <span class="meta">&quot;city&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">      <span class="meta">&quot;type&quot;</span>: <span class="string">&quot;text&quot;,</span></span><br><span class="line">      <span class="meta">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;,</span></span><br><span class="line">      <span class="meta">&quot;search_analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;,</span></span><br><span class="line">      <span class="meta">&quot;store&quot;</span>: <span class="string">false</span></span><br><span class="line">    <span class="attr">&#125;,</span></span><br><span class="line">    <span class="meta">&quot;age&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">      <span class="meta">&quot;type&quot;</span>: <span class="string">&quot;long&quot;,</span></span><br><span class="line">      <span class="meta">&quot;store&quot;</span>: <span class="string">false</span></span><br><span class="line">    <span class="attr">&#125;,</span></span><br><span class="line">    <span class="meta">&quot;description&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">      <span class="meta">&quot;type&quot;</span>: <span class="string">&quot;text&quot;,</span></span><br><span class="line">      <span class="meta">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;,</span></span><br><span class="line">      <span class="meta">&quot;search_analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;,</span></span><br><span class="line">      <span class="meta">&quot;store&quot;</span>: <span class="string">false</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1564604795013.png" alt="1564604795013"></p>
<p>(5)新增文档数据</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">PUT</span> <span class="string">/user/userinfo/1</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;name&quot;</span>:<span class="string">&quot;李四&quot;,</span></span><br><span class="line">  <span class="meta">&quot;age&quot;</span>:<span class="string">22,</span></span><br><span class="line">  <span class="meta">&quot;city&quot;</span>:<span class="string">&quot;深圳&quot;,</span></span><br><span class="line">  <span class="meta">&quot;description&quot;</span>:<span class="string">&quot;李四来自湖北武汉！&quot;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1564604217330.png" alt="1564604217330"></p>
<p>(6)修改数据</p>
<p><strong>a.替换操作</strong></p>
<p>更新数据可以使用之前的增加操作,这种操作会将整个数据替换掉，代码如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#更新数据,id=4</span></span><br><span class="line"><span class="attr">PUT</span> <span class="string">/user/userinfo/4</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;name&quot;</span>:<span class="string">&quot;张三丰&quot;,</span></span><br><span class="line">  <span class="meta">&quot;description&quot;</span>:<span class="string">&quot;在武汉读书，家在武汉！在深圳工作！&quot;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1564606854935.png" alt="1564606854935"></p>
<p>使用GET命令查看：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#根据ID查询</span></span><br><span class="line"><span class="attr">GET</span> <span class="string">/user/userinfo/4</span></span><br></pre></td></tr></table></figure>



<p><strong>b.更新操作</strong></p>
<p>我们先使用下面命令恢复数据：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#恢复文档数据 id=4</span></span><br><span class="line"><span class="attr">PUT</span> <span class="string">/user/userinfo/4</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;name&quot;</span>:<span class="string">&quot;张三丰&quot;,</span></span><br><span class="line">  <span class="meta">&quot;age&quot;</span>:<span class="string">66,</span></span><br><span class="line">  <span class="meta">&quot;city&quot;</span>:<span class="string">&quot;武汉&quot;,</span></span><br><span class="line">  <span class="meta">&quot;description&quot;</span>:<span class="string">&quot;在武汉读书，家在武汉！&quot;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>

<p>使用POST更新某个列的数据</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用POST更新某个域的数据</span></span><br><span class="line"><span class="attr">POST</span> <span class="string">/user/userinfo/4/_update</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;doc&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="meta">&quot;name&quot;</span>:<span class="string">&quot;张三丰&quot;,</span></span><br><span class="line">    <span class="meta">&quot;description&quot;</span>:<span class="string">&quot;在武汉读书，家在武汉！在深圳工作！&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1564607209527.png" alt="1564607209527"></p>
<p>使用GET命令查看：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#根据ID查询</span></span><br><span class="line"><span class="attr">GET</span> <span class="string">/user/userinfo/4</span></span><br></pre></td></tr></table></figure>


<p>(7)删除Document</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除数据</span></span><br><span class="line"><span class="attr">DELETE</span> <span class="string">user/userinfo/7</span></span><br></pre></td></tr></table></figure>



<h5 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h5><p>(1)查询所有数据</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询所有</span></span><br><span class="line"><span class="attr">GET</span> <span class="string">/user/_search</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1564605593912.png" alt="1564605593912"></p>
<p>(2)根据ID查询</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#根据ID查询</span></span><br><span class="line"><span class="attr">GET</span> <span class="string">/user/userinfo/2</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1564605676871.png" alt="1564605676871"></p>
<p>(3)Sort排序</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#搜索排序</span></span><br><span class="line"><span class="attr">GET</span> <span class="string">/user/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;query&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="meta">&quot;match_all&quot;</span>: <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="attr">&#125;,</span></span><br><span class="line">  <span class="meta">&quot;sort&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="meta">&quot;age&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">      <span class="meta">&quot;order&quot;</span>:<span class="string">&quot;desc&quot;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1564605923564.png" alt="1564605923564"></p>
<p>(4)分页</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#分页实现</span></span><br><span class="line"><span class="attr">GET</span> <span class="string">/user/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;query&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="meta">&quot;match_all&quot;</span>: <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="attr">&#125;,</span></span><br><span class="line">  <span class="meta">&quot;sort&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="meta">&quot;age&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">      <span class="meta">&quot;order&quot;</span>:<span class="string">&quot;desc&quot;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;,</span></span><br><span class="line">  <span class="meta">&quot;from&quot;</span>: <span class="string">0,</span></span><br><span class="line">  <span class="meta">&quot;size&quot;</span>: <span class="string">2</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>

<p>解释：</p>
<p>from:从下N的记录开始查询</p>
<p>size:每页显示条数</p>
<p>效果如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1564606466826.png" alt="1564606466826"></p>
<h5 id="过滤查询"><a href="#过滤查询" class="headerlink" title="过滤查询"></a>过滤查询</h5><p>(1)term过滤</p>
<p>term主要用于分词精确匹配，如字符串、数值、日期等（不适合情况：1.列中除英文字符外有其它值 2.字符串值中有冒号或中文 3.系统自带属性如_version） </p>
<p>如下案例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#过滤查询-term</span><br><span class="line">GET _search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;term&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;city&quot;</span>:<span class="string">&quot;武汉&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1564607758341.png" alt="1564607758341"></p>
<p>(2)terms 过滤</p>
<p>terms 跟 term 有点类似，但 terms 允许指定多个匹配条件。 如果某个字段指定了多个值，那么文档需要一起去做匹配 。</p>
<p>案例如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#过滤查询-terms 允许多个Term</span><br><span class="line">GET _search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;terms&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;city&quot;</span>:</span><br><span class="line">        [</span><br><span class="line">          <span class="string">&quot;武汉&quot;</span>,</span><br><span class="line">          <span class="string">&quot;广州&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>果如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1564608161056.png" alt="1564608161056"></p>
<p>(3) range 过滤</p>
<p>range过滤允许我们按照指定范围查找一批数据。例如我们查询年龄范围</p>
<p>案例如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#过滤-range 范围过滤</span><br><span class="line">#gt表示&gt; gte表示=&gt;</span><br><span class="line">#lt表示&lt; lte表示&lt;=</span><br><span class="line">GET _search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;range&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;age&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;gte&quot;</span>: <span class="number">30</span>,</span><br><span class="line">        <span class="attr">&quot;lte&quot;</span>: <span class="number">57</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上图效果如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1564608377202.png" alt="1564608377202"></p>
<p>(4)exists过滤</p>
<p>exists 过滤可以用于查找拥有某个域的数据 </p>
<p>案例如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#过滤搜索 exists：是指包含某个域的数据检索</span><br><span class="line">GET _search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;exists&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;field&quot;</span>:<span class="string">&quot;address&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1564608891037.png" alt="1564608891037"></p>
<p>(5) bool 过滤</p>
<p>bool 过滤可以用来合并多个过滤条件查询结果的布尔逻辑，它包含一下操作符：</p>
<ul>
<li>must : 多个查询条件的完全匹配,相当于 and。</li>
<li>must_not : 多个查询条件的相反匹配，相当于 not。</li>
<li>should : 至少有一个查询条件匹配, 相当于 or。</li>
</ul>
<p>这些参数可以分别继承一个过滤条件或者一个过滤条件的数组：</p>
<p>案例如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#过滤搜索 bool </span><br><span class="line">#must : 多个查询条件的完全匹配,相当于 and。</span><br><span class="line">#must_not : 多个查询条件的相反匹配，相当于 not。</span><br><span class="line">#should : 至少有一个查询条件匹配, 相当于 or。</span><br><span class="line">GET _search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;must&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;city&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;深圳&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;range&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;age&quot;</span>:&#123;</span><br><span class="line">              <span class="attr">&quot;gte&quot;</span>:<span class="number">20</span>,</span><br><span class="line">              <span class="attr">&quot;lte&quot;</span>:<span class="number">99</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1564609793695.png" alt="1564609793695"></p>
<p>(6) match_all 查询</p>
<p>可以查询到所有文档，是没有查询条件下的默认语句。 </p>
<p>案例如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#查询所有 match_all</span><br><span class="line">GET _search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(7) match 查询</p>
<p>match查询是一个标准查询，不管你需要全文本查询还是精确查询基本上都要用到它。</p>
<p>如果你使用 match 查询一个全文本字段，它会在真正查询之前用分析器先分析match一下查询字符：</p>
<p>案例如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#字符串匹配</span><br><span class="line">GET _search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;武汉&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1564609964569.png" alt="1564609964569"></p>
<p>(8)prefix 查询</p>
<p>以什么字符开头的，可以更简单地用 prefix ,例如查询所有以张开始的用户描述</p>
<p>案例如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#前缀匹配 prefix</span></span><br><span class="line"><span class="attr">GET</span> <span class="string">_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;query&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="meta">&quot;prefix&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="meta">&quot;name&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="meta">&quot;value&quot;</span>: <span class="string">&quot;赵&quot;</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1564610088455.png" alt="1564610088455"></p>
<p>(9)multi_match 查询</p>
<p>multi_match查询允许你做match查询的基础上同时搜索多个字段，在多个字段中同时查一个 </p>
<p>案例如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#多个域匹配搜索</span><br><span class="line">GET _search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;multi_match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;深圳&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;fields&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;city&quot;</span>,</span><br><span class="line">        <span class="string">&quot;description&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1564610272233.png" alt="1564610272233"></p>
<h5 id="高亮查询"><a href="#高亮查询" class="headerlink" title="高亮查询"></a>高亮查询</h5><p>执行查询的DSL语句：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">GET</span> <span class="string">user/_search</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;:</span> &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;:</span> &#123;</span><br><span class="line">      <span class="attr">&quot;description&quot;:</span> <span class="string">&quot;武汉&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;highlight&quot;:</span> &#123;</span><br><span class="line">    <span class="attr">&quot;pre_tags&quot;:</span> <span class="string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;post_tags&quot;:</span> <span class="string">&quot;&lt;/span&gt;&quot;</span>, </span><br><span class="line">    <span class="attr">&quot;fields&quot;:</span> &#123;</span><br><span class="line">      <span class="attr">&quot;description&quot;:</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>查询结果：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1578022792956.png" alt="1578022792956"></p>
<h3 id="完整DSL语句代码"><a href="#完整DSL语句代码" class="headerlink" title="完整DSL语句代码"></a>完整DSL语句代码</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看所有索引</span></span><br><span class="line"><span class="attr">GET</span> <span class="string">/_cat/indices?v</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除某个索引</span></span><br><span class="line"><span class="attr">DELETE</span> <span class="string">/skuinfo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#新增索引</span></span><br><span class="line"><span class="attr">PUT</span> <span class="string">/user</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建映射</span></span><br><span class="line"><span class="attr">PUT</span> <span class="string">/user/userinfo/_mapping</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;properties&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="meta">&quot;name&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">      <span class="meta">&quot;type&quot;</span>: <span class="string">&quot;text&quot;,</span></span><br><span class="line">      <span class="meta">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;,</span></span><br><span class="line">      <span class="meta">&quot;search_analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;,</span></span><br><span class="line">      <span class="meta">&quot;store&quot;</span>: <span class="string">false</span></span><br><span class="line">    <span class="attr">&#125;,</span></span><br><span class="line">    <span class="meta">&quot;city&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">      <span class="meta">&quot;type&quot;</span>: <span class="string">&quot;text&quot;,</span></span><br><span class="line">      <span class="meta">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;,</span></span><br><span class="line">      <span class="meta">&quot;search_analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;,</span></span><br><span class="line">      <span class="meta">&quot;store&quot;</span>: <span class="string">false</span></span><br><span class="line">    <span class="attr">&#125;,</span></span><br><span class="line">    <span class="meta">&quot;age&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">      <span class="meta">&quot;type&quot;</span>: <span class="string">&quot;long&quot;,</span></span><br><span class="line">      <span class="meta">&quot;store&quot;</span>: <span class="string">false</span></span><br><span class="line">    <span class="attr">&#125;,</span></span><br><span class="line">    <span class="meta">&quot;description&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">      <span class="meta">&quot;type&quot;</span>: <span class="string">&quot;text&quot;,</span></span><br><span class="line">      <span class="meta">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;,</span></span><br><span class="line">      <span class="meta">&quot;search_analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;,</span></span><br><span class="line">      <span class="meta">&quot;store&quot;</span>: <span class="string">false</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#新增文档数据 id=1</span></span><br><span class="line"><span class="attr">PUT</span> <span class="string">/user/userinfo/1</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;name&quot;</span>:<span class="string">&quot;李四&quot;,</span></span><br><span class="line">  <span class="meta">&quot;age&quot;</span>:<span class="string">22,</span></span><br><span class="line">  <span class="meta">&quot;city&quot;</span>:<span class="string">&quot;深圳&quot;,</span></span><br><span class="line">  <span class="meta">&quot;description&quot;</span>:<span class="string">&quot;李四来自湖北武汉！&quot;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#新增文档数据 id=2</span></span><br><span class="line"><span class="attr">PUT</span> <span class="string">/user/userinfo/2</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;name&quot;</span>:<span class="string">&quot;王五&quot;,</span></span><br><span class="line">  <span class="meta">&quot;age&quot;</span>:<span class="string">35,</span></span><br><span class="line">  <span class="meta">&quot;city&quot;</span>:<span class="string">&quot;深圳&quot;,</span></span><br><span class="line">  <span class="meta">&quot;description&quot;</span>:<span class="string">&quot;王五家住在深圳！&quot;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#新增文档数据 id=3</span></span><br><span class="line"><span class="attr">PUT</span> <span class="string">/user/userinfo/3</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;,</span></span><br><span class="line">  <span class="meta">&quot;age&quot;</span>:<span class="string">19,</span></span><br><span class="line">  <span class="meta">&quot;city&quot;</span>:<span class="string">&quot;深圳&quot;,</span></span><br><span class="line">  <span class="meta">&quot;description&quot;</span>:<span class="string">&quot;在深圳打工，来自湖北武汉&quot;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#新增文档数据 id=4</span></span><br><span class="line"><span class="attr">PUT</span> <span class="string">/user/userinfo/4</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;name&quot;</span>:<span class="string">&quot;张三丰&quot;,</span></span><br><span class="line">  <span class="meta">&quot;age&quot;</span>:<span class="string">66,</span></span><br><span class="line">  <span class="meta">&quot;city&quot;</span>:<span class="string">&quot;武汉&quot;,</span></span><br><span class="line">  <span class="meta">&quot;description&quot;</span>:<span class="string">&quot;在武汉读书，家在武汉！&quot;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#新增文档数据 id=5</span></span><br><span class="line"><span class="attr">PUT</span> <span class="string">/user/userinfo/5</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;name&quot;</span>:<span class="string">&quot;赵子龙&quot;,</span></span><br><span class="line">  <span class="meta">&quot;age&quot;</span>:<span class="string">77,</span></span><br><span class="line">  <span class="meta">&quot;city&quot;</span>:<span class="string">&quot;广州&quot;,</span></span><br><span class="line">  <span class="meta">&quot;description&quot;</span>:<span class="string">&quot;赵子龙来自深圳宝安，但是在广州工作！&quot;,</span></span><br><span class="line">  <span class="meta">&quot;address&quot;</span>:<span class="string">&quot;广东省茂名市&quot;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#新增文档数据 id=6</span></span><br><span class="line"><span class="attr">PUT</span> <span class="string">/user/userinfo/6</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;name&quot;</span>:<span class="string">&quot;赵毅&quot;,</span></span><br><span class="line">  <span class="meta">&quot;age&quot;</span>:<span class="string">55,</span></span><br><span class="line">  <span class="meta">&quot;city&quot;</span>:<span class="string">&quot;广州&quot;,</span></span><br><span class="line">  <span class="meta">&quot;description&quot;</span>:<span class="string">&quot;赵毅来自广州白云区，从事电子商务8年！&quot;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#新增文档数据 id=7</span></span><br><span class="line"><span class="attr">PUT</span> <span class="string">/user/userinfo/7</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;name&quot;</span>:<span class="string">&quot;赵哈哈&quot;,</span></span><br><span class="line">  <span class="meta">&quot;age&quot;</span>:<span class="string">57,</span></span><br><span class="line">  <span class="meta">&quot;city&quot;</span>:<span class="string">&quot;武汉&quot;,</span></span><br><span class="line">  <span class="meta">&quot;description&quot;</span>:<span class="string">&quot;武汉赵哈哈，在深圳打工已有半年了，月薪7500！&quot;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#更新数据,id=4</span></span><br><span class="line"><span class="attr">PUT</span> <span class="string">/user/userinfo/4</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;name&quot;</span>:<span class="string">&quot;张三丰&quot;,</span></span><br><span class="line">  <span class="meta">&quot;description&quot;</span>:<span class="string">&quot;在武汉读书，家在武汉！在深圳工作！&quot;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#根据ID查询</span></span><br><span class="line"><span class="attr">GET</span> <span class="string">/user/userinfo/4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#恢复文档数据 id=4</span></span><br><span class="line"><span class="attr">PUT</span> <span class="string">/user/userinfo/4</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;name&quot;</span>:<span class="string">&quot;张三丰&quot;,</span></span><br><span class="line">  <span class="meta">&quot;age&quot;</span>:<span class="string">66,</span></span><br><span class="line">  <span class="meta">&quot;city&quot;</span>:<span class="string">&quot;武汉&quot;,</span></span><br><span class="line">  <span class="meta">&quot;description&quot;</span>:<span class="string">&quot;在武汉读书，家在武汉！&quot;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用POST更新某个域的数据</span></span><br><span class="line"><span class="attr">POST</span> <span class="string">/user/userinfo/4/_update</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;doc&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="meta">&quot;name&quot;</span>:<span class="string">&quot;张三丰&quot;,</span></span><br><span class="line">    <span class="meta">&quot;description&quot;</span>:<span class="string">&quot;在武汉读书，家在武汉！在深圳工作！&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#根据ID查询</span></span><br><span class="line"><span class="attr">GET</span> <span class="string">/user/userinfo/4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除数据</span></span><br><span class="line"><span class="attr">DELETE</span> <span class="string">user/userinfo/4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询所有</span></span><br><span class="line"><span class="attr">GET</span> <span class="string">/user/_search</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#根据ID查询</span></span><br><span class="line"><span class="attr">GET</span> <span class="string">/user/userinfo/2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#搜索排序</span></span><br><span class="line"><span class="attr">GET</span> <span class="string">/user/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;query&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="meta">&quot;match_all&quot;</span>: <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="attr">&#125;,</span></span><br><span class="line">  <span class="meta">&quot;sort&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="meta">&quot;age&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">      <span class="meta">&quot;order&quot;</span>:<span class="string">&quot;desc&quot;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#分页实现</span></span><br><span class="line"><span class="attr">GET</span> <span class="string">/user/_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;query&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="meta">&quot;match_all&quot;</span>: <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="attr">&#125;,</span></span><br><span class="line">  <span class="meta">&quot;sort&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="meta">&quot;age&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">      <span class="meta">&quot;order&quot;</span>:<span class="string">&quot;desc&quot;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;,</span></span><br><span class="line">  <span class="meta">&quot;from&quot;</span>: <span class="string">0,</span></span><br><span class="line">  <span class="meta">&quot;size&quot;</span>: <span class="string">2</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#过滤查询-term</span></span><br><span class="line"><span class="attr">GET</span> <span class="string">_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;query&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="meta">&quot;term&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">      <span class="meta">&quot;city&quot;</span>:<span class="string">&quot;武汉&quot;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#过滤查询-terms 允许多个Term</span></span><br><span class="line"><span class="attr">GET</span> <span class="string">_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;query&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="meta">&quot;terms&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">      <span class="meta">&quot;city&quot;</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">[</span></span><br><span class="line">          <span class="attr">&quot;武汉&quot;,</span></span><br><span class="line">          <span class="attr">&quot;广州&quot;</span></span><br><span class="line">        <span class="attr">]</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#过滤-range 范围过滤</span></span><br><span class="line"><span class="comment">#gt表示&gt; gte表示=&gt;</span></span><br><span class="line"><span class="comment">#lt表示&lt; lte表示&lt;=</span></span><br><span class="line"><span class="attr">GET</span> <span class="string">_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;query&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">    <span class="meta">&quot;range&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="meta">&quot;age&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="meta">&quot;gte&quot;</span>: <span class="string">30,</span></span><br><span class="line">        <span class="meta">&quot;lte&quot;</span>: <span class="string">57</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#过滤搜索 exists：是指包含某个域的数据检索</span></span><br><span class="line"><span class="attr">GET</span> <span class="string">_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;query&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="meta">&quot;exists&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">      <span class="meta">&quot;field&quot;</span>:<span class="string">&quot;address&quot;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#过滤搜索 bool </span></span><br><span class="line"><span class="comment">#must : 多个查询条件的完全匹配,相当于 and。</span></span><br><span class="line"><span class="comment">#must_not : 多个查询条件的相反匹配，相当于 not。</span></span><br><span class="line"><span class="comment">#should : 至少有一个查询条件匹配, 相当于 or。</span></span><br><span class="line"><span class="attr">GET</span> <span class="string">_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;query&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="meta">&quot;bool&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="meta">&quot;must&quot;</span>: <span class="string">[</span></span><br><span class="line">        <span class="attr">&#123;</span></span><br><span class="line">          <span class="meta">&quot;term&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">            <span class="meta">&quot;city&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">              <span class="meta">&quot;value&quot;</span>: <span class="string">&quot;深圳&quot;</span></span><br><span class="line">            <span class="attr">&#125;</span></span><br><span class="line">          <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">&#125;,</span></span><br><span class="line">        <span class="attr">&#123;</span></span><br><span class="line">          <span class="meta">&quot;range&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">            <span class="meta">&quot;age&quot;</span>:<span class="string">&#123;</span></span><br><span class="line">              <span class="meta">&quot;gte&quot;</span>:<span class="string">20,</span></span><br><span class="line">              <span class="meta">&quot;lte&quot;</span>:<span class="string">99</span></span><br><span class="line">            <span class="attr">&#125;</span></span><br><span class="line">          <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">      <span class="attr">]</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询所有 match_all</span></span><br><span class="line"><span class="attr">GET</span> <span class="string">_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;query&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="meta">&quot;match_all&quot;</span>: <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串匹配</span></span><br><span class="line"><span class="attr">GET</span> <span class="string">_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;query&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="meta">&quot;match&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="meta">&quot;description&quot;</span>: <span class="string">&quot;武汉&quot;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#前缀匹配 prefix</span></span><br><span class="line"><span class="attr">GET</span> <span class="string">_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;query&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="meta">&quot;prefix&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="meta">&quot;name&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="meta">&quot;value&quot;</span>: <span class="string">&quot;赵&quot;</span></span><br><span class="line">      <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#多个域匹配搜索</span></span><br><span class="line"><span class="attr">GET</span> <span class="string">_search</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">  <span class="meta">&quot;query&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">    <span class="meta">&quot;multi_match&quot;</span>: <span class="string">&#123;</span></span><br><span class="line">      <span class="meta">&quot;query&quot;</span>: <span class="string">&quot;深圳&quot;,</span></span><br><span class="line">      <span class="meta">&quot;fields&quot;</span>: <span class="string">[</span></span><br><span class="line">        <span class="attr">&quot;city&quot;,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span></span><br><span class="line">      <span class="attr">]</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>





<h2 id="数据导入ES"><a href="#数据导入ES" class="headerlink" title="数据导入ES"></a>数据导入ES</h2><h3 id="SpringData-Elasticsearch介绍"><a href="#SpringData-Elasticsearch介绍" class="headerlink" title="SpringData Elasticsearch介绍"></a>SpringData Elasticsearch介绍</h3><h4 id="SpringData介绍"><a href="#SpringData介绍" class="headerlink" title="SpringData介绍"></a>SpringData介绍</h4><p>Spring Data是一个用于简化数据库访问，并支持云服务的开源框架。其主要目标是使得对数据的访问变得方便快捷，并支持map-reduce框架和云计算数据服务。 Spring Data可以极大的简化JPA的写法，可以在几乎不用写实现的情况下，实现对数据的访问和操作。除了CRUD外，还包括如分页、排序等一些常用的功能。</p>
<p>Spring Data的官网：<a href="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/">http://projects.spring.io/spring-data/</a></p>
<h4 id="SpringData-ES介绍"><a href="#SpringData-ES介绍" class="headerlink" title="SpringData ES介绍"></a>SpringData ES介绍</h4><p>Spring Data ElasticSearch 基于 spring data API 简化 elasticSearch操作，将原始操作elasticSearch的客户端API 进行封装 。Spring Data为Elasticsearch项目提供集成搜索引擎。Spring Data Elasticsearch POJO的关键功能区域为中心的模型与Elastichsearch交互文档和轻松地编写一个存储库数据访问层。 官方网站：<a href="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/">http://projects.spring.io/spring-data-elasticsearch/ </a></p>
<h3 id="搜索工程搭建"><a href="#搜索工程搭建" class="headerlink" title="搜索工程搭建"></a>搜索工程搭建</h3><p>创建搜索微服务工程，jwang-service-search,该工程主要提供搜索服务以及索引数据的更新操作。</p>
<p>(1)API工程搭建</p>
<p>首先创建search的API工程,在jwang-service-api中创建jwang-service-search-api，如下图：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1560825278495.png" alt="1560825278495"></p>
<p>pom.xml如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jwang-service-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jwang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jwang-service-search-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--goods API依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jwang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jwang-service-goods-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringDataES依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>





<p>(2)搜索微服务搭建</p>
<p>在jwang-service中搭建jwang-service-search微服务，并进行相关配置。</p>
<p><strong>pom.xml配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jwang-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jwang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jwang-service-search<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--依赖search api--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jwang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jwang-service-search-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>application.yml配置</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">port</span>: <span class="string">18085</span></span><br><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">application</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">search</span></span><br><span class="line">  <span class="attr">data</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">elasticsearch</span>:<span class="string"></span></span><br><span class="line">      <span class="meta">cluster-name</span>: <span class="string">my-application</span></span><br><span class="line">      <span class="meta">cluster-nodes</span>: <span class="string">192.168.211.132:9300</span></span><br><span class="line"><span class="attr">eureka</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">client</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">service-url</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">defaultZone</span>: <span class="string">http://127.0.0.1:7001/eureka</span></span><br><span class="line">  <span class="attr">instance</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">prefer-ip-address</span>: <span class="string">true</span></span><br><span class="line"><span class="attr">feign</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">hystrix</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">enabled</span>: <span class="string">true</span></span><br><span class="line"><span class="comment">#超时配置</span></span><br><span class="line"><span class="attr">ribbon</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">ReadTimeout</span>: <span class="string">300000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">hystrix</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">command</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">default</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">execution</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">isolation</span>:<span class="string"></span></span><br><span class="line">          <span class="attr">thread</span>:<span class="string"></span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds</span>: <span class="string">10000</span></span><br></pre></td></tr></table></figure>

<p>配置说明：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">connection-timeout</span>:<span class="string">服务连接超时时间</span></span><br><span class="line"><span class="attr">socket-connect：HTTP请求超时时间</span></span><br><span class="line"><span class="meta">ribbon.ReadTimeout</span>: <span class="string">Feign请求读取数据超时时间</span></span><br><span class="line"><span class="attr">timeoutInMilliseconds：feign连接超时时间</span></span><br><span class="line"><span class="attr">cluster-name：Elasticsearch的集群节点名称，这里需要和Elasticsearch集群节点名称保持一致</span></span><br><span class="line"><span class="attr">cluster-nodes：Elasticsearch节点通信地址</span></span><br></pre></td></tr></table></figure>



<p>(3)启动类</p>
<p>创建com.jwang.SearchApplication作为搜索微服务工程的启动类，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(exclude=&#123;DataSourceAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Springboot整合Elasticsearch 在项目启动前设置一下的属性，防止报错</span></span><br><span class="line"><span class="comment">        * 解决netty冲突后初始化client时还会抛出异常</span></span><br><span class="line"><span class="comment">        * availableProcessors is already set to [12], rejecting [12]</span></span><br><span class="line"><span class="comment">        ***/</span></span><br><span class="line">        <span class="comment">//System.setProperty(&quot;es.set.netty.runtime.available.processors&quot;, &quot;false&quot;);</span></span><br><span class="line">        SpringApplication.run(SearchApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分别创建对应的包，dao、service、controller，如下图：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1560825119409.png" alt="1560825119409"></p>
<h3 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h3><p>现在需要将数据从数据库中查询出来，然后将数据导入到ES中。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1609080628068.png" alt="1609080628068"></p>
<p>数据导入流程如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">1.先将数据从数据库表中查询出来，将其导入到es服务器中</span></span><br><span class="line">	<span class="meta">1.1</span> <span class="string">商品微服务查询出商品sku表的数据</span></span><br><span class="line">	<span class="meta">1.2</span> <span class="string">搜索微服务通过feign调用商品微服务 获取到数据集（sku的列表数据）</span></span><br><span class="line">	<span class="meta">1.3</span> <span class="string">通过spring data elasticsearch api 将其导入到es服务器中（过程就是建立倒排索引结构，存储数据到文档区域中）</span></span><br><span class="line"><span class="attr">2.实现搜索功能</span></span><br></pre></td></tr></table></figure>



<h4 id="文档映射Bean创建"><a href="#文档映射Bean创建" class="headerlink" title="文档映射Bean创建"></a>文档映射Bean创建</h4><p>搜索商品的时候，会根据如下属性搜索数据,并且不是所有的属性都需要分词搜索，我们创建JavaBean，将JavaBean数据存入到ES中要以搜索条件和搜索展示结果为依据，部分关键搜索条件分析如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">1.可能会根据商品名称搜素，而且可以搜索商品名称中的任意一个词语，所以需要分词</span></span><br><span class="line"><span class="attr">2.可能会根据商品分类搜索，商品分类不需要分词</span></span><br><span class="line"><span class="attr">3.可能会根据商品品牌搜索，商品品牌不需要分词</span></span><br><span class="line"><span class="attr">4.可能会根据商品商家搜索，商品商家不需要分词</span></span><br><span class="line"><span class="attr">5.可能根据规格进行搜索，规格时一个键值对结构，用Map</span></span><br></pre></td></tr></table></figure>

<p>根据上面的分析，我们可以在jwang-service-search-api工程中创建com.jwang.search.pojo.SkuInfo，如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Document(indexName = &quot;skuinfo&quot;,type = &quot;docs&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SkuInfo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//商品id，同时也是商品编号</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SKU名称</span></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text, analyzer = &quot;ik_smart&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品价格，单位为：元</span></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Double)</span></span><br><span class="line">    <span class="keyword">private</span> Long price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//库存数量</span></span><br><span class="line">    <span class="keyword">private</span> Integer num;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品图片</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品状态，1-正常，2-下架，3-删除</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新时间</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否默认</span></span><br><span class="line">    <span class="keyword">private</span> String isDefault;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SPUID</span></span><br><span class="line">    <span class="keyword">private</span> Long spuId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//类目ID</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//类目名称</span></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Keyword)</span></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//品牌名称</span></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Keyword)</span></span><br><span class="line">    <span class="keyword">private</span> String brandName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//规格</span></span><br><span class="line">    <span class="keyword">private</span> String spec;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//规格参数</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; specMap;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//...略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>解释：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">Field的数据类型</span></span><br><span class="line"><span class="attr">Keyword</span>  <span class="string">表示字符串 关键字类型 ，一定是不分词的	</span></span><br><span class="line"><span class="attr">Text</span> 	<span class="string">表示字符串 文本类型 可以分词 也可以指定不分词</span></span><br></pre></td></tr></table></figure>



<h4 id="搜索审核通过Sku"><a href="#搜索审核通过Sku" class="headerlink" title="搜索审核通过Sku"></a>搜索审核通过Sku</h4><p>修改jwang-service-goods微服务，添加搜索审核通过的Sku，供search微服务调用。下面都是针对goods微服务的操作。</p>
<p>修改SkuService接口，添加根据状态查询Sku方法，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据状态查询SKU列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Sku&gt; <span class="title">findByStatus</span><span class="params">(String status)</span></span>;</span><br></pre></td></tr></table></figure>



<p>修改SkuServiceImpl，添加根据状态查询Sku实现方法，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 根据状态查询SKU列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Sku&gt; <span class="title">findByStatus</span><span class="params">(String status)</span> </span>&#123;</span><br><span class="line">    Sku sku = <span class="keyword">new</span> Sku();</span><br><span class="line">    sku.setStatus(status);</span><br><span class="line">    <span class="keyword">return</span> skuMapper.select(sku);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>修改com.jwang.goods.controller.SkuController，添加根据审核状态查询Sku方法，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 根据审核状态查询Sku</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;List&lt;Sku&gt;&gt; findByStatus(<span class="meta">@PathVariable</span> String status)&#123;</span><br><span class="line">    List&lt;Sku&gt; list = skuService.findByStatus(status);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;List&lt;Sku&gt;&gt;(<span class="keyword">true</span>,StatusCode.OK,<span class="string">&quot;查询成功&quot;</span>,list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="Sku导入ES实现"><a href="#Sku导入ES实现" class="headerlink" title="Sku导入ES实现"></a>Sku导入ES实现</h4><p>(1) Feign配置</p>
<p>修改jwang-service-goods-api工程，在com.jwang.goods.feign.SkuFeign上添加方法</p>
<p>加入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jwang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jwang-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(name=&quot;goods&quot;,path=&quot;/sku&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SkuFeign</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 根据审核状态查询Sku</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line">    Result&lt;List&lt;Sku&gt;&gt; findByStatus(<span class="meta">@PathVariable(name=&quot;status&quot;)</span> String status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PathVariable(name</span>=<span class="string">&quot;status&quot;) 一定要声明</span></span><br></pre></td></tr></table></figure>





<p>(2) Dao创建</p>
<p>修改jwang-service-search工程，创建com.jwang.search.dao.SkuEsMapper,该接口主要用于索引数据操作，主要使用它来实现将数据导入到ES索引库中，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SkuEsMapper</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">SkuInfo</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>(3) 服务层创建</p>
<p>修改jwang-service-search工程，创建com.jwang.search.service.SkuService,代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SkuService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 导入SKU数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">importSku</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>修改jwang-service-search工程，创建com.jwang.search.service.impl.SkuServiceImpl,实现Sku数据导入到ES中，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SkuServiceImpl</span> <span class="keyword">implements</span> <span class="title">SkuService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SkuFeign skuFeign;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SkuEsMapper skuEsMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导入sku数据到es</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">importSku</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//调用jwang-service-goods微服务</span></span><br><span class="line">        Result&lt;List&lt;Sku&gt;&gt; skuListResult = skuFeign.findByStatus(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="comment">//将数据转成search.Sku</span></span><br><span class="line">        List&lt;SkuInfo&gt; skuInfos=  JSON.parseArray(JSON.toJSONString(skuListResult.getData()),SkuInfo.class);</span><br><span class="line">        <span class="keyword">for</span>(SkuInfo skuInfo:skuInfos)&#123;</span><br><span class="line">            Map&lt;String, Object&gt; specMap= JSON.parseObject(skuInfo.getSpec()) ;</span><br><span class="line">            skuInfo.setSpecMap(specMap);</span><br><span class="line">        &#125;</span><br><span class="line">        skuEsMapper.saveAll(skuInfos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>(4)控制层配置</p>
<p>修改jwang-service-search工程，在com.jwang.search.controller.SkuController类中添加如下方法调用上述导入方法，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/search&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SkuController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SkuService skuService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导入数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/import&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">importToES</span><span class="params">()</span></span>&#123;</span><br><span class="line">        skuService.importSku();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">true</span>, StatusCode.OK,<span class="string">&quot;导入数据到索引库中成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>(5)修改启动类</p>
<p>启动类中需要开启Feign客户端，并且需要添加ES包扫描，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(exclude=&#123;DataSourceAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.jwang.goods.feign&quot;)</span></span><br><span class="line"><span class="comment">//@EnableElasticsearchRepositories(basePackages = &quot;com.jwang.search.dao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Springboot整合Elasticsearch 在项目启动前设置一下的属性，防止报错</span></span><br><span class="line"><span class="comment">        * 解决netty冲突后初始化client时还会抛出异常</span></span><br><span class="line"><span class="comment">        * java.lang.IllegalStateException: availableProcessors is already set to [12], rejecting [12]</span></span><br><span class="line"><span class="comment">        ***/</span></span><br><span class="line">        System.setProperty(<span class="string">&quot;es.set.netty.runtime.available.processors&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">        SpringApplication.run(SearchApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>(6)测试</p>
<p>调用<a href="http://localhost:18085/search/import%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95">http://localhost:18085/search/import进行测试</a></p>
<p>打开es-head可以看到如下数据：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1560828547924.png" alt="1560828547924"></p>
<h2 id="关键字搜索"><a href="#关键字搜索" class="headerlink" title="关键字搜索"></a>关键字搜索</h2><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1559428874655.png" alt="1559428874655"></p>
<p>我们先使用SpringDataElasticsearch实现一个简单的搜索功能，先实现根据关键字搜索，从上面搜索图片可以看得到，每次搜索的时候，除了关键字外，还有可能有品牌、分类、规格等，后台接收搜索条件使用Map接收比较合适。</p>
<h3 id="服务层实现"><a href="#服务层实现" class="headerlink" title="服务层实现"></a>服务层实现</h3><p>修改search服务的com.jwang.search.service.SkuService,添加搜索方法，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 搜索</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> searchMap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Map <span class="title">search</span><span class="params">(Map&lt;String, String&gt; searchMap)</span></span>;</span><br></pre></td></tr></table></figure>



<p>修改search服务的com.jwang.search.service.impl.SkuServiceImpl,添加搜索实现方法,代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ElasticsearchTemplate esTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">search</span><span class="params">(Map&lt;String, String&gt; searchMap)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.获取关键字的值</span></span><br><span class="line">    String keywords = searchMap.get(<span class="string">&quot;keywords&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(keywords)) &#123;</span><br><span class="line">        keywords = <span class="string">&quot;华为&quot;</span>;<span class="comment">//赋值给一个默认的值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.创建查询对象 的构建对象</span></span><br><span class="line">    NativeSearchQueryBuilder nativeSearchQueryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.设置查询的条件</span></span><br><span class="line"></span><br><span class="line">    nativeSearchQueryBuilder.withQuery(QueryBuilders.matchQuery(<span class="string">&quot;name&quot;</span>, keywords));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.构建查询对象</span></span><br><span class="line">    NativeSearchQuery query = nativeSearchQueryBuilder.build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.执行查询</span></span><br><span class="line">    AggregatedPage&lt;SkuInfo&gt; skuPage = esTemplate.queryForPage(query, SkuInfo.class);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//6.返回结果</span></span><br><span class="line">    Map resultMap = <span class="keyword">new</span> HashMap&lt;&gt;();    </span><br><span class="line">    resultMap.put(<span class="string">&quot;rows&quot;</span>, skuPage.getContent());</span><br><span class="line">    resultMap.put(<span class="string">&quot;total&quot;</span>, skuPage.getTotalElements());</span><br><span class="line">    resultMap.put(<span class="string">&quot;totalPages&quot;</span>, skuPage.getTotalPages());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resultMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="控制层实现"><a href="#控制层实现" class="headerlink" title="控制层实现"></a>控制层实现</h3><p>修改com.jwang.search.controller.SkuController，在控制层调用Service层即可，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 搜索</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> searchMap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">search</span><span class="params">(<span class="meta">@RequestBody(required = false)</span> Map&lt;String,String&gt; searchMap)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(searchMap==<span class="keyword">null</span>)&#123;</span><br><span class="line">        searchMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  skuService.search(searchMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>使用Postman工具，输入<a href="http://localhost:18085/search">http://localhost:18085/search</a></p>
<p>选中POST提交</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/search/images/1560829447414.png" alt="1560829447414"></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>搜索和数据分析</tag>
        <tag>IK分词器</tag>
        <tag>kibana</tag>
        <tag>DSL语句</tag>
        <tag>SpringData Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql数据库02--进阶语句</title>
    <url>/jwangcloud/1482967651/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/mysql.jpeg" width="1000" height="200" align="middle">

<h3 id="mysql进阶"><a href="#mysql进阶" class="headerlink" title="mysql进阶"></a>mysql进阶</h3><span id="more"></span>

<p>1.case…end</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update movie_table </span><br><span class="line">set category &#x3D; </span><br><span class="line">case </span><br><span class="line">	when drama &#x3D; &#39;T&#39; then &#39;drama&#39;  </span><br><span class="line">&#x2F;&#x2F;相当于：update movie_table set category &#x3D; &#39;drama&#39; where drama &#x3D; &#39;T&#39; </span><br><span class="line">	when comedy &#x3D; &#39;T&#39; and sciti &#x3D; &#39;T&#39; then &#39;comedy&#39; </span><br><span class="line">	else &#39;misc&#39;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;找到符合when语句时则直接执行该语句并跳到end</span><br></pre></td></tr></table></figure>

<p>2.order by  :排序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select title, category from movie_table </span><br><span class="line">where</span><br><span class="line">category &#x3D; &#39;family&#39;</span><br><span class="line">order by title,purcheased</span><br><span class="line"></span><br><span class="line">desc:倒序</span><br></pre></td></tr></table></figure>

<p>3.sum avg min max count（属于函数） distinct(去重 不一样的值  属于关键字)<br>函数需要加括号 关键字不需要</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select distinct sale_date</span><br><span class="line">from cookie_eales</span><br><span class="line">order by sale_date;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4.group by :分组(与3搭配使用  属于关键字)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">select first_name,sum(sales)</span><br><span class="line">from cookie_eales</span><br><span class="line">group by first_name</span><br><span class="line">order by sum(sales) desc;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>5.limit 查询结果的数量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select first_name,sum(sales)</span><br><span class="line">from cookie_eales</span><br><span class="line">group by first_name</span><br><span class="line">order by sum(sales) desc;</span><br><span class="line">limit 0,2;  &#x2F;&#x2F;从0开始1结束 一共两行数据</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>6.in,between in表示在其中的数据,between表示在两个数之间的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from atable where column beteen min and max  &#x2F;&#x2F;表示在min 和max之间的数据</span><br><span class="line">elect * from atable where column in(n1,n2,n3) &#x2F;&#x2F;表示数据是 n1或者n2或者n3</span><br></pre></td></tr></table></figure>

<p>7.or,and 表示在数据满足一个或者全部都满足<br>8.运算符,可以使用运算符表示数据大于 小于等于等情况,<br>9.like 模糊查询,使用like语句表示查询的时候匹配查询, %表示0，1或者多个字符的占位符, _ 表示一个字符的占位<br>符</p>
<p>10.having表示筛选 和where不同点在于having后面可以跟上聚合函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT region, SUM(population), SUM(area)</span><br><span class="line">FROM bbc</span><br><span class="line">GROUP BY region</span><br><span class="line">HAVING SUM(area)&gt;1000000</span><br></pre></td></tr></table></figure>


<h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p>1.创建带有外键的表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table intereste(</span><br><span class="line">int_id int not null auto_increment primary key,</span><br><span class="line">interest varchar(20) not null,</span><br><span class="line">contact_id int not null,</span><br><span class="line"></span><br><span class="line">constraint my_contacts_contact_id </span><br><span class="line">foreign key (contact_id) references my_contacts (contact_id)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.内连接(笛卡儿积)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from t1 inner join t2;	</span><br><span class="line">select t1.*,t2.* from t1 inner join t2;</span><br><span class="line">加入筛选条件：on</span><br><span class="line">select t1.*,t2.* from t1 join t2 on t1.i1&#x3D;t2.i2;</span><br><span class="line">别名：</span><br><span class="line">select a.i1,b.i2 from t1 as a join t2 as b on a.i1&#x3D;b.i2;	</span><br></pre></td></tr></table></figure>

<p>3.外连接<br>外联结除了显示同样的匹配结果，还可以把其中一个数据表在另一个数据表里没有匹配的数据行也显示出来。外联结分左联结和右联结两种。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">左连接</span><br><span class="line">select a.i1,b.i2 from t1 as a left join t2 as b on a.i1&#x3D;b.i2;</span><br><span class="line">右连接</span><br><span class="line">elect a.i1,b.i2 from t1 as a right join t2 as b on a.i1&#x3D;b.i2;</span><br><span class="line">用处：</span><br><span class="line">select a.i1,b.i2 from t1 as a right join t2 as b on a.i1&#x3D;b.i2 </span><br><span class="line">where a.i1 is null;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4.some any </p>
<pre><code>some和any会帮助我们筛选出最小的一个数来作为条件
select * from salary_table where salary &gt; some (select salary from salary_table 
where position = &#39;Python&#39;);
</code></pre>
<p>5.all</p>
<pre><code>all 会筛选出满足所有条件的选项
select * from salary_table where salary &gt; all (select salary from salary_table 
where position = &#39;java&#39;);
</code></pre>
<p>6.in (=some any)</p>
<pre><code>SELECT * FROM salary_table WHERE salary IN (SELECT salary FROM salary_table 
WHERE 
position = &#39;Python&#39;);

SELECT * FROM salary_table WHERE salary =some (SELECT salary FROM salary_table 
WHERE 
position = &#39;Python&#39;);
</code></pre>
<p>7.exists 会判断数据是否存在 如果不存在则不会筛选数据</p>
<pre><code>select * from salary_table 
where exists(SELECT * from salary_table where id = 1)
</code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql数据库01--基础语句</title>
    <url>/jwangcloud/1749468513/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/mysql.jpeg" width="1000" height="200" align="middle">

<h3 id="sql-基础语法"><a href="#sql-基础语法" class="headerlink" title="sql 基础语法"></a>sql 基础语法</h3><span id="more"></span>

<p>1.创建学生数据库</p>
<pre><code>create database Student; 
</code></pre>
<p>2.使用学生数据库</p>
<pre><code>use Student; 
</code></pre>
<p>3.创建成绩表，字段后加not null 则表示不能为空，在查看表结构时为no，default可设置默认值</p>
<pre><code>create table score(id int(20) not null auto_increment,
               name varchar(10) default &#39;aa&#39;,
               score_num int(100)，
               primary key (id)   
                );   

null:代表未定义的值，不能使用在语句中，但可以通过is null判断某一个字段是否为空
主键和外键的设置在创建字段之后设置

auto_increment:从1递增 一个表只能添加一个递增，且该列必须为整数而且不能包含null
</code></pre>
<p>4.查看表结构</p>
<pre><code>desc score;  
</code></pre>
<p>5.删除成绩表</p>
<pre><code>drop table score； 
</code></pre>
<p>6.插入数据到成绩表中</p>
<pre><code>insert into score(id,name) values(1212,&#39;a&#39;); 
</code></pre>
<p>7.查看成绩表所有的数据</p>
<pre><code>select * from score; 
</code></pre>
<p>8.查看成绩表中id为1的所有数据信息</p>
<pre><code>select * from score where id = 1; 
</code></pre>
<p>9.这些类型使用单引号：</p>
<pre><code>char/varchar/date/datetime/time/timestamp/blob

dec/int:不使用引号

\&#39;: 处理字段中单引号的出现
</code></pre>
<p>10.查看成绩表中ID为1的名字</p>
<pre><code>select name from score where id = 1；
</code></pre>
<p>11.查询成绩表中ID为1 姓名为<code>a</code>的名字</p>
<pre><code>    select name from score where id=1 and name = `a`;
    
运算符：&lt;&gt; 不等于 = 等于 &lt; &lt;= &gt; &gt;= (也可以对字符进行比较) or and
select id from score where name &gt; `a`; 查询成绩表中名字首字母在`a`之后的所有数据的id
select * from score where name like &#39;%ca&#39;; 查询成绩表中所有名字以&#39;ca&#39;结尾的数据
%：任意数量的未知字符
_: 一个未知字符
</code></pre>
<p>12.查询成绩表中成绩在60到100之间的所有信息</p>
<pre><code>select * from score where score_num between 60 and 101; 
</code></pre>
<p>13.查询成绩表中名字首字母在’a’到’b’之间的所有信息</p>
<pre><code>select * from score where name between &#39;a&#39; and &#39;c&#39;; 
</code></pre>
<p>14.查询成绩表中名字在（’a’,’b’）中的所有信息 反过来：not in</p>
<pre><code>select * from score where name in(&#39;a&#39;,&#39;b&#39;); 
not:紧跟在where后 not in是特例， 同时可以与and /or /is null 搭配使用 位置在and/or后紧跟，
is     null 之前
</code></pre>
<p>15.删除成绩表中名字为’a’的数据 所有用法与select一样</p>
<pre><code>delete from score where name=&#39;a&#39;; 

注意删除时若无约束条件则会删除全部     删除只能删除一行或多行，无法删除某一个字段或值
</code></pre>
<p>16.修改成绩表中ID为1的名字为’b’成绩为50 无则不修改任何字段</p>
<pre><code>update score set name=&#39;b&#39;,score=50 where id=1; 
</code></pre>
<p>17.查看创建表的语句</p>
<pre><code>show create table score; 
</code></pre>
<p>18.为score表创建一个不为空的整型自增的字段并放于表首列，设置其为主键</p>
<pre><code>alter table score add column student_id int not null auto_increment first,
add primary key (student_id); 
</code></pre>
<p>19.数据原子性：同一列中不会存储多个类型相同的数据，也不会用多个列存储相同的数据</p>
<pre><code>第一范式：每一个数据行均需包含原子性数据值，且每一个数据行都存在唯一的识别方法
alter table score add column phone varchar(10) after id; 为score表创建
一个电话号码字段并放于id列字段之后
</code></pre>
<p>20.alter…change:同时改变现有列的名称和数据类型</p>
<pre><code>alter table score change column id stu_id int not null auto_increment,
add primary key (stu_id);
将score表中ID改为stu_id并将其设置成自增和主键,必须重新命名该列数据类型

alter...modify:修改现有列的数据类型或位置
alter table score modify column id varchar(120);
修改score表的id类型为varchar(120)

alter...add:在当前表中添加一行
alter...drop：删除表中某列

注意：可能造成数据丢失
alter table score rename to score_stu;将表score的名字改为score_stu
alter table score drop primary key; 删除score表的主键
</code></pre>
<p>21.选出name列中从右侧开始选取的2个字符 左侧开始为left</p>
<pre><code>select right(name, 2) from score;
select substring_index(name,&#39;,&#39;,1) from score;选取name列中以第一个逗号隔开之
前的部分，若为2,则为第二个之前的所有部分

其它字符串函数：substring(&#39;aaadsasd&#39;,4,3);截取‘aaadsasd&#39;中从位置4开始长度为3
          upper(&#39;aa&#39;);字符串转为大写  lower(&#39;CC&#39;)；字符串转为小写
          reverse(&#39;cvs&#39;);反转字符串
          ltrim(&#39;  aaaasdf  &#39;); rtrim(&#39;  asaadd  &#39;);清除多余空格
          length(&#39;asadsad&#39;)
运用：update contacts set state = right(location,2);取出contacts 表location字
段中右边两字符并放入到state字段中进行遍历

字符串函数可以和select,update,delete搭配使用
</code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>html语法05--表格、表单</title>
    <url>/jwangcloud/1576459572/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/html.jpeg"></p>
<h3 id="1-表格"><a href="#1-表格" class="headerlink" title="1.表格"></a>1.表格</h3><span id="more"></span>

<pre><code>    表格由 table 标签来定义。
    每个表格均有若干行（由 tr 标签定义），每行被分割为若干单元格（由 td 标签定义）。
    字母 td(table data) 指表格数据，即数据单元格的内容。
    数据单元格可以包含文本、图片、列表、段落、表单、水线、表格等等。
    
</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;table border&#x3D;&quot;1&quot; cellpadding&#x3D;&quot;10”&gt;  border 为边框宽度1 cellpadding 为单元格间距10 </span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;</span><br><span class="line">            row 1,col 2    </span><br><span class="line">        &lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="1-1-表格标签"><a href="#1-1-表格标签" class="headerlink" title="1.1 表格标签"></a>1.1 表格标签</h4><table>
<thead>
<tr>
<th align="center">标签</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">table</td>
<td align="center">定义表格</td>
</tr>
<tr>
<td align="center">th</td>
<td align="center">定义表格的表头</td>
</tr>
<tr>
<td align="center">tr</td>
<td align="center">定义表格的行</td>
</tr>
<tr>
<td align="center">td</td>
<td align="center">定义表格的单元</td>
</tr>
<tr>
<td align="center">caption</td>
<td align="center">定义表格的标题</td>
</tr>
<tr>
<td align="center">colgroup</td>
<td align="center">定义表格的组</td>
</tr>
<tr>
<td align="center">col</td>
<td align="center">定义表格列的属性</td>
</tr>
<tr>
<td align="center">thead</td>
<td align="center">定义页眉</td>
</tr>
<tr>
<td align="center">tbody</td>
<td align="center">定义表格的主体</td>
</tr>
<tr>
<td align="center">tfoot</td>
<td align="center">定义表格的页脚</td>
</tr>
</tbody></table>
<h4 id="1-2-表格三大部分"><a href="#1-2-表格三大部分" class="headerlink" title="1.2 表格三大部分"></a>1.2 表格三大部分</h4><pre><code>        thead ---------表格的页眉
        tbody ---------表格的主体
        tfoot ---------定义表格的页脚(在最下面,不管代码位置在哪里)
        
</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;table border&#x3D;&quot;1&quot;&gt;</span><br><span class="line">	    &lt;tfoot&gt;</span><br><span class="line">	    &lt;tr&gt;&lt;th&gt;row end col1&lt;&#x2F;th&gt;&lt;th&gt;row end col2&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;</span><br><span class="line">	    &lt;&#x2F;tfoot&gt;</span><br><span class="line">	    &lt;tbody&gt;</span><br><span class="line">	    &lt;tr&gt;</span><br><span class="line">	        &lt;td rowspan&#x3D;&quot;2&quot;&gt; 把包括本身的2格合并起来</span><br><span class="line">	            row 1,col 1</span><br><span class="line">	        &lt;&#x2F;td&gt;</span><br><span class="line">	    &lt;&#x2F;tr&gt;</span><br><span class="line">	    &lt;&#x2F;tbody&gt;</span><br><span class="line">	    &lt;thead&gt;</span><br><span class="line">	    &lt;tr&gt;&lt;td&gt;位置&lt;&#x2F;td&gt;&lt;td&gt;位置&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;</span><br><span class="line">	    &lt;&#x2F;thead&gt;</span><br><span class="line">	    </span><br></pre></td></tr></table></figure>

<h4 id="1-3-表格合并"><a href="#1-3-表格合并" class="headerlink" title="1.3 表格合并"></a>1.3 表格合并</h4><pre><code>    colspan 合并列
    rowspan 合并行
    
</code></pre>
<h3 id="2-表单"><a href="#2-表单" class="headerlink" title="2 表单"></a>2 表单</h3><h4 id="2-1-表单创建"><a href="#2-1-表单创建" class="headerlink" title="2.1 表单创建"></a>2.1 表单创建</h4><pre><code>表单是一个包含表单元素的区域。
HTML 表单用于搜集不同类型的用户输入。
表单元素是允许用户在表单中输入内容,比如：文本域(textarea)、下拉列表、
单选框(radio-buttons)、复选框(checkboxes)等等。

表单使用表单标签 form标签来设置:
多数情况下被用到的表单标签是输入标签 input标签 输入类型是由类型属性（type）定义的。

form标签属性:
    action 提交到哪里去(点击表单之后)
    method 定义提交的方法 get post等方法
    input标签就是我们常见的输入框里面的内容
    placeholder 提示我们输入文字
    required 必须输入
    
&lt;form action=&quot;tables.html&quot; method=&quot;get&quot;&gt;
&lt;label&gt;账户&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;test&quot; placeholder=“输入” required&gt;
&lt;input type=&quot;submit&quot; value=&quot;submit&quot;&gt;
&lt;/form&gt;
    
</code></pre>
<h4 id="2-2-表单标签"><a href="#2-2-表单标签" class="headerlink" title="2.2 表单标签"></a>2.2 表单标签</h4><table>
<thead>
<tr>
<th align="center">标签</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">form</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">input</td>
<td align="center">定义输入域</td>
</tr>
<tr>
<td align="center">textarea</td>
<td align="center">定义文本域 (一个多行的输入控件)</td>
</tr>
<tr>
<td align="center">label</td>
<td align="center">定义了 input元素的标签，一般为输入标题</td>
</tr>
<tr>
<td align="center">fieldset</td>
<td align="center">定义了一组相关的表单元素，并使用外框包含起</td>
</tr>
<tr>
<td align="center">legend</td>
<td align="center">定义了 fieldset 元素的标题</td>
</tr>
<tr>
<td align="center">select</td>
<td align="center">定义了下拉选项列表</td>
</tr>
<tr>
<td align="center">optgroup</td>
<td align="center">定义选项组</td>
</tr>
<tr>
<td align="center">option</td>
<td align="center">定义下拉列表中的选项</td>
</tr>
<tr>
<td align="center">button</td>
<td align="center">定义一个点击按钮</td>
</tr>
<tr>
<td align="center">datalist</td>
<td align="center">指定一个预先定义的输入控件选项列表</td>
</tr>
<tr>
<td align="center">keygen</td>
<td align="center">定义了表单的密钥对生成器字段</td>
</tr>
<tr>
<td align="center">output</td>
<td align="center">定义一个计算结果</td>
</tr>
</tbody></table>
<pre><code>我们通过type来定义文本的类型,如果password则不会显示密码里面的字段
我们习惯在使用label表示表单的名称,在label中使用for,指向input中的id
就可以在点击label标签的时候,跳转到Input标签中间去    &lt;form action=&quot;tables.html&quot; method=&quot;get&quot;&gt;
&lt;label for=&#39;t1&#39;&gt;账户&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;t1&quot;&gt;
&lt;label for=&quot;t2&quot;&gt;密码&lt;/label&gt;&lt;input type=&quot;password&quot; name=&quot;pwd&quot; id=&quot;t2&quot;&gt;
&lt;input type=&quot;submit&quot; value=&quot;submit&quot;&gt;
&lt;/form&gt;
</code></pre>
<h4 id="2-3-单选按钮（radio）-复选框（checkbox）"><a href="#2-3-单选按钮（radio）-复选框（checkbox）" class="headerlink" title="2.3 单选按钮（radio） 复选框（checkbox）"></a>2.3 单选按钮（radio） 复选框（checkbox）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type&#x3D;&quot;radio&quot; 标签定义了表单单选框选项</span><br><span class="line">表单中的单选按钮可以设置以下几个属性：value、name、checked value：提交数据到服务器的值</span><br><span class="line">name：为控件命名，以备后台程序 ASP、PHP 使用</span><br><span class="line"></span><br><span class="line">checked&#x3D;&quot;checked&quot; 时，该选项被默认选中&lt;form action&#x3D;&quot;#&quot; &gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;sex&quot; value&#x3D;&quot;male&quot; checked&gt;male&lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;sex&quot; value&#x3D;&quot;female&quot;&gt;female&lt;br&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-4-下拉列表（select-option）"><a href="#2-4-下拉列表（select-option）" class="headerlink" title="2.4 下拉列表（select option）"></a>2.4 下拉列表（select option）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;#&quot; &gt;</span><br><span class="line">    &lt;select name&#x3D;&quot;car&quot;&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;1&quot;&gt;bmw&lt;&#x2F;option&gt;</span><br><span class="line">        &lt;option value&#x3D;&quot;2&quot;&gt;benz&lt;&#x2F;option&gt;</span><br><span class="line">        &lt;option value&#x3D;&quot;3&quot;&gt;audi&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;submit&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-5-带边框的表单（filedset）"><a href="#2-5-带边框的表单（filedset）" class="headerlink" title="2.5 带边框的表单（filedset）"></a>2.5 带边框的表单（filedset）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;form action&#x3D;&quot;#&quot;&gt;</span><br><span class="line">&lt;fieldset&gt;</span><br><span class="line">    &lt;legend&gt;</span><br><span class="line">        fieldset的</span><br><span class="line">    &lt;&#x2F;legend&gt;</span><br><span class="line">    &lt;label for&#x3D;&#39;t1&#39;&gt;账户&lt;&#x2F;label&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot; id&#x3D;&quot;t1&quot;&gt;</span><br><span class="line">    &lt;label for&#x3D;&quot;t2&quot;&gt;密码&lt;&#x2F;label&gt;&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;pwd&quot; id&#x3D;&quot;t2&quot;&gt;</span><br><span class="line">&lt;&#x2F;fieldset&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;submit&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-6-添加文件"><a href="#2-6-添加文件" class="headerlink" title="2.6 添加文件"></a>2.6 添加文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文件上传 type&#x3D;“file&quot;</span><br><span class="line">使用file，则form的enctype必须设置为multipart&#x2F;form-data，method属性为POST。</span><br><span class="line">&lt;form action&#x3D;&quot;#&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;upfile&quot;&gt;</span><br><span class="line">    &lt;button&gt;上传&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">application&#x2F;x-www-form-urlencoded 	在发送前编码所有字符（默认）</span><br><span class="line">multipart&#x2F;form-data	 不对字符编码。在使用包含文件上传控件的表单时，必须使用该值。</span><br><span class="line">text&#x2F;plain	 空格转换为 &quot;+&quot; 加号，但不对特殊字符编码。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>表格</tag>
        <tag>表单</tag>
      </tags>
  </entry>
  <entry>
    <title>html语法04--css语法</title>
    <url>/jwangcloud/1650027718/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/html.jpeg"></p>
<h3 id="css基础"><a href="#css基础" class="headerlink" title="css基础"></a>css基础</h3><span id="more"></span>

<h4 id="1-“行内样式”、“内嵌样式”、“外链样式”、“导入式”"><a href="#1-“行内样式”、“内嵌样式”、“外链样式”、“导入式”" class="headerlink" title="1.“行内样式”、“内嵌样式”、“外链样式”、“导入式”"></a>1.“行内样式”、“内嵌样式”、“外链样式”、“导入式”</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot; http-equiv&#x3D;&quot;refresh&quot;&gt;</span><br><span class="line">    &lt;title&gt;中国男篮排位赛广州进行，将与国足下榻同一酒店&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;style&gt;                              &#x2F;&#x2F; 内嵌样式</span><br><span class="line">    p&#123;</span><br><span class="line">      text-indent: 4em;</span><br><span class="line">    &#125;</span><br><span class="line">    h4&#123;</span><br><span class="line">      text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line">    img&#123;</span><br><span class="line">      width: 560px;</span><br><span class="line">      height: 450px;</span><br><span class="line">    &#125;</span><br><span class="line">    .p1&#123;</span><br><span class="line">      color: chocolate;</span><br><span class="line">    &#125;</span><br><span class="line">    .p2&#123;</span><br><span class="line">      color: aqua;</span><br><span class="line">    &#125;</span><br><span class="line">    #x2&#123;</span><br><span class="line">      color: cornflowerblue;</span><br><span class="line">    &#125;</span><br><span class="line">    *&#123;</span><br><span class="line">      border: 0;</span><br><span class="line">      margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;&#x2F;style&gt;</span><br><span class="line">  &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;h5_css_1.css&quot;&gt;   </span><br><span class="line">  &#x2F;&#x2F;外链样式 链接地址为编写的css外部代码</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;article&gt;</span><br><span class="line">&lt;header&gt;&lt;h1 style&#x3D;&quot;text-align: center&quot;&gt;中国男篮排位赛广州进行&lt;&#x2F;h1&gt;&lt;&#x2F;header&gt; </span><br><span class="line">&#x2F;&#x2F;行内样式</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;h4 class&#x3D;&quot;p1&quot;&gt;(原标题)&lt;&#x2F;h4&gt;</span><br><span class="line">&lt;h5&gt;&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;cms-bucket.ws.126.net&#x2F;</span><br><span class="line">2019&#x2F;09&#x2F;05&#x2F;4740f77e15b9402a8877f302eb67a908.jpeg&quot;&gt;&lt;&#x2F;h5&gt;</span><br><span class="line">&lt;p id &#x3D; &quot;x2&quot;&gt;中国男篮59-72不敌委内瑞拉&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;而据澎湃新闻记者从国足处&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;article&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;b&gt;延伸 · 回顾&lt;&#x2F;b&gt;&lt;hr&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;sports.163.com&#x2F;19&#x2F;0904&#x2F;21&#x2F;EO8T046J00059AJ8.html&quot;&gt;男篮无缘16强球</span><br><span class="line">迷终于忍不了全场高喊&quot;李楠下课&quot;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;p2&quot;&gt;北京时间9月4日晚&lt;&#x2F;p&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;*h5_css_1.css*&#x2F;</span><br><span class="line">h5&#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-css选择器"><a href="#2-css选择器" class="headerlink" title="2.css选择器"></a>2.css选择器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.标签选择器</span><br><span class="line">div  &#123; width:  300px; height: 300px; background-color: red; &#125;</span><br><span class="line">p    &#123; text-indent: 2em; color: blue; &#125;</span><br><span class="line">span &#123; letter-spacing: 5px; font-size: 20px; &#125;</span><br><span class="line"></span><br><span class="line">2. 类选择器</span><br><span class="line">.box  &#123; width:  300px; height: 300px; background-color: red; &#125;</span><br><span class="line">p.des &#123; text-indent: 2em; color: blue; &#125;</span><br><span class="line"></span><br><span class="line">3. id选择器</span><br><span class="line">#box &#123; width:  300px; height: 300px; background-color: red; &#125;</span><br><span class="line">#des &#123; text-indent: 2em; color: blue; &#125;</span><br><span class="line"></span><br><span class="line">4. 通用选择器</span><br><span class="line">通用选择器使用 * 表示，它的作用是选择页面中所有的标签元素</span><br><span class="line"></span><br><span class="line">5. 后代选择器  可选择嵌套其中的任意一个子类</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.container article &#123; text-align: center; &#125;</span><br><span class="line">.container h1 &#123; color: #000000; &#125;</span><br><span class="line">.container p  &#123; color: #008800; &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">    &lt;article&gt;</span><br><span class="line">        &lt;h1&gt;Napoléon Bonaparte&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;p&gt;Adversity is the midwife of genius.&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;article&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">6. 子类选择器  只能选择直系嵌套下的子类</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.container &gt; article &#123; text-align: center; &#125;</span><br><span class="line">.container &gt; article &gt; h1 &#123; color: #000000; &#125;</span><br><span class="line">.container &gt; article &gt; p  &#123; color: #008800; &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">7. 伪类选择器</span><br><span class="line"></span><br><span class="line">link：表示链接在正常情况下（即页面刚加载完成时）显示的颜色。</span><br><span class="line">visited：表示链接被点击后显示的颜色。</span><br><span class="line">hover：表示鼠标悬停时显示的颜色。</span><br><span class="line">focus：表示元素获得光标焦点时使用的颜色，主要用于文本框输入文字时使用（鼠标松开时显示的颜色,</span><br><span class="line">可以使用input来查看）。</span><br><span class="line">active：表示当所指元素处于激活状态（鼠标在元素上按下还没有松开）时所显示的颜色。</span><br><span class="line"></span><br><span class="line">a &#123; text-decoration: none; &#125;		</span><br><span class="line">a:hover &#123; text-decoration: underline;&#125;</span><br><span class="line">      a:link&#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">        a:visited&#123;</span><br><span class="line">            color: green;</span><br><span class="line">        &#125;</span><br><span class="line">        a:hover&#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">        a:focus&#123;</span><br><span class="line">            color:black;</span><br><span class="line">        &#125;</span><br><span class="line">        a:active&#123;</span><br><span class="line">            color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">8. 群组选择器</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">a, div, span, p &#123; font-size: 20px; &#125;</span><br><span class="line">div, p &#123; margin:  0; padding: 0; &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;a href&#x3D;&quot;javascript:;&quot;&gt;超链接&lt;&#x2F;a&gt;</span><br><span class="line">&lt;div&gt;布局标签&lt;&#x2F;div&gt;</span><br><span class="line">&lt;span&gt;文本标签&lt;&#x2F;span&gt;</span><br><span class="line">&lt;p&gt;段落标签&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-权重计算值"><a href="#3-权重计算值" class="headerlink" title="3.权重计算值"></a>3.权重计算值</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">行内权重值：1000</span><br><span class="line">ID选择器的权重值：100</span><br><span class="line">class和伪类：10</span><br><span class="line">标签选择器：1</span><br><span class="line"></span><br><span class="line">!important 最高权重：10000 </span><br><span class="line"></span><br><span class="line">#html1 &#123;</span><br><span class="line">           color: #73d44d !important;</span><br><span class="line">           background-color: #93c1d4;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<pre><code>    1.每种权重值的最大值只能叠加9次
    2.如果两个地方定义的权重一样的话,那么就按照最后定义的权重为准,这个原则
    使用于 &lt;style&gt;和 &lt;link&gt;混合来使用
    
    
</code></pre>
<h4 id="4-css高级选择器"><a href="#4-css高级选择器" class="headerlink" title="4.css高级选择器"></a>4.css高级选择器</h4><p>CSS高级选择器区别于CSS普通选择器,是对标签元素的结构、标签元素的索引、标签元素<br>的状态等一些更为复杂的条件下进行的选择，甚至能改变现有标签的状态结构。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">伪元素选择器：向指定的选择器添加指定的效果</span><br><span class="line"></span><br><span class="line">1.：first-letter</span><br><span class="line">	选择“块级元素”文本段落中的首个字符，只对块级元素生效 如&lt;p&gt;</span><br><span class="line">2.:first-line</span><br><span class="line">	选择“块级元素”文本段落中的首行文本，与1一样</span><br><span class="line">3.:before</span><br><span class="line">	在指定的选择器之前插入一段内容。插入内容默认为“行内元素”，可通过“display”强制转换类型。</span><br><span class="line">	如果需要插入文本字符串，则直接将字符串赋值给 content 属性，</span><br><span class="line">	如：&#96;content: &#39;Hello, world!&#39;	</span><br><span class="line">	p &#123;</span><br><span class="line">    		letter-spacing: 5px;</span><br><span class="line">    		font-size: 25px;</span><br><span class="line">    		color: #ff4500;</span><br><span class="line">    		text-shadow: 1px 1px 2px #000;</span><br><span class="line">		&#125;	</span><br><span class="line">	p:after &#123;</span><br><span class="line">    		&#x2F;*插入内容，这里以插入图片为例*&#x2F;</span><br><span class="line">    			content: url(&#39;xiaoxin.jpg&#39;);</span><br><span class="line"></span><br><span class="line">    			position: relative;</span><br><span class="line">    			top: 20px;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">结构性伪类选择器：该类选择器主要用于当前选择器精确地通过元素“索引值”或“匹配类型”</span><br><span class="line">的索引值定位到该选择器的同级指定元素</span><br><span class="line"></span><br><span class="line">1.:first-child</span><br><span class="line">	对该类所有父元素中的首个子元素进行选择。</span><br><span class="line">2.：last-child</span><br><span class="line">	对该类所有父元素中的最后一个子元素进行选择。</span><br><span class="line">3. :first-of-type</span><br><span class="line">	对该类所有父元素中的首个匹配到类型的子元素进行选择。</span><br><span class="line">4. :last-of-type</span><br><span class="line">	对该类所有父元素中的最后一个匹配到类型的子元素进行选择。</span><br><span class="line">5. :only-child</span><br><span class="line">	对该类所有父元素中只含有唯一所匹配（不包含同级元素&#x2F;只有一个子元素）的子元素进行选择。</span><br><span class="line">6. :only-of-type</span><br><span class="line">	对该类所有父元素中只含有唯一所匹配类型的子元素进行选择。</span><br><span class="line">7. :nth-child(n)</span><br><span class="line">	对其父元素的第“n”个子元素进行选择，通过设置参数“n(0开始)”指定为第几个元素。</span><br><span class="line">	(该选择器不仅能准确的匹配到第“几”个指定类型的元素，还能对匹配类型元素的“</span><br><span class="line">	奇偶索引”值进行选择。odd 表示奇数，even 表示偶数。)</span><br><span class="line">8. :nth-last-child(n)</span><br><span class="line">	该选择器和“:nth-child(n)”的特性基本一致，唯一的不同点就是该选择器的索引值是从该选</span><br><span class="line">	择器匹配到的元素的同级元素中的最后一个开始进行计算的</span><br><span class="line">9. :empty</span><br><span class="line">  	该选择器会匹配所有，或指定基本选择器内没有元素（没有子节点）的标签元素。</span><br><span class="line">10. :not(selector)</span><br><span class="line">  	该选择器是用于排除指定元素的选择器。</span><br></pre></td></tr></table></figure>

<h3 id="css文本和字体"><a href="#css文本和字体" class="headerlink" title="css文本和字体"></a>css文本和字体</h3><h4 id="1-文本设置"><a href="#1-文本设置" class="headerlink" title="1.文本设置"></a>1.文本设置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">01. 文本对齐方式</span><br><span class="line">	text-align 属性用于控制“行内块元素”、“块元素”或“行内元素”（文本元素）的居中方式，</span><br><span class="line">	包含三个值：</span><br><span class="line"></span><br><span class="line">	left：局左对齐（m o&#39;ren）</span><br><span class="line">	right：居右对齐</span><br><span class="line">	center：居中对齐</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">02. 段落首行缩进</span><br><span class="line">	text-indent 属性是用于设置每个段落首行缩进数量值的属性，CSS字体大小（font-size）可</span><br><span class="line">	以设置的数值和单位在该属性的值中都可以使用（除了百分比）。如果是用于中文布局，一般会使</span><br><span class="line">	用“2em”的数值和单位来为每个段落的首行缩进“两个字符”。1em就等于16px，2em就是32px。</span><br><span class="line">	</span><br><span class="line">03. 文本装饰线</span><br><span class="line">	text-decoration 属性是为文本上添加一根装饰线，带&quot;href&quot;属性的&lt;a&gt;标签默认</span><br><span class="line">	会带有一根下划线，就是由该属性的值“underline”设置的。“text-decoration”</span><br><span class="line">	属性有以下值：</span><br><span class="line"></span><br><span class="line">	none（默认）：不显示任何装饰线</span><br><span class="line">	underline：在文本下方显示装饰线</span><br><span class="line">	overline：在文本上方显示装饰线</span><br><span class="line">	line-through：在文本中间显示装饰线，相当于删除线</span><br><span class="line">	</span><br><span class="line">04. 大小写转换</span><br><span class="line">	text-transform 属性能将“行内元素”中的英文文本进行大小写转换，以满足网站对</span><br><span class="line">	规范性的要求。该属性有以下属性值：</span><br><span class="line"></span><br><span class="line">	none（默认）：保持文本中英文单词的默认大小写</span><br><span class="line">	capitalize：每个英文单词首字母为大写字母，其它为小写字母</span><br><span class="line">	uppercase：将所有英文单词转换为大写字母</span><br><span class="line">	lowercase：将所有英文单词转换为小写字母</span><br><span class="line"></span><br><span class="line">05. 文本阴影</span><br><span class="line">text-shadow 属性的作用是给文本添加阴影效果。目前除了IE9及之前版本不支持该属性外，</span><br><span class="line">其它主流浏览器均支持该属性。该属性有4个值，具体如下：text-shadow: H V blur color;</span><br><span class="line"></span><br><span class="line">H：水平偏移，“0”表示维持原位，正数为向右偏移，负数为向左偏移。单位为像素“px”。</span><br><span class="line">V：垂直偏移，“0”表示维持原位，正数为向下偏移，负数为向上偏移。单位为像素“px”。</span><br><span class="line">blur ：模糊距离，用 正数 表示阴影模糊的单位距离，距离越大模糊程度越高。单位为像素“px”。</span><br><span class="line">color：阴影颜色，支持Web技术中的常用颜色模式：“颜色英文单词”、“HEX”、“RGBa”、“HSLa”。</span><br><span class="line"></span><br><span class="line">&lt;p style&#x3D;&quot;text-shadow: 2px 2px 5px #000;&quot;&gt;Hello, World!&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">06. 文本行高</span><br><span class="line">line-height 属性是用于设置“行内元素”中文本元素在一行中所占据的高度</span><br><span class="line">当文本元素只有一行时，可以将该行的文本行高设为和父容器元素高度一致，以此到达文</span><br><span class="line">本垂直居中的效果。使用场景如：表格、导航按钮、自定义样式按钮、标题栏等。</span><br><span class="line"></span><br><span class="line">&lt;!-- HTML 部分 --&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;txt&quot;&gt;CHINA&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- CSS 部分 --&gt;</span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">    .txt &#123;</span><br><span class="line">        width:  260px;</span><br><span class="line">        height: 260px;</span><br><span class="line">        background-color: #000;</span><br><span class="line"></span><br><span class="line">        color: #fff;</span><br><span class="line">        text-align: center;</span><br><span class="line">        line-height: 260px;</span><br><span class="line"></span><br><span class="line">        &#x2F;*字符间距*&#x2F;</span><br><span class="line">        letter-spacing: 5px;</span><br><span class="line">        &#x2F;*字体大小*&#x2F;</span><br><span class="line">        font-size: 36px;</span><br><span class="line">        &#x2F;*文本阴影*&#x2F;</span><br><span class="line">        text-shadow: 3px 3px 5px skyblue;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">07. 单词间距  word-spacing 如“像素（px）”，“字符（em）”，“点（pt）”等，可以为负数。</span><br><span class="line"></span><br><span class="line">08. 字符间距 letter-spacing 属性是用于控制字符间的间距，即无论单词或词语中含有空格</span><br><span class="line">	（该属性对空格字符无效），该属性都会生效，单位同样为Web技术的常用度量单位，</span><br><span class="line">	同样为可以为负数。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-字体设置"><a href="#2-字体设置" class="headerlink" title="2.字体设置"></a>2.字体设置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">01. 字体颜色</span><br><span class="line">在目前的浏览器标准中，要想改变浏览器默认字体的颜色（#000000）唯一的途径就是通过</span><br><span class="line">CSS的 color 属性进行设置。颜色属性可以设置4种类型的值，有以下类型：颜色属于继承属性</span><br><span class="line"></span><br><span class="line">颜色英文单词</span><br><span class="line">	HEX（16进制颜色）</span><br><span class="line">	RGBa&#x2F;RGB（Alpha的三原色）</span><br><span class="line">	HSLa（Alpha的Hue、Saturation、Lightness）</span><br><span class="line">	Transparent（透明）</span><br><span class="line">	inherit（继承父级）</span><br><span class="line"></span><br><span class="line">02. 字体样式</span><br><span class="line">font-style 用于设置字体类型，可设置以下值：</span><br><span class="line"></span><br><span class="line">	normal：普通字体</span><br><span class="line">	italic：斜体</span><br><span class="line">	oblique：倾斜字体</span><br><span class="line"></span><br><span class="line">03. 字体粗细</span><br><span class="line">font-weight 用于设置字体粗细，可设置以下值：</span><br><span class="line"></span><br><span class="line">	normal：正常粗细</span><br><span class="line">	bold：粗体</span><br><span class="line">	bolder：更粗的字体</span><br><span class="line">	lighter：更细的字体</span><br><span class="line">	100~900：步长为100，400 等同于 normal，而 700 等同于 bold</span><br><span class="line">	</span><br><span class="line">04. 字体大小 font-size 目前浏览器的主流的字号都是采用16像素（px）的字体。</span><br><span class="line"></span><br><span class="line">05. 字体名称 font-family 用于设置字体系列，就是我们通常说的“所用字体”。</span><br><span class="line"></span><br><span class="line">06. 字体组合值 font 属性用于设置字体样式的组合值写法，其语法形式为：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">扩展：文字两端对齐</span><br><span class="line"></span><br><span class="line">div &#123;</span><br><span class="line"></span><br><span class="line">    width: 120px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">    margin:  2px;</span><br><span class="line">    border:  1px solid #ff4500;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line"></span><br><span class="line">    text-align-last: justify; &#x2F;*两端对齐*&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="css元素分类"><a href="#css元素分类" class="headerlink" title="css元素分类"></a>css元素分类</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.在CSS中，html中的标签元素大体被分为三种不同的类型：</span><br><span class="line">	块状元素、内联元素(又叫行内元素)和内联块状元素。</span><br><span class="line"></span><br><span class="line">常用的块状元素有：</span><br><span class="line">&lt;div&gt;、&lt;p&gt;、&lt;h1&gt;...&lt;h6&gt;、&lt;ol&gt;、&lt;ul&gt;、&lt;dl&gt;、&lt;table&gt;、&lt;address&gt;、&lt;blockquote&gt; 、&lt;form&gt;</span><br><span class="line">常用的内联元素有：</span><br><span class="line">&lt;a&gt;、&lt;span&gt;、&lt;br&gt;、&lt;i&gt;、&lt;em&gt;、&lt;strong&gt;、&lt;label&gt;、&lt;q&gt;、&lt;var&gt;、&lt;cite&gt;、&lt;code&gt;</span><br><span class="line">常用的内联块状元素有：</span><br><span class="line">&lt;img&gt;、&lt;input&gt;</span><br><span class="line"></span><br><span class="line">2.块级元素 block</span><br><span class="line"></span><br><span class="line">块级元素特点：</span><br><span class="line">	1、每个块级元素都从新的一行开始，并且其后的元素也另起一行。</span><br><span class="line">	2、元素的高度、宽度、行高以及顶和底边距都可设置。</span><br><span class="line">	3、元素宽度在不设置的情况下，是它本身父容器的100%（和父元素的宽度一致），</span><br><span class="line">	   除非设定一个宽度</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.内联元素 inline</span><br><span class="line">	内联元素特点:</span><br><span class="line">	1、和其他元素都在一行上；</span><br><span class="line">	2、元素的高度、宽度及顶部和底部边距不可设置；</span><br><span class="line">	3、元素的宽度就是它包含的文字或图片的宽度，不可改变。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4.内联块状 inline-block</span><br><span class="line">	特点</span><br><span class="line">	1、和其他元素都在一行上；</span><br><span class="line">	2、元素的高度、宽度、行高以及顶和底边距都可设置。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5.类型转换  通过display:block 我们可以将元素转换类型  a&#123;display:block;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-盒模型"><a href="#4-盒模型" class="headerlink" title="4.盒模型"></a>4.盒模型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 所谓盒子模型，即是将网页布局中的元素（行内&#x2F;行内块元素）进行拟物化的比喻，一个盒子由内容</span><br><span class="line">（content）、内间距（padding）、边框（border）以及外边距（margin）组成</span><br><span class="line">提示：只有 块级元素 与 行内块元素 具备盒子模型。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2. CSS盒子模型的类型主要有两个：</span><br><span class="line">	IE浏览器盒子模型：box-sizing:border-box;</span><br><span class="line">	标准（W3C，其它主流浏览器）盒子模型（默认）：box-sizing:content-box;</span><br><span class="line"></span><br><span class="line">3.盒子属性：</span><br><span class="line">	宽度：width</span><br><span class="line">	高度：height</span><br><span class="line">	内间距：padding  设置盒子内容与边框之间的间距，即内间距（填充）</span><br><span class="line">			padding 可以接收的值为：像素（px）、百分比（%）、inherit（继承）</span><br><span class="line">									以及auto（浏览器自计算）</span><br><span class="line">	外间距：margin   margin 属性主要用于设置某元素相对于同级元素和父级元素的一个距离值，</span><br><span class="line">	       常用单位像素“px”。该属性对文本类元素（即“行内元素”）标签是无效的。</span><br><span class="line">	       和 padding 一样</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4.边框：border 属性的作用是为设定该属性的元素添加边框 该属性能对任何显示类型的元素设置，包括</span><br><span class="line">		“行级元素（inline）”。该属性有三个分支属性：</span><br><span class="line">		1）、border-width</span><br><span class="line">		设置边框宽度，单位为像素。设定边框的宽度。可以为Web技术中常用的度量单位，</span><br><span class="line">		通常为像素“px”。</span><br><span class="line">		2）、border-style</span><br><span class="line">		设置边框的类型，主要有以下可以设定的值：</span><br><span class="line">				none：无边框  solid：实线边框  dotted：点线边框  </span><br><span class="line">				dashed：虚线边框</span><br><span class="line">				double：双线边框  groove：3D凹槽边框  </span><br><span class="line">				ridge：3D凸槽边框 </span><br><span class="line">				inset：内浮雕边框  outset：外浮雕边框</span><br><span class="line">		3）、border-color</span><br><span class="line">		设置边框颜色，支持英文单词、十六进制以及rgb颜色。</span><br><span class="line">		4）、border  </span><br><span class="line">		通过 border 属性直接设置四个方向的边框样式</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">5.盒子圆角</span><br><span class="line">border-radius：设置边框圆角</span><br><span class="line"></span><br><span class="line">6.元素阴影</span><br><span class="line">box-shadow 属性能够让元素获得一个“阴影”效果，根据颜色的不同，有时候也可以叫做“发光”效果</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="css布局模型"><a href="#css布局模型" class="headerlink" title="css布局模型"></a>css布局模型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.css的布局模式分类: </span><br><span class="line">	流动模型（Flow）浮动模型 (Float) 层模型（Layer）</span><br><span class="line"></span><br><span class="line">2.流动（Flow）是默认的网页布局模式。也就是说网页在默认状态下的 HTML 网页元素都是根据流动模型</span><br><span class="line">来分布网页内容的。</span><br><span class="line">	特征：（1）块状元素都会在所处的包含元素内自上而下按顺序垂直延伸分布，因为在默认状态下，</span><br><span class="line">				块状元素的宽度都为100%。实际上，块状元素都会以行的形式占据位置。</span><br><span class="line">		 （2）第二点，在流动模型下，内联元素都会在所处的包含元素内从左到右水平分布显示。</span><br><span class="line">		 		（内联元素可不像块状元素这么霸道独占一行）</span><br><span class="line">			</span><br><span class="line">3.float 浮动模型</span><br><span class="line">	块状元素都是独占一行，如果现在我们想让两个块状元素并排显示</span><br><span class="line">	任何元素在默认情况下是不能浮动的，但可以用 CSS 定义为浮动，如 div、p、table、img </span><br><span class="line">	等元素都可以被定义为浮动。</span><br><span class="line"></span><br><span class="line">4.层模型：能让层一样可以对每个图层能够精确定位操作</span><br><span class="line">	层模型有三种形式：</span><br><span class="line">	1、绝对定位(position: absolute) 绝对定位,把图形定义在绝对的位置</span><br><span class="line">	2、相对定位(position: relative) 为元素设置层模型中的相对定位，需要设置position:relative</span><br><span class="line">	（表示相对定位），它通过left、right、top、bottom属性确定元素在正常文档流中的偏移位置。</span><br><span class="line">	3、固定定位(position: fixed) fixed：表示固定定位，与absolute定位类型类似，但它的相对</span><br><span class="line">	  移动的坐标是视图（屏幕内的网页窗口）本身</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<h3 id="css可见性"><a href="#css可见性" class="headerlink" title="css可见性"></a>css可见性</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.CSS Display(显示) 与 Visibility（可见性）</span><br><span class="line"></span><br><span class="line">visibility:hidden:可以隐藏某个元素，但隐藏的元素仍需占用与未隐藏之前一样的空间。</span><br><span class="line">		            也就是说，该元素虽然被隐藏了，但仍然会影响布局。</span><br><span class="line"></span><br><span class="line">display:none:可以隐藏某个元素，且隐藏的元素不会占用任何空间。也就是说，该元素不但</span><br><span class="line">	          被隐藏了，而且该元素原本占用的空间也会从页面布局中消失。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;title&gt;Title&lt;&#x2F;title&gt; &lt;style&gt;</span><br><span class="line">    ul&#123;</span><br><span class="line">        list-style-type: none;</span><br><span class="line">    &#125;</span><br><span class="line">    #ul1&#123;</span><br><span class="line">        &#x2F;*</span><br><span class="line">        1.把 边框去掉</span><br><span class="line">        2. 把li标签上面的点号去掉</span><br><span class="line">        *&#x2F;</span><br><span class="line">        margin: auto;</span><br><span class="line">        padding: 0;</span><br><span class="line">        width: 400px;</span><br><span class="line">    &#125;</span><br><span class="line">    #ul1&gt;li&#123;</span><br><span class="line">        &#x2F;*</span><br><span class="line">        给li标签整个增加背景颜色</span><br><span class="line">        给li标签增加下面的分析</span><br><span class="line">        *&#x2F;</span><br><span class="line">        background-color: #8bd400;</span><br><span class="line">        margin-bottom: 2px;</span><br><span class="line">        margin-left: 2px;</span><br><span class="line">        height: 40px;</span><br><span class="line">        width: 80px;</span><br><span class="line">        border-radius: 5px;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line">    a&#123;</span><br><span class="line">        &#x2F;**</span><br><span class="line">        把a标签的下划线去掉</span><br><span class="line">         *&#x2F;</span><br><span class="line">        display:block;</span><br><span class="line">        height: 40px;</span><br><span class="line">        text-decoration: none;</span><br><span class="line">        &#x2F;*</span><br><span class="line">        把文字放在中间</span><br><span class="line">        *&#x2F;</span><br><span class="line">        text-align: center;</span><br><span class="line">        &#x2F;*</span><br><span class="line">        把文字行间距和整个block一样,那么文字就居中了</span><br><span class="line">        *&#x2F;</span><br><span class="line">        line-height:40px;</span><br><span class="line">        &#x2F;*</span><br><span class="line">        加上椭圆</span><br><span class="line">        *&#x2F;</span><br><span class="line"></span><br><span class="line">        border-radius: 5px;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    #li1&#123;</span><br><span class="line">        position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #li1 ul&#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">        position: absolute;</span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br><span class="line">    #li1 ul&gt;li&#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        color: grey;</span><br><span class="line">        text-align: left;</span><br><span class="line">        border: 1px solid;</span><br><span class="line">        background-color: #ffcf41;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;**</span><br><span class="line">    当数据过去的时候,整体变成深绿色</span><br><span class="line">     *&#x2F;</span><br><span class="line">    a:hover&#123;</span><br><span class="line">        background-color: green;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;*.c_li1:hover #ul2&#123;*&#x2F;</span><br><span class="line">        &#x2F;*display: block;*&#x2F;</span><br><span class="line">    &#x2F;*&#125;*&#x2F;</span><br><span class="line"></span><br><span class="line">    #ul1 li:hover &gt;a~ul&#123;</span><br><span class="line">        display: block;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #ul2 a:hover&#123;</span><br><span class="line">        background-color: blue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>








]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>css语法</tag>
      </tags>
  </entry>
  <entry>
    <title>html语法03--js语法</title>
    <url>/jwangcloud/3810165720/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/html.jpeg"></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><span id="more"></span>

<h4 id="1-基础"><a href="#1-基础" class="headerlink" title="1.基础"></a>1.基础</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">      &#x2F;*</span><br><span class="line">      &#x2F;&#x2F;前端语法会尽量隐藏报错</span><br><span class="line">      const i &#x3D; 10;  &#x2F;&#x2F;常量定义</span><br><span class="line">      var a &#x3D; 10;</span><br><span class="line">      var b &#x3D; 20;</span><br><span class="line">      var c &#x3D; a + b;</span><br><span class="line">      var d &#x3D; &quot;helllo world&quot;;</span><br><span class="line">      var e &#x3D; &quot;1234&quot;</span><br><span class="line">      console.log(a);</span><br><span class="line">      console.log(c); &#x2F;&#x2F;在浏览器中开发者工具console中打印输出</span><br><span class="line">      console.log(d);</span><br><span class="line">      document.write(a);&#x2F;&#x2F;在浏览器页面输出</span><br><span class="line">      document.write(d);</span><br><span class="line">      document.write(a+d);  &#x2F;&#x2F;可以直接加减任何类型</span><br><span class="line">      document.write(Number(e)+a); &#x2F;&#x2F;使用Number String等进行类型转换</span><br><span class="line">      alert(&quot;helllo world&quot;) &#x2F;&#x2F;页面弹窗</span><br><span class="line">      &#x2F;&#x2F;js中类型</span><br><span class="line">      var b;</span><br><span class="line">      b &#x3D; 10; &#x2F;&#x2F; &#39;number&#39;</span><br><span class="line">      console.log(typeof b);</span><br><span class="line">      b &#x3D; true; &#x2F;&#x2F; &#39;boolean&#39;</span><br><span class="line">      console.log(typeof b);</span><br><span class="line">      a &#x3D; &#39;Henrry Lee&#39;; &#x2F;&#x2F; &#39;string&#39;</span><br><span class="line">      console.log(typeof a);</span><br><span class="line">      a &#x3D; function()&#123;&#125;; &#x2F;&#x2F; &#39;function&#39;</span><br><span class="line">      console.log(typeof a);</span><br><span class="line">      a &#x3D; &#123;age:26&#125;; &#x2F;&#x2F; &#39;object&#39;</span><br><span class="line">      console.log(typeof a);</span><br><span class="line"></span><br><span class="line">      *&#x2F;</span><br><span class="line">      var aa &#x3D; [1,2,3,4,56,23,1];</span><br><span class="line">      for(var i in aa)&#123;</span><br><span class="line">          document.write(&quot;下标：&quot; + i + &quot;  ||值：&quot; + aa[i] + &#39;&lt;br&gt;&#39;);</span><br><span class="line">      &#125;</span><br><span class="line">      for (var i of aa)&#123;</span><br><span class="line">          document.write(i+&#39;  &#39;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      function plus(num) &#123;</span><br><span class="line">          if(num &#x3D;&#x3D;&#x3D; 1)&#123;</span><br><span class="line">              return num;</span><br><span class="line">          &#125;</span><br><span class="line">          return num + plus(num - 1);</span><br><span class="line">      &#125;</span><br><span class="line">      var sum &#x3D; plus(100);</span><br><span class="line">      document.write(&#39;&lt;br&gt;&#39; + sum);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-函数方法"><a href="#2-函数方法" class="headerlink" title="2.函数方法"></a>2.函数方法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;&lt;title&gt;js基础教学&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ol&gt;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br><span class="line">&lt;button onclick&#x3D;first()&gt;确认&lt;&#x2F;button&gt;  &lt;!--捕捉onclik事件操作并执行所对应函数 </span><br><span class="line">可以写在这里也可以重新定义函数引用--&gt;</span><br><span class="line">&lt;button onclick&#x3D;&quot;&quot;&gt;第二次确认&lt;&#x2F;button&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;button onclick&#x3D;&quot;&quot;&gt;第三次确认&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  function first()&#123;                &#x2F;&#x2F;定义函数</span><br><span class="line">      alert(&#39;确认点击后 弹窗函数被执行&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">  var b &#x3D; document.getElementsByTagName(&#39;button&#39;)[1];  &#x2F;&#x2F;确认位置</span><br><span class="line">  b.onclick &#x3D; function()&#123;   &#x2F;&#x2F;函数编写并绑定&#39;点击&#39;事件</span><br><span class="line">      alert(&#39;新方法，直接绑定点击事件并弹窗&#39;);</span><br><span class="line">  &#125;;</span><br><span class="line">  var c &#x3D; document.getElementsByTagName(&#39;button&#39;)[2];</span><br><span class="line">  c.onmouseover &#x3D; function()&#123;    &#x2F;&#x2F;移到该位置便弹窗事件</span><br><span class="line">      alert(&#39;鼠标进过便弹窗&#39;)</span><br><span class="line">  &#125;;</span><br><span class="line">  &#x2F;*</span><br><span class="line">  ol &#x3D; document.getElementsByTagName(&quot;ol&quot;);</span><br><span class="line">  ol &#x3D; ol[0];</span><br><span class="line">  ol.children;</span><br><span class="line">  ol.childNodes;</span><br><span class="line">  ol.childNodes[2];</span><br><span class="line">  ol.firstElementChild;</span><br><span class="line">  ol.lastElementChild;</span><br><span class="line">  l1 &#x3D; ol.parentElement;</span><br><span class="line">   x1 &#x3D; li1.previousElementSibling; &#x2F;&#x2F;直接在console中输入即可</span><br><span class="line">   *&#x2F;</span><br><span class="line">  ol &#x3D; document.getElementsByTagName(&#39;ol&#39;)[0];  &#x2F;&#x2F;插入子节点步骤 1。获取标签</span><br><span class="line">  var li2 &#x3D; document.createElement(&#39;li&#39;); &#x2F;&#x2F;2。创建子标签</span><br><span class="line">  ol.appendChild(li2); &#x2F;&#x2F;3。添加标签</span><br><span class="line">  li2.innerText &#x3D; &#39;Test&#39;; &#x2F;&#x2F;4，标签内容</span><br><span class="line">  var li3 &#x3D; document.createElement(&#39;li&#39;);</span><br><span class="line">  ol.appendChild(li3);</span><br><span class="line">  li3.innerText &#x3D; &#39;Test2&#39;;</span><br><span class="line">  var body1 &#x3D; document.getElementsByTagName(&#39;body&#39;);  &#x2F;&#x2F;插入相邻节点步骤 1。获取标签</span><br><span class="line">  body1 &#x3D; body1[0];  &#x2F;&#x2F;2。精确定位标签</span><br><span class="line">  var div1 &#x3D; document.createElement(&#39;div&#39;); &#x2F;&#x2F;3。创建div标签</span><br><span class="line">  body1.insertBefore(div1,ol);  &#x2F;&#x2F;4.插入该标签</span><br><span class="line">  div1.innerText &#x3D; &#39;xxxxx&#39;; &#x2F;&#x2F;5.标签内容</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-js练习"><a href="#3-js练习" class="headerlink" title="3.js练习"></a>3.js练习</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;js练习&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  td&#123;</span><br><span class="line">    border: 1px solid black;</span><br><span class="line">  &#125;</span><br><span class="line">  *&#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;table cellspacing&#x3D;&quot;0px&quot; id &#x3D; &#39;t1&#39;&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td colspan&#x3D;&quot;4&quot;&gt;</span><br><span class="line">      &lt;button onclick&#x3D;&quot;add()&quot;&gt;添加&lt;&#x2F;button&gt;&lt;button onclick&#x3D;&quot;del()&quot;&gt;删除&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;td&gt;</span><br><span class="line">  &lt;&#x2F;tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;全选 &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;check&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;书号&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;书名&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;作者&lt;&#x2F;td&gt;</span><br><span class="line">  &lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  function add() &#123;   &#x2F;&#x2F;添加按钮：添加表格标签并加入内容</span><br><span class="line">      var table &#x3D; document.getElementById(&#39;t1&#39;);  &#x2F;&#x2F;获取table下标签</span><br><span class="line">      var tr1 &#x3D; document.createElement(&#39;tr&#39;);  &#x2F;&#x2F;创建tr标签</span><br><span class="line">      tr1.innerHTML &#x3D; &quot;&lt;td&gt;&lt;input type &#x3D; \&quot;checkbox\&quot; name&#x3D;\&quot;check\&quot;&gt;</span><br><span class="line">      &lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&quot;; &#x2F;&#x2F;在tr标签中输入html语法</span><br><span class="line">      table.appendChild(tr1); &#x2F;&#x2F;tr中添加该语法</span><br><span class="line">  &#125;</span><br><span class="line">  function del() &#123;</span><br><span class="line">      var inputs &#x3D; document.getElementsByTagName(&#39;input&#39;);</span><br><span class="line">      var del_inputs &#x3D; [];</span><br><span class="line">      for(let i of inputs)&#123;</span><br><span class="line">          console.log(i.checked);   &#x2F;&#x2F;是否选中：根据checked的值确定</span><br><span class="line">          if(i.checked) &#123;</span><br><span class="line">              del_inputs.push(i)     &#x2F;&#x2F;删除该按钮的值</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      &#x2F;&#x2F;return del_inputs</span><br><span class="line">      for(let i of del_inputs)&#123;</span><br><span class="line">          let tr2 &#x3D; i.parentNode.parentNode;</span><br><span class="line">          let table2 &#x3D; tr2.parentNode;</span><br><span class="line">         table2.removeChild(tr2);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>js语法</tag>
      </tags>
  </entry>
  <entry>
    <title>web02--html属性</title>
    <url>/jwangcloud/2741279174/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/html.jpeg"></p>
<h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><span id="more"></span>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">该属性能用于所有的HTML元素，为HTML元素指定一个唯一的标识符，用于CSS设置，</span><br><span class="line">JavasSript进行操作或其它脚本语言及服务器端语言进行设置操作。</span><br><span class="line"></span><br><span class="line">&lt;p id&#x3D;&quot;des&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;b id&#x3D;&quot;title&quot;&gt;&lt;&#x2F;b&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">该属性可以用于所有HTML元素，为元素添加一个或多个类名。通常是用于CSS设置或配</span><br><span class="line">合JavaScript进行操作设置，多个类名以空格符进行分隔，多个元素可以使用同一个类名。</span><br><span class="line"></span><br><span class="line">&lt;section class&#x3D;&quot;box fr&quot;&gt;&lt;&#x2F;section&gt;</span><br><span class="line">&lt;section class&#x3D;&quot;box&quot;&gt;&lt;&#x2F;section&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="title"><a href="#title" class="headerlink" title="title"></a>title</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">该属性可以用于所有HTML元素，通过设置它的值，可以让用户鼠标悬浮在该元素上显示出“title”</span><br><span class="line">属性中所设置的值。如之前提到的标签。起到一个补充说明的作用。</span><br><span class="line"></span><br><span class="line">&lt;img src&#x3D;&quot;1.jpegv&quot; alt&#x3D;&quot;图片加载失败...&quot; title&#x3D;&quot;Ferrari&quot;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="lang"><a href="#lang" class="headerlink" title="lang"></a>lang</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">该属性用于设置元素的语言类型，不支持的标标有&lt;base&gt;，&lt;br&gt;，&lt;frame&gt;，&lt;frameset&gt;，</span><br><span class="line">&lt;hr&gt;，&lt;iframe&gt;，&lt;param&gt; 及 &lt;script&gt;，但通常的使用方式是直接给标签设置该属性，</span><br><span class="line">如：&lt;html lang&#x3D;&quot;zh-cn&quot;&gt;、&lt;html lang&#x3D;&quot;zh&quot;&gt;、&lt;html lang&#x3D;&quot;en&quot;&gt;这样的形式，</span><br><span class="line">分别表示将语言类型设置为“简体中文”、“中文”、“英文”。</span><br></pre></td></tr></table></figure>

<h3 id="h5播放器"><a href="#h5播放器" class="headerlink" title="h5播放器"></a>h5播放器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;video controls&#x3D;&quot;controls&quot; autoplay&#x3D;&quot;autoplay&quot;&gt;</span><br><span class="line">    &lt;source src&#x3D;&quot;h5_player1.mp4&quot; type&#x3D;&quot;video&#x2F;mp4&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;video&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>html属性</tag>
      </tags>
  </entry>
  <entry>
    <title>web前端框架--VueJS</title>
    <url>/jwangcloud/2522874327/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="VueJS介绍与快速入门"><a href="#VueJS介绍与快速入门" class="headerlink" title="VueJS介绍与快速入门"></a>VueJS介绍与快速入门</h1><p> Vue.js是一个渐进式JavaScript 框架。Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。它不仅易于上手，还便于与第三方库或既有项目整合。</p>
<p>官网:<a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a></p>
<p>常见的前端的框架:</p>
<p>​    jQuery、Anglar、Vue、React、Node</p>
<h2 id="MVVM模式"><a href="#MVVM模式" class="headerlink" title="MVVM模式"></a>MVVM模式</h2><p>​    MVVM是Model-View-View-Model的简写。它本质上就是MVC 的改进版。</p>
<p>​    MVVM 就是将其中的View 的状态和行为抽象化，让我们将视图UI 和业务逻辑分开. MVVM模式和MVC模式一样，主要目的是分离视图（View）和模型（Model）Vue.js 是一个提供了 MVVM 风格的<strong>双向数据绑定</strong>的 Javascript 库，专注于View 层。它的核心是 MVVM 中的 VM，也就是 ViewModel。 ViewModel负责连接 View 和 Model，保证视图和数据的一致性，这种轻量级的架构让前端开发更加高效、便捷.</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/VUE/img/1552546278610.png" alt="1552546278610"></p>
<h2 id="VueJs快速入门"><a href="#VueJs快速入门" class="headerlink" title="VueJs快速入门"></a>VueJs快速入门</h2><ol>
<li>创建工程(war),导入vuejs</li>
</ol>
<p> <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/VUE/img/1552546458928.png" alt="1552546458928"></p>
<ol start="2">
<li>创建demo01.js(引入vuejs,定义div,创建vue实例)</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue的入门案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vuejs-2.5.16.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        指定一块区域，在这块区域中可以使用vue</span></span><br><span class="line"><span class="comment">        只有这块区域中的标签，才能使用vue和数据模型绑定</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            将vue的视图中的message绑定到div中,使用插值表达式&#123;&#123;message&#125;&#125;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;username&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el:<span class="string">&quot;#app&quot;</span>,<span class="comment">//指定哪个区域可以使用vue</span></span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="javascript">                message:<span class="string">&quot;hello world&quot;</span>,</span></span><br><span class="line"><span class="javascript">                username:<span class="string">&quot;周杰棍&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;<span class="comment">//数据模型：要展示到视图上的数据</span></span></span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>data ：用于定义数据。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>​    数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本<strong>插值表达式</strong>，Mustache 标签将会被替代为对应数据对象上属性的值。无论何时，绑定的数据对象上属性发生了改变，插值处的内容都会更新.</p>
<h1 id="VueJS-常用系统指令"><a href="#VueJS-常用系统指令" class="headerlink" title="VueJS 常用系统指令"></a>VueJS 常用系统指令</h1><h2 id="常用的事件"><a href="#常用的事件" class="headerlink" title="常用的事件"></a>常用的事件</h2><h3 id="click"><a href="#click" class="headerlink" title="@click"></a>@click</h3><p>说明: 点击事件(等同于v-on:click)</p>
<p>【需求】：点击按钮事件，改变message的值</p>
<ul>
<li>demo02.html</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:v-on</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue绑定事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vuejs-2.5.16.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            点击按钮，改变div中的内容</span></span><br><span class="line"><span class="comment">            使用vue绑定点击事件:</span></span><br><span class="line"><span class="comment">                1. v-on:click=&quot;函数()&quot;</span></span><br><span class="line"><span class="comment">                2.@click=&quot;函数()&quot;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;改变&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;fn1()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">           el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">           data:&#123;</span><br><span class="line"><span class="javascript">               message:<span class="string">&quot;hello world&quot;</span></span></span><br><span class="line">           &#125;,</span><br><span class="line">           methods:&#123;</span><br><span class="line"><span class="javascript">               <span class="function"><span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//改变div中的内容,只需要改变message的值就行</span></span></span><br><span class="line"><span class="javascript">                   <span class="built_in">this</span>.message = <span class="string">&quot;hello vue&quot;</span></span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="keydown"><a href="#keydown" class="headerlink" title="@keydown"></a>@keydown</h3><p>说明: 键盘按下事件(等同于v-on:keydown)</p>
<p>【需求】：对文本输入框做校验，使用键盘按下事件，如果按下0-9的数字，正常显示，其他按键则阻止事件执行。</p>
<ul>
<li>demo03.js</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue绑定键盘按下事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vuejs-2.5.16.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        对文本输入框做校验，使用键盘按下事件，如果按下0-9的数字，正常显示，其他按键则阻止事件执行。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            $event就是你当前触发的事件</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keydown</span>=<span class="string">&quot;fn1($event)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">           el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">           data:&#123;</span><br><span class="line"></span><br><span class="line">           &#125;,</span><br><span class="line">           methods:&#123;</span><br><span class="line"><span class="javascript">               <span class="function"><span class="title">fn1</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//判断你按下的那个按键是否是0-9，如果不是0-9则阻止事件触发</span></span></span><br><span class="line"><span class="javascript">                   <span class="comment">//event.keyCode获取当前按键的键码值</span></span></span><br><span class="line"><span class="javascript">                   <span class="keyword">var</span> keyCode = event.keyCode;</span></span><br><span class="line"><span class="javascript">                   <span class="comment">//先判断，按键是否是删除键</span></span></span><br><span class="line">                   if (keyCode != 8) &#123;</span><br><span class="line">                       if (keyCode &lt; 48 || keyCode &gt; 57) &#123;</span><br><span class="line"><span class="javascript">                           <span class="comment">//说明输入的不是0-9，则阻止事件发生</span></span></span><br><span class="line">                           event.preventDefault()</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="mouseover"><a href="#mouseover" class="headerlink" title="@mouseover"></a>@mouseover</h3><p>说明:鼠标移入区域事件(等同于v-on:mouseover)</p>
<p>【需求1】：给指定区域大小的div中添加样式，鼠标移到div中，弹出窗口。</p>
<ul>
<li>demo04.html</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue绑定鼠标移入事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vuejs-2.5.16.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        .box &#123;</span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> @<span class="attr">mouseover</span>=<span class="string">&quot;fn1()&quot;</span>&gt;</span></span><br><span class="line">            div</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">           el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">           methods:&#123;</span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;鼠标移入了...&quot;</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-text与v-html"><a href="#v-text与v-html" class="headerlink" title="v-text与v-html"></a>v-text与v-html</h2><p>v-text：输出文本内容，不会解析html元素</p>
<p>v-html：输出文本内容，会解析html元素</p>
<p>用在标签的属性里面</p>
<p>【需求】：分别使用v-text, v-html 赋值 <code>&lt;h1&gt;hello world&lt;h1&gt;</code> ，查看页面输出内容。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue绑定标签体的内容<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vuejs-2.5.16.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        使用v-text可以绑定标签体中文本内容</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;msg1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用v-html可以绑定标签体中的所有内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: blue&quot;</span> <span class="attr">v-html</span>=<span class="string">&quot;msg2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">       el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">       data:&#123;</span><br><span class="line"><span class="javascript">           msg1:<span class="string">&quot;hello div1&quot;</span>,</span></span><br><span class="line"><span class="javascript">           msg2:<span class="string">&quot;hello div2&quot;</span></span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="v-bind和v-model"><a href="#v-bind和v-model" class="headerlink" title="v-bind和v-model"></a>v-bind和v-model</h2><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p><strong>插值语法不能作用在HTML 属性上</strong>，遇到这种情况应该使用 v-bind指令</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:v-bind</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue绑定属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vuejs-2.5.16.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        vue绑定html标签的属性，使用v-bind进行绑定: v-bind:属性名=&quot;数据模型&quot;</span></span><br><span class="line"><span class="comment">        简写  :属性名=&quot;数据模型&quot;</span></span><br><span class="line"><span class="comment">        绑定a标签的href属性</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url1&quot;</span>&gt;</span>跳转到百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;&#x27;https://www.qq.com?id=&#x27;+id&quot;</span>&gt;</span>跳转到腾讯网，并且携带请求参数id的值<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">:color</span>=<span class="string">&quot;ys&quot;</span>&gt;</span>你好世界<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            url1:<span class="string">&quot;https://www.baidu.com&quot;</span>,</span></span><br><span class="line">            id:30,</span><br><span class="line"><span class="javascript">            ys:<span class="string">&quot;red&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>用于数据的绑定,数据的读取，主要是用于对表单数据进行双向绑定</p>
<p>【需求】：使用vue赋值json(对象)数据，并显示到页面的输入框中（表单回显）. 点击获取数据，在控制台输出表单中的数据；点击回显数据，设置表单的数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>v-model对表单数据进行双向绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vuejs-2.5.16.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user.username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user.password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        昵称<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;nickname&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user.nickname&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        地址<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;user.address&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            1. 需求1: 点击获取表单数据的按钮的时候，将表单的所有数据获取到</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;获取表单的数据&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;obtainFormData()&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            2. 需求2: 点击回显表单数据，重新设置表单中的内容</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;回显表单数据&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;setFormData()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">       el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">       data:&#123;</span><br><span class="line">           user:&#123;</span><br><span class="line"><span class="javascript">               username:<span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="javascript">               password:<span class="string">&quot;123456&quot;</span>,</span></span><br><span class="line"><span class="javascript">               nickname:<span class="string">&quot;张三疯&quot;</span>,</span></span><br><span class="line"><span class="javascript">               address:<span class="string">&quot;武当山&quot;</span></span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125; ,</span><br><span class="line">       methods:&#123;</span><br><span class="line"><span class="javascript">           <span class="comment">//获取表单数据</span></span></span><br><span class="line"><span class="javascript">           <span class="function"><span class="title">obtainFormData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//其实就是获取数据模型user</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.user)</span></span><br><span class="line">           &#125;,</span><br><span class="line"><span class="javascript">           <span class="function"><span class="title">setFormData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//假设: 接收到了服务器端的响应数据</span></span></span><br><span class="line"><span class="javascript">               <span class="keyword">var</span> responseData = &#123;</span></span><br><span class="line"><span class="javascript">                   username:<span class="string">&quot;李四&quot;</span>,</span></span><br><span class="line"><span class="javascript">                   password:<span class="string">&quot;654321&quot;</span>,</span></span><br><span class="line"><span class="javascript">                   nickname:<span class="string">&quot;李四疯&quot;</span>,</span></span><br><span class="line"><span class="javascript">                   address:<span class="string">&quot;峨眉山&quot;</span></span></span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">               <span class="comment">//目的：将表单的值设置为responseData里面的值</span></span></span><br><span class="line"><span class="javascript">               <span class="comment">//只要将responseData的值设置给user就行了</span></span></span><br><span class="line"><span class="javascript">               <span class="built_in">this</span>.user = responseData</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-for-v-if-v-show"><a href="#v-for-v-if-v-show" class="headerlink" title="v-for,v-if,v-show"></a>v-for,v-if,v-show</h2><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>用于操作array/集合，遍历</p>
<p>语法:  <code>v-for=&quot;(元素,index) in 数组/集合&quot;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>使用v-for遍历<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vuejs-2.5.16.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--城市列表--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                使用v-for绑定数组内容</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(cityName,index) in cityList&quot;</span> <span class="attr">:id</span>=<span class="string">&quot;index&quot;</span> <span class="attr">v-html</span>=<span class="string">&quot;cityName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>地址<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(linkman,index) in linkmanList&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-html</span>=<span class="string">&quot;index+1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-html</span>=<span class="string">&quot;linkman.name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-html</span>=<span class="string">&quot;linkman.age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-html</span>=<span class="string">&quot;linkman.address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">       el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">       data:&#123;</span><br><span class="line"><span class="javascript">           cityList:[<span class="string">&quot;北京&quot;</span>,<span class="string">&quot;上海&quot;</span>,<span class="string">&quot;深圳&quot;</span>,<span class="string">&quot;广州&quot;</span>,<span class="string">&quot;长沙&quot;</span>],</span></span><br><span class="line">           linkmanList:[</span><br><span class="line">               &#123;</span><br><span class="line"><span class="javascript">                   name:<span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line">                   age:18,</span><br><span class="line"><span class="javascript">                   address:<span class="string">&quot;深圳&quot;</span></span></span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line"><span class="javascript">                   name:<span class="string">&quot;李四&quot;</span>,</span></span><br><span class="line">                   age:28,</span><br><span class="line"><span class="javascript">                   address:<span class="string">&quot;广州&quot;</span></span></span><br><span class="line">               &#125;,</span><br><span class="line">               &#123;</span><br><span class="line"><span class="javascript">                   name:<span class="string">&quot;王五&quot;</span>,</span></span><br><span class="line">                   age:18,</span><br><span class="line"><span class="javascript">                   address:<span class="string">&quot;惠州&quot;</span></span></span><br><span class="line">               &#125;</span><br><span class="line">           ]</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-if-与v-show"><a href="#v-if-与v-show" class="headerlink" title="v-if 与v-show"></a>v-if 与v-show</h3><p>v-if是根据表达式的值来决定是否渲染元素(标签都没有了)</p>
<p>v-show是根据表达式的值来切换元素的display css属性(标签还在)。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue绑定标签的显示和隐藏<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vuejs-2.5.16.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            给img标签绑定v-if，如果值为true就显示，值为false就隐藏; v-if是通过直接删除标签来隐藏标签的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            给img标签绑定v-show，如果值为true就显示，值为false就隐藏;v-show是通过设置display为none来隐藏标签的</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/VUE/img/mm.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400px&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;切换显示和隐藏&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;toggleImg()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">           el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">           data:&#123;</span><br><span class="line"><span class="javascript">               isShow:<span class="literal">true</span></span></span><br><span class="line">           &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line"><span class="javascript">               <span class="function"><span class="title">toggleImg</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.isShow = !<span class="built_in">this</span>.isShow</span></span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ol>
<li>v-for:作为标签的属性使用的, 遍历</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;标签 v-for&#x3D;&quot;(元素,索引) in 数组&quot;&gt;&lt;&#x2F;标签&gt;</span><br><span class="line">&#x2F;&#x2F;1.元素的变量名随便取</span><br><span class="line">&#x2F;&#x2F;2.索引的变量名随便取</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>v-if: 作为标签的属性使用的, 决定了标签是否展示</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;标签 v-if&#x3D;&quot;boolean类型的&quot;&gt;&lt;&#x2F;标签&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;1.v-if里面是true, 展示</span><br><span class="line">&#x2F;&#x2F;2.v-if里面是false, 不展示,标签都没有</span><br></pre></td></tr></table></figure>

<h3 id="Vue的常用指令的回顾"><a href="#Vue的常用指令的回顾" class="headerlink" title="Vue的常用指令的回顾"></a>Vue的常用指令的回顾</h3><ol>
<li>在vue的入门案例中，需要注意的点:<ol>
<li>JavaScript的版本应该设置为ECMAScript6</li>
<li>el表示vue的容器</li>
<li>data表示数据模型</li>
<li>methods表示vue的函数</li>
</ol>
</li>
<li>绑定事件:<ol>
<li>v-on:click=”函数”</li>
<li>@click=”函数”</li>
</ol>
</li>
<li>v-text 和 v-html 设置标签体的内容</li>
<li>v-bind绑定属性</li>
<li>v-model绑定表单的内容</li>
<li>v-for 进行遍历</li>
<li>v-if 和 v-show 控制标签的显示和隐藏</li>
</ol>
<h1 id="VueJS生命周期"><a href="#VueJS生命周期" class="headerlink" title="VueJS生命周期"></a>VueJS生命周期</h1><h2 id="VueJS生命周期-1"><a href="#VueJS生命周期-1" class="headerlink" title="VueJS生命周期"></a>VueJS生命周期</h2><h3 id="什么是VueJS生命周期"><a href="#什么是VueJS生命周期" class="headerlink" title="什么是VueJS生命周期"></a>什么是VueJS生命周期</h3><p>​    就是vue实例从创建到销毁的过程. </p>
<p>​    每个 Vue 实例在被创建到销毁都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/VUE/img/1595430819713.png" alt="1595430819713"></p>
<ul>
<li><p>beforeCreate ：数据还没有监听，没有绑定到vue对象实例，同时也没有挂载对象</p>
</li>
<li><p><strong>created</strong>：数据已经绑定到了对象实例，但是还没有挂载对象（使用ajax可在此方法中查询数据，调用函数）</p>
</li>
<li><p>beforeMount: 模板已经编译好了，根据数据和模板已经生成了对应的元素对象，将数据对象关联到了对象的</p>
<p>el属性，el属性是一个HTMLElement对象，也就是这个阶段，vue实例通过原生的createElement等方法来创<br>建这个html片段，准备注入到我们vue实例指明的el属性所对应的挂载点</p>
</li>
<li><p><strong>mounted</strong>:将el的内容挂载到了el，相当于我们在jquery执行了(el).html(el),生成页面上真正的dom，上面我们<br>就会发现dom的元素和我们el的元素是一致的。在此之后，我们能够用方法来获取到el元素下的dom对象，并<br>进行各种操作当我们的data发生改变时，会调用beforeUpdate和updated方法</p>
</li>
<li><p>beforeUpdate ：数据更新到dom之前，我们可以看到$el对象已经修改，但是我们页面上dom的数据还<br>没有发生改变</p>
</li>
<li><p>updated: dom结构会通过虚拟dom的原则，找到需要更新页面dom结构的最小路径，将改变更新到<br>dom上面，完成更新</p>
</li>
<li><p>beforeDestroy,destroyed :实例的销毁，vue实例还是存在的，只是解绑了事件的监听、还有watcher对象数据<br>与view的绑定，即数据驱动</p>
</li>
</ul>
<h3 id="vuejs生命周期的演示"><a href="#vuejs生命周期的演示" class="headerlink" title="vuejs生命周期的演示"></a>vuejs生命周期的演示</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>01_vue入门<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vuejs-2.5.16.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;msg&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vue =  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//表示当前vue对象接管了div区域</span></span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//定义数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&#x27;hello word&#x27;</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">showMsg</span>(<span class="params">msg, obj</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(msg);<span class="comment">//钩子函数的名称,obj就是vue对象</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;data:&quot;</span> + obj.message);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;el元素:&quot;</span> + obj.$el);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;元素的内容:&quot;</span> + <span class="built_in">document</span>.getElementById(<span class="string">&quot;app&quot;</span>).innerHTML);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">//beforeCreate:vue对象还没有实例化出来，vue对象中的数据模型还未创建出来</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.showMsg(<span class="string">&#x27;---beforeCreate---&#x27;</span>, <span class="built_in">this</span>);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">//created ：数据已经绑定到了对象实例，但是还没有挂载对象</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// created钩子函数执行的时候，vue对象已经创建出来了，vue对象中的数据模型已经创建出来了</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 所以我们可以发送异步请求给服务器获取数据并且赋值给数据模型</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.message = <span class="string">&quot;你好世界&quot;</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.showMsg(<span class="string">&#x27;---created---&#x27;</span>, <span class="built_in">this</span>);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">//beforeMount: 模板已经编译好了，根据数据和模板已经生成了对应的元素对象，将数据对象关联到了对象的</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">beforeMount</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.showMsg(<span class="string">&#x27;---beforeMount---&#x27;</span>, <span class="built_in">this</span>);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">//mounted:将el的内容挂载到了el，相当于我们在jquery执行了(el).html(el)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//生成页面上真正的dom，上面我们就会发现dom的元素和我们el的元素是一致的。在此之后，我们能够用方法来获取到el元素下的dom对象，并进行各种操作当我们的data发生改变时，会调用beforeUpdate和updated方法</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//在mounted里面可以获取视图上的数据</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.showMsg(<span class="string">&#x27;---mounted---&#x27;</span>, <span class="built_in">this</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>结果</li>
</ul>
<p> <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/VUE/img/1552552850107.png" alt="1552552850107"></p>
<h1 id="VueJS-ajax"><a href="#VueJS-ajax" class="headerlink" title="VueJS ajax"></a>VueJS ajax</h1><h2 id="vue-resource"><a href="#vue-resource" class="headerlink" title="vue-resource"></a>vue-resource</h2><p>​    vue-resource是Vue.js的插件提供了使用XMLHttpRequest或JSONP进行Web请求和处理响应的服务。 当vue更新到2.0之后，作者就宣告不再对vue-resource更新，而是推荐的axios，在这里大家了解一下vue-resource就可以。</p>
<p>vue-resource的github: <a href="https://github.com/pagekit/vue-resource">https://github.com/pagekit/vue-resource</a></p>
<ul>
<li>Get方式</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/VUE/img/1552552968981.png" alt="1552552968981"></p>
<ul>
<li>Post方式</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/VUE/img/1552552988792.png" alt="1552552988792"></p>
<h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><h4 id="什么是axios"><a href="#什么是axios" class="headerlink" title="什么是axios"></a>什么是axios</h4><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中</p>
<p>注: Promise 对象用于表示一个异步操作的最终状态（完成或失败），以及其返回的值。</p>
<p>axios的github:<a href="https://github.com/axios/axios">https://github.com/axios/axios</a></p>
<p>中文说明: <a href="https://www.kancloud.cn/yunye/axios/234845">https://www.kancloud.cn/yunye/axios/234845</a></p>
<h3 id="axios的语法"><a href="#axios的语法" class="headerlink" title="axios的语法"></a>axios的语法</h3><ul>
<li>get请求</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为给定 ID 的 user 创建请求</span></span><br><span class="line">axios.get(<span class="string">&#x27;/user?id=12&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选地，上面的请求可以这样做</span></span><br><span class="line">axios.get(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">      id: <span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>post请求</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.post(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line">    id: <span class="number">12</span>,</span><br><span class="line">    username:<span class="string">&quot;jay&quot;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch((<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="axios的使用"><a href="#axios的使用" class="headerlink" title="axios的使用"></a>axios的使用</h3><p>需求:使用axios发送异步请求给ServletDemo01,并在页面上输出内容</p>
<p>步骤:</p>
<ol>
<li>创建ServletDemo01</li>
<li>把axios和vue导入项目 引入到页面</li>
<li>使用get(), post() 请求</li>
</ol>
<ul>
<li>html页面代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>使用axios发送异步请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vuejs-2.5.16.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/axios-0.18.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        用户名:<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;user.username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        密码:<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;user.password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        昵称:<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;user.nickname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;fn1()&quot;</span>&gt;</span>使用axios发送异步的get请求<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;fn2()&quot;</span>&gt;</span>使用axios发送异步的post请求<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">           el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">           data:&#123;</span><br><span class="line">             user:&#123;&#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           methods:&#123;</span><br><span class="line"><span class="javascript">                <span class="comment">//使用axios发送异步的get请求</span></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">                    /*axios.get(&quot;demo01?username=aobama&amp;password=123&amp;nickname=圣枪游侠&quot;).then(response=&gt;&#123;</span><br><span class="line"><span class="javascript">                        <span class="comment">//response就是http协议中的响应:包含行、头、体，我们要获取的是响应体的数据，其实就是response.data</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(response.data)</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//处理响应数据，response就是服务器端的响应数据,将响应数据中的json赋值给user</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.user = response.data</span></span><br><span class="line"><span class="javascript">                    &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//处理请求失败,error就是服务器的异常信息</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(error)</span></span><br><span class="line">                    &#125;)*/</span><br><span class="line"></span><br><span class="line"><span class="javascript">                    <span class="comment">//另外一种get请求携带参数的方式</span></span></span><br><span class="line"><span class="javascript">                    axios.get(<span class="string">&quot;demo01&quot;</span>,&#123;</span></span><br><span class="line">                        params:&#123;</span><br><span class="line"><span class="javascript">                            username:<span class="string">&quot;奥巴马&quot;</span>,</span></span><br><span class="line"><span class="javascript">                            password:<span class="string">&quot;1234567&quot;</span>,</span></span><br><span class="line"><span class="javascript">                            nickname:<span class="string">&quot;圣枪游侠&quot;</span></span></span><br><span class="line">                        &#125;</span><br><span class="line"><span class="javascript">                    &#125;).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//response就是http协议中的响应:包含行、头、体，我们要获取的是响应体的数据，其实就是response.data</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(response.data)</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//处理响应数据，response就是服务器端的响应数据,将响应数据中的json赋值给user</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.user = response.data</span></span><br><span class="line"><span class="javascript">                    &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//处理请求失败,error就是服务器的异常信息</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(error)</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//使用axios发送异步的post请求</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//post请求也可以在?后面携带参数</span></span></span><br><span class="line">                    /*axios.post(&quot;demo01?username=周杰棍&amp;password=666666&amp;nickname=周杰伦&quot;).then(response=&gt;&#123;</span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.user = response.data</span></span><br><span class="line">                    &#125;)*/</span><br><span class="line"></span><br><span class="line"><span class="javascript">                    <span class="comment">//使用axios发送异步的post请求，并且携带json类型的参数(在请求体中)</span></span></span><br><span class="line"><span class="javascript">                    axios.post(<span class="string">&quot;demo01&quot;</span>,&#123;<span class="attr">username</span>:<span class="string">&quot;周杰伦&quot;</span>,<span class="attr">password</span>:<span class="string">&quot;123456&quot;</span>,<span class="attr">nickname</span>:<span class="string">&quot;周杰棍&quot;</span>&#125;).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.user = response.data</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>ServletDemo01的代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.itheima.utils.JsonUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Leevi</span></span><br><span class="line"><span class="comment"> * 日期2020-10-23  11:41</span></span><br><span class="line"><span class="comment"> * request.getParameter()方法只能获取到&quot;name=value&amp;name=value&quot;这种类型的请求参数</span></span><br><span class="line"><span class="comment"> * 但是该方法无法获取请求体中的json类型的请求参数,就得使用json解析的jar包将json类型的请求参数转换成java对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo01&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo01</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取请求参数</span></span><br><span class="line">        <span class="comment">/*String username = request.getParameter(&quot;username&quot;);</span></span><br><span class="line"><span class="comment">        String password = request.getParameter(&quot;password&quot;);</span></span><br><span class="line"><span class="comment">        String nickname = request.getParameter(&quot;nickname&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        System.out.println(username + &quot;:&quot; + password + &quot;:&quot; + nickname);</span></span><br><span class="line"><span class="comment">        //向客户端响应数据</span></span><br><span class="line"><span class="comment">        User user = new User(username, password, nickname);*/</span></span><br><span class="line"></span><br><span class="line">        User user = JsonUtils.parseJSON2Object(request, User.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="comment">//int num = 10/0;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将user转换成json字符串，响应给客户端</span></span><br><span class="line">        <span class="comment">/*String jsonStr = JSON.toJSONString(user);</span></span><br><span class="line"><span class="comment">        response.getWriter().write(jsonStr);*/</span></span><br><span class="line"></span><br><span class="line">        JsonUtils.printResult(response,user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>web前端框架</category>
      </categories>
      <tags>
        <tag>VueJS</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-JS入门</title>
    <url>/jwangcloud/3308612012/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JS基础"><a href="#JS基础" class="headerlink" title="JS基础"></a>JS基础</h1><ul>
<li>JS，全称JavaScript，是一种<strong>直译式</strong>脚本语言，是一种动态类型、<strong>弱类型</strong>、基于对象的脚本语言，内置支持类型。 </li>
</ul>
<span id="more"></span>

<ul>
<li>JS语言和Java语言对比：</li>
</ul>
<table>
<thead>
<tr>
<th>对比</th>
<th>Java</th>
<th>JS</th>
</tr>
</thead>
<tbody><tr>
<td>运行环境</td>
<td>JVM虚拟机</td>
<td>JS引擎，是浏览器的一部分</td>
</tr>
<tr>
<td>是否跨平台运行</td>
<td>跨平台</td>
<td>跨平台</td>
</tr>
<tr>
<td>语言类型</td>
<td>强类型语言</td>
<td>弱类型，动态类型语言</td>
</tr>
<tr>
<td>是否需要编译</td>
<td>需要编译，是编译型语言</td>
<td>不需要编译，是解释型语言</td>
</tr>
<tr>
<td>是否区分大小写</td>
<td>区分大小写</td>
<td>区分大小写</td>
</tr>
</tbody></table>
<h2 id="JS的作用"><a href="#JS的作用" class="headerlink" title="JS的作用"></a>JS的作用</h2><p>具体来说，有两部分作用：</p>
<ul>
<li><p>JS代码可以操作浏览器(BOM)：进行网址跳转、历史记录切换、浏览器弹窗等等</p>
</li>
<li><p>JS代码可以操作网页(DOM)：操作HTML的标签、标签的属性、样式、文本等等</p>
<p>注意：JS的是在浏览器内存中运行时操作，并不会修改网页源码，所以刷新页面后网页会还原</p>
</li>
</ul>
<h2 id="JS的组成"><a href="#JS的组成" class="headerlink" title="JS的组成"></a>JS的组成</h2><ul>
<li>ECMAScript(核心)：是JS的基本语法规范</li>
<li>BOM：Browser Object Model，浏览器对象模型，提供了与浏览器进行交互的方法</li>
<li>DOM：Document Object Model，文档对象模型，提供了操作网页的方法</li>
</ul>
<h1 id="JS使用"><a href="#JS使用" class="headerlink" title="JS使用"></a>JS使用</h1><h2 id="JS引入"><a href="#JS引入" class="headerlink" title="JS引入"></a>JS引入</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul>
<li>在html里增加<code>&lt;script&gt;</code>标签，把js代码写在标签体里</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="comment">//在这里写js代码</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul>
<li>创建html页面，编写js代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>js引入方式-内部js<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//操作浏览器弹窗</span></span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;hello, world&quot;</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>打开页面，浏览器会弹窗</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/javascript/img/1571279916433.png" alt="1571279916433"></p>
<h2 id="外部JS"><a href="#外部JS" class="headerlink" title="外部JS"></a>外部JS</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><ul>
<li>把js代码写在单独的js文件中，js文件后缀名是<code>.js</code></li>
<li>在HTML里使用<code>&lt;script&gt;</code>标签引入外部js文件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js文件的路径&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><ul>
<li><p>创建一个<code>my.js</code>文件，编写js代码</p>
<ul>
<li>第1步：创建js文件</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/javascript/img/1571279674760.png" alt="1571279674760"></p>
<ul>
<li>第2步：设置js文件名称</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/javascript/img/1571279704696.png" alt="1571279704696"></p>
<ul>
<li>第3步：编写js代码</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(<span class="string">&quot;hello, world! 来自my.js&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>创建一个html，引入<code>my.js</code>文件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>js引入方式-外部js<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入外部的my.js文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/my.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>打开页面，浏览器会弹窗</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/javascript/img/1571279953863.png" alt="1571279953863"></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li><p>一个<code>script</code>标签，不能既引入外部js文件，又在标签体内写js代码。</p>
<ul>
<li>错误演示</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/my.js&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">	alert(<span class="string">&quot;hello&quot;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>正确演示</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/my.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	alert(<span class="string">&quot;hello&quot;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="实操-JS小功能和JS调试"><a href="#实操-JS小功能和JS调试" class="headerlink" title="实操-JS小功能和JS调试"></a>实操-JS小功能和JS调试</h2><h3 id="小功能"><a href="#小功能" class="headerlink" title="小功能"></a>小功能</h3><ul>
<li>alert(): 弹出警示框</li>
<li>console.log(): 向控制台打印日志 </li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/javascript/img/tu_3.png" alt="img"></p>
<ul>
<li>document.write(); 文档打印. 向页面输出内容. </li>
</ul>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><ol>
<li>按<code>F12</code>打开开发者工具</li>
<li>找到<code>Source</code>窗口，在左边找到页面，如下图<ul>
<li>打断点之后，当代码执行到断点时，会暂时执行</li>
<li>在窗口右侧可以查看表达式的值、单步调试、放行等等</li>
</ul>
</li>
</ol>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/javascript/img/1571577895543.png" alt="1571577895543"></p>
<ol start="3">
<li>如果代码执行中出现异常信息，会在控制台<code>Console</code>窗口显示出来</li>
</ol>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/javascript/img/1571578078067.png" alt="1571578078067"></p>
<ol start="4">
<li>点击可以定位到异常位置</li>
</ol>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/javascript/img/1571578109301.png" alt="1571578109301"></p>
<h1 id="JS基本语法"><a href="#JS基本语法" class="headerlink" title="JS基本语法"></a>JS基本语法</h1><h2 id="更改idea中的js语言的版本"><a href="#更改idea中的js语言的版本" class="headerlink" title="更改idea中的js语言的版本"></a>更改idea中的js语言的版本</h2><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/javascript/img/1.png"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/javascript/img/2.png"></p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul>
<li>JavaScript 是一种<strong>弱类型语言</strong>，javascript的变量类型由它的值来决定。 定义变量需要用关键字 ‘var’或者’let’</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int i &#x3D; 10;   		 var i &#x3D; 10;        或者 i &#x3D; 10;</span><br><span class="line">String a &#x3D; &quot;哈哈&quot;;   let str &#x3D; &quot;哈哈&quot;;  或者 str &#x3D; &quot;哈哈&quot;;  或者 str &#x3D; &quot;哈哈&quot;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意:</span><br><span class="line">	1.var或者可以省略不写,建议保留</span><br><span class="line">	2.最后一个分号可以省略,建议保留</span><br><span class="line">	3.同时定义多个变量可以用&quot;,&quot;隔开，公用一个‘var’关键字. var c &#x3D; 45,d&#x3D;&#39;qwe&#39;,f&#x3D;&#39;68&#39;;</span><br></pre></td></tr></table></figure>

<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>1.五种原始数据类型</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>number</code></td>
<td>数值类型</td>
<td><code>1</code>, <code>2</code>, <code>3</code>, <code>3.14</code></td>
</tr>
<tr>
<td><code>boolean</code></td>
<td>布尔类型</td>
<td><code>true</code>, <code>false</code></td>
</tr>
<tr>
<td><code>string</code></td>
<td>字符串类型</td>
<td><code>&quot;hello&quot;</code>, ‘hello’</td>
</tr>
<tr>
<td><code>object</code></td>
<td>对象类型</td>
<td><code>new Date()</code>,  <code>null</code></td>
</tr>
<tr>
<td><code>undefined</code></td>
<td>未定义类型</td>
<td>var a;</td>
</tr>
</tbody></table>
<p>2.typeof操作符</p>
<ul>
<li><p>作用： 用来判断变量是什么类型</p>
</li>
<li><p>写法：typeof(变量名) 或 typeof 变量名</p>
</li>
<li><p>null与undefined的区别：</p>
<p>​    null: 对象类型，已经知道了数据类型，但对象为空。<br>​    undefined：未定义的类型，并不知道是什么数据类型。</p>
</li>
</ul>
<p>3.小练习</p>
<ul>
<li>定义不同的变量,输出类型,</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/javascript/img/tu_13.png" alt="img"></p>
<ul>
<li>代码</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">5</span>;   <span class="comment">//整数</span></span><br><span class="line">    <span class="keyword">var</span> f = <span class="number">3.14</span>;  <span class="comment">//浮点</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="literal">true</span>;  <span class="comment">//布尔</span></span><br><span class="line">    <span class="keyword">var</span> c = <span class="string">&#x27;a&#x27;</span>;  <span class="comment">//字符串</span></span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;abc&quot;</span>;   <span class="comment">//字符串</span></span><br><span class="line">    <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();  <span class="comment">//日期</span></span><br><span class="line">    <span class="keyword">var</span> u;   <span class="comment">//未定义类型</span></span><br><span class="line">    <span class="keyword">var</span> n = <span class="literal">null</span>; <span class="comment">//空</span></span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;整数：&quot;</span> + <span class="keyword">typeof</span>(i) + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;浮点 ：&quot;</span> + <span class="keyword">typeof</span>(f) + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;布尔：&quot;</span> + <span class="keyword">typeof</span>(b) + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;字符：&quot;</span> + <span class="keyword">typeof</span>(c) + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;字符串：&quot;</span> + <span class="keyword">typeof</span>(str) + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;日期：&quot;</span> + <span class="keyword">typeof</span>(d) + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;未定义的类型：&quot;</span> + <span class="keyword">typeof</span>(u) + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;null：&quot;</span> + <span class="keyword">typeof</span>(n) + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>字符串转换成数字类型 </p>
<ul>
<li>全局函数(方法)，就是可以在JS中任何的地方直接使用的函数，不用导入对象。不属于任何一个对象</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/javascript/img/tu_14.png" alt="img"></p>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul>
<li>关系运算符:&gt; &gt;= &lt; &lt;=</li>
</ul>
<ul>
<li>number类型和字符串做-,*,/的时候,字符串自动的进行类型转换,前提字符串里面的数值要满足<strong>number</strong>类型</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var i &#x3D; 3;</span><br><span class="line">var j &#x3D; &quot;6&quot;;</span><br><span class="line">alert(j-i);&#x2F;&#x2F;结果是3, &quot;6&quot; &#x3D;&#x3D;&gt; 6  </span><br><span class="line">alert(j*i);&#x2F;&#x2F;结果是18, </span><br><span class="line">alert(j&#x2F;i);&#x2F;&#x2F;结果是2, </span><br></pre></td></tr></table></figure>

<ul>
<li>除法,保留小数  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var i &#x3D; 2;</span><br><span class="line">var j &#x3D; 5; </span><br><span class="line">alert(j&#x2F;i);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>==</code> 比较数值,    <code>=== </code> 比较数值和类型</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var i &#x3D; 2;</span><br><span class="line">var j &#x3D; &quot;2&quot;; </span><br><span class="line">alert(i&#x3D;&#x3D;j); &#x2F;&#x2F; &#x3D;&#x3D;比较的仅仅是数值, true</span><br><span class="line">alert(i&#x3D;&#x3D;&#x3D;j); &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;比较的是数值和类型.false</span><br></pre></td></tr></table></figure>

<h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><ul>
<li>for循环</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//将数据装到表格中</span></span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;&lt;table border=&#x27;1&#x27; cellspacing=&#x27;0&#x27; width=&#x27;900px&#x27;&gt;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;j++)&#123;</span><br><span class="line">    <span class="comment">//一行</span></span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;&lt;tr&gt;&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;=j;i++)&#123;</span><br><span class="line">        <span class="comment">//一个单元格</span></span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">&quot;&lt;td&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//每一个乘法表达式就是td中的内容</span></span><br><span class="line">        <span class="built_in">document</span>.write(j+<span class="string">&quot;x&quot;</span>+i+<span class="string">&quot;=&quot;</span>+(j*i))</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">&quot;&lt;/td&gt;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;&lt;/tr&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;/table&gt;&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>if… else</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    alert(<span class="string">&#x27;语文&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">    alert(<span class="string">&#x27;数学&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    alert(<span class="string">&#x27;不补习&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>switch</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="keyword">var</span> str = <span class="string">&quot;java&quot;</span>; </span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> (str)&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;java&quot;</span>:</span><br><span class="line">			alert(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;C++&quot;</span>:</span><br><span class="line">			alert(<span class="string">&quot;C++&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;Android&quot;</span>:</span><br><span class="line">			alert(<span class="string">&quot;Android&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;	</span><br><span class="line">       &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul>
<li>函数： 是被设计为执行特定任务的代码块 ，在被调用时会执行 </li>
<li>函数类似于Java里的方法，用于封装一些可重复使用的代码块</li>
</ul>
<h3 id="普通-有名-函数"><a href="#普通-有名-函数" class="headerlink" title="普通(有名)函数"></a>普通(有名)函数</h3><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><ul>
<li>定义普通函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">形参列表</span>)</span>&#123;</span><br><span class="line">    函数体</span><br><span class="line">    [<span class="keyword">return</span> 返回值;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用普通函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = 函数名(实参列表);</span><br></pre></td></tr></table></figure>

<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><ul>
<li>计算两个数字之和</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//js的函数的作用:为了封装代码，在要使用这些代码的地方直接调用函数</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//js的函数的声明方式:1. 普通函数(命名函数)  2.匿名函数</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//普通函数: function 函数名(参数名,参数名...)&#123;函数体&#125;，函数没有返回值类型，没有参数类型</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">total</span>(<span class="params">a,b,c</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;arguments数组中的数据:&quot;</span>+<span class="built_in">arguments</span>.length)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(a+<span class="string">&quot;,&quot;</span>+b+<span class="string">&quot;,&quot;</span>+c)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> a+b+c</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//调用函数</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//var num = total(1,2,3);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//console.log(num)</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//js的函数还有俩特点:1. 函数声明时候的参数个数和函数调用时候传入的参数个数，可以不一致;因为函数内部有一个arguments数组，用于存放传入的参数</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//2. js的函数是没有重载的，同名函数后面的会覆盖前面的</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">total</span>(<span class="params">a,b</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> a+b</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> num = total(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(num)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>匿名函数，也叫回调函数，类似于Java里的函数式接口里的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">形参列表</span>)</span>&#123;</span><br><span class="line">    函数体</span><br><span class="line">    [<span class="keyword">return</span> 返回值;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="JS事件"><a href="#JS事件" class="headerlink" title="JS事件"></a>JS事件</h1><ul>
<li>HTML 事件是发生在 HTML 元素上的“事情”， 是浏览器或用户做的某些事情</li>
<li><strong>事件通常与函数配合使用，这样就可以通过发生的事件来驱动函数执行。</strong> </li>
</ul>
<h2 id="常见事件"><a href="#常见事件" class="headerlink" title="常见事件"></a>常见事件</h2><table>
<thead>
<tr>
<th>属性</th>
<th>此事件发生在何时…</th>
</tr>
</thead>
<tbody><tr>
<td>onclick</td>
<td>当用户点击某个对象时调用的事件句柄。</td>
</tr>
<tr>
<td>ondblclick</td>
<td>当用户双击某个对象时调用的事件句柄。</td>
</tr>
<tr>
<td>onchange</td>
<td>域的内容被改变。</td>
</tr>
<tr>
<td>onblur</td>
<td>元素失去焦点。</td>
</tr>
<tr>
<td>onfocus</td>
<td>元素获得焦点。</td>
</tr>
<tr>
<td>onload</td>
<td>一张页面或一幅图像完成加载。</td>
</tr>
<tr>
<td>onsubmit</td>
<td>确认按钮被点击；表单被提交。</td>
</tr>
<tr>
<td>onkeydown</td>
<td>某个键盘按键被按下。</td>
</tr>
<tr>
<td>onkeypress</td>
<td>某个键盘按键被按住。</td>
</tr>
<tr>
<td>onkeyup</td>
<td>某个键盘按键被松开。</td>
</tr>
<tr>
<td>onmousedown</td>
<td>鼠标按钮被按下。</td>
</tr>
<tr>
<td>onmouseup</td>
<td>鼠标按键被松开。</td>
</tr>
<tr>
<td>onmouseout</td>
<td>鼠标从某元素移开。</td>
</tr>
<tr>
<td>omouseover</td>
<td>鼠标移到某元素之上。</td>
</tr>
<tr>
<td>onmousemove</td>
<td>鼠标被移动。</td>
</tr>
</tbody></table>
<h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><h3 id="普通函数方式"><a href="#普通函数方式" class="headerlink" title="普通函数方式"></a>普通函数方式</h3><p>说白了设置标签的属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;标签 属性=&quot;js代码，调用函数&quot;&gt;&lt;/标签&gt;</span><br></pre></td></tr></table></figure>

<h3 id="匿名函数方式"><a href="#匿名函数方式" class="headerlink" title="匿名函数方式"></a>匿名函数方式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    标签对象.事件属性 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//执行一段代码</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="事件使用"><a href="#事件使用" class="headerlink" title="事件使用"></a>事件使用</h2><h3 id="重要的事件"><a href="#重要的事件" class="headerlink" title="重要的事件"></a>重要的事件</h3><ul>
<li><p>点击事件</p>
<p>需求: 没点击一次按钮 弹出hello…</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;按钮&quot;</span> onclick=<span class="string">&quot;fn1()&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;另一个按钮&quot;</span> id=<span class="string">&quot;btn&quot;</span>&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">        <span class="comment">//当点击的时候要调用的函数</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;我被点击了...&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给另外一个按钮，绑定点击事件:</span></span><br><span class="line"><span class="comment">//1.先根据id获取标签</span></span><br><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line"><span class="comment">//2. 设置btn的onclick属性(绑定事件)</span></span><br><span class="line"><span class="comment">//绑定命名函数</span></span><br><span class="line"><span class="comment">//btn.onclick = fn1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定匿名函数</span></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;点击了另外一个按钮&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>获得焦点(onfocus)和失去焦点(onblur)</p>
<p>需求:给输入框设置获得和失去焦点</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ipt = <span class="built_in">document</span>.getElementById(<span class="string">&quot;ipt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定获取焦点事件</span></span><br><span class="line">ipt.onfocus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;获取焦点了...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定失去焦点事件</span></span><br><span class="line">ipt.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;失去焦点了...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>内容改变(onchange)</p>
<p>需求: 给select设置内容改变事件</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!--内容改变(onchange)--&gt;</span><br><span class="line">    &lt;select onchange=<span class="string">&quot;changeCity(this)&quot;</span>&gt;</span><br><span class="line">        &lt;option value=<span class="string">&quot;bj&quot;</span>&gt;北京&lt;/option&gt;</span><br><span class="line">        &lt;option value=<span class="string">&quot;sh&quot;</span>&gt;上海&lt;/option&gt;</span><br><span class="line">        &lt;option value=<span class="string">&quot;sz&quot;</span>&gt;深圳&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeCity</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;城市改变了&quot;</span>+obj.value);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>等xx加载完成(onload)  可以把script放在body的后面/下面, 就可以不用了</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//浏览器窗体加载完毕之后要执行的代码写到这里面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="掌握的事件"><a href="#掌握的事件" class="headerlink" title="掌握的事件"></a>掌握的事件</h3><ul>
<li>键盘相关的, 键盘按下(onkeydown)  键盘抬起(onkeyup)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给输入框绑定键盘按键按下和抬起事件</span></span><br><span class="line">ipt.onkeydown = function () &#123;</span><br><span class="line">    <span class="comment">//当按键按下的时候，数据并没有到达输入框</span></span><br><span class="line">    <span class="comment">//输出输入框里面的内容</span></span><br><span class="line">    <span class="comment">//console.log(ipt.value)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ipt.onkeyup = function () &#123;</span><br><span class="line">    <span class="comment">//输出输入框的内容:当键盘按键抬起的时候，数据已经到达了输入框</span></span><br><span class="line">    console.log(ipt.value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>鼠标相关的, 鼠标在xx之上(onmouseover ), 鼠标按下(onmousedown),鼠标离开(onmouseout)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给输入框绑定鼠标移入事件</span></span><br><span class="line">ipt.onmouseover = function () &#123;</span><br><span class="line">    console.log(<span class="string">&quot;鼠标移入了...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//给输入框绑定鼠标移出事件</span></span><br><span class="line">ipt.onmouseout = function () &#123;</span><br><span class="line">    console.log(<span class="string">&quot;鼠标移出了...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p>
<p>​    用我们自己的话来说: <strong>正则表达式用来校验字符串是否满足一定的规则的公式</strong></p>
<h2 id="正则表达式的语法"><a href="#正则表达式的语法" class="headerlink" title="正则表达式的语法"></a>正则表达式的语法</h2><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><ul>
<li>对象形式：<code>var reg = new RegExp(&quot;正则表达式&quot;)</code>当正则表达式中有”/“那么就使用这种</li>
<li>直接量形式：<code>var reg = /正则表达式/</code>一般使用这种声明方式</li>
</ul>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
<th>参数</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td><code>test(string)</code></td>
<td>校验字符串的格式</td>
<td>要校验的字符串</td>
<td>boolean，校验通过返回true</td>
</tr>
</tbody></table>
<h3 id="常见正则表达式规则"><a href="#常见正则表达式规则" class="headerlink" title="常见正则表达式规则"></a>常见正则表达式规则</h3><table>
<thead>
<tr>
<th><strong>符号</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td>\d</td>
<td>数字</td>
</tr>
<tr>
<td>\D</td>
<td>非数字</td>
</tr>
<tr>
<td>\w</td>
<td>英文字符：a-zA-Z0-9_</td>
</tr>
<tr>
<td>\W</td>
<td>非英文字符</td>
</tr>
<tr>
<td>.</td>
<td>通配符，匹配任意字符</td>
</tr>
<tr>
<td>{n}</td>
<td>匹配n次</td>
</tr>
<tr>
<td>{n,}</td>
<td>大于或等于n次</td>
</tr>
<tr>
<td>{n,m}</td>
<td>在n次和m次之间</td>
</tr>
<tr>
<td>+</td>
<td>1~n次</td>
</tr>
<tr>
<td>*</td>
<td>0~n次</td>
</tr>
<tr>
<td>?</td>
<td>0~1次</td>
</tr>
<tr>
<td>^</td>
<td>匹配开头</td>
</tr>
<tr>
<td><code>$</code></td>
<td>匹配结尾</td>
</tr>
<tr>
<td>[a-zA-Z]</td>
<td>英文字母</td>
</tr>
<tr>
<td>[a-zA-Z0-9]</td>
<td>英文字母和数字</td>
</tr>
<tr>
<td>[<em>xyz</em>]</td>
<td>字符集合, 匹配所包含的任意一个字符</td>
</tr>
</tbody></table>
<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>需求:</p>
<ol>
<li>出现任意数字3次</li>
<li>只能是英文字母的, 出现6~10次之间</li>
<li>只能由英文字母和数字组成，长度为4～16个字符，并且以英文字母开头</li>
<li>手机号码: 以1开头, 第二位是3,4,5,6,7,8,9的11位数字</li>
</ol>
<p>步骤:</p>
<ol>
<li>创建正则表达式</li>
<li>调用test()方法</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//1.出现任意数字3次</span></span><br><span class="line">    <span class="comment">//a. 创建正则表达式</span></span><br><span class="line">    <span class="keyword">var</span> reg1  = <span class="regexp">/^\d&#123;3&#125;$/</span>; <span class="comment">//出现任意数字3次</span></span><br><span class="line">    <span class="comment">//b. 校验字符串</span></span><br><span class="line">    <span class="keyword">var</span> str1 = <span class="string">&quot;3451&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> flag1 = reg1.test(str1);</span><br><span class="line">    <span class="comment">//alert(&quot;flag1=&quot;+flag1);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.只能是英文字母的, 出现6~10次之间</span></span><br><span class="line">    <span class="keyword">var</span> reg2  =<span class="regexp">/^[a-zA-Z]&#123;6,10&#125;$/</span>;</span><br><span class="line">    <span class="keyword">var</span> str2 = <span class="string">&quot;abcdef11g&quot;</span>;</span><br><span class="line">    <span class="comment">//alert(reg2.test(str2));</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3 用户名：只能由英文字母和数字组成，长度为4～16个字符，并且以英文字母开头</span></span><br><span class="line">    <span class="keyword">var</span> reg3  =<span class="regexp">/^[a-zA-Z][a-zA-Z0-9]&#123;3,15&#125;$/</span>;</span><br><span class="line">    <span class="keyword">var</span> str3 = <span class="string">&quot;zs&quot;</span>;</span><br><span class="line">   <span class="comment">// alert(reg3.test(str3));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 手机号码: 以1开头, 第二位是3,4,5,6,7,8,9的11位数字</span></span><br><span class="line">    <span class="comment">//var reg4  =/^1[3456789]\d&#123;9&#125;$/i; //忽略大小写的</span></span><br><span class="line">    <span class="keyword">var</span> reg4  =<span class="regexp">/^1[3456789]\d&#123;9&#125;$/</span>; <span class="comment">//不忽略大小写的</span></span><br><span class="line">    <span class="keyword">var</span> str4 = <span class="string">&quot;188245899&quot;</span>;</span><br><span class="line">    alert(reg4.test(str4));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>


<h1 id="内置对象之Array数组"><a href="#内置对象之Array数组" class="headerlink" title="内置对象之Array数组"></a>内置对象之Array数组</h1><h2 id="创建数组对象"><a href="#创建数组对象" class="headerlink" title="创建数组对象"></a>创建数组对象</h2><ul>
<li><code>var arr = new Array(size)</code></li>
<li><code>var arr = new Array(element1, element2, element3, ...)</code></li>
<li><code>var arr = [element1, element2, element3, ...];</code>一般采用这种方式创建</li>
</ul>
<h2 id="数组的特点"><a href="#数组的特点" class="headerlink" title="数组的特点"></a>数组的特点</h2><ul>
<li>数组中的每个元素可以是任意类型</li>
<li>数组的长度是可变的，更加类似于Java里的集合<code>List</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.数组定义方式</span></span><br><span class="line">  <span class="comment">//1.1 方式一  new Array(size);</span></span><br><span class="line">  <span class="keyword">var</span> array01 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">4</span>);</span><br><span class="line">  array01[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  array01[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">  array01[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">  array01[<span class="number">3</span>] = <span class="number">99</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//1.2 方式二  new Array(ele,ele...);</span></span><br><span class="line">  <span class="keyword">var</span> array02 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">99</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//1.3 方式三  [ele,ele]</span></span><br><span class="line">  <span class="keyword">var</span> array03 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">99</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.数组特点  ①js里面数组可以存放不同类型的数据 ②js里面的数组可变, 没有越界的概念</span></span><br><span class="line">  <span class="keyword">var</span> array04 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;哈哈&quot;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">//console.log(array04[0]); //1</span></span><br><span class="line">  <span class="comment">//console.log(array04[3]); //&quot;哈哈&quot;</span></span><br><span class="line">  <span class="comment">//console.log(array04[5]); //在Java里面是数组越界 js里面是undefined</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(array04.length);  <span class="comment">//4</span></span><br><span class="line">  array04[<span class="number">6</span>] = <span class="string">&quot;你好&quot;</span>;  <span class="comment">//[1,2,3,&quot;哈哈&quot;,undefined,undefined,&quot;你好&quot;]</span></span><br><span class="line">  <span class="built_in">console</span>.log(array04.length);  <span class="comment">//7</span></span><br></pre></td></tr></table></figure>

<h2 id="数组常见的方法"><a href="#数组常见的方法" class="headerlink" title="数组常见的方法"></a>数组常见的方法</h2><h3 id="API介绍"><a href="#API介绍" class="headerlink" title="API介绍"></a>API介绍</h3><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>concat()</td>
<td>连接两个或更多的数组，并返回结果。</td>
</tr>
<tr>
<td>join()</td>
<td>把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。</td>
</tr>
<tr>
<td>reverse()</td>
<td>颠倒数组中元素的顺序。</td>
</tr>
</tbody></table>
<h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3.常用的方法</span></span><br><span class="line"><span class="comment">//3.1 concat() 连接两个或更多的数组，并返回结果。【重点】</span></span><br><span class="line"><span class="keyword">var</span> array05 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> array06 = [<span class="string">&quot;哈哈&quot;</span>, <span class="string">&quot;你好&quot;</span>, <span class="number">100</span>, <span class="number">200</span>];</span><br><span class="line"><span class="keyword">var</span> array07 = array05.concat(array06);</span><br><span class="line"><span class="built_in">console</span>.log(array07);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.2 join() 把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。</span></span><br><span class="line"><span class="keyword">var</span> str =   array05.join(<span class="string">&quot;**&quot;</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.3 reverse() 颠倒数组中元素的顺序。</span></span><br><span class="line">array06 =  array06.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(array06);</span><br></pre></td></tr></table></figure>

<h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><ol>
<li>数组里面再放数组 就是二维数组</li>
<li>示例</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4.二维数组</span></span><br><span class="line"><span class="comment">//方式一:</span></span><br><span class="line"><span class="keyword">var</span> citys = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span><br><span class="line">citys[<span class="number">0</span>] = [<span class="string">&quot;深圳&quot;</span>, <span class="string">&quot;广州&quot;</span>, <span class="string">&quot;东莞&quot;</span>, <span class="string">&quot;惠州&quot;</span>];</span><br><span class="line">citys[<span class="number">1</span>] = [<span class="string">&quot;武汉&quot;</span>, <span class="string">&quot;黄冈&quot;</span>, <span class="string">&quot;黄石&quot;</span>, <span class="string">&quot;鄂州&quot;</span>, <span class="string">&quot;荆州&quot;</span>];</span><br><span class="line">citys[<span class="number">2</span>] = [<span class="string">&quot;济南&quot;</span>, <span class="string">&quot;青岛&quot;</span>, <span class="string">&quot;烟台&quot;</span>, <span class="string">&quot;淄博&quot;</span>, <span class="string">&quot;聊城&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> citys02 = [</span><br><span class="line">    [<span class="string">&quot;深圳&quot;</span>, <span class="string">&quot;广州&quot;</span>, <span class="string">&quot;东莞&quot;</span>, <span class="string">&quot;惠州&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;武汉&quot;</span>, <span class="string">&quot;黄冈&quot;</span>, <span class="string">&quot;黄石&quot;</span>, <span class="string">&quot;鄂州&quot;</span>, <span class="string">&quot;荆州&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;济南&quot;</span>, <span class="string">&quot;青岛&quot;</span>, <span class="string">&quot;烟台&quot;</span>, <span class="string">&quot;淄博&quot;</span>, <span class="string">&quot;聊城&quot;</span>]</span><br><span class="line">];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; citys02.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> cityArray = citys02[i];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(cityArray);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>;j&lt;=cityArray.length;j++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(cityArray[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="内置对象之-Date日期"><a href="#内置对象之-Date日期" class="headerlink" title="内置对象之-Date日期"></a>内置对象之-Date日期</h1><h2 id="创建日期对象"><a href="#创建日期对象" class="headerlink" title="创建日期对象"></a>创建日期对象</h2><ul>
<li><p>创建当前日期：<code>var date = new Date()</code></p>
</li>
<li><p>创建指定日期：<code>var date = new Date(年, 月, 日)</code>   </p>
<p>注意：月从0开始，0表示1月</p>
</li>
<li><p>创建指定日期时间：<code>var date = new Date(年, 月, 日, 时, 分, 秒)</code></p>
<p>注意：月从0开始，0表示1月</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>日期<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//创建当前日期</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(date1);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//创建指定日期: 2019-11-11</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> date2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">10</span>, <span class="number">11</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(date2);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//创建指定日期时间：2019-11-11 20:10:10</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> date3 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">10</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(date3);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/javascript/img/1571473450137.png" alt="1571473450137"></p>
<h2 id="日期常用方法"><a href="#日期常用方法" class="headerlink" title="日期常用方法"></a>日期常用方法</h2><h3 id="API介绍-1"><a href="#API介绍-1" class="headerlink" title="API介绍"></a>API介绍</h3><table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_Date.asp">Date()</a></td>
<td align="left">返回当日的日期和时间。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_getDate.asp">getDate()</a></td>
<td align="left">从 Date 对象返回一个月中的某一天 (1 ~ 31)。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_getDay.asp">getDay()</a></td>
<td align="left">从 Date 对象返回一周中的某一天 (0 ~ 6)。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_getMonth.asp">getMonth()</a></td>
<td align="left">从 Date 对象返回月份 (0 ~ 11)。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_getFullYear.asp">getFullYear()</a></td>
<td align="left">从 Date 对象以四位数字返回年份。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_getHours.asp">getHours()</a></td>
<td align="left">返回 Date 对象的小时 (0 ~ 23)。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_getMinutes.asp">getMinutes()</a></td>
<td align="left">返回 Date 对象的分钟 (0 ~ 59)。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_getSeconds.asp">getSeconds()</a></td>
<td align="left">返回 Date 对象的秒数 (0 ~ 59)。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_getMilliseconds.asp">getMilliseconds()</a></td>
<td align="left">返回 Date 对象的毫秒(0 ~ 999)。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_getTime.asp">getTime()</a></td>
<td align="left">返回 1970 年 1 月 1 日至今的毫秒数（时间戳）。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_parse.asp">parse()</a></td>
<td align="left">返回1970年1月1日午夜到指定日期（字符串）的毫秒数。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_setDate.asp">setDate()</a></td>
<td align="left">设置 Date 对象中月的某一天 (1 ~ 31)。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_setMonth.asp">setMonth()</a></td>
<td align="left">设置 Date 对象中月份 (0 ~ 11)。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_setFullYear.asp">setFullYear()</a></td>
<td align="left">设置 Date 对象中的年份（四位数字）。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_setYear.asp">setYear()</a></td>
<td align="left">请使用 setFullYear() 方法代替。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_setHours.asp">setHours()</a></td>
<td align="left">设置 Date 对象中的小时 (0 ~ 23)。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_setMinutes.asp">setMinutes()</a></td>
<td align="left">设置 Date 对象中的分钟 (0 ~ 59)。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_setSeconds.asp">setSeconds()</a></td>
<td align="left">设置 Date 对象中的秒钟 (0 ~ 59)。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_setMilliseconds.asp">setMilliseconds()</a></td>
<td align="left">设置 Date 对象中的毫秒 (0 ~ 999)。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_setTime.asp">setTime()</a></td>
<td align="left">以毫秒设置 Date 对象。</td>
</tr>
<tr>
<td align="left"><a href="https://www.w3school.com.cn/jsref/jsref_toLocaleString.asp">toLocaleString()</a></td>
<td align="left">根据本地时间格式，把 Date 对象转换为字符串。</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//1.创建日期对象</span></span><br><span class="line">    <span class="keyword">var</span> myDate =  <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.调用方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;年:&quot;</span> + myDate.getFullYear());</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;月:&quot;</span> + (myDate.getMonth()+<span class="number">1</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;日:&quot;</span> + myDate.getDate());</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;时:&quot;</span> + myDate.getHours());</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;分:&quot;</span> + myDate.getMinutes());</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;秒:&quot;</span> + myDate.getSeconds());</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;毫秒:&quot;</span> + myDate.getMilliseconds());</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(myDate.toLocaleString()); <span class="comment">//打印本地时间    2019-12-06 12:02:xx</span></span><br><span class="line">    <span class="comment">//console.log(myDate);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取某个时间的时间戳</span></span><br><span class="line">    <span class="keyword">var</span> time = myDate.getTime();</span><br><span class="line">    <span class="built_in">console</span>.log(time)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//需求:计算到11放假还有多少天</span></span><br><span class="line">    <span class="keyword">var</span> date5 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2020</span>,<span class="number">9</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> date6 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2020</span>,<span class="number">6</span>,<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> totalTime = date5.getTime() - date6.getTime();</span><br><span class="line">    <span class="keyword">var</span> days = totalTime/(<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(days)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="第二章-JS的BOM"><a href="#第二章-JS的BOM" class="headerlink" title="第二章-JS的BOM"></a>第二章-JS的BOM</h1><h2 id="知识点-JS的BOM"><a href="#知识点-JS的BOM" class="headerlink" title="知识点-JS的BOM"></a>知识点-JS的BOM</h2><h3 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h3><ul>
<li><input disabled type="checkbox"> 掌握BOM中常用的API</li>
</ul>
<h3 id="2-路径"><a href="#2-路径" class="headerlink" title="2.路径"></a>2.路径</h3><ol>
<li>BOM介绍</li>
<li>BOM里面的五个对象</li>
</ol>
<h3 id="3-讲解"><a href="#3-讲解" class="headerlink" title="3.讲解"></a>3.讲解</h3><h4 id="3-1概述"><a href="#3-1概述" class="headerlink" title="3.1概述"></a>3.1概述</h4><p>​    Browser Object Model ,浏览器对象模型. 为了便于对浏览器的操作，JavaScript封装了浏览器中各个对象，使得开发者可以方便的操作浏览器中的各个对象。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/javascript/img/tu_1.bmp" alt="img"></p>
<h4 id="3-2-BOM里面的五个对象"><a href="#3-2-BOM里面的五个对象" class="headerlink" title="3.2.BOM里面的五个对象"></a>3.2.BOM里面的五个对象</h4><h5 id="3-2-1-window-窗体对象"><a href="#3-2-1-window-窗体对象" class="headerlink" title="3.2.1 window: 窗体对象"></a>3.2.1 window: 窗体对象</h5><table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>alert()</strong></td>
<td><strong>显示带有一段消息和一个确认按钮的警告框</strong></td>
</tr>
<tr>
<td><strong>confirm()</strong></td>
<td>显示带有一段消息以及确认按钮和取消按钮的对话框</td>
</tr>
<tr>
<td><strong>prompt()</strong></td>
<td>弹出输入框</td>
</tr>
<tr>
<td><strong>setInterval(‘函数名()’,time)</strong></td>
<td>按照指定的周期（以毫秒计）来调用函数或计算表达式</td>
</tr>
<tr>
<td><strong>setTimeout(‘函数名()’,time)</strong></td>
<td>在指定的毫秒数后调用函数或计算表达式</td>
</tr>
<tr>
<td>clearInterval()</td>
<td>取消由 setInterval() 设置的 Interval()。</td>
</tr>
<tr>
<td>clearTimeout()</td>
<td>取消由 setTimeout() 方法设置的 timeout。</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 警告框</span></span><br><span class="line"><span class="comment">//window.alert(&quot;hello&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 确认框</span></span><br><span class="line"><span class="comment">/*let flag = confirm(&quot;你确定要删除吗?&quot;);</span></span><br><span class="line"><span class="comment">        console.log(flag)*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 输入框</span></span><br><span class="line"><span class="keyword">let</span> age = prompt(<span class="string">&quot;请输入你的年龄&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">parseInt</span>(age) &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">    alert(<span class="string">&quot;可以访问&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">&quot;请大一点了再访问&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定时器的话就是隔一段事件执行一个任务</span></span><br><span class="line"><span class="comment">//1. setTimeout(),只执行一次的定时器,其实也就相当于一个延时器</span></span><br><span class="line"><span class="comment">//第一个参数是要执行的匿名函数，第二个参数是执行时间</span></span><br><span class="line"><span class="comment">/*setTimeout(function () &#123;</span></span><br><span class="line"><span class="comment">            document.write(&quot;hello world&quot;)</span></span><br><span class="line"><span class="comment">        &#125;,3000)*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. setInterval(),循环执行的定时器</span></span><br><span class="line"><span class="comment">//第一个参数是要执行的匿名函数，第二个参数是间隔时间，该方法的返回值是这个定时器id</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> id = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    i ++</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;你好世界&lt;br/&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//我们还有一个方法，clearInterval(定时器的id)清除定时器</span></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(id)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="number">2000</span>);</span><br></pre></td></tr></table></figure>



<h5 id="3-2-2-navigator-浏览器导航对象【了解】"><a href="#3-2-2-navigator-浏览器导航对象【了解】" class="headerlink" title="3.2.2,navigator:浏览器导航对象【了解】"></a>3.2.2,navigator:浏览器导航对象【了解】</h5><table>
<thead>
<tr>
<th>属性</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td>appName</td>
<td align="left">返回浏览器的名称</td>
</tr>
<tr>
<td>appVersion</td>
<td align="left">返回浏览器的平台和版本信息</td>
</tr>
</tbody></table>
<h5 id="3-2-3-screen-屏幕对象【了解】"><a href="#3-2-3-screen-屏幕对象【了解】" class="headerlink" title="3.2.3,screen:屏幕对象【了解】"></a>3.2.3,screen:屏幕对象【了解】</h5><table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>width</td>
<td>返回显示器屏幕的分辨率宽度</td>
</tr>
<tr>
<td>height</td>
<td>返回显示屏幕的分辨率高度</td>
</tr>
</tbody></table>
<h5 id="3-2-4-history-历史对象【了解】"><a href="#3-2-4-history-历史对象【了解】" class="headerlink" title="3.2.4,history:历史对象【了解】"></a>3.2.4,history:历史对象【了解】</h5><table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>back()</td>
<td>加载 history 列表中的前一个 URL</td>
</tr>
<tr>
<td>forword()</td>
<td>加载 history 列表中的下一个 URL</td>
</tr>
<tr>
<td>go()</td>
<td>加载 history 列表中的某个具体页面</td>
</tr>
</tbody></table>
<h5 id="3-2-5-location-当前路径信息-最重要"><a href="#3-2-5-location-当前路径信息-最重要" class="headerlink" title="3.2.5 location:当前路径信息(最重要)"></a>3.2.5 location:当前路径信息(最重要)</h5><table>
<thead>
<tr>
<th align="left">属性</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">host</td>
<td>设置或返回主机名和当前 URL 的端口号</td>
</tr>
<tr>
<td align="left"><strong>href</strong></td>
<td>设置或返回完整的 URL</td>
</tr>
<tr>
<td align="left">port</td>
<td>设置或返回当前 URL 的端口号</td>
</tr>
</tbody></table>
<p>location.href;  获得路径</p>
<p>location.href = “<a href="http://www.baidu.com&quot;/">http://www.baidu.com&quot;</a>;  设置路径,跳转到百度页面</p>
<h3 id="4-小结"><a href="#4-小结" class="headerlink" title="4.小结"></a>4.小结</h3><ol>
<li>BOM: 浏览器对象模型, JS里面封装了五个对象 用来操作浏览器的</li>
<li>window对象<ul>
<li>alert()  弹出警告框</li>
<li>confirm()  弹出确认框</li>
<li>prompt() 弹出输入框</li>
<li>setInterval(‘函数()’,时间)  周期执行</li>
<li>setTimeout(‘’函数()’,时间)  延迟执行</li>
</ul>
</li>
<li>location<ul>
<li>location.href;  获得路径</li>
<li>location.href=””; 设置路径</li>
</ul>
</li>
</ol>
<h1 id="第三章-JS的DOM-最重要"><a href="#第三章-JS的DOM-最重要" class="headerlink" title="第三章-JS的DOM(最重要)"></a>第三章-JS的DOM(最重要)</h1><h2 id="知识点-DOM介绍"><a href="#知识点-DOM介绍" class="headerlink" title="知识点-DOM介绍"></a>知识点-DOM介绍</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul>
<li>了解dom相关的概念</li>
</ul>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol>
<li>什么是dom</li>
<li>什么是dom树</li>
</ol>
<h3 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h3><h4 id="1-什么是dom"><a href="#1-什么是dom" class="headerlink" title="1. 什么是dom"></a>1. 什么是dom</h4><ul>
<li>DOM：<strong>D</strong>ocument <strong>O</strong>bject <strong>M</strong>odel，文档对象模型。是js提供的，用来访问网页里所有内容的(标签,属性,标签的内容)</li>
</ul>
<h4 id="2-什么是dom树"><a href="#2-什么是dom树" class="headerlink" title="2. 什么是dom树"></a>2. 什么是dom树</h4><ul>
<li>当网页被加载时，浏览器会创建页面的DOM对象。DOM对象模型是一棵树形结构：网页里所有的标签、属性、文本都会转换成节点对象，按照层级结构组织成一棵树形结构。<ul>
<li>整个网页封装成的对象叫<code>document</code></li>
<li>标签封装成的对象叫<code>Element</code></li>
<li>属性封装成的对象叫<code>Attribute</code></li>
<li>文本封装成的对象叫<code>Text</code></li>
</ul>
</li>
</ul>
<p><img data-src="/jwangcloud/3308612012/img%5Cdom%E6%A0%91.png"></p>
<p>一切皆节点, 一切皆对象</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol>
<li>dom: 文档对象模型, 用来操作网页</li>
<li>dom树: html通过浏览器加载到内存里面形成了一颗dom树, 我们就可以操作dom树节点(获得节点, 添加节点, 删除节点)</li>
</ol>
<h2 id="知识点-操作标签"><a href="#知识点-操作标签" class="headerlink" title="知识点-操作标签"></a>知识点-操作标签</h2><h3 id="1-目标-1"><a href="#1-目标-1" class="headerlink" title="1. 目标"></a>1. 目标</h3><ul>
<li> 能够使用dom操作标签</li>
</ul>
<h3 id="2-分析"><a href="#2-分析" class="headerlink" title="2. 分析"></a>2. 分析</h3><ol>
<li>获取标签</li>
<li>操作标签</li>
</ol>
<h3 id="3-讲解-1"><a href="#3-讲解-1" class="headerlink" title="3.讲解"></a>3.讲解</h3><h4 id="3-1-获取标签"><a href="#3-1-获取标签" class="headerlink" title="3.1. 获取标签"></a>3.1. 获取标签</h4><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td><code>document.getElementById(id)</code></td>
<td>根据id获取标签</td>
<td><code>Element</code>对象</td>
</tr>
<tr>
<td><code>document.getElementsByName(name)</code></td>
<td>根据标签name获取一批标签</td>
<td><code>Element</code>类数组</td>
</tr>
<tr>
<td><code>document.getElementsByTagName(tagName)</code></td>
<td>根据标签名称获取一批标签</td>
<td><code>Element</code>类数组</td>
</tr>
<tr>
<td><code>document.getElementsByClassName(className)</code></td>
<td>根据类名获取一批标签</td>
<td><code>Element</code>类数组</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>获取标签的方法介绍<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;n1&quot;</span>&gt;</span>hello div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c1&quot;</span>&gt;</span>hello div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;c1&quot;</span>&gt;</span>hello span1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">name</span>=<span class="string">&quot;n1&quot;</span>&gt;</span>hello span2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//根据id获取标签</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//console.log(document.getElementById(&quot;d1&quot;))</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//根据name获取标签的数组</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//console.log(document.getElementsByName(&quot;n1&quot;))</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//根据标签名获取标签</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//console.log(document.getElementsByTagName(&quot;div&quot;))</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//根据类名获取标签</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//console.log(document.getElementsByClassName(&quot;c1&quot;))</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//扩展俩方法:1. 获取单个标签</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//console.log(document.querySelector(&quot;#d1&quot;))</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//2. 获取多个标签</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;span&quot;</span>))</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="3-2-操作标签"><a href="#3-2-操作标签" class="headerlink" title="3.2. 操作标签"></a>3.2. 操作标签</h4><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td><code>document.createElement(tagName)</code></td>
<td>创建标签</td>
<td><code>Element</code>对象</td>
</tr>
<tr>
<td><code>parentElement.appendChild(sonElement)</code></td>
<td>插入标签</td>
<td></td>
</tr>
<tr>
<td><code>element.remove()</code></td>
<td>删除标签</td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;sh&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;addCity()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;删除&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;removeCity()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//点击添加按钮，往城市列表的最后面添加&quot;长沙&quot;</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">addCity</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//1. 创建一个li标签</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> liElement = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//2. 设置li标签体的文本内容为&quot;长沙&quot;</span></span></span><br><span class="line"><span class="javascript">            liElement.innerText = <span class="string">&quot;长沙&quot;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//3. 往id为city的ul中添加一个子标签</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//3.1 获取id为city的ul</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> city = <span class="built_in">document</span>.getElementById(<span class="string">&quot;city&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//3.2 往city里面添加子标签</span></span></span><br><span class="line">            city.appendChild(liElement)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//点击删除按钮，删除上海</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">removeCity</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//要删除某一个标签: 那个标签.remove()</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;sh&quot;</span>).remove()</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="4-小结-1"><a href="#4-小结-1" class="headerlink" title="4.小结"></a>4.小结</h3><ol>
<li>获得标签<ul>
<li>document.getElementById(“id”)   根据id获得</li>
<li>document.getElementsByTagName(“标签名”)  根据标签名获得</li>
<li>document.getElementsByClassName(“类名”)  根据类名获得</li>
</ul>
</li>
<li>操作节点(标签,文本)<ul>
<li><code>document.createElement(tagName)</code>  创建标签  <code>Element</code>对象  </li>
<li><code>document.createTextNode(&quot;文本&quot;)</code>  创建文本节点</li>
<li><code>parentElement.appendChild(sonElement)</code>  插入标签 </li>
<li>   <code>element.remove()</code>  删除标签    </li>
</ul>
</li>
</ol>
<h2 id="知识点-操作标签体"><a href="#知识点-操作标签体" class="headerlink" title="知识点-操作标签体"></a>知识点-操作标签体</h2><h3 id="1-目标-2"><a href="#1-目标-2" class="headerlink" title="1. 目标"></a>1. 目标</h3><ul>
<li>掌握操作标签体内容的方法</li>
</ul>
<h3 id="2-路径-1"><a href="#2-路径-1" class="headerlink" title="2. 路径"></a>2. 路径</h3><ul>
<li>获取/设置标签体内容</li>
</ul>
<h3 id="3-讲解-2"><a href="#3-讲解-2" class="headerlink" title="3. 讲解"></a>3. 讲解</h3><h4 id="3-1语法"><a href="#3-1语法" class="headerlink" title="3.1语法"></a>3.1语法</h4><ul>
<li>获取标签体内容：<code>标签对象.innerHTML</code></li>
<li>设置标签体内容：<code>标签对象.innerHTML = &quot;新的HTML代码&quot;;</code><ul>
<li><code>innerHTML</code>是覆盖式设置，原本的标签体内容会被覆盖掉；</li>
<li>支持标签的 可以插入标签, 设置的html代码会生效</li>
</ul>
</li>
</ul>
<h4 id="3-2示例"><a href="#3-2示例" class="headerlink" title="3.2示例"></a>3.2示例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>操作标签体<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//获取id为city的那个标签的标签体的内容</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> innerHTML = <span class="built_in">document</span>.getElementById(<span class="string">&quot;city&quot;</span>).innerHTML;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(innerHTML)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//设置id为city的标签体的内容</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;city&quot;</span>).innerHTML = <span class="string">&quot;&lt;h1&gt;深圳&lt;/h1&gt;&quot;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-小结-2"><a href="#4-小结-2" class="headerlink" title="4. 小结"></a>4. 小结</h3><ol>
<li>获得标签的内容 (一并获得标签)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">标签对象.innerHTML;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>设置标签的内容(①会把前面的内容覆盖 ②支持标签的)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">标签对象,innerHTML &#x3D; &quot;html字符串&quot;; </span><br></pre></td></tr></table></figure>



<h2 id="知识点-操作属性"><a href="#知识点-操作属性" class="headerlink" title="知识点-操作属性"></a>知识点-操作属性</h2><h3 id="1-目标-3"><a href="#1-目标-3" class="headerlink" title="1. 目标"></a>1. 目标</h3><ul>
<li>能够操作HTML标签的属性</li>
</ul>
<h3 id="2-路径-2"><a href="#2-路径-2" class="headerlink" title="2.路径"></a>2.路径</h3><ol>
<li>使用JS操作标签的属性</li>
</ol>
<h3 id="3-讲解-3"><a href="#3-讲解-3" class="headerlink" title="3. 讲解"></a>3. 讲解</h3><ul>
<li>每个标签<code>Element</code>对象提供了操作属性的方法</li>
</ul>
<table>
<thead>
<tr>
<th>方法名</th>
<th>描述</th>
<th>参数</th>
</tr>
</thead>
<tbody><tr>
<td><code>getAttribute(attrName)</code></td>
<td>获取属性值</td>
<td>属性名称</td>
</tr>
<tr>
<td><code>setAttribute(attrName, attrValue)</code></td>
<td>设置属性值</td>
<td>属性名称, 属性值</td>
</tr>
<tr>
<td><code>removeAttribute(attrName)</code> 了解即可</td>
<td>删除属性</td>
<td>属性名称</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;显示密码&quot;</span> <span class="attr">onmousedown</span>=<span class="string">&quot;showPassword()&quot;</span> <span class="attr">onmouseup</span>=<span class="string">&quot;hidePassword()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//目标:按住显示密码按钮的时候，就显示密码框中的密码; 按键松开的时候，就隐藏密码</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//1. 给按钮绑定onmousedown事件</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">showPassword</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//让密码框的密码显示: 修改密码框的type属性为text</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;pwd&quot;</span>).setAttribute(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;text&quot;</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//2. 给按钮绑定onmouseup事件</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">hidePassword</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//就是设置密码框的type为password</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;pwd&quot;</span>).setAttribute(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;password&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//getAttribute(属性名)，根据属性名获取属性值</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> type = <span class="built_in">document</span>.getElementById(<span class="string">&quot;pwd&quot;</span>).getAttribute(<span class="string">&quot;type&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(type)</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="4-小结-3"><a href="#4-小结-3" class="headerlink" title="4.小结"></a>4.小结</h3><ol>
<li><code>getAttribute(attrName)</code>  获取属性值 </li>
<li> <code>setAttribute(attrName, attrValue)</code>  设置属性值 </li>
<li><code>removeAttribute(attrName)</code>  删除属性</li>
</ol>
<h1 id="第四章-JS案例"><a href="#第四章-JS案例" class="headerlink" title="第四章-JS案例"></a>第四章-JS案例</h1><h2 id="案例-使用JS完成表单的校验"><a href="#案例-使用JS完成表单的校验" class="headerlink" title="案例-使用JS完成表单的校验"></a>案例-使用JS完成表单的校验</h2><h3 id="1-案例需求"><a href="#1-案例需求" class="headerlink" title="1. 案例需求"></a>1. 案例需求</h3><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/javascript/img/tu_10.png" alt="img"></p>
<ul>
<li><p>用户名输入框、手机号码 ,  失去焦点进行校验</p>
</li>
<li><p>用户名：只能由英文字母和数字组成，长度为4～16个字符，并且以英文字母开头</p>
</li>
<li><p>手机号：以1开头, 第二位是3,4,5,7,8的11位数字     /^1[34578]\d{9}$/</p>
</li>
</ul>
<h3 id="2-思路分析"><a href="#2-思路分析" class="headerlink" title="2.思路分析"></a>2.思路分析</h3><ol>
<li>给用户名输入框设置获得焦点事件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; onfocus&#x3D;&quot;showTips()&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建showTips()函数提示</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function showTips()&#123;</span><br><span class="line">	&#x2F;&#x2F;1.获得用户名输入框后面的span标签</span><br><span class="line">	&#x2F;&#x2F;2.调用innerHTML插入提示</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>给用户名输入框设置失去焦点事件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; onblur&#x3D;&quot;checkUsername()&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>创建checkUsername()函数</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function checkUsername()&#123;</span><br><span class="line">	&#x2F;&#x2F;1.获得用户输入的用户名</span><br><span class="line">	&#x2F;&#x2F;2.使用正则表达式进行校验</span><br><span class="line">	&#x2F;&#x2F;3.判断是否符合规则, 提示</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html xmlns=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">        &lt;title&gt;验证注册页面&lt;/title&gt;</span><br><span class="line">        &lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">			body &#123;</span><br><span class="line">				margin: <span class="number">0</span>;</span><br><span class="line">				padding: <span class="number">0</span>;</span><br><span class="line">				font-size: 12px;</span><br><span class="line">				line-height: 20px;</span><br><span class="line">			&#125;</span><br><span class="line">			.main &#123;</span><br><span class="line">				width: 525px;</span><br><span class="line">				margin-left: auto;</span><br><span class="line">				margin-right: auto;</span><br><span class="line">			&#125;</span><br><span class="line">			.hr_1 &#123;</span><br><span class="line">				font-size: 14px;</span><br><span class="line">				font-weight: bold;</span><br><span class="line">				color: #3275c3;</span><br><span class="line">				height: 35px;</span><br><span class="line">				border-bottom-width: 2px;</span><br><span class="line">				border-bottom-style: solid;</span><br><span class="line">				border-bottom-color: #3275c3;</span><br><span class="line">				vertical-align: bottom;</span><br><span class="line">				padding-left: 12px;</span><br><span class="line">			&#125;</span><br><span class="line">			.left &#123;</span><br><span class="line">				text-align: right;</span><br><span class="line">				width: 80px;</span><br><span class="line">				height: 25px;</span><br><span class="line">				padding-right: 5px;</span><br><span class="line">			&#125;</span><br><span class="line">			.center &#123;</span><br><span class="line">				width: 280px;</span><br><span class="line">			&#125;</span><br><span class="line">			.in &#123;</span><br><span class="line">				width: 130px;</span><br><span class="line">				height: 16px;</span><br><span class="line">				border: solid 1px #79abea;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			.red &#123;</span><br><span class="line">				color: #cc0000;</span><br><span class="line">				font-weight: bold;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			div &#123;</span><br><span class="line">				color: #F00;</span><br><span class="line">			&#125;</span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">        &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;form action=<span class="string">&quot;#&quot;</span> method=<span class="string">&quot;post&quot;</span> id=<span class="string">&quot;myform&quot;</span> onsubmit=<span class="string">&quot;return checkForm()&quot;</span>&gt;</span><br><span class="line">            &lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;main&quot;</span> border=<span class="string">&quot;0&quot;</span> cellspacing=<span class="string">&quot;0&quot;</span> cellpadding=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/javascript/img/logo.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;logo&quot;</span> /&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/javascript/img/banner.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;banner&quot;</span> /&gt;</span></span>&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;hr_1&quot;</span>&gt;新用户注册&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td style=<span class="string">&quot;height:10px;&quot;</span>&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;</span><br><span class="line">                    &lt;table width=<span class="string">&quot;100%&quot;</span> border=<span class="string">&quot;0&quot;</span> cellspacing=<span class="string">&quot;0&quot;</span> cellpadding=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">                        &lt;tr&gt;</span><br><span class="line">                            &lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;left&quot;</span>&gt;用户名：&lt;/td&gt;</span><br><span class="line">                            &lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">                                &lt;!--给用户名输入框绑定失去焦点事件--&gt;</span><br><span class="line">                                 &lt;input id=<span class="string">&quot;username&quot;</span> name=<span class="string">&quot;user&quot;</span> type=<span class="string">&quot;text&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;in&quot;</span> onblur=<span class="string">&quot;checkUsername(this.value)&quot;</span>/&gt;</span><br><span class="line">                                 &lt;span id=<span class="string">&quot;usernamespan&quot;</span> style=<span class="string">&quot;color: red&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">                                 &lt;/span&gt;</span><br><span class="line">                            &lt;/td&gt;</span><br><span class="line">                        &lt;/tr&gt;</span><br><span class="line">                        &lt;tr&gt;</span><br><span class="line">                            &lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;left&quot;</span>&gt;密码：&lt;/td&gt;</span><br><span class="line">                            &lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">                            &lt;input id=<span class="string">&quot;pwd&quot;</span> name=<span class="string">&quot;pwd&quot;</span> type=<span class="string">&quot;password&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;in&quot;</span> /&gt;</span><br><span class="line">                            &lt;/td&gt;</span><br><span class="line">                        &lt;/tr&gt;</span><br><span class="line">                        &lt;tr&gt;</span><br><span class="line">                            &lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;left&quot;</span>&gt;确认密码：&lt;/td&gt;</span><br><span class="line">                            &lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">                            &lt;input id=<span class="string">&quot;repwd&quot;</span> name=<span class="string">&quot;repwd&quot;</span> type=<span class="string">&quot;password&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;in&quot;</span>/&gt;</span><br><span class="line">                            &lt;/td&gt;</span><br><span class="line">                        &lt;/tr&gt;</span><br><span class="line">                        &lt;tr&gt;</span><br><span class="line">                            &lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;left&quot;</span>&gt;电子邮箱：&lt;/td&gt;</span><br><span class="line">                            &lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">                            &lt;input id=<span class="string">&quot;email&quot;</span> name=<span class="string">&quot;email&quot;</span> type=<span class="string">&quot;text&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;in&quot;</span>/&gt;</span><br><span class="line">                            &lt;/td&gt;</span><br><span class="line">                        &lt;/tr&gt;</span><br><span class="line">                        &lt;tr&gt;</span><br><span class="line">                           &lt;!-- 以<span class="number">1</span>开头, 第二为是<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>的<span class="number">11</span>位数字--&gt;</span><br><span class="line">                            &lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;left&quot;</span>&gt;手机号码：&lt;/td&gt;</span><br><span class="line">                            &lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">                                &lt;!--手机号输入框绑定失去焦点事件--&gt;</span><br><span class="line">                                 &lt;input id=<span class="string">&quot;mobile&quot;</span> name=<span class="string">&quot;mobile&quot;</span> type=<span class="string">&quot;text&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;in&quot;</span> onblur=<span class="string">&quot;checkPhone(this.value)&quot;</span>/&gt;</span><br><span class="line">                                 &lt;span id=<span class="string">&quot;mobilespan&quot;</span> style=<span class="string">&quot;color: red&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">                            &lt;/td&gt;</span><br><span class="line">                        &lt;/tr&gt;</span><br><span class="line">                        &lt;tr&gt;</span><br><span class="line">                            &lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;left&quot;</span>&gt;生日：&lt;/td&gt;</span><br><span class="line">                            &lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">                            &lt;input id=<span class="string">&quot;birth&quot;</span> name=<span class="string">&quot;birth&quot;</span> type=<span class="string">&quot;text&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;in&quot;</span>/&gt;</span><br><span class="line">                            &lt;/td&gt;</span><br><span class="line">                        &lt;/tr&gt;</span><br><span class="line">                        &lt;tr&gt;</span><br><span class="line">                            &lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;left&quot;</span>&gt;&amp;nbsp;&lt;/td&gt;</span><br><span class="line">                            &lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">                            &lt;input name=<span class="string">&quot;&quot;</span> type=<span class="string">&quot;image&quot;</span> src=<span class="string">&quot;https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/javascript/img/register.jpg&quot;</span> /&gt;</span><br><span class="line">                            &lt;/td&gt;</span><br><span class="line">                        &lt;/tr&gt;</span><br><span class="line">                    &lt;<span class="regexp">/table&gt;&lt;/</span>td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/table&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">//声明一个校验用户名的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">checkUsername</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//使用正则表达式校验用户名</span></span><br><span class="line">            <span class="comment">//只能由英文字母和数字组成，长度为4～16个字符，并且以英文字母开头</span></span><br><span class="line">            <span class="comment">//1. 编写一个正则表达式</span></span><br><span class="line">            <span class="keyword">var</span> reg = <span class="regexp">/^[a-zA-Z][a-zA-Z0-9]&#123;3,15&#125;$/</span></span><br><span class="line">            <span class="comment">//2. 使用正则表达式取校验用户名</span></span><br><span class="line">            <span class="keyword">if</span> (reg.test(value)) &#123;</span><br><span class="line">                <span class="comment">//校验通过</span></span><br><span class="line">                <span class="comment">//1. 找到用户名输入框后面的那个span</span></span><br><span class="line">                <span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">&quot;usernamespan&quot;</span>);</span><br><span class="line">                <span class="comment">//2. 设置span的标签体的内容是一个图片标签</span></span><br><span class="line">                element.innerHTML = <span class="string">&quot;&lt;img src=&#x27;https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/javascript/img/gou.png&#x27; width=&#x27;35&#x27; height=&#x27;15\&#x27;/&gt;&quot;</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//校验不通过</span></span><br><span class="line">                <span class="comment">//1. 找到用户名输入框后面的那个span</span></span><br><span class="line">                <span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">&quot;usernamespan&quot;</span>);</span><br><span class="line">                <span class="comment">//2. 设置span的标签体的内容为&quot;用户名格式不正确&quot;</span></span><br><span class="line">                element.innerHTML = <span class="string">&quot;用户名格式不正确&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">checkPhone</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//1. 声明一个正则表达式：以1开头, 第二位是3,4,5,7,8的11位数字</span></span><br><span class="line">            <span class="keyword">var</span> reg = <span class="regexp">/^[1][34578][0-9]&#123;9&#125;$/</span></span><br><span class="line">            <span class="comment">//2. 使用正则表达式校验手机号</span></span><br><span class="line">            <span class="keyword">if</span> (reg.test(value)) &#123;</span><br><span class="line">                <span class="comment">//校验通过</span></span><br><span class="line">                <span class="comment">//找到手机号输入框后面的span</span></span><br><span class="line">                <span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">&quot;mobilespan&quot;</span>);</span><br><span class="line">                <span class="comment">//设置span中的内容为钩的图片</span></span><br><span class="line">                element.innerHTML = <span class="string">&quot;&lt;img src=&#x27;https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/javascript/img/gou.png&#x27; width=&#x27;35&#x27; height=&#x27;15\&#x27;/&gt;&quot;</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//校验不通过</span></span><br><span class="line">                <span class="comment">//找到手机号输入框后面的span</span></span><br><span class="line">                <span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">&quot;mobilespan&quot;</span>);</span><br><span class="line">                <span class="comment">//设置span中的内容为手机号格式不正确</span></span><br><span class="line">                element.innerHTML = <span class="string">&quot;手机号格式不正确&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="4-小结-4"><a href="#4-小结-4" class="headerlink" title="4,小结"></a>4,小结</h3><ol>
<li>获得和失去焦点</li>
<li>函数</li>
<li>操作标签体</li>
<li>获得标签, 获得标签的value</li>
</ol>
<h2 id="案例-使用JS完成图片轮播效果"><a href="#案例-使用JS完成图片轮播效果" class="headerlink" title="案例-使用JS完成图片轮播效果"></a>案例-使用JS完成图片轮播效果</h2><h3 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1.需求分析"></a>1.需求分析</h3><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/javascript/img/tu_17.png" alt="img"></p>
<ul>
<li>实现每过3秒中切换一张图片的效果，一共3张图片，当显示到最后1张的时候，再次显示第1张。</li>
</ul>
<h3 id="2-思路分析-1"><a href="#2-思路分析-1" class="headerlink" title="2.思路分析"></a>2.思路分析</h3><ol>
<li>创建定时任务</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="comment">//改变img标签的src</span></span><br><span class="line">&#125;,<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<h3 id="3-代码实现-1"><a href="#3-代码实现-1" class="headerlink" title="3.代码实现"></a>3.代码实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;轮播图&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div style=<span class="string">&quot;text-align: center&quot;</span>&gt;</span><br><span class="line">        &lt;img id=<span class="string">&quot;tu&quot;</span> src=<span class="string">&quot;../https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/javascript/img/banner_1.jpg&quot;</span> width=<span class="string">&quot;750&quot;</span> height=<span class="string">&quot;200&quot;</span></span><br><span class="line">             onmouseover=<span class="string">&quot;pauseMove()&quot;</span> onmouseout=<span class="string">&quot;startMove()&quot;</span>&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> imgs = [<span class="string">&quot;../https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/javascript/img/banner_1.jpg&quot;</span>,<span class="string">&quot;../https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/javascript/img/banner_2.jpg&quot;</span>,<span class="string">&quot;../https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/javascript/img/banner_3.jpg&quot;</span>]</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">        <span class="comment">//每隔三秒钟切换一张轮播图图片</span></span><br><span class="line">        <span class="keyword">var</span> id</span><br><span class="line">        <span class="comment">//1. 定时器: 每隔三秒钟做一件事情</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            id = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                i ++</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">                    i = <span class="number">0</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//2. 切换img的图片:重新设置img标签的src</span></span><br><span class="line">                <span class="built_in">document</span>.getElementById(<span class="string">&quot;tu&quot;</span>).setAttribute(<span class="string">&quot;src&quot;</span>,imgs[i])</span><br><span class="line">            &#125;,<span class="number">3000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//页面加载的时候开启轮播</span></span><br><span class="line">        startMove()</span><br><span class="line"></span><br><span class="line">        <span class="comment">//要求: 当鼠标悬停在轮播图上的时候，停止轮播，鼠标移开，恢复轮播</span></span><br><span class="line">        <span class="comment">//给轮播图绑定鼠标移入和移出事件</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">pauseMove</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//暂停轮播: 清除定时器</span></span><br><span class="line">            <span class="built_in">clearInterval</span>(id)</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="4-小结-5"><a href="#4-小结-5" class="headerlink" title="4.小结"></a>4.小结</h3><ol>
<li>定时任务  </li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setInterval(匿名函数, time);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>操作属性</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setAttribute(&quot;属性名&quot;,&quot;属性值&quot;)</span><br></pre></td></tr></table></figure>



<h2 id="案例-JS控制二级联动"><a href="#案例-JS控制二级联动" class="headerlink" title="案例-JS控制二级联动"></a>案例-JS控制二级联动</h2><h3 id="1-需求分析-1"><a href="#1-需求分析-1" class="headerlink" title="1.需求分析"></a>1.需求分析</h3><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/javascript/img/tu_22.png" alt="img"></p>
<ul>
<li>在注册页面添加籍贯,左边是省份的下拉列表,右边是城市的下拉列表.右边的select根据左边的改变而更新数据</li>
</ul>
<h3 id="2-思路分析-2"><a href="#2-思路分析-2" class="headerlink" title="2.思路分析"></a>2.思路分析</h3><ol>
<li><p>创建这个页面    (两个select)</p>
</li>
<li><p>给省份的select设置onchange事件</p>
</li>
<li><p>当省份改变的时候</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.获得省份的value</span></span><br><span class="line"><span class="comment">//2.根据省份的数据 获得当前省份的城市数据  eg: [&quot;深圳&quot;, &quot;广州&quot;, &quot;东莞&quot;, &quot;惠州&quot;]</span></span><br><span class="line"><span class="comment">//3.清除城市下拉框中的城市</span></span><br><span class="line"><span class="comment">//4.遍历出每一个城市</span></span><br><span class="line"><span class="comment">//5.把每一个城市创建成option节点  eg: &lt;option&gt;深圳&lt;/option&gt;</span></span><br><span class="line"><span class="comment">//6.把option节点添加到右边的城市的select里面</span></span><br></pre></td></tr></table></figure>

<h3 id="3-代码实现-2"><a href="#3-代码实现-2" class="headerlink" title="3.代码实现"></a>3.代码实现</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;provinceSelect&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>请选择省份<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>广东省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>湖南省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>湖北省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;citySelect&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>请选择城市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//准备数据</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> cities = [</span></span><br><span class="line">            [],</span><br><span class="line"><span class="javascript">            [<span class="string">&quot;广州&quot;</span>,<span class="string">&quot;深圳&quot;</span>,<span class="string">&quot;惠州&quot;</span>,<span class="string">&quot;东莞&quot;</span>],</span></span><br><span class="line"><span class="javascript">            [<span class="string">&quot;长沙&quot;</span>,<span class="string">&quot;岳阳&quot;</span>,<span class="string">&quot;常德&quot;</span>,<span class="string">&quot;衡阳&quot;</span>],</span></span><br><span class="line"><span class="javascript">            [<span class="string">&quot;武汉&quot;</span>,<span class="string">&quot;黄冈&quot;</span>,<span class="string">&quot;宜昌&quot;</span>,<span class="string">&quot;荆州&quot;</span>]</span></span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//2. 给省份的下拉框绑定onchange事件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> provinceSelect = <span class="built_in">document</span>.getElementById(<span class="string">&quot;provinceSelect&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        provinceSelect.onchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//2.1 获取当前选择的省份的所有城市</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> value = provinceSelect.value;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//当前省份的城市数组</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> items = cities[value];</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//2.2 遍历出每一个城市</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//遍历添加之前，先清除城市下拉框中的所有option</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;citySelect&quot;</span>).innerHTML = <span class="string">&quot;&lt;option&gt;请选择城市&lt;/option&gt;&quot;</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//每一个城市</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> cityName = items[i];</span></span><br><span class="line"><span class="javascript">                <span class="comment">//创建option</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> optionElement = <span class="built_in">document</span>.createElement(<span class="string">&quot;option&quot;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="comment">//将城市名设置到option标签体中</span></span></span><br><span class="line">                optionElement.innerHTML = cityName</span><br><span class="line"><span class="javascript">                <span class="comment">//将option标签添加到城市下拉框中</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">&quot;citySelect&quot;</span>).appendChild(optionElement)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-小结-6"><a href="#4-小结-6" class="headerlink" title="4.小结"></a>4.小结</h3><ol>
<li><p>内容改变事件</p>
</li>
<li><p>二维数组</p>
</li>
<li><p>innerHTML</p>
<ul>
<li>会把前面的内容覆盖掉</li>
<li>支持标签的</li>
</ul>
</li>
<li><p>dom</p>
<ul>
<li>父节点.appendChild(子节点)</li>
<li>document.createElement()</li>
<li>document.createTextNode()</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>html基础</tag>
      </tags>
  </entry>
  <entry>
    <title>web服务器--Servlet</title>
    <url>/jwangcloud/3247297017/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Servlet入门"><a href="#Servlet入门" class="headerlink" title="Servlet入门"></a>Servlet入门</h1><h2 id="使用IDEA创建web工程配置tomcat"><a href="#使用IDEA创建web工程配置tomcat" class="headerlink" title="使用IDEA创建web工程配置tomcat"></a>使用IDEA创建web工程配置tomcat</h2><span id="more"></span>

<h3 id="配置tomcat"><a href="#配置tomcat" class="headerlink" title="配置tomcat"></a>配置tomcat</h3><p>我们要将idea和tomcat集成到一起，可以通过idea就控制tomcat的启动和关闭：</p>
<p> <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555838575577.png" alt="1555838575577"></p>
<p> <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555838600225.png" alt="1555838600225"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555838669879.png" alt="1555838669879"> </p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555838727262.png" alt="1555838727262"></p>
<h3 id="创建JavaWeb工程"><a href="#创建JavaWeb工程" class="headerlink" title="创建JavaWeb工程"></a>创建JavaWeb工程</h3><h4 id="web工程创建"><a href="#web工程创建" class="headerlink" title="web工程创建"></a>web工程创建</h4><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/200.png" alt="1555838784099"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555902807303.png" alt="1555902807303"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555902832195.png" alt="1555902832195"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555902959035.png" alt="1555902959035"></p>
<h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><ul>
<li>情况一: 已经关联成功的情况(因为我创建项目的时候, 已经选择了tomcat)</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555903047439.png" alt="1555903047439"> </p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555903115979.png" alt="1555903115979"></p>
<ul>
<li>情况二:  如果之前没有选择tomcat, 现在就需要自己关联发布</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555903217846.png" alt="1555903217846"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555903238067.png" alt="1555903238067"></p>
<h2 id="Servlet概述"><a href="#Servlet概述" class="headerlink" title="Servlet概述"></a>Servlet概述</h2><p>​    Servlet **运行在服务端(tomcat)**的Java小程序(对象)，是sun公司提供一套规范. 就是动态资源</p>
<h3 id="Servlet作用"><a href="#Servlet作用" class="headerlink" title="Servlet作用"></a>Servlet作用</h3><p>​    用来接收、处理客户端请求、响应给浏览器的动态资源。</p>
<p>​    但servlet的实质就是java代码，通过java的API动态的向客户端输出内容</p>
<h3 id="servlet与普通的java程序的区别"><a href="#servlet与普通的java程序的区别" class="headerlink" title="servlet与普通的java程序的区别"></a>servlet与普通的java程序的区别</h3><ol>
<li>必须实现servlet接口</li>
<li>必须在servlet容器（服务器 tomcat）中运行</li>
<li>servlet程序可以接收用户请求参数以及向浏览器输出数据</li>
</ol>
<h2 id="Servlet入门案例"><a href="#Servlet入门案例" class="headerlink" title="Servlet入门案例"></a>Servlet入门案例</h2><h3 id="配置文件方式实现"><a href="#配置文件方式实现" class="headerlink" title="配置文件方式实现"></a>配置文件方式实现</h3><ol>
<li>创建web工程</li>
<li>创建一个类实现Servlet接口</li>
<li>在web.xml配置servlet的映射路径</li>
</ol>
<h3 id="注解方式实现"><a href="#注解方式实现" class="headerlink" title="注解方式实现"></a>注解方式实现</h3><ol>
<li>创建web工程</li>
<li>创建一个类实现Servlet接口</li>
<li>在这个类上面添加@WebServlet(“访问的路径”)</li>
</ol>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="配置文件方式实现-1"><a href="#配置文件方式实现-1" class="headerlink" title="配置文件方式实现"></a>配置文件方式实现</h3><ul>
<li>在com.itheima.web包下创建一个类实现Servlet接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo01</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//服务方法: 处理请求的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>web.xml配置（该文件在web/WEB-INF 文件夹下）：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;web-app xmlns=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span><br><span class="line">           xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">           xsi:schemaLocation=<span class="string">&quot;http://java.sun.com/xml/ns/javaee</span></span><br><span class="line"><span class="string">		  http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span></span><br><span class="line">           version=<span class="string">&quot;2.5&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置Servlet--&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;!--servlet-name: 名字 随便取; 一般就是类名--&gt;</span><br><span class="line">        &lt;servlet-name&gt;ServletDemo01&lt;/servlet-name&gt;</span><br><span class="line">        &lt;!--servlet-class:Servlet这个类的全限定名--&gt;</span><br><span class="line">        &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">com</span>.<span class="title">itheima</span>.<span class="title">web</span>.<span class="title">ServletDemo01</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line">        &lt;!--servlet-name: 必须和servlet标签里面的servlet-name一样--&gt;</span><br><span class="line">        &lt;servlet-name&gt;ServletDemo01&lt;/servlet-name&gt;</span><br><span class="line">        &lt;!--url-pattern: 配置访问的路径--&gt;</span><br><span class="line">        &lt;url-pattern&gt;/demo01&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">&lt;/web-app&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="注解方式实现-1"><a href="#注解方式实现-1" class="headerlink" title="注解方式实现"></a>注解方式实现</h3><ul>
<li>在com.itheima.web包下创建一个类实现Servlet接口, 添加注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo02&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo02</span> <span class="keyword">implements</span> <span class="title">Servlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>浏览器地址栏输入：<a href="http://localhost:8080/day27_servlet/demo02">http://localhost:8080/day27_servlet/demo02</a></p>
<h3 id="如果出现实现Servlet报错"><a href="#如果出现实现Servlet报错" class="headerlink" title="如果出现实现Servlet报错"></a>如果出现实现Servlet报错</h3><ul>
<li>检查当前的工程是否依赖了Tomcat</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555904633352.png" alt="1555904633352"></p>
<ul>
<li>如果没有依赖, 依赖tomcat</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555905478996.png" alt="1555905478996"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555905493524.png" alt="1555905493524"> </p>
<h3 id="配置文件方式与注解方式比较"><a href="#配置文件方式与注解方式比较" class="headerlink" title="配置文件方式与注解方式比较"></a>配置文件方式与注解方式比较</h3><p>​    注解方式简化的javaweb代码开发，可以省略web.xml配置文件. </p>
<p>​    但是配置文件方式必须掌握的(后面在框架或者大项目里面会使用到的)  </p>
<h2 id="入门案例原理和路径"><a href="#入门案例原理和路径" class="headerlink" title="入门案例原理和路径"></a>入门案例原理和路径</h2><h3 id="Servlet执行原理"><a href="#Servlet执行原理" class="headerlink" title="Servlet执行原理"></a>Servlet执行原理</h3><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/tu_31.png" alt="img"></p>
<p>通过上述流程图我们重点需要掌握如下几个点：</p>
<ul>
<li>Servlet对象是由服务器创建(反射)</li>
<li>request与response对象也是由tomcat服务器创建</li>
<li>service()方法也是服务器调用的</li>
</ul>
<h3 id="Servlet路径的配置url-pattern"><a href="#Servlet路径的配置url-pattern" class="headerlink" title="Servlet路径的配置url-pattern"></a>Servlet路径的配置url-pattern</h3><p>url-pattern配置方式共有三种: </p>
<ul>
<li>完全路径匹配: <strong>以 / 开始</strong>.      注: 访问的路径不能多一个字母也不能少一个</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如: 配置了&#x2F;demo01  请求的时候必须是: &#x2F;demo01  </span><br></pre></td></tr></table></figure>

<ul>
<li>目录匹配”<strong>以 / 开始需要以 * 结束</strong>.    注: Servlet里面用的 不多, 但是过滤器里面通常就使用目录匹配 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如:  配置&#x2F;* 访问&#x2F;a, &#x2F;aa, &#x2F;aaa; 配置 &#x2F;aa&#x2F;*  访问 &#x2F;aa&#x2F;b , &#x2F;aa&#x2F;cc</span><br></pre></td></tr></table></figure>

<ul>
<li>扩展名匹配<strong>不能以 / 开始, 以 * 开始的 .</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如:  *.action;  访问: aa.action, bb.action, c.action;   错误写法: &#x2F;*.do, 不可以写*.jsp,*.html</span><br></pre></td></tr></table></figure>

<p>注意的地方:</p>
<ul>
<li>一个路径只能对应一个servlet, 但是一个servlet可以有多个路径 </li>
</ul>
<ul>
<li>tomcat获得匹配路径时，优先级顺序：完全路径匹配&gt; 目录匹配 &gt; 扩展名匹配 </li>
</ul>
<h1 id="Servlet进阶"><a href="#Servlet进阶" class="headerlink" title="Servlet进阶"></a>Servlet进阶</h1><h2 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h2><h3 id="生命周期概述"><a href="#生命周期概述" class="headerlink" title="生命周期概述"></a>生命周期概述</h3><p>​    一个对象从创建到销毁的过程</p>
<h3 id="Servlet生命周期方法"><a href="#Servlet生命周期方法" class="headerlink" title="Servlet生命周期方法"></a>Servlet生命周期方法</h3><p>​    servlet从创建到销毁的过程</p>
<p>​    出生：（初始化）用户第一次访问时执行。</p>
<p>​    活着：（服务）应用活着。每次访问都会执行。</p>
<p>​    死亡：（销毁）应用卸载。</p>
<p>​    serrvlet生命周期方法:</p>
<p>​        init(ServletConfig config)</p>
<p>​        service(ServletRequest req, ServletResponse res)</p>
<p>​        destroy()</p>
<h3 id="Servlet生命周期描述"><a href="#Servlet生命周期描述" class="headerlink" title="Servlet生命周期描述"></a>Servlet生命周期描述</h3><ol>
<li><p>常规【重点】</p>
<p>​    默认情况下, 来了第一次请求, 会调用init()方法进行初始化【调用一次】</p>
<p>​    任何一次请求 都会调用service()方法处理这个请求</p>
<p>​    服务器正常关闭或者项目从服务器移除, 调用destory()方法进行销毁【调用一次】</p>
</li>
<li><p>扩展</p>
<p>​    servlet是单例多线程的, 尽量不要在servlet里面使用值可变的全局(成员)变量,可能会导致线程不安全</p>
<p>​    单例: 只有一个对象(init()调用一次, 创建一次)</p>
<p>​    多线程: 服务器会针对每次请求, 开启一个线程调用service()方法处理这个请求</p>
</li>
</ol>
<h3 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h3><p>​    Servlet的配置对象, 可以使用用ServletConfig来获得Servlet的初始化参数,<strong>在SpringMVC里面会遇到</strong></p>
<ul>
<li>先在配置文件里面配置初始化参数</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1537837644263.png" alt="1537837644263"></p>
<ul>
<li>可以通过akey获得aaa</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1537837616004.png" alt="1537837616004"></p>
<h3 id="启动项"><a href="#启动项" class="headerlink" title="启动项"></a>启动项</h3><p>​    Servlet默认情况下什么是创建? 默认情况下是第一次请求的时候.   </p>
<p>​    如果我想让Servlet提前创建(服务器启动的时候), 这个时候就可以使用启动项  <strong>在SpringMVC里面会遇到</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555981767256.png" alt="1555981767256">   ​    </p>
<h2 id="Servlet体系结构"><a href="#Servlet体系结构" class="headerlink" title="Servlet体系结构"></a>Servlet体系结构</h2><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/tu_30-1571447571193.png" alt="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/"></p>
<ul>
<li><p>Servlet接口</p>
<p>​    前面我们已经学会创建一个类实现sevlet接口的方式开发Servlet程序，实现Servlet接口的时候，我们必须实现接口的所有方法。但是，在servlet中，真正执行程序逻辑的是service，对于servlet的初始化和销毁，由服务器调用执行，开发者本身不需要关心。因此，有没有一种更加简洁的方式来开发servlet程序呢？</p>
</li>
</ul>
<p>我们先来查阅API回顾Servlet接口：<br><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/tu_32-1571447571193.png"></p>
<p>​    由上图可知在servlet接口规范下，官方推荐使用继承的方式，继承GenericServlet 或者HttpServlet来实现接口，那么我们接下来再去查看一下这两个类的API：</p>
<ul>
<li>GenericServlet 类</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/tu_33-1571447571193.png"></p>
<p>​    阅读上图API可知，GenericServlet 是一个类，它简化了servlet的开发，已经提供好了一些servlet接口所需的方法，我们开发者只需要重写service方法即可</p>
<p>我们来使用GenericServlet 创建servlet：</p>
<ol>
<li>创建一个类</li>
<li>继承GenericServlet</li>
<li>重写service方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.GenericServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;GenericDemoServlet&quot;,urlPatterns = &quot;/generic&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemoServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;GenericDemoServlet执行.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    虽然，GenericServlet已经简化了servlet开发，但是我们平时开发程序需要按照一种互联网传输数据的协议来开发程序——http协议，因此，sun公司又专门提供了HttpServlet，来适配这种协议下的开发。</p>
<ul>
<li>HttpServlet</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/tu_34-1571447571193.png"></p>
<p>阅读上图的API可知，继承HttpServlet，我们需要重写doGet、doPost等方法中一个即可，根据Http不同的请求，我们需要实现相应的方法。</p>
<p>我们来使用HttpServlet创建servlet：    </p>
<ol>
<li>创建一个类</li>
<li>继承HttpServlet</li>
<li>重写doGet方法和doPost方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包名:com.itheima.servlet</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Leevi</span></span><br><span class="line"><span class="comment"> * 日期2020-07-11  15:39</span></span><br><span class="line"><span class="comment"> * Servlet的常用的编写方法:</span></span><br><span class="line"><span class="comment"> * 1. 写一个类继承HttpServlet，重写doGet和doPost方法</span></span><br><span class="line"><span class="comment"> *    1.1 doGet()方法，是处理来自客户端的get请求</span></span><br><span class="line"><span class="comment"> *    1.2 doPost()方法，是处理来自客户端的post请求</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    通常情况下:服务器端针对同一个请求(不同的请求方式)不会做不同的处理,所以我们会选择在doGet中调用doPost</span></span><br><span class="line"><span class="comment"> * 2. 配置servlet的映射路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo02&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo02</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;编写很多代码处理这次post请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    通过以上两个API阅读，同学们注意一个细节HttpServlet是GenericServlet的子类，它增强了GenericServlet一些功能，因此，在后期使用的时候，我们都是选择继承HttpServlet来开发servlet程序。</p>
<h3 id="扩展-Servlet体系源码"><a href="#扩展-Servlet体系源码" class="headerlink" title="扩展(Servlet体系源码)"></a>扩展(Servlet体系源码)</h3><ol>
<li>看HttpServlet的service()方法</li>
</ol>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/image-20191208151858364.png" alt="image-20191208151858364"> </p>
<h1 id="第六章-ServletContext"><a href="#第六章-ServletContext" class="headerlink" title="第六章-ServletContext"></a>第六章-ServletContext</h1><h2 id="知识点-ServletContext概述"><a href="#知识点-ServletContext概述" class="headerlink" title="知识点-ServletContext概述"></a>知识点-ServletContext概述</h2><h3 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h3><ul>
<li>知道什么是ServletContext, 以及作用</li>
</ul>
<h3 id="2-讲解"><a href="#2-讲解" class="headerlink" title="2.讲解"></a>2.讲解</h3><h4 id="2-1-servletContext概述"><a href="#2-1-servletContext概述" class="headerlink" title="2.1 servletContext概述"></a>2.1 servletContext概述</h4><p>​    ServletContext: 是一个全局对象, 上下文对象. </p>
<p>​    服务器为每一个应用(项目)都创建了一个ServletContext对象。 ServletContext属于整个应用(项目)的，不局限于某个Servlet。并且整个项目有且只会有一个ServletContext对象</p>
<h4 id="2-2-ServletContext作用"><a href="#2-2-ServletContext作用" class="headerlink" title="2.2 ServletContext作用"></a>2.2 ServletContext作用</h4><p>​    作为域对象存取数据,让Servlet共享(掌握)</p>
<p>​    获得文件MIME类型（文件下载）(了解)  </p>
<p>​    获得全局初始化参数(了解)</p>
<p>​    获取web资源路径  ，可以将Web资源转换成字节输入流(掌握)</p>
<h3 id="3-小结"><a href="#3-小结" class="headerlink" title="3.小结"></a>3.小结</h3><h2 id="知识点-ServletContext的功能"><a href="#知识点-ServletContext的功能" class="headerlink" title="知识点-ServletContext的功能"></a>知识点-ServletContext的功能</h2><h3 id="1-目标-1"><a href="#1-目标-1" class="headerlink" title="1.目标"></a>1.目标</h3><ul>
<li>掌握ServletContext的作用</li>
</ul>
<h3 id="2-路径"><a href="#2-路径" class="headerlink" title="2.路径"></a>2.路径</h3><ul>
<li>作为域对象存取数据</li>
<li>获得文件mini类型（文件下载）</li>
<li>获得全局初始化参数</li>
<li>获取web资源路径</li>
</ul>
<h3 id="3-讲解"><a href="#3-讲解" class="headerlink" title="3.讲解"></a>3.讲解</h3><h4 id="3-1作为域对象存取值【重点】"><a href="#3-1作为域对象存取值【重点】" class="headerlink" title="3.1作为域对象存取值【重点】"></a>3.1作为域对象存取值【重点】</h4><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/image-20191208154333086.png" alt="image-20191208154333086">  </p>
<ol>
<li><p>API</p>
<ul>
<li>getAttribute(String name) ;向ServletContext对象的map取数据</li>
<li>setAttribute(String name, Object object) ;从ServletContext对象的map中添加数据</li>
<li>removeAttribute(String name) ;根据name去移除数据</li>
</ul>
</li>
<li><p>代码</p>
<ul>
<li><p>ServletDemo01</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">- 包名:$&#123;PACKAGE_NAME&#125;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">- <span class="doctag">@author</span> Leevi</span></span><br><span class="line"><span class="comment">  - 日期2020-07-11  16:11</span></span><br><span class="line"><span class="comment">  - 目标: 在ServletDemo02中获取servletDemo01中的一个变量的值</span></span><br><span class="line"><span class="comment">  - 1. 获取ServletContext对象:</span></span><br><span class="line"><span class="comment">  - getServletContext()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo01&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo01</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String name = <span class="string">&quot;周杰棍&quot;</span>;</span><br><span class="line">        <span class="comment">//1. 获取ServletContext对象</span></span><br><span class="line">        ServletContext servletContext = getServletContext();</span><br><span class="line">        <span class="comment">//2. 往容器ServletContext中存值</span></span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>ServletDemo02</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">- 包名:$&#123;PACKAGE_NAME&#125;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">- <span class="doctag">@author</span> Leevi</span></span><br><span class="line"><span class="comment">- 日期2020-07-11  16:11</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo02&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo02</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取那个容器ServletContext</span></span><br><span class="line">        ServletContext servletContext = getServletContext();</span><br><span class="line">        <span class="comment">//2. 从容器ServletContext中获取数据</span></span><br><span class="line">        String name = (String) servletContext.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;在ServletDemo02中获取的name是:&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="3-2-获得文件mime-type-了解"><a href="#3-2-获得文件mime-type-了解" class="headerlink" title="3.2 获得文件mime-type(了解)"></a>3.2 获得文件mime-type(了解)</h4><ol>
<li>getMimeType(String file) </li>
<li>代码</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//根据文件名获得文件的mini类型</span></span><br><span class="line"><span class="comment">//1.获得ServletContext</span></span><br><span class="line"><span class="comment">//2.调用getMimeType()方法</span></span><br><span class="line">String file01 = <span class="string">&quot;a.mp3&quot;</span>;</span><br><span class="line">String file02 = <span class="string">&quot;b.png&quot;</span>;</span><br><span class="line">String mimeType01 = getServletContext().getMimeType(file01);</span><br><span class="line">String mimeType02 = getServletContext().getMimeType(file02);</span><br><span class="line"></span><br><span class="line">response.getWriter().print(<span class="string">&quot;ServletDemo05...&quot;</span>+mimeType01+<span class="string">&quot;:&quot;</span>+mimeType02);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-3-获得全局初始化参数-了解"><a href="#3-3-获得全局初始化参数-了解" class="headerlink" title="3.3.获得全局初始化参数(了解)"></a>3.3.获得全局初始化参数(了解)</h4><ul>
<li>String getInitParameter(String name) ; //根据配置文件中的key得到value; </li>
</ul>
<p>在web.xml配置</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1537841534534.png" alt="1537841534534"></p>
<p>通过ServletContext来获得</p>
<p> <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1537841552654.png" alt="1537841552654"></p>
<h4 id="3-4-获取web资源路径"><a href="#3-4-获取web资源路径" class="headerlink" title="3.4 获取web资源路径"></a>3.4 获取web资源路径</h4><ol>
<li>API<ul>
<li>String  getRealPath(String path);根据资源名称得到资源的绝对路径.</li>
<li>getResourceAsStream(String path) ;返回制定路径文件的流</li>
</ul>
</li>
</ol>
<blockquote>
<p> 注意: filepath:直接从项目的根目录开始写</p>
</blockquote>
<ol start="2">
<li>代码</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包名:$&#123;PACKAGE_NAME&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Leevi</span></span><br><span class="line"><span class="comment"> * 日期2020-07-11  16:41</span></span><br><span class="line"><span class="comment"> * 使用ServletContext获取web里面的资源文件的真实路径</span></span><br><span class="line"><span class="comment"> * 目标: 使用字节输入流，读取mm.jpg这张图片</span></span><br><span class="line"><span class="comment"> *     方法1: FileInputStream</span></span><br><span class="line"><span class="comment"> *     方法2: ClassLoader</span></span><br><span class="line"><span class="comment"> *     方法3: 使用ServletContext</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在web项目中，将文件转换成流，有两种方式</span></span><br><span class="line"><span class="comment"> * 1. 如果文件在resources里面，使用类加载器</span></span><br><span class="line"><span class="comment"> * 2. 如果文件在web里面，使用ServletContext</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo04&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo04</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//方法1: 使用FileInputStream,此时使用磁盘路径</span></span><br><span class="line">        <span class="comment">//InputStream is = new FileInputStream(&quot;C:/JavaEE_Relation/JavaEE98/itheima98_web/day24_servletcontext_03/web/mm.jpg&quot;);</span></span><br><span class="line">        <span class="comment">//方法2: 使用ClassLoader将文件转换成流</span></span><br><span class="line">        <span class="comment">//InputStream is = ServletDemo04.class.getClassLoader().getResourceAsStream(&quot;../../mm.jpg&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法3: 使用ServletContext可以获取web里面的资源的真实路径</span></span><br><span class="line">        ServletContext servletContext = getServletContext();</span><br><span class="line">        <span class="comment">//String realPath = servletContext.getRealPath(&quot;mm.jpg&quot;);</span></span><br><span class="line"></span><br><span class="line">        InputStream is = servletContext.getResourceAsStream(<span class="string">&quot;mm.jpg&quot;</span>);</span><br><span class="line">        System.out.println(is);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-小结"><a href="#4-小结" class="headerlink" title="4.小结"></a>4.小结</h3><ol>
<li><p>作为域对象存取数据【共享】</p>
<ul>
<li>setAttribute(String name,Object value)  存</li>
<li>getAttribute(String name)  取</li>
<li>removeAttribute(String name) 移除</li>
</ul>
</li>
<li><p>获得文件的Mime类型</p>
<ul>
<li>getMineType(String fileName);</li>
</ul>
</li>
<li><p>获得全局初始化参数</p>
<ul>
<li>在web.xml配置</li>
<li>getInitParameter(String name);</li>
</ul>
</li>
<li><p>获得web资源路径【已经在web目录了】</p>
<ul>
<li>getRealPath(String file);   获得文件的绝对路径</li>
<li>getReSourceAsStream(String file);   获得文件流</li>
</ul>
</li>
</ol>
<h2 id="案例-统计网站被访问的总次数"><a href="#案例-统计网站被访问的总次数" class="headerlink" title="案例-统计网站被访问的总次数"></a>案例-统计网站被访问的总次数</h2><h3 id="1-需求"><a href="#1-需求" class="headerlink" title="1.需求"></a>1.需求</h3><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/tu_3.gif" alt="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/"></p>
<ul>
<li>在页面中显示您是第x位访问的用户.</li>
</ul>
<h3 id="2-思路分析"><a href="#2-思路分析" class="headerlink" title="2.思路分析"></a>2.思路分析</h3><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/count.jpg" alt="image-20191208160926430"> </p>
<h3 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h3><ul>
<li>CountServlet</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包名:$&#123;PACKAGE_NAME&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Leevi</span></span><br><span class="line"><span class="comment"> * 日期2020-07-11  17:04</span></span><br><span class="line"><span class="comment"> * 每次接收到请求，则往容器中的计数器上面+1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/count&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取容器中计数器原本的次数</span></span><br><span class="line">        ServletContext servletContext = getServletContext();</span><br><span class="line">        Object count = servletContext.getAttribute(<span class="string">&quot;count&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断ServletContext中是否有计数器</span></span><br><span class="line">        <span class="keyword">if</span> (count == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//说明当前是第一次访问</span></span><br><span class="line">            <span class="comment">//就往ServletContext中添加一个计数器</span></span><br><span class="line">            servletContext.setAttribute(<span class="string">&quot;count&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//说明我不是第一次访问，那么就要对原来的计数器+1，再存进去</span></span><br><span class="line">            <span class="keyword">int</span> number = ((<span class="keyword">int</span>) count) + <span class="number">1</span>;</span><br><span class="line">            servletContext.setAttribute(<span class="string">&quot;count&quot;</span>,number);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2. 向客户端响应WelCome</span></span><br><span class="line">        response.getWriter().write(<span class="string">&quot;WelCome!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ShowServlet</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包名:$&#123;PACKAGE_NAME&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Leevi</span></span><br><span class="line"><span class="comment"> * 日期2020-07-11  17:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/show&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShowServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//从容器中获取计数器的值</span></span><br><span class="line">        ServletContext servletContext = getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count = (<span class="keyword">int</span>) servletContext.getAttribute(<span class="string">&quot;count&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将count响应给客户端</span></span><br><span class="line">        response.getWriter().print(<span class="string">&quot;access count is:&quot;</span>+count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-小结-1"><a href="#4-小结-1" class="headerlink" title="4.小结"></a>4.小结</h3>]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>web服务器--web开发介绍及tomcat</title>
    <url>/jwangcloud/3951566323/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="WEB开发介绍"><a href="#WEB开发介绍" class="headerlink" title="WEB开发介绍"></a>WEB开发介绍</h1><h2 id="WEB资源分类"><a href="#WEB资源分类" class="headerlink" title="WEB资源分类"></a>WEB资源分类</h2><p>WEB，在英语中web即表示网页的意思，它用于<strong>表示Internet主机(服务器)上供外界访问的资源</strong></p>
<span id="more"></span>

<h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><ul>
<li>web页面中供人们浏览的数据始终是不变 (eg: html,css,js、音视频)</li>
</ul>
<h3 id="动态资源"><a href="#动态资源" class="headerlink" title="动态资源"></a>动态资源</h3><ul>
<li>指web页面中供人们浏览的数据是由程序产生的，不同的用户或者不同时间点访问web页面看到的内容各不相同。(eg: servlet,jsp)</li>
</ul>
<h2 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h2><h3 id="C-S架构"><a href="#C-S架构" class="headerlink" title="C/S架构"></a>C/S架构</h3><p>​    Client / Server,客户端和服务器端，<strong>用户需要安装专门客户端程序。</strong></p>
<h3 id="B-S架构"><a href="#B-S架构" class="headerlink" title="B/S架构"></a>B/S架构</h3><p>​    Browser / Server,浏览器和服务器端，<strong>不需要安装专门客户端程序，浏览器是操作系统内置。</strong></p>
<h3 id="B-S-和C-S交互模型的比较"><a href="#B-S-和C-S交互模型的比较" class="headerlink" title="B/S 和C/S交互模型的比较"></a>B/S 和C/S交互模型的比较</h3><ul>
<li><p>相同点</p>
<p>​    都是基于请求-响应交互模型:即浏览器（客户端) 向 服务器发送 一个 请求。服务器 向 浏览器（客户端）回送 一个 响应 。</p>
<p>​    必须先有请求 再有响应</p>
<p>​    请求和响应成对出现</p>
</li>
<li><p>不同点</p>
<p>​    实现C/S模型需要用户在自己的操作系统安装各种客户端软件（百度网盘、腾讯QQ等）；实现B/S模型，只需要用户在操作系统中安装浏览器即可。</p>
</li>
</ul>
<blockquote>
<p> 注：B/S模型可以理解为一种特殊C/S模型。</p>
</blockquote>
<h2 id="web通信"><a href="#web通信" class="headerlink" title="web通信"></a>web通信</h2><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/image-20191208091344175.png" alt="image-20191208091344175"></p>
<h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><p>processon的画图软件的注册地址:</p>
<p><a href="https://www.processon.com/i/5f0440b81e085326375eb062">https://www.processon.com/i/5f0440b81e085326375eb062</a></p>
<h2 id="服务器介绍"><a href="#服务器介绍" class="headerlink" title="服务器介绍"></a>服务器介绍</h2><p>服务器就是一个软件，任何电脑只需要安装上了服务器软件， 我们的电脑就可以当做一台服务器了. </p>
<p>​    服务器: 硬件(电脑)+软件(mysql, tomcat,nginx)</p>
<h2 id="常见web服务器"><a href="#常见web服务器" class="headerlink" title="常见web服务器"></a>常见web服务器</h2><ul>
<li><p>WebLogic</p>
<p>​    Oracle公司的产品，是目前应用比较多的Web服务器，支持J2EE规范。WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555895183498.png" alt="1555895183498"> </p>
</li>
<li><p>WebSphere</p>
<p>​       IBM公司的WebSphere，支持JavaEE规范。WebSphere 是随需应变的电子商务时代的最主要的软件平台，可用于企业开发、部署和整合新一代的电子商务应用。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555895215122.png" alt="1555895215122"> </p>
</li>
<li><p>Glass Fish </p>
<p>​      最早是Sun公司的产品，后来被Oracle收购，开源免费，中型服务器。</p>
</li>
<li><p>JBoss</p>
<p>​      JBoss公司产品，开源，支持JavaEE规范，占用内存、硬盘小，安全性和性能高。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555895293155.png" alt="1555895293155"> </p>
</li>
<li><p>Tomcat</p>
<p>​    中小型的应用系统，免费,开源,效率特别高, 适合扩展(搭集群)支持JSP和Servlet. </p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555895400407.png" alt="1555895400407"> </p>
</li>
</ul>
<h2 id="tomcat介绍、安装和使用"><a href="#tomcat介绍、安装和使用" class="headerlink" title="tomcat介绍、安装和使用"></a>tomcat介绍、安装和使用</h2><p>​    Tomcat服务器是一个免费的开放源代码的Web应用服务器。</p>
<p>​    Tomcat是Apache软件基金会（Apache Software Foundation）的Jakarta项目中的一个核心项目，由Apache、Sun和其他一些公司及个人共同开发而成。由于有了Sun的参与和支持，最新的Servlet 和JSP规范总是能在Tomcat中得到体现。</p>
<p>​    因为Tomcat技术先进、性能稳定，而且免费，因而深受Java爱好者的喜爱并得到了部分软件开发商的认可，是目前比较流行的Web应用服务器。</p>
<h3 id="tomcat的下载"><a href="#tomcat的下载" class="headerlink" title="tomcat的下载"></a>tomcat的下载</h3><p>强调: 我们使用的软件版本，要和老师用的版本一致</p>
<p>目前阶段:</p>
<p>​                jdk8、mysql5、tomcat8</p>
<ol>
<li><p><strong>先去官网下载：<a href="http://tomcat.apache.org/%EF%BC%8C%E9%80%89%E6%8B%A9tomcat8%E7%89%88%E6%9C%AC(%E8%B5%84%E6%96%99%E5%B7%B2%E6%8F%90%E4%BE%9B)%EF%BC%88%E7%BA%A2%E6%A1%86%E6%89%80%E7%A4%BA%EF%BC%89">http://tomcat.apache.org/，选择tomcat8版本(资料已提供)（红框所示）</a></strong>：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/01.png"></p>
</li>
<li><p>选择要下载的文件（红框所示）：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/02.png"></p>
<p> tar.gz 文件 是linux操作系统下的安装版本</p>
<p> exe文件是window操作系统下的安装版本</p>
<p> zip文件是window操作系统下压缩版本（我们选择zip文件）</p>
</li>
<li><p><strong>下载完成</strong>：</p>
</li>
</ol>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/03.png"></p>
<h3 id="tomcat服务器软件安装"><a href="#tomcat服务器软件安装" class="headerlink" title="tomcat服务器软件安装"></a>tomcat服务器软件安装</h3><ol>
<li><p>直接解压当前这个tomcat压缩包：(<strong>不要有中文,不要有空格</strong>)</p>
</li>
<li><p>配置环境变量：</p>
<p>tomcat运行依赖于java环境：<br><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/05.png">        </p>
</li>
</ol>
<h3 id="tomcat的目录结构"><a href="#tomcat的目录结构" class="headerlink" title="tomcat的目录结构"></a>tomcat的目录结构</h3><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/tu_5.png" alt="img"></p>
<h3 id="启动与关闭tomcat服务器"><a href="#启动与关闭tomcat服务器" class="headerlink" title="启动与关闭tomcat服务器"></a>启动与关闭tomcat服务器</h3><ol>
<li><p>启动tomcat服务器</p>
<p>查找tomcat目录下bin目录，查找其中的startup.bat命令，双击启动服务器：<br><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/06.png"></p>
<p>启动效果：<br><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/07.png"></p>
</li>
<li><p>测试访问tomcat服务器</p>
<p>打开浏览器在，在浏览器的地址栏中输入：</p>
<p><a href="http://127.0.0.1:8080或者http://localhost:8080">http://127.0.0.1:8080或者http://localhost:8080</a></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/08.png"></p>
<p>注： Localhost相当于127.0.0.1</p>
</li>
<li><p>关闭tomcat服务器</p>
<p>查找tomcat目录下bin目录，查找其中的shutdown.bat命令，双击关闭服务器：<br><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/09.png"></p>
</li>
</ol>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="安装注意点"><a href="#安装注意点" class="headerlink" title="安装注意点"></a>安装注意点</h4><ul>
<li>解压到一个==没有中文和空格==目录下</li>
<li>使用之前, 配置java_home和path(jdk环境变量)<ul>
<li>java_home 不要配到bin目录,配到jdk的安装目录</li>
<li>path 才是配到bin目录</li>
</ul>
</li>
</ul>
<h4 id="端口号冲突"><a href="#端口号冲突" class="headerlink" title="端口号冲突"></a>端口号冲突</h4><p>​    报如下异常: java.net.BindException: Address already in use: JVM_Bind   8080</p>
<p>​    解决办法:</p>
<p>​    第一种:修改Tomcat的端口号   </p>
<p>​    <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/tu_100.png" alt="img"></p>
<p>​        修改conf/server.xml ,  第70行左右</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/tu_3.png" alt="img"></p>
<p>第二种:查询出来哪一个进程把8080占用了, 结束掉占用8080端口后的程序</p>
<p>​        打开命令行输入:  netstat -ano</p>
<p>​        找到占用了8080 端口的 进程的id</p>
<p>​        去任务管理器kill掉这个id对应的程序</p>
<p>​        <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/tu_4.png" alt="img"></p>
<p>​        </p>
<h4 id="JAVA-HOME没有配置"><a href="#JAVA-HOME没有配置" class="headerlink" title="JAVA_HOME没有配置"></a>JAVA_HOME没有配置</h4><ul>
<li>会出现闪退  (如果java_home配置了还是闪退  忽略它了, 后面在IDEA里面进行启动, 就没有这个问题)</li>
</ul>
<h2 id="运用Tomcat服务器部署WEB项目"><a href="#运用Tomcat服务器部署WEB项目" class="headerlink" title="运用Tomcat服务器部署WEB项目"></a>运用Tomcat服务器部署WEB项目</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WebAPP(文件夹,项目)  </span><br><span class="line"> 		|---静态资源: html,css,js,图片(它们可以以文件存在,也可以以文件夹存在)  </span><br><span class="line"> 		|---WEB-INF 固定写法。此目录下的文件不能被外部(浏览器)直接访问</span><br><span class="line"> 			|---lib:jar包存放的目录</span><br><span class="line"> 			|---web.xml:当前项目的配置文件(3.0规范之后可以省略)</span><br><span class="line"> 			|---classes:java类编译后生成class文件存放的路径</span><br></pre></td></tr></table></figure>



<h3 id="发布项目到tomcat"><a href="#发布项目到tomcat" class="headerlink" title="发布项目到tomcat"></a>发布项目到tomcat</h3><h4 id="方式一-直接发布"><a href="#方式一-直接发布" class="headerlink" title="方式一:直接发布"></a>方式一:直接发布</h4><p>​    只要将准备好的web资源直接复制到tomcat/webapps文件夹下，就可以通过浏览器使用http协议访问获取</p>
<h4 id="方式二-虚拟路径的方式发布项目"><a href="#方式二-虚拟路径的方式发布项目" class="headerlink" title="方式二: 虚拟路径的方式发布项目"></a>方式二: 虚拟路径的方式发布项目</h4><ol>
<li>第一步：在tomcat/conf目录下新建一个Catalina目录（如果已经存在无需创建）</li>
</ol>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/26.png"></p>
<ol start="2">
<li>第二步：在Catalina目录下创建localhost目录（如果已经存在无需创建）</li>
</ol>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/27.png"></p>
<ol start="3">
<li>第三步：在localhost中创建xml配置文件，名称为：随便写，比如叫做second.xml（注：这个名称是浏览器访问路径）</li>
</ol>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/28.png"></p>
<ol start="4">
<li><p>第四步：添加second.xml文件的内容为：  docBase就是你需要作为虚拟路径的项目的路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version &#x3D; &quot;1.0&quot; encoding &#x3D; &quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;Context docBase&#x3D;&quot;C:\JavaEE_Relation\JavaEE101\itheima101_staticWeb\day24_html&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1537667265350.png" alt="1537667265350"></p>
</li>
<li><p>第五步：直接访问(通过写配置文件的路径来访问):</p>
<p><a href="http://localhost:8080/second/a.html">http://localhost:8080/second/a.html</a> (second就是配置文件的名字, 映射成了myApp)</p>
</li>
</ol>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>web服务器--ServletContext</title>
    <url>/jwangcloud/2195976482/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="ServletContext概述"><a href="#ServletContext概述" class="headerlink" title="ServletContext概述"></a>ServletContext概述</h2><h3 id="servletContext概述"><a href="#servletContext概述" class="headerlink" title="servletContext概述"></a>servletContext概述</h3><p>​    ServletContext: 是一个全局对象, 上下文对象. </p>
<p>​    服务器为每一个应用(项目)都创建了一个ServletContext对象。 ServletContext属于整个应用(项目)的，不局限于某个Servlet。并且整个项目有且只会有一个ServletContext对象</p>
<span id="more"></span>

<h3 id="ServletContext作用"><a href="#ServletContext作用" class="headerlink" title="ServletContext作用"></a>ServletContext作用</h3><p>​    作为域对象存取数据,让Servlet共享(掌握)</p>
<p>​    获得文件MIME类型（文件下载）(了解)  </p>
<p>​    获得全局初始化参数(了解)</p>
<p>​    获取web资源路径  ，可以将Web资源转换成字节输入流(掌握)</p>
<h2 id="ServletContext的功能"><a href="#ServletContext的功能" class="headerlink" title="ServletContext的功能"></a>ServletContext的功能</h2><h3 id="作为域对象存取值"><a href="#作为域对象存取值" class="headerlink" title="作为域对象存取值"></a>作为域对象存取值</h3><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/image-20191208154333086.png" alt="image-20191208154333086">  </p>
<ol>
<li><p>API</p>
<ul>
<li>getAttribute(String name) ;向ServletContext对象的map取数据</li>
<li>setAttribute(String name, Object object) ;从ServletContext对象的map中添加数据</li>
<li>removeAttribute(String name) ;根据name去移除数据</li>
</ul>
</li>
<li><p>代码</p>
<ul>
<li>ServletDemo01</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jwang.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">- 包名:$&#123;PACKAGE_NAME&#125;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">- <span class="doctag">@author</span> Leevi</span></span><br><span class="line"><span class="comment">  - 日期2020-07-11  16:11</span></span><br><span class="line"><span class="comment">  - 目标: 在ServletDemo02中获取servletDemo01中的一个变量的值</span></span><br><span class="line"><span class="comment">  - 1. 获取ServletContext对象:</span></span><br><span class="line"><span class="comment">  - getServletContext()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo01&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo01</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String name = <span class="string">&quot;周杰棍&quot;</span>;</span><br><span class="line">        <span class="comment">//1. 获取ServletContext对象</span></span><br><span class="line">        ServletContext servletContext = getServletContext();</span><br><span class="line">        <span class="comment">//2. 往容器ServletContext中存值</span></span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>ServletDemo02</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jwang.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">- 包名:$&#123;PACKAGE_NAME&#125;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">- <span class="doctag">@author</span> Leevi</span></span><br><span class="line"><span class="comment">- 日期2020-07-11  16:11</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo02&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo02</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取那个容器ServletContext</span></span><br><span class="line">        ServletContext servletContext = getServletContext();</span><br><span class="line">        <span class="comment">//2. 从容器ServletContext中获取数据</span></span><br><span class="line">        String name = (String) servletContext.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;在ServletDemo02中获取的name是:&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="获得文件mime-type"><a href="#获得文件mime-type" class="headerlink" title="获得文件mime-type"></a>获得文件mime-type</h3><ol>
<li>getMimeType(String file) </li>
<li>代码</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//根据文件名获得文件的mini类型</span></span><br><span class="line"><span class="comment">//1.获得ServletContext</span></span><br><span class="line"><span class="comment">//2.调用getMimeType()方法</span></span><br><span class="line">String file01 = <span class="string">&quot;a.mp3&quot;</span>;</span><br><span class="line">String file02 = <span class="string">&quot;b.png&quot;</span>;</span><br><span class="line">String mimeType01 = getServletContext().getMimeType(file01);</span><br><span class="line">String mimeType02 = getServletContext().getMimeType(file02);</span><br><span class="line"></span><br><span class="line">response.getWriter().print(<span class="string">&quot;ServletDemo05...&quot;</span>+mimeType01+<span class="string">&quot;:&quot;</span>+mimeType02);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="获得全局初始化参数"><a href="#获得全局初始化参数" class="headerlink" title="获得全局初始化参数"></a>获得全局初始化参数</h3><ul>
<li>String getInitParameter(String name) ; //根据配置文件中的key得到value; </li>
</ul>
<p>在web.xml配置</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1537841534534.png" alt="1537841534534"></p>
<p>通过ServletContext来获得</p>
<p> <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1537841552654.png" alt="1537841552654"></p>
<h3 id="获取web资源路径"><a href="#获取web资源路径" class="headerlink" title="获取web资源路径"></a>获取web资源路径</h3><ol>
<li>API<ul>
<li>String  getRealPath(String path);根据资源名称得到资源的绝对路径.</li>
<li>getResourceAsStream(String path) ;返回制定路径文件的流</li>
</ul>
</li>
</ol>
<blockquote>
<p> 注意: filepath:直接从项目的根目录开始写</p>
</blockquote>
<ol start="2">
<li>代码</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包名:$&#123;PACKAGE_NAME&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Leevi</span></span><br><span class="line"><span class="comment"> * 日期2020-07-11  16:41</span></span><br><span class="line"><span class="comment"> * 使用ServletContext获取web里面的资源文件的真实路径</span></span><br><span class="line"><span class="comment"> * 目标: 使用字节输入流，读取mm.jpg这张图片</span></span><br><span class="line"><span class="comment"> *     方法1: FileInputStream</span></span><br><span class="line"><span class="comment"> *     方法2: ClassLoader</span></span><br><span class="line"><span class="comment"> *     方法3: 使用ServletContext</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在web项目中，将文件转换成流，有两种方式</span></span><br><span class="line"><span class="comment"> * 1. 如果文件在resources里面，使用类加载器</span></span><br><span class="line"><span class="comment"> * 2. 如果文件在web里面，使用ServletContext</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo04&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo04</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//方法1: 使用FileInputStream,此时使用磁盘路径</span></span><br><span class="line">        <span class="comment">//InputStream is = new FileInputStream(&quot;C:/JavaEE_Relation/JavaEE98/jwang98_web/day24_servletcontext_03/web/mm.jpg&quot;);</span></span><br><span class="line">        <span class="comment">//方法2: 使用ClassLoader将文件转换成流</span></span><br><span class="line">        <span class="comment">//InputStream is = ServletDemo04.class.getClassLoader().getResourceAsStream(&quot;../../mm.jpg&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法3: 使用ServletContext可以获取web里面的资源的真实路径</span></span><br><span class="line">        ServletContext servletContext = getServletContext();</span><br><span class="line">        <span class="comment">//String realPath = servletContext.getRealPath(&quot;mm.jpg&quot;);</span></span><br><span class="line"></span><br><span class="line">        InputStream is = servletContext.getResourceAsStream(<span class="string">&quot;mm.jpg&quot;</span>);</span><br><span class="line">        System.out.println(is);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="统计网站被访问的总次数"><a href="#统计网站被访问的总次数" class="headerlink" title="统计网站被访问的总次数"></a>统计网站被访问的总次数</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/tu_3.gif" alt="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/"></p>
<ul>
<li>在页面中显示您是第x位访问的用户.</li>
</ul>
<h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/count.jpg" alt="image-20191208160926430"> </p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><ul>
<li>CountServlet</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jwang.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包名:$&#123;PACKAGE_NAME&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Leevi</span></span><br><span class="line"><span class="comment"> * 日期2020-07-11  17:04</span></span><br><span class="line"><span class="comment"> * 每次接收到请求，则往容器中的计数器上面+1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/count&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取容器中计数器原本的次数</span></span><br><span class="line">        ServletContext servletContext = getServletContext();</span><br><span class="line">        Object count = servletContext.getAttribute(<span class="string">&quot;count&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断ServletContext中是否有计数器</span></span><br><span class="line">        <span class="keyword">if</span> (count == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//说明当前是第一次访问</span></span><br><span class="line">            <span class="comment">//就往ServletContext中添加一个计数器</span></span><br><span class="line">            servletContext.setAttribute(<span class="string">&quot;count&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//说明我不是第一次访问，那么就要对原来的计数器+1，再存进去</span></span><br><span class="line">            <span class="keyword">int</span> number = ((<span class="keyword">int</span>) count) + <span class="number">1</span>;</span><br><span class="line">            servletContext.setAttribute(<span class="string">&quot;count&quot;</span>,number);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2. 向客户端响应WelCome</span></span><br><span class="line">        response.getWriter().write(<span class="string">&quot;WelCome!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ShowServlet</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jwang.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/show&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShowServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//从容器中获取计数器的值</span></span><br><span class="line">        ServletContext servletContext = getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count = (<span class="keyword">int</span>) servletContext.getAttribute(<span class="string">&quot;count&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将count响应给客户端</span></span><br><span class="line">        response.getWriter().print(<span class="string">&quot;access count is:&quot;</span>+count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>ServletContext</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript-JS的BOM和DOM</title>
    <url>/jwangcloud/3393960799/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JS中的BOM"><a href="#JS中的BOM" class="headerlink" title="JS中的BOM"></a>JS中的BOM</h1><p>Browser Object Model ,浏览器对象模型. 为了便于对浏览器的操作，JavaScript封装了浏览器中各个对象，使得开发者可以方便的操作浏览器中的各个对象。</p>
<span id="more"></span>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/javascript/img/tu_1.bmp" alt="img"></p>
<h2 id="BOM里面的五个对象"><a href="#BOM里面的五个对象" class="headerlink" title="BOM里面的五个对象"></a>BOM里面的五个对象</h2><h3 id="window-窗体对象"><a href="#window-窗体对象" class="headerlink" title="window: 窗体对象"></a>window: 窗体对象</h3><table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>alert()</strong></td>
<td><strong>显示带有一段消息和一个确认按钮的警告框</strong></td>
</tr>
<tr>
<td><strong>confirm()</strong></td>
<td>显示带有一段消息以及确认按钮和取消按钮的对话框</td>
</tr>
<tr>
<td><strong>prompt()</strong></td>
<td>弹出输入框</td>
</tr>
<tr>
<td><strong>setInterval(‘函数名()’,time)</strong></td>
<td>按照指定的周期（以毫秒计）来调用函数或计算表达式</td>
</tr>
<tr>
<td><strong>setTimeout(‘函数名()’,time)</strong></td>
<td>在指定的毫秒数后调用函数或计算表达式</td>
</tr>
<tr>
<td>clearInterval()</td>
<td>取消由 setInterval() 设置的 Interval()。</td>
</tr>
<tr>
<td>clearTimeout()</td>
<td>取消由 setTimeout() 方法设置的 timeout。</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 警告框</span></span><br><span class="line"><span class="comment">//window.alert(&quot;hello&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 确认框</span></span><br><span class="line"><span class="comment">/*let flag = confirm(&quot;你确定要删除吗?&quot;);</span></span><br><span class="line"><span class="comment">        console.log(flag)*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 输入框</span></span><br><span class="line"><span class="keyword">let</span> age = prompt(<span class="string">&quot;请输入你的年龄&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">parseInt</span>(age) &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">    alert(<span class="string">&quot;可以访问&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">&quot;请大一点了再访问&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定时器的话就是隔一段事件执行一个任务</span></span><br><span class="line"><span class="comment">//1. setTimeout(),只执行一次的定时器,其实也就相当于一个延时器</span></span><br><span class="line"><span class="comment">//第一个参数是要执行的匿名函数，第二个参数是执行时间</span></span><br><span class="line"><span class="comment">/*setTimeout(function () &#123;</span></span><br><span class="line"><span class="comment">            document.write(&quot;hello world&quot;)</span></span><br><span class="line"><span class="comment">        &#125;,3000)*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. setInterval(),循环执行的定时器</span></span><br><span class="line"><span class="comment">//第一个参数是要执行的匿名函数，第二个参数是间隔时间，该方法的返回值是这个定时器id</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> id = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    i ++</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;你好世界&lt;br/&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//我们还有一个方法，clearInterval(定时器的id)清除定时器</span></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(id)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="number">2000</span>);</span><br></pre></td></tr></table></figure>



<h3 id="navigator-浏览器导航对象"><a href="#navigator-浏览器导航对象" class="headerlink" title="navigator:浏览器导航对象"></a>navigator:浏览器导航对象</h3><table>
<thead>
<tr>
<th>属性</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td>appName</td>
<td align="left">返回浏览器的名称</td>
</tr>
<tr>
<td>appVersion</td>
<td align="left">返回浏览器的平台和版本信息</td>
</tr>
</tbody></table>
<h3 id="screen-屏幕对象"><a href="#screen-屏幕对象" class="headerlink" title="screen:屏幕对象"></a>screen:屏幕对象</h3><table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>width</td>
<td>返回显示器屏幕的分辨率宽度</td>
</tr>
<tr>
<td>height</td>
<td>返回显示屏幕的分辨率高度</td>
</tr>
</tbody></table>
<h3 id="history-历史对象"><a href="#history-历史对象" class="headerlink" title="history:历史对象"></a>history:历史对象</h3><table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>back()</td>
<td>加载 history 列表中的前一个 URL</td>
</tr>
<tr>
<td>forword()</td>
<td>加载 history 列表中的下一个 URL</td>
</tr>
<tr>
<td>go()</td>
<td>加载 history 列表中的某个具体页面</td>
</tr>
</tbody></table>
<h3 id="location-当前路径信息"><a href="#location-当前路径信息" class="headerlink" title="location:当前路径信息"></a>location:当前路径信息</h3><table>
<thead>
<tr>
<th align="left">属性</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">host</td>
<td>设置或返回主机名和当前 URL 的端口号</td>
</tr>
<tr>
<td align="left"><strong>href</strong></td>
<td>设置或返回完整的 URL</td>
</tr>
<tr>
<td align="left">port</td>
<td>设置或返回当前 URL 的端口号</td>
</tr>
</tbody></table>
<p>location.href;  获得路径</p>
<p>location.href = “<a href="http://www.baidu.com&quot;/">http://www.baidu.com&quot;</a>;  设置路径,跳转到百度页面</p>
<h1 id="JS的DOM"><a href="#JS的DOM" class="headerlink" title="JS的DOM"></a>JS的DOM</h1><ul>
<li>DOM：<strong>D</strong>ocument <strong>O</strong>bject <strong>M</strong>odel，文档对象模型。是js提供的，用来访问网页里所有内容的(标签,属性,标签的内容)</li>
</ul>
<h2 id="什么是dom树"><a href="#什么是dom树" class="headerlink" title="什么是dom树"></a>什么是dom树</h2><ul>
<li>当网页被加载时，浏览器会创建页面的DOM对象。DOM对象模型是一棵树形结构：网页里所有的标签、属性、文本都会转换成节点对象，按照层级结构组织成一棵树形结构。<ul>
<li>整个网页封装成的对象叫<code>document</code></li>
<li>标签封装成的对象叫<code>Element</code></li>
<li>属性封装成的对象叫<code>Attribute</code></li>
<li>文本封装成的对象叫<code>Text</code></li>
</ul>
</li>
</ul>
<p>一切皆节点, 一切皆对象</p>
<h2 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h2><h3 id="获取标签"><a href="#获取标签" class="headerlink" title="获取标签"></a>获取标签</h3><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td><code>document.getElementById(id)</code></td>
<td>根据id获取标签</td>
<td><code>Element</code>对象</td>
</tr>
<tr>
<td><code>document.getElementsByName(name)</code></td>
<td>根据标签name获取一批标签</td>
<td><code>Element</code>类数组</td>
</tr>
<tr>
<td><code>document.getElementsByTagName(tagName)</code></td>
<td>根据标签名称获取一批标签</td>
<td><code>Element</code>类数组</td>
</tr>
<tr>
<td><code>document.getElementsByClassName(className)</code></td>
<td>根据类名获取一批标签</td>
<td><code>Element</code>类数组</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>获取标签的方法介绍<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;n1&quot;</span>&gt;</span>hello div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c1&quot;</span>&gt;</span>hello div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;c1&quot;</span>&gt;</span>hello span1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">name</span>=<span class="string">&quot;n1&quot;</span>&gt;</span>hello span2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//根据id获取标签</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//console.log(document.getElementById(&quot;d1&quot;))</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//根据name获取标签的数组</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//console.log(document.getElementsByName(&quot;n1&quot;))</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//根据标签名获取标签</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//console.log(document.getElementsByTagName(&quot;div&quot;))</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//根据类名获取标签</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//console.log(document.getElementsByClassName(&quot;c1&quot;))</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//扩展俩方法:1. 获取单个标签</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//console.log(document.querySelector(&quot;#d1&quot;))</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//2. 获取多个标签</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;span&quot;</span>))</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="操作标签-1"><a href="#操作标签-1" class="headerlink" title="操作标签"></a>操作标签</h3><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td><code>document.createElement(tagName)</code></td>
<td>创建标签</td>
<td><code>Element</code>对象</td>
</tr>
<tr>
<td><code>parentElement.appendChild(sonElement)</code></td>
<td>插入标签</td>
<td></td>
</tr>
<tr>
<td><code>element.remove()</code></td>
<td>删除标签</td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;sh&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;addCity()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;删除&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;removeCity()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//点击添加按钮，往城市列表的最后面添加&quot;长沙&quot;</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">addCity</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//1. 创建一个li标签</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> liElement = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//2. 设置li标签体的文本内容为&quot;长沙&quot;</span></span></span><br><span class="line"><span class="javascript">            liElement.innerText = <span class="string">&quot;长沙&quot;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//3. 往id为city的ul中添加一个子标签</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//3.1 获取id为city的ul</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> city = <span class="built_in">document</span>.getElementById(<span class="string">&quot;city&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//3.2 往city里面添加子标签</span></span></span><br><span class="line">            city.appendChild(liElement)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//点击删除按钮，删除上海</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">removeCity</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//要删除某一个标签: 那个标签.remove()</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;sh&quot;</span>).remove()</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="操作标签体"><a href="#操作标签体" class="headerlink" title="操作标签体"></a>操作标签体</h2><ul>
<li>获取标签体内容：<code>标签对象.innerHTML</code></li>
<li>设置标签体内容：<code>标签对象.innerHTML = &quot;新的HTML代码&quot;;</code><ul>
<li><code>innerHTML</code>是覆盖式设置，原本的标签体内容会被覆盖掉；</li>
<li>支持标签的 可以插入标签, 设置的html代码会生效</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>操作标签体<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//获取id为city的那个标签的标签体的内容</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> innerHTML = <span class="built_in">document</span>.getElementById(<span class="string">&quot;city&quot;</span>).innerHTML;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(innerHTML)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//设置id为city的标签体的内容</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;city&quot;</span>).innerHTML = <span class="string">&quot;&lt;h1&gt;深圳&lt;/h1&gt;&quot;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="操作属性"><a href="#操作属性" class="headerlink" title="操作属性"></a>操作属性</h2><ul>
<li>每个标签<code>Element</code>对象提供了操作属性的方法</li>
</ul>
<table>
<thead>
<tr>
<th>方法名</th>
<th>描述</th>
<th>参数</th>
</tr>
</thead>
<tbody><tr>
<td><code>getAttribute(attrName)</code></td>
<td>获取属性值</td>
<td>属性名称</td>
</tr>
<tr>
<td><code>setAttribute(attrName, attrValue)</code></td>
<td>设置属性值</td>
<td>属性名称, 属性值</td>
</tr>
<tr>
<td><code>removeAttribute(attrName)</code> 了解即可</td>
<td>删除属性</td>
<td>属性名称</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;显示密码&quot;</span> <span class="attr">onmousedown</span>=<span class="string">&quot;showPassword()&quot;</span> <span class="attr">onmouseup</span>=<span class="string">&quot;hidePassword()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//目标:按住显示密码按钮的时候，就显示密码框中的密码; 按键松开的时候，就隐藏密码</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//1. 给按钮绑定onmousedown事件</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">showPassword</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//让密码框的密码显示: 修改密码框的type属性为text</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;pwd&quot;</span>).setAttribute(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;text&quot;</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//2. 给按钮绑定onmouseup事件</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">hidePassword</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//就是设置密码框的type为password</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;pwd&quot;</span>).setAttribute(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;password&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//getAttribute(属性名)，根据属性名获取属性值</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> type = <span class="built_in">document</span>.getElementById(<span class="string">&quot;pwd&quot;</span>).getAttribute(<span class="string">&quot;type&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(type)</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>web服务器--http协议</title>
    <url>/jwangcloud/370036535/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​    HTTP是HyperText Transfer Protocol(超文本传输协议)的简写，传输HTML文件。</p>
<p>​    HTTP是互联网上用的最多的一个协议, 所有的www开头的都是遵循这个协议的(可能是https)<br>​<br>​<span id="more"></span></p>
<h2 id="HTTP协议的作用"><a href="#HTTP协议的作用" class="headerlink" title="HTTP协议的作用"></a>HTTP协议的作用</h2><p>​    HTTP作用：用于定义WEB浏览器与WEB服务器之间<strong>交换数据的过程</strong>和数据本身的<strong>内容</strong></p>
<p>​    浏览器和服务器交互过程: 浏览器请求, 服务请求响应</p>
<p>​    请求(请求行,请求头,请求体)</p>
<p>​    响应(响应行,响应头,响应体)</p>
<h2 id="请求部分"><a href="#请求部分" class="headerlink" title="请求部分"></a>请求部分</h2><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/tu_14.png" alt="img"></p>
<ul>
<li>get方式请求</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">【请求行】</span><br><span class="line">GET &#x2F;myApp&#x2F;success.html?username&#x3D;zs&amp;password&#x3D;123456 HTTP&#x2F;1.1</span><br><span class="line"></span><br><span class="line">【请求头】</span><br><span class="line">Accept: text&#x2F;html, application&#x2F;xhtml+xml, *&#x2F;*</span><br><span class="line">X-HttpWatch-RID: 41723-10011</span><br><span class="line">Referer: http:&#x2F;&#x2F;localhost:8080&#x2F;myApp&#x2F;login.html</span><br><span class="line">Accept-Language: zh-Hans-CN,zh-Hans;q&#x3D;0.5</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (MSIE 9.0; qdesk 2.4.1266.203; Windows NT 6.3; WOW64; Trident&#x2F;7.0; rv:11.0) like Gecko</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Cookie: Idea-b77ddca6&#x3D;4bc282fe-febf-4fd1-b6c9-72e9e0f381e8</span><br></pre></td></tr></table></figure>

<ul>
<li>post请求  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">【请求行】</span><br><span class="line">POST &#x2F;myApp&#x2F;success.html HTTP&#x2F;1.1</span><br><span class="line"></span><br><span class="line">【请求头】</span><br><span class="line">Accept: text&#x2F;html, application&#x2F;xhtml+xml, *&#x2F;*</span><br><span class="line">X-HttpWatch-RID: 37569-10012</span><br><span class="line">Referer: http:&#x2F;&#x2F;localhost:8080&#x2F;myApp&#x2F;login.html</span><br><span class="line">Accept-Language: zh-Hans-CN,zh-Hans;q&#x3D;0.5</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (MSIE 9.0; qdesk 2.4.1266.203; Windows NT 6.3; WOW64; Trident&#x2F;7.0; rv:11.0) like Gecko</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Content-Length: 27</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line"></span><br><span class="line">【请求体】</span><br><span class="line">username&#x3D;zs&amp;password&#x3D;123456</span><br></pre></td></tr></table></figure>

<h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><ul>
<li>请求行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET  &#x2F;myApp&#x2F;success.html?username&#x3D;zs&amp;password&#x3D;123456 HTTP&#x2F;1.1	</span><br><span class="line">POST &#x2F;myApp&#x2F;success.html HTTP&#x2F;1.1</span><br></pre></td></tr></table></figure>

<ul>
<li><p>请求方式(8种,put,delete等)</p>
<p>​    GET:明文传输, 不安全,参数跟在请求路径后面,对请求参数大小有限制, </p>
<p>​    POST: 暗文传输,安全一些,请求参数在请求体里,对请求参数大小没有有限制,</p>
</li>
<li><p>URI:统一资源标识符（即：去掉协议和IP地址部分）</p>
</li>
<li><p>协议版本:HTTP/1.1</p>
</li>
</ul>
<h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><p>​    从第2行到空行处，都叫请求头,以键值对的形式存在,但存在一个key对应多个值的请求头.</p>
<p>​    <strong>作用:浏览器告诉服务器自己相关的设置.</strong></p>
<ul>
<li>Accept:浏览器可接受的MIME类型 ,告诉服务器客户端能接收什么样类型的文件。</li>
<li><strong>User-Agent</strong>:浏览器信息.(浏览器类型, 浏览器的版本….)</li>
<li>Accept-Charset: 浏览器通过这个头告诉服务器，它支持哪种字符集</li>
<li>Content-Length:表示请求参数的长度 </li>
<li>Host:初始URL中的主机和端口 </li>
<li><strong>Referrer</strong>:从哪里里来的(之前是哪个资源)、防盗链  </li>
<li><strong>Content-Type</strong>:内容类型,告诉服务器,浏览器传输数据的MIME类型，文件传输的类型,application/x-www-form-urlencoded . </li>
<li>Accept-Encoding:浏览器能够进行解码的数据编码方式，比如gzip </li>
<li>Connection:表示是否需要持久连接。如果服务器看到这里的值为“Keep -Alive”，或者看到请求使用的是HTTP 1.1（HTTP 1.1默认进行持久连接 )</li>
<li><strong>Cookie</strong>:这是最重要的请求头信息之一(会话技术, 后面会有专门的时间来讲的)  </li>
<li>Date：Date: Mon, 22Aug 2011 01:55:39 GMT请求时间GMT</li>
</ul>
<h3 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h3><p>​    只有请求方式是post的时候,才有请求体. 即post请求时,请求参数(提交的数据)所在的位置</p>
<h2 id="响应部分"><a href="#响应部分" class="headerlink" title="响应部分"></a>响应部分</h2><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/tu_15.png" alt="img"></p>
<ul>
<li><p>响应部分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  【响应行】</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">  </span><br><span class="line">  【响应头】</span><br><span class="line">  Accept-Ranges: bytes</span><br><span class="line">  ETag: W&#x2F;&quot;143-1557909081579&quot;</span><br><span class="line">  Last-Modified: Wed, 15 May 2019 08:31:21 GMT</span><br><span class="line">  Content-Type: text&#x2F;html</span><br><span class="line">Content-Length: 143</span><br><span class="line">  Date: Sun, 08 Dec 2019 02:20:04 GMT</span><br><span class="line">  </span><br><span class="line">  【响应体】</span><br><span class="line">  &lt;!DOCTYPE html&gt;</span><br><span class="line">  &lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">      &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">      &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">      Success</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">  &lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP&#x2F;1.1 200</span><br></pre></td></tr></table></figure>

<ul>
<li><p>协议/版本</p>
</li>
<li><p><strong>响应状态码</strong>  (记住-背诵下来)</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/tu_20.png" alt="img"></p>
<p>​    200:正常,跟服务器连接成功，发送请求成功</p>
<p>​    302:重定向(跳转)</p>
<p>​    304:读取缓存，表示客户机缓存的版本是最新的，客户机可以继续使用它，无需到服务器请求. 读取缓存  </p>
<p>​    403: forbidden 权限不够，服务器接收到了客户端的请求，但是拒绝处理</p>
<p>​    404:服务器接收到了客户端的请求，但是我服务器里面没有你要找的资源</p>
<p>​    500:服务器接收到了客户端的请求，也找到了具体的资源处理请求，但是处理的过程中服务器出异常了</p>
</li>
</ul>
<h3 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h3><p>响应头以key:vaue存在, 可能多个value情况. ==服务器指示浏览器去干什么,去配置什么.==</p>
<ul>
<li><strong>Location</strong>: <a href="http://www.it315.org/index.jsp%E6%8C%87%E7%A4%BA%E6%96%B0%E7%9A%84%E8%B5%84%E6%BA%90%E7%9A%84%E4%BD%8D%E7%BD%AE">http://www.it315.org/index.jsp指示新的资源的位置</a>,通常和状态,码302一起使用，完成请求重定向</li>
<li><strong>Content-Type</strong>: text/html; charset=UTF-8; 设置服务器发送的内容的MIME类型,文件下载时候   </li>
</ul>
<p>a.mp3   b.mp4</p>
<ul>
<li><strong>Refresh</strong>: 5;url=<a href="http://www.baidu.com/">http://www.baidu.com</a> 指示客户端刷新频率。单位是秒  eg: 告诉浏览器5s之后跳转到百度</li>
</ul>
<ul>
<li><strong>Content-Disposition</strong>: attachment; filename=a.jpg  指示客户端(浏览器)下载文件 </li>
<li>Content-Length:80 告诉浏览器正文的长度</li>
<li>Server:apachetomcat 服务器的类型</li>
<li>Content-Encoding: gzip服务器发送的数据采用的编码类型</li>
<li>Set-Cookie:SS=Q0=5Lb_nQ;path=/search服务器端发送的Cookie</li>
<li>Cache-Control: no-cache (1.1)  </li>
<li>Pragma: no-cache  (1.0)  表示告诉客户端不要使用缓存</li>
<li>Connection:close/Keep-Alive   </li>
<li>Date:Tue, 11 Jul 2000 18:23:51 GMT</li>
</ul>
<h3 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h3><p>​    页面展示内容, 和网页右键查看的源码一样</p>
<h1 id="第四章-Servlet入门-最重要的东西"><a href="#第四章-Servlet入门-最重要的东西" class="headerlink" title="第四章-Servlet入门(最重要的东西)"></a>第四章-Servlet入门(最重要的东西)</h1><h2 id="实操-使用IDEA创建web工程配置tomcat"><a href="#实操-使用IDEA创建web工程配置tomcat" class="headerlink" title="实操-使用IDEA创建web工程配置tomcat"></a>实操-使用IDEA创建web工程配置tomcat</h2><h3 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h3><ul>
<li>能够在IDEA配置tomcat 并且创建web工程</li>
</ul>
<h3 id="2-讲解"><a href="#2-讲解" class="headerlink" title="2.讲解"></a>2.讲解</h3><h4 id="2-1配置tomcat"><a href="#2-1配置tomcat" class="headerlink" title="2.1配置tomcat"></a>2.1配置tomcat</h4><p>我们要将idea和tomcat集成到一起，可以通过idea就控制tomcat的启动和关闭：</p>
<p> <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555838575577.png" alt="1555838575577"></p>
<p> <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555838600225.png" alt="1555838600225"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555838669879.png" alt="1555838669879"> </p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555838727262.png" alt="1555838727262"></p>
<h4 id="2-2创建JavaWeb工程"><a href="#2-2创建JavaWeb工程" class="headerlink" title="2.2创建JavaWeb工程"></a>2.2创建JavaWeb工程</h4><h5 id="2-2-1web工程创建"><a href="#2-2-1web工程创建" class="headerlink" title="2.2.1web工程创建"></a>2.2.1web工程创建</h5><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/200.png" alt="1555838784099"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555902807303.png" alt="1555902807303"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555902832195.png" alt="1555902832195"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555902959035.png" alt="1555902959035"></p>
<h5 id="2-2-2-发布"><a href="#2-2-2-发布" class="headerlink" title="2.2.2 发布"></a>2.2.2 发布</h5><ul>
<li>情况一: 已经关联成功的情况(因为我创建项目的时候, 已经选择了tomcat)</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555903047439.png" alt="1555903047439"> </p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555903115979.png" alt="1555903115979"></p>
<ul>
<li>情况二:  如果之前没有选择tomcat, 现在就需要自己关联发布</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555903217846.png" alt="1555903217846"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555903238067.png" alt="1555903238067"></p>
<h3 id="3-小结"><a href="#3-小结" class="headerlink" title="3.小结"></a>3.小结</h3><ol>
<li>配置tomcat(选择local)</li>
<li>创建javaweb项目,选择Java Enterprise</li>
</ol>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/200.png" alt="1557912694615"> </p>
<ol start="3">
<li>发布</li>
</ol>
<ol start="4">
<li>目录结构</li>
</ol>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/image-20191208115840205.png" alt="image-20191208115840205"> </p>
<blockquote>
<p>先看笔记 配置发布一下, 如果看笔记配置不出来, 看视频 ( 自己操作&lt;=30分钟), 问同桌, 老师</p>
</blockquote>
<h2 id="知识点-Servlet概述"><a href="#知识点-Servlet概述" class="headerlink" title="知识点-Servlet概述"></a>知识点-Servlet概述</h2><h3 id="1-目标-1"><a href="#1-目标-1" class="headerlink" title="1.目标"></a>1.目标</h3><ul>
<li>知道什么是Servlet,Servlet作用</li>
</ul>
<h3 id="2-讲解-1"><a href="#2-讲解-1" class="headerlink" title="2.讲解"></a>2.讲解</h3><h4 id="2-1-什么是Servlet"><a href="#2-1-什么是Servlet" class="headerlink" title="2.1 什么是Servlet"></a>2.1 什么是Servlet</h4><p>​    Servlet **运行在服务端(tomcat)**的Java小程序(对象)，是sun公司提供一套规范. 就是动态资源</p>
<h4 id="2-2Servlet作用"><a href="#2-2Servlet作用" class="headerlink" title="2.2Servlet作用"></a>2.2Servlet作用</h4><p>​    用来接收、处理客户端请求、响应给浏览器的动态资源。</p>
<p>​    但servlet的实质就是java代码，通过java的API动态的向客户端输出内容</p>
<h4 id="2-3-servlet与普通的java程序的区别"><a href="#2-3-servlet与普通的java程序的区别" class="headerlink" title="2.3 servlet与普通的java程序的区别"></a>2.3 servlet与普通的java程序的区别</h4><ol>
<li>必须实现servlet接口</li>
<li>必须在servlet容器（服务器 tomcat）中运行</li>
<li>servlet程序可以接收用户请求参数以及向浏览器输出数据</li>
</ol>
<h3 id="3-小结-1"><a href="#3-小结-1" class="headerlink" title="3.小结"></a>3.小结</h3><ol>
<li>Servlet是运行在服务器端java小程序, 动态资源</li>
<li>Servlet的作用:  接收请求,做出响应</li>
</ol>
<h2 id="案例-Servlet入门案例"><a href="#案例-Servlet入门案例" class="headerlink" title="案例-Servlet入门案例"></a>案例-Servlet入门案例</h2><h3 id="1-需求"><a href="#1-需求" class="headerlink" title="1.需求"></a>1.需求</h3><p>​    在IDEA编写Servlet,发布到Tomcat. 在浏览器输入路径请求, 控制台打印Hello… </p>
<h3 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h3><h4 id="2-1配置文件方式实现"><a href="#2-1配置文件方式实现" class="headerlink" title="2.1配置文件方式实现"></a>2.1配置文件方式实现</h4><ol>
<li>创建web工程</li>
<li>创建一个类实现Servlet接口</li>
<li>在web.xml配置servlet的映射路径</li>
</ol>
<h4 id="2-2注解方式实现"><a href="#2-2注解方式实现" class="headerlink" title="2.2注解方式实现"></a>2.2注解方式实现</h4><ol>
<li>创建web工程</li>
<li>创建一个类实现Servlet接口</li>
<li>在这个类上面添加@WebServlet(“访问的路径”)</li>
</ol>
<h3 id="3-实现"><a href="#3-实现" class="headerlink" title="3.实现"></a>3.实现</h3><h4 id="3-1配置文件方式实现"><a href="#3-1配置文件方式实现" class="headerlink" title="3.1配置文件方式实现"></a>3.1配置文件方式实现</h4><ul>
<li>在com.itheima.web包下创建一个类实现Servlet接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo01</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//服务方法: 处理请求的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>web.xml配置（该文件在web/WEB-INF 文件夹下）：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;web-app xmlns=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span><br><span class="line">           xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">           xsi:schemaLocation=<span class="string">&quot;http://java.sun.com/xml/ns/javaee</span></span><br><span class="line"><span class="string">		  http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span></span><br><span class="line">           version=<span class="string">&quot;2.5&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置Servlet--&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;!--servlet-name: 名字 随便取; 一般就是类名--&gt;</span><br><span class="line">        &lt;servlet-name&gt;ServletDemo01&lt;/servlet-name&gt;</span><br><span class="line">        &lt;!--servlet-class:Servlet这个类的全限定名--&gt;</span><br><span class="line">        &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">com</span>.<span class="title">itheima</span>.<span class="title">web</span>.<span class="title">ServletDemo01</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line">        &lt;!--servlet-name: 必须和servlet标签里面的servlet-name一样--&gt;</span><br><span class="line">        &lt;servlet-name&gt;ServletDemo01&lt;/servlet-name&gt;</span><br><span class="line">        &lt;!--url-pattern: 配置访问的路径--&gt;</span><br><span class="line">        &lt;url-pattern&gt;/demo01&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">&lt;/web-app&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="3-2注解方式实现"><a href="#3-2注解方式实现" class="headerlink" title="3.2注解方式实现"></a>3.2注解方式实现</h4><ul>
<li>在com.itheima.web包下创建一个类实现Servlet接口, 添加注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo02&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo02</span> <span class="keyword">implements</span> <span class="title">Servlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>浏览器地址栏输入：<a href="http://localhost:8080/day27_servlet/demo02">http://localhost:8080/day27_servlet/demo02</a></p>
<h3 id="4-小结"><a href="#4-小结" class="headerlink" title="4.小结"></a>4.小结</h3><h4 id="4-1-如果出现实现Servlet报错"><a href="#4-1-如果出现实现Servlet报错" class="headerlink" title="4.1 如果出现实现Servlet报错"></a>4.1 如果出现实现Servlet报错</h4><ul>
<li>检查当前的工程是否依赖了Tomcat</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555904633352.png" alt="1555904633352"></p>
<ul>
<li>如果没有依赖, 依赖tomcat</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555905478996.png" alt="1555905478996"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555905493524.png" alt="1555905493524"> </p>
<h4 id="4-2配置文件方式与注解方式比较"><a href="#4-2配置文件方式与注解方式比较" class="headerlink" title="4.2配置文件方式与注解方式比较"></a>4.2配置文件方式与注解方式比较</h4><p>​    注解方式简化的javaweb代码开发，可以省略web.xml配置文件. </p>
<p>​    但是配置文件方式必须掌握的(后面在框架或者大项目里面会使用到的)  </p>
<h4 id="4-3步骤回顾"><a href="#4-3步骤回顾" class="headerlink" title="4.3步骤回顾"></a>4.3步骤回顾</h4><ul>
<li>xml方式<ul>
<li>创建一个类实现Servlet接口</li>
<li>在web.xml配置servlet</li>
</ul>
</li>
<li>注解方式<ul>
<li>创建一个类实现Servlet接口</li>
<li>在类上面添加@WebServlet(“访问的路径”)</li>
</ul>
</li>
</ul>
<h2 id="知识点-入门案例原理和路径"><a href="#知识点-入门案例原理和路径" class="headerlink" title="知识点-入门案例原理和路径"></a>知识点-入门案例原理和路径</h2><h3 id="1-目标-2"><a href="#1-目标-2" class="headerlink" title="1.目标"></a>1.目标</h3><ul>
<li>掌握Servlet执行原理和Servlet路径的配置url-pattern</li>
</ul>
<h3 id="2-讲解-2"><a href="#2-讲解-2" class="headerlink" title="2.讲解"></a>2.讲解</h3><h4 id="2-1Servlet执行原理"><a href="#2-1Servlet执行原理" class="headerlink" title="2.1Servlet执行原理"></a>2.1Servlet执行原理</h4><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/tu_31.png" alt="img"></p>
<p>通过上述流程图我们重点需要掌握如下几个点：</p>
<ul>
<li>Servlet对象是由服务器创建(反射)</li>
<li>request与response对象也是由tomcat服务器创建</li>
<li>service()方法也是服务器调用的</li>
</ul>
<h4 id="2-3-Servlet路径的配置url-pattern"><a href="#2-3-Servlet路径的配置url-pattern" class="headerlink" title="2.3 Servlet路径的配置url-pattern"></a>2.3 Servlet路径的配置url-pattern</h4><p>url-pattern配置方式共有三种: </p>
<ul>
<li>完全路径匹配: <strong>以 / 开始</strong>.      注: 访问的路径不能多一个字母也不能少一个</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如: 配置了&#x2F;demo01  请求的时候必须是: &#x2F;demo01  </span><br></pre></td></tr></table></figure>

<ul>
<li>目录匹配”<strong>以 / 开始需要以 * 结束</strong>.    注: Servlet里面用的 不多, 但是过滤器里面通常就使用目录匹配 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如:  配置&#x2F;* 访问&#x2F;a, &#x2F;aa, &#x2F;aaa; 配置 &#x2F;aa&#x2F;*  访问 &#x2F;aa&#x2F;b , &#x2F;aa&#x2F;cc</span><br></pre></td></tr></table></figure>

<ul>
<li>扩展名匹配<strong>不能以 / 开始, 以 * 开始的 .</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如:  *.action;  访问: aa.action, bb.action, c.action;   错误写法: &#x2F;*.do, 不可以写*.jsp,*.html</span><br></pre></td></tr></table></figure>

<p>注意的地方:</p>
<ul>
<li>一个路径只能对应一个servlet, 但是一个servlet可以有多个路径 </li>
</ul>
<ul>
<li>tomcat获得匹配路径时，优先级顺序：完全路径匹配&gt; 目录匹配 &gt; 扩展名匹配 </li>
</ul>
<h3 id="3-小结-2"><a href="#3-小结-2" class="headerlink" title="3.小结"></a>3.小结</h3><ol>
<li>讲Servlet原理目的让大家对Servlet执行有一个深入认识, 只需要能懂就可以. 具体操作是服务器(创建servlet,执行service), <strong>你【重点】要做的就是写出Servlet</strong></li>
<li>路径有多种方式, 一般用<strong>完全路径匹配</strong></li>
</ol>
<h1 id="第五章-Servlet进阶"><a href="#第五章-Servlet进阶" class="headerlink" title="第五章-Servlet进阶"></a>第五章-Servlet进阶</h1><h2 id="知识点-Servlet的生命周期"><a href="#知识点-Servlet的生命周期" class="headerlink" title="知识点-Servlet的生命周期"></a>知识点-Servlet的生命周期</h2><h3 id="1-目标-3"><a href="#1-目标-3" class="headerlink" title="1.目标"></a>1.目标</h3><ul>
<li>掌握Servlet的生命周期</li>
</ul>
<h3 id="2-讲解-3"><a href="#2-讲解-3" class="headerlink" title="2.讲解"></a>2.讲解</h3><h4 id="2-1生命周期概述"><a href="#2-1生命周期概述" class="headerlink" title="2.1生命周期概述"></a>2.1生命周期概述</h4><p>​    一个对象从创建到销毁的过程</p>
<h4 id="2-2Servlet生命周期方法"><a href="#2-2Servlet生命周期方法" class="headerlink" title="2.2Servlet生命周期方法"></a>2.2Servlet生命周期方法</h4><p>​    servlet从创建到销毁的过程</p>
<p>​    出生：（初始化）用户第一次访问时执行。</p>
<p>​    活着：（服务）应用活着。每次访问都会执行。</p>
<p>​    死亡：（销毁）应用卸载。</p>
<p>​    serrvlet生命周期方法:</p>
<p>​        init(ServletConfig config)</p>
<p>​        service(ServletRequest req, ServletResponse res)</p>
<p>​        destroy()</p>
<h4 id="2-3Servlet生命周期描述"><a href="#2-3Servlet生命周期描述" class="headerlink" title="2.3Servlet生命周期描述"></a>2.3Servlet生命周期描述</h4><ol>
<li><p>常规【重点】</p>
<p>​    默认情况下, 来了第一次请求, 会调用init()方法进行初始化【调用一次】</p>
<p>​    任何一次请求 都会调用service()方法处理这个请求</p>
<p>​    服务器正常关闭或者项目从服务器移除, 调用destory()方法进行销毁【调用一次】</p>
</li>
<li><p>扩展</p>
<p>​    servlet是单例多线程的, 尽量不要在servlet里面使用值可变的全局(成员)变量,可能会导致线程不安全</p>
<p>​    单例: 只有一个对象(init()调用一次, 创建一次)</p>
<p>​    多线程: 服务器会针对每次请求, 开启一个线程调用service()方法处理这个请求</p>
</li>
</ol>
<h4 id="2-4-ServletConfig【了解】"><a href="#2-4-ServletConfig【了解】" class="headerlink" title="2.4. ServletConfig【了解】"></a>2.4. ServletConfig【了解】</h4><p>​    Servlet的配置对象, 可以使用用ServletConfig来获得Servlet的初始化参数,<strong>在SpringMVC里面会遇到</strong></p>
<ul>
<li>先在配置文件里面配置初始化参数</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1537837644263.png" alt="1537837644263"></p>
<ul>
<li>可以通过akey获得aaa</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1537837616004.png" alt="1537837616004"></p>
<h4 id="2-5-启动项"><a href="#2-5-启动项" class="headerlink" title="2.5  启动项"></a>2.5  启动项</h4><p>​    Servlet默认情况下什么是创建? 默认情况下是第一次请求的时候.   </p>
<p>​    如果我想让Servlet提前创建(服务器启动的时候), 这个时候就可以使用启动项  <strong>在SpringMVC里面会遇到</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1555981767256.png" alt="1555981767256"></p>
<h3 id="3-小结-3"><a href="#3-小结-3" class="headerlink" title="3.小结"></a>3.小结</h3><ol>
<li><p>Servlet生命周期方法</p>
<ul>
<li>init() 初始化</li>
<li>service() 服务</li>
<li>distory() 销毁</li>
</ul>
</li>
<li><p>Servlet生命周期描述【面试题】</p>
<p>默认情况下, 第一次请求的时候, 调用init()方法进行初始化【调用一次】</p>
<p>任何一次请求, 都会调用service()方法进行处理这个请求</p>
<p>服务器正常关闭/项目从服务器移除, 调用destory()方法进行销毁【调用一次】</p>
<blockquote>
<p>Servlet是单例多线程的</p>
</blockquote>
<p>​    </p>
</li>
</ol>
<h2 id="知识点-Servlet体系结构-重点"><a href="#知识点-Servlet体系结构-重点" class="headerlink" title="知识点-Servlet体系结构(重点)"></a>知识点-Servlet体系结构(重点)</h2><h3 id="1-目标-4"><a href="#1-目标-4" class="headerlink" title="1.目标"></a>1.目标</h3><ul>
<li>掌握Servlet的继承关系,能够使用IDEA直接创建Servlet</li>
</ul>
<h3 id="2-讲解-4"><a href="#2-讲解-4" class="headerlink" title="2.讲解"></a>2.讲解</h3><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/tu_30-1571447571193.png" alt="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/"></p>
<ul>
<li><p>Servlet接口</p>
<p>​    前面我们已经学会创建一个类实现sevlet接口的方式开发Servlet程序，实现Servlet接口的时候，我们必须实现接口的所有方法。但是，在servlet中，真正执行程序逻辑的是service，对于servlet的初始化和销毁，由服务器调用执行，开发者本身不需要关心。因此，有没有一种更加简洁的方式来开发servlet程序呢？</p>
</li>
</ul>
<p>我们先来查阅API回顾Servlet接口：<br><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/tu_32-1571447571193.png"></p>
<p>​    由上图可知在servlet接口规范下，官方推荐使用继承的方式，继承GenericServlet 或者HttpServlet来实现接口，那么我们接下来再去查看一下这两个类的API：</p>
<ul>
<li>GenericServlet 类</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/tu_33-1571447571193.png"></p>
<p>​    阅读上图API可知，GenericServlet 是一个类，它简化了servlet的开发，已经提供好了一些servlet接口所需的方法，我们开发者只需要重写service方法即可</p>
<p>我们来使用GenericServlet 创建servlet：</p>
<ol>
<li>创建一个类</li>
<li>继承GenericServlet</li>
<li>重写service方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.GenericServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;GenericDemoServlet&quot;,urlPatterns = &quot;/generic&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemoServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;GenericDemoServlet执行.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    虽然，GenericServlet已经简化了servlet开发，但是我们平时开发程序需要按照一种互联网传输数据的协议来开发程序——http协议，因此，sun公司又专门提供了HttpServlet，来适配这种协议下的开发。</p>
<ul>
<li>HttpServlet</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/tu_34-1571447571193.png"></p>
<p>阅读上图的API可知，继承HttpServlet，我们需要重写doGet、doPost等方法中一个即可，根据Http不同的请求，我们需要实现相应的方法。</p>
<p>我们来使用HttpServlet创建servlet：    </p>
<ol>
<li>创建一个类</li>
<li>继承HttpServlet</li>
<li>重写doGet方法和doPost方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包名:com.itheima.servlet</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Leevi</span></span><br><span class="line"><span class="comment"> * 日期2020-07-11  15:39</span></span><br><span class="line"><span class="comment"> * Servlet的常用的编写方法:</span></span><br><span class="line"><span class="comment"> * 1. 写一个类继承HttpServlet，重写doGet和doPost方法</span></span><br><span class="line"><span class="comment"> *    1.1 doGet()方法，是处理来自客户端的get请求</span></span><br><span class="line"><span class="comment"> *    1.2 doPost()方法，是处理来自客户端的post请求</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    通常情况下:服务器端针对同一个请求(不同的请求方式)不会做不同的处理,所以我们会选择在doGet中调用doPost</span></span><br><span class="line"><span class="comment"> * 2. 配置servlet的映射路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo02&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo02</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;编写很多代码处理这次post请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    通过以上两个API阅读，同学们注意一个细节HttpServlet是GenericServlet的子类，它增强了GenericServlet一些功能，因此，在后期使用的时候，我们都是选择继承HttpServlet来开发servlet程序。</p>
<h3 id="3-小结-4"><a href="#3-小结-4" class="headerlink" title="3.小结"></a>3.小结</h3><ol>
<li>继承关系</li>
</ol>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/tu_30.png" alt="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/"></p>
<ol start="2">
<li>我们可以直接创建一个类继承HttpServlet, 直接在IDEA里面new Servlet</li>
</ol>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1557991084502.png" alt="1557991084502"></p>
<h3 id="4-扩展-Servlet体系源码"><a href="#4-扩展-Servlet体系源码" class="headerlink" title="4.扩展(Servlet体系源码)"></a>4.扩展(Servlet体系源码)</h3><ol>
<li>看HttpServlet的service()方法</li>
</ol>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/image-20191208151858364.png" alt="image-20191208151858364"> </p>
<h1 id="补充案例-登录"><a href="#补充案例-登录" class="headerlink" title="补充案例:登录"></a>补充案例:登录</h1><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/login.jpg"></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>login.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        怎么在页面上指定提交给LoginServlet</span></span><br><span class="line"><span class="comment">        项目的虚拟路径/servlet的映射路径</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/LoginDemo/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>LoginServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Leevi</span></span><br><span class="line"><span class="comment"> * 日期2020-07-11  15:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 使用request获取请求参数</span></span><br><span class="line">        String username = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 校验用户名和密码</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;jay&quot;</span>.equals(username) &amp;&amp; <span class="string">&quot;123456&quot;</span>.equals(password)) &#123;</span><br><span class="line">            <span class="comment">//登录成功</span></span><br><span class="line">            response.getWriter().write(<span class="string">&quot;login success&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//登录失败</span></span><br><span class="line">            response.getWriter().write(<span class="string">&quot;login failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="第六章-ServletContext"><a href="#第六章-ServletContext" class="headerlink" title="第六章-ServletContext"></a>第六章-ServletContext</h1><h2 id="知识点-ServletContext概述"><a href="#知识点-ServletContext概述" class="headerlink" title="知识点-ServletContext概述"></a>知识点-ServletContext概述</h2><h3 id="1-目标-5"><a href="#1-目标-5" class="headerlink" title="1.目标"></a>1.目标</h3><ul>
<li>知道什么是ServletContext, 以及作用</li>
</ul>
<h3 id="2-讲解-5"><a href="#2-讲解-5" class="headerlink" title="2.讲解"></a>2.讲解</h3><h4 id="2-1-servletContext概述"><a href="#2-1-servletContext概述" class="headerlink" title="2.1 servletContext概述"></a>2.1 servletContext概述</h4><p>​    ServletContext: 是一个全局对象, 上下文对象. </p>
<p>​    服务器为每一个应用(项目)都创建了一个ServletContext对象。 ServletContext属于整个应用(项目)的，不局限于某个Servlet。并且整个项目有且只会有一个ServletContext对象</p>
<h4 id="2-2-ServletContext作用"><a href="#2-2-ServletContext作用" class="headerlink" title="2.2 ServletContext作用"></a>2.2 ServletContext作用</h4><p>​    作为域对象存取数据,让Servlet共享(掌握)</p>
<p>​    获得文件MIME类型（文件下载）(了解)  </p>
<p>​    获得全局初始化参数(了解)</p>
<p>​    获取web资源路径  ，可以将Web资源转换成字节输入流(掌握)</p>
<h3 id="3-小结-5"><a href="#3-小结-5" class="headerlink" title="3.小结"></a>3.小结</h3><h2 id="知识点-ServletContext的功能"><a href="#知识点-ServletContext的功能" class="headerlink" title="知识点-ServletContext的功能"></a>知识点-ServletContext的功能</h2><h3 id="1-目标-6"><a href="#1-目标-6" class="headerlink" title="1.目标"></a>1.目标</h3><ul>
<li>掌握ServletContext的作用</li>
</ul>
<h3 id="2-路径"><a href="#2-路径" class="headerlink" title="2.路径"></a>2.路径</h3><ul>
<li>作为域对象存取数据</li>
<li>获得文件mini类型（文件下载）</li>
<li>获得全局初始化参数</li>
<li>获取web资源路径</li>
</ul>
<h3 id="3-讲解"><a href="#3-讲解" class="headerlink" title="3.讲解"></a>3.讲解</h3><h4 id="3-1作为域对象存取值【重点】"><a href="#3-1作为域对象存取值【重点】" class="headerlink" title="3.1作为域对象存取值【重点】"></a>3.1作为域对象存取值【重点】</h4><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/image-20191208154333086.png" alt="image-20191208154333086">  </p>
<ol>
<li><p>API</p>
<ul>
<li>getAttribute(String name) ;向ServletContext对象的map取数据</li>
<li>setAttribute(String name, Object object) ;从ServletContext对象的map中添加数据</li>
<li>removeAttribute(String name) ;根据name去移除数据</li>
</ul>
</li>
<li><p>代码</p>
<ul>
<li><p>ServletDemo01</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">- 包名:$&#123;PACKAGE_NAME&#125;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">- <span class="doctag">@author</span> Leevi</span></span><br><span class="line"><span class="comment">  - 日期2020-07-11  16:11</span></span><br><span class="line"><span class="comment">  - 目标: 在ServletDemo02中获取servletDemo01中的一个变量的值</span></span><br><span class="line"><span class="comment">  - 1. 获取ServletContext对象:</span></span><br><span class="line"><span class="comment">  - getServletContext()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo01&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo01</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String name = <span class="string">&quot;周杰棍&quot;</span>;</span><br><span class="line">        <span class="comment">//1. 获取ServletContext对象</span></span><br><span class="line">        ServletContext servletContext = getServletContext();</span><br><span class="line">        <span class="comment">//2. 往容器ServletContext中存值</span></span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>ServletDemo02</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">- 包名:$&#123;PACKAGE_NAME&#125;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">- <span class="doctag">@author</span> Leevi</span></span><br><span class="line"><span class="comment">- 日期2020-07-11  16:11</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo02&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo02</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取那个容器ServletContext</span></span><br><span class="line">        ServletContext servletContext = getServletContext();</span><br><span class="line">        <span class="comment">//2. 从容器ServletContext中获取数据</span></span><br><span class="line">        String name = (String) servletContext.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;在ServletDemo02中获取的name是:&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="3-2-获得文件mime-type-了解"><a href="#3-2-获得文件mime-type-了解" class="headerlink" title="3.2 获得文件mime-type(了解)"></a>3.2 获得文件mime-type(了解)</h4><ol>
<li>getMimeType(String file) </li>
<li>代码</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//根据文件名获得文件的mini类型</span></span><br><span class="line"><span class="comment">//1.获得ServletContext</span></span><br><span class="line"><span class="comment">//2.调用getMimeType()方法</span></span><br><span class="line">String file01 = <span class="string">&quot;a.mp3&quot;</span>;</span><br><span class="line">String file02 = <span class="string">&quot;b.png&quot;</span>;</span><br><span class="line">String mimeType01 = getServletContext().getMimeType(file01);</span><br><span class="line">String mimeType02 = getServletContext().getMimeType(file02);</span><br><span class="line"></span><br><span class="line">response.getWriter().print(<span class="string">&quot;ServletDemo05...&quot;</span>+mimeType01+<span class="string">&quot;:&quot;</span>+mimeType02);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-3-获得全局初始化参数-了解"><a href="#3-3-获得全局初始化参数-了解" class="headerlink" title="3.3.获得全局初始化参数(了解)"></a>3.3.获得全局初始化参数(了解)</h4><ul>
<li>String getInitParameter(String name) ; //根据配置文件中的key得到value; </li>
</ul>
<p>在web.xml配置</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1537841534534.png" alt="1537841534534"></p>
<p>通过ServletContext来获得</p>
<p> <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/1537841552654.png" alt="1537841552654"></p>
<h4 id="3-4-获取web资源路径"><a href="#3-4-获取web资源路径" class="headerlink" title="3.4 获取web资源路径"></a>3.4 获取web资源路径</h4><ol>
<li>API<ul>
<li>String  getRealPath(String path);根据资源名称得到资源的绝对路径.</li>
<li>getResourceAsStream(String path) ;返回制定路径文件的流</li>
</ul>
</li>
</ol>
<blockquote>
<p> 注意: filepath:直接从项目的根目录开始写</p>
</blockquote>
<ol start="2">
<li>代码</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包名:$&#123;PACKAGE_NAME&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Leevi</span></span><br><span class="line"><span class="comment"> * 日期2020-07-11  16:41</span></span><br><span class="line"><span class="comment"> * 使用ServletContext获取web里面的资源文件的真实路径</span></span><br><span class="line"><span class="comment"> * 目标: 使用字节输入流，读取mm.jpg这张图片</span></span><br><span class="line"><span class="comment"> *     方法1: FileInputStream</span></span><br><span class="line"><span class="comment"> *     方法2: ClassLoader</span></span><br><span class="line"><span class="comment"> *     方法3: 使用ServletContext</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在web项目中，将文件转换成流，有两种方式</span></span><br><span class="line"><span class="comment"> * 1. 如果文件在resources里面，使用类加载器</span></span><br><span class="line"><span class="comment"> * 2. 如果文件在web里面，使用ServletContext</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo04&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo04</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//方法1: 使用FileInputStream,此时使用磁盘路径</span></span><br><span class="line">        <span class="comment">//InputStream is = new FileInputStream(&quot;C:/JavaEE_Relation/JavaEE98/itheima98_web/day24_servletcontext_03/web/mm.jpg&quot;);</span></span><br><span class="line">        <span class="comment">//方法2: 使用ClassLoader将文件转换成流</span></span><br><span class="line">        <span class="comment">//InputStream is = ServletDemo04.class.getClassLoader().getResourceAsStream(&quot;../../mm.jpg&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法3: 使用ServletContext可以获取web里面的资源的真实路径</span></span><br><span class="line">        ServletContext servletContext = getServletContext();</span><br><span class="line">        <span class="comment">//String realPath = servletContext.getRealPath(&quot;mm.jpg&quot;);</span></span><br><span class="line"></span><br><span class="line">        InputStream is = servletContext.getResourceAsStream(<span class="string">&quot;mm.jpg&quot;</span>);</span><br><span class="line">        System.out.println(is);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-小结-1"><a href="#4-小结-1" class="headerlink" title="4.小结"></a>4.小结</h3><ol>
<li><p>作为域对象存取数据【共享】</p>
<ul>
<li>setAttribute(String name,Object value)  存</li>
<li>getAttribute(String name)  取</li>
<li>removeAttribute(String name) 移除</li>
</ul>
</li>
<li><p>获得文件的Mime类型</p>
<ul>
<li>getMineType(String fileName);</li>
</ul>
</li>
<li><p>获得全局初始化参数</p>
<ul>
<li>在web.xml配置</li>
<li>getInitParameter(String name);</li>
</ul>
</li>
<li><p>获得web资源路径【已经在web目录了】</p>
<ul>
<li>getRealPath(String file);   获得文件的绝对路径</li>
<li>getReSourceAsStream(String file);   获得文件流</li>
</ul>
</li>
</ol>
<h2 id="案例-统计网站被访问的总次数"><a href="#案例-统计网站被访问的总次数" class="headerlink" title="案例-统计网站被访问的总次数"></a>案例-统计网站被访问的总次数</h2><h3 id="1-需求-1"><a href="#1-需求-1" class="headerlink" title="1.需求"></a>1.需求</h3><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/tu_3.gif" alt="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/"></p>
<ul>
<li>在页面中显示您是第x位访问的用户.</li>
</ul>
<h3 id="2-思路分析"><a href="#2-思路分析" class="headerlink" title="2.思路分析"></a>2.思路分析</h3><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/HTS/img/count.jpg" alt="image-20191208160926430"> </p>
<h3 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h3><ul>
<li>CountServlet</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包名:$&#123;PACKAGE_NAME&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Leevi</span></span><br><span class="line"><span class="comment"> * 日期2020-07-11  17:04</span></span><br><span class="line"><span class="comment"> * 每次接收到请求，则往容器中的计数器上面+1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/count&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取容器中计数器原本的次数</span></span><br><span class="line">        ServletContext servletContext = getServletContext();</span><br><span class="line">        Object count = servletContext.getAttribute(<span class="string">&quot;count&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断ServletContext中是否有计数器</span></span><br><span class="line">        <span class="keyword">if</span> (count == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//说明当前是第一次访问</span></span><br><span class="line">            <span class="comment">//就往ServletContext中添加一个计数器</span></span><br><span class="line">            servletContext.setAttribute(<span class="string">&quot;count&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//说明我不是第一次访问，那么就要对原来的计数器+1，再存进去</span></span><br><span class="line">            <span class="keyword">int</span> number = ((<span class="keyword">int</span>) count) + <span class="number">1</span>;</span><br><span class="line">            servletContext.setAttribute(<span class="string">&quot;count&quot;</span>,number);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2. 向客户端响应WelCome</span></span><br><span class="line">        response.getWriter().write(<span class="string">&quot;WelCome!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ShowServlet</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包名:$&#123;PACKAGE_NAME&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Leevi</span></span><br><span class="line"><span class="comment"> * 日期2020-07-11  17:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/show&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShowServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//从容器中获取计数器的值</span></span><br><span class="line">        ServletContext servletContext = getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count = (<span class="keyword">int</span>) servletContext.getAttribute(<span class="string">&quot;count&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将count响应给客户端</span></span><br><span class="line">        response.getWriter().print(<span class="string">&quot;access count is:&quot;</span>+count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-小结-2"><a href="#4-小结-2" class="headerlink" title="4.小结"></a>4.小结</h3>]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>http协议</tag>
      </tags>
  </entry>
  <entry>
    <title>html语法01--html基础</title>
    <url>/jwangcloud/4252999164/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/html.jpeg"></p>
<h3 id="1-html简介"><a href="#1-html简介" class="headerlink" title="1.html简介"></a>1.html简介</h3><span id="more"></span>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">标记语言：注重文档结构</span><br><span class="line">程序语言：注重控制计算机</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">常用标记语言：</span><br><span class="line">Xml: XML是元标识语言，用户可以根据自身的需要定义一些标记 </span><br><span class="line">Html: 这是一种用来制作超文本文档的简单标记语言，用其编写的文档通常后缀为html</span><br><span class="line">XHTML:HTML的增强版，它的灵活性和扩展性会适应未来网络应用的更多需求,语法要求更严格</span><br><span class="line">HTML5: html最新标准</span><br><span class="line"></span><br><span class="line">js css html 关系</span><br><span class="line">html： 负责创建，负责语义的表达，解决了页面“显示内容是什么”的问题</span><br><span class="line">css：负责解决网页中内容该如何显示的问题</span><br><span class="line">javascript：负责讲解网页内容对事件该做出什么样的反应</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-html结构"><a href="#2-html结构" class="headerlink" title="2.html结构"></a>2.html结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;                     &#x2F;&#x2F;申明html文档</span><br><span class="line">&lt;html lang&#x3D;&quot;zh-Hans&quot;&gt;  </span><br><span class="line">    &lt;head&gt;                          &#x2F;&#x2F;head 头部标签</span><br><span class="line">        &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;      </span><br><span class="line">&#x2F;&#x2F;meta 无结束标签，通过对应的属性来设置编码格式（必要）、</span><br><span class="line">设备显示缩放、搜索引擎关键字、描述、浏览器内核渲染方式等内容。        </span><br><span class="line">		&lt;title&gt;Document&lt;&#x2F;title&gt;     &#x2F;&#x2F;title 设置网页标题</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;&lt;&#x2F;body&gt;                   &#x2F;&#x2F;body 内容</span><br><span class="line">&lt;&#x2F;html&gt;                             &#x2F;&#x2F;html 文档跟节点    </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-html-基础标签和元素"><a href="#3-html-基础标签和元素" class="headerlink" title="3.html 基础标签和元素"></a>3.html 基础标签和元素</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h: &lt;h1&gt;&lt;&#x2F;h1&gt;  标题，有1，2，3，4。。。等标题</span><br><span class="line">p:&lt;p&gt;&lt;&#x2F;p&gt;     段落  不识别回车和空格 （回车会识别为空格，一个或多个空格为一个空格）</span><br><span class="line">body:&lt;body&gt;&lt;&#x2F;body&gt;  网页上需要显示的信息，其html主体写在body里面</span><br><span class="line">meta：&lt;meta charset&#x3D;&quot;UTF-8&quot; http-equiv&#x3D;&quot;refresh&quot; content&#x3D;&quot;40&quot;&gt;  闭合标签，其中可设置字符集 </span><br><span class="line">		charset:标签属性 设置字符集</span><br><span class="line">		http-equiv: 网页刷新</span><br><span class="line">		content:刷新间隔秒数</span><br><span class="line">title:&lt;title&gt;&lt;&#x2F;title&gt;  标题，整个网页的标题</span><br><span class="line">hr:&lt;hr&gt;   水平线标签</span><br><span class="line">br:&lt;br&gt;   换行</span><br><span class="line">a:&lt;a href&#x3D;&quot;url&quot; target&#x3D;&quot;_blank&quot;&gt;&lt;&#x2F;a&gt;  超链接</span><br><span class="line">		target&#x3D;&quot;_blank&quot;  从新窗口打开 </span><br><span class="line">		&lt;a href&#x3D;“url” download&gt;链接文本&lt;&#x2F;a&gt;  下载到本地</span><br><span class="line">		&lt;a href&#x3D;&quot;#c2&quot;&gt;跳转到c2&lt;&#x2F;a&gt;  跳转到id&#x3D;c2所对应的标签</span><br><span class="line">img:&lt;img src&#x3D;&quot;images&#x2F;a1.png&quot;&gt;  浏览器展示图片</span><br><span class="line"></span><br><span class="line">b:&lt;b&gt;&lt;&#x2F;b&gt;  字体加粗</span><br><span class="line"></span><br><span class="line">语义化标签：</span><br><span class="line">	strong:&lt;&gt;&lt;&#x2F;&gt;  强调语句</span><br><span class="line">	em:&lt;&gt;&lt;&#x2F;&gt;   强调</span><br><span class="line">	div:&lt;&gt;&lt;&#x2F;&gt;  布局标签（通用容器）</span><br><span class="line">	article:&lt;&gt;&lt;&#x2F;&gt; 用于文章、新闻或博客，表示文档、页面、应用或一个独立的容器 可嵌套</span><br><span class="line">	section:&lt;&gt;&lt;&#x2F;&gt; 章节标签</span><br><span class="line">	aside:&lt;&gt;&lt;&#x2F;&gt; 指定附注栏，包括引述、侧栏、指向文章的一组链接、广告、友情链接、相关产品列表等</span><br><span class="line">	header:&lt;header&gt;&lt;&#x2F;header&gt; 网页的额外信息，比如网页的脚本语言和网页使用的字符集等</span><br><span class="line">	footer:&lt;&gt;&lt;&#x2F;&gt;  页脚	</span><br><span class="line">	nav:&lt;&gt;&lt;&#x2F;&gt; 标记导航，仅对文档中重要的链接使用</span><br><span class="line">	time:&lt;&gt;&lt;&#x2F;&gt; 时间</span><br><span class="line">	main:&lt;&gt;&lt;&#x2F;&gt; 页面主要内容，一个页面只使用一次			</span><br><span class="line">			</span><br><span class="line">特殊符号：</span><br><span class="line">		&amp;lt  &lt;</span><br><span class="line">		&amp;gt   &gt;</span><br><span class="line">		&amp;nbsp  空格</span><br><span class="line">		&amp;amp  &amp;</span><br><span class="line">		&amp;quot  &quot;</span><br><span class="line">		&amp;qpos  &#39;</span><br><span class="line"></span><br><span class="line">pre:&lt;pre&gt;&lt;&#x2F;pre&gt;  原样输出，适合编程语句的显示</span><br><span class="line"></span><br><span class="line">iframe框架：通过使用框架，你可以在同一个浏览器窗口中显示不止一个页面</span><br><span class="line">&lt;iframe src&#x3D;&quot;demo_iframe.htm&quot; name&#x3D;&quot;iframe_a&quot; scrolling&#x3D;&quot;yes&quot;&gt;&lt;&#x2F;iframe&gt;</span><br><span class="line">name：设置iframe的名称</span><br><span class="line"></span><br><span class="line">width：设置iframe的宽度，值可以为像素（不用添加“px”单位）和百分数</span><br><span class="line"></span><br><span class="line">height：设置iframe的高度，值可以为像素（不用添加“px”单位）和百分数</span><br><span class="line"></span><br><span class="line">src：设置iframe元素内需要显示页面或文件的URL地址，</span><br><span class="line">该属性的值可以由与之关联的a标签点击设置（通过将a标签的“target”</span><br><span class="line">属性的值设置为该iframe的“name”属性的值进行关联）</span><br><span class="line"></span><br><span class="line">frameborder：设置是否显示边框（0 表示不显示边框&#x2F; 1 表示要显示边框）</span><br><span class="line"></span><br><span class="line">scrolling：设置是否允许滚动（auto&#x2F;yes&#x2F;no）</span><br></pre></td></tr></table></figure>

<h3 id="4-html列表标签"><a href="#4-html列表标签" class="headerlink" title="4.html列表标签"></a>4.html列表标签</h3><table>
<thead>
<tr>
<th align="center">元素</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ol</td>
<td align="center">定义有序列表</td>
</tr>
<tr>
<td align="center">ul</td>
<td align="center">定义无序列表</td>
</tr>
<tr>
<td align="center">li</td>
<td align="center">列表内容</td>
</tr>
<tr>
<td align="center">dl</td>
<td align="center">自定义列表</td>
</tr>
<tr>
<td align="center">dt</td>
<td align="center">列表项目描述</td>
</tr>
<tr>
<td align="center">dd</td>
<td align="center">列表项目描述</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;h4&gt;无序列表:&lt;&#x2F;h4&gt;</span><br><span class="line">	&lt;ul&gt;</span><br><span class="line">	  &lt;li&gt;Coffee&lt;&#x2F;li&gt;</span><br><span class="line">	  &lt;li&gt;Tea&lt;&#x2F;li&gt;</span><br><span class="line">	  &lt;li&gt;Milk&lt;&#x2F;li&gt;</span><br><span class="line">	&lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;h4&gt;无序列表:&lt;&#x2F;h4&gt;</span><br><span class="line">	&lt;ol start&#x3D;’50’&gt;</span><br><span class="line">	  &lt;li&gt;Coffee&lt;&#x2F;li&gt;</span><br><span class="line">	  &lt;li&gt;Tea&lt;&#x2F;li&gt;</span><br><span class="line">	  &lt;li&gt;Milk&lt;&#x2F;li&gt;</span><br><span class="line">	&lt;&#x2F;ol&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;dl&gt;</span><br><span class="line">	 &lt;dt&gt;a&lt;&#x2F;dt&gt;</span><br><span class="line">	 &lt;dd&gt;a1&lt;&#x2F;dd&gt;</span><br><span class="line">	 &lt;dd&gt;a2&lt;&#x2F;dd&gt;</span><br><span class="line">	 &lt;dt&gt;b&lt;&#x2F;dt&gt;</span><br><span class="line">	 &lt;dd&gt;b1&lt;&#x2F;dd&gt;</span><br><span class="line">	 &lt;dd&gt;b2&lt;&#x2F;dd&gt;</span><br><span class="line">	 &lt;dt&gt;c&lt;&#x2F;dt&gt;</span><br><span class="line">	 &lt;dd&gt;c1&lt;&#x2F;dd&gt;</span><br><span class="line">	 &lt;dd&gt;c2&lt;&#x2F;dd&gt;</span><br><span class="line">&lt;&#x2F;dl&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-格式化标签"><a href="#5-格式化标签" class="headerlink" title="5.格式化标签"></a>5.格式化标签</h3><table>
<thead>
<tr>
<th align="center">标签</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">b</td>
<td align="center">粗字体</td>
</tr>
<tr>
<td align="center">em</td>
<td align="center">着重</td>
</tr>
<tr>
<td align="center">i</td>
<td align="center">斜体字</td>
</tr>
<tr>
<td align="center">small</td>
<td align="center">小号字</td>
</tr>
<tr>
<td align="center">strong</td>
<td align="center">加重语气</td>
</tr>
<tr>
<td align="center">sub</td>
<td align="center">下标字</td>
</tr>
<tr>
<td align="center">sup</td>
<td align="center">上标字</td>
</tr>
<tr>
<td align="center">ins</td>
<td align="center">插入字</td>
</tr>
<tr>
<td align="center">del</td>
<td align="center">删除字</td>
</tr>
</tbody></table>
<h3 id="6-语言分类"><a href="#6-语言分类" class="headerlink" title="6.语言分类"></a>6.语言分类</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">编程语言：python，运算用</span><br><span class="line">标记语言：结构化文档</span><br><span class="line">自然语言：信息搜索等</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>html基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Django框架10--项目部署</title>
    <url>/jwangcloud/3485546001/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/Django.jpeg"></p>
<h1 id="部署基本要求"><a href="#部署基本要求" class="headerlink" title="部署基本要求"></a>部署基本要求</h1><span id="more"></span>

<p>1.通过yum安装python3.5以上 使python程序不和系统本身python冲突(宝塔后台使用了默认<br>python)</p>
<p>2.安装虚拟环境</p>
<p>3.通过git ssh公钥下载部署代码</p>
<p>4.书写supervisord脚本，使用脚本启动项目</p>
<p>5.安装nginx</p>
<h1 id="app服务器部署"><a href="#app服务器部署" class="headerlink" title="app服务器部署"></a>app服务器部署</h1><p>1.安装python3</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /opt/mypython3</span><br><span class="line">wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz</span><br><span class="line">tar -zxvf Python-3.6.5.tgz</span><br><span class="line"><span class="built_in">cd</span> Python-3.6.5</span><br><span class="line">./configure --prefix=/opt/mypython3</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>


<p>2.安装虚拟环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;opt&#x2F;mypython3&#x2F;bin</span><br><span class="line"></span><br><span class="line">.&#x2F;pip3 install virtualenvwrapper</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>配置虚拟环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir ~&#x2F;Envs</span><br><span class="line">cd ~&#x2F;Envs</span><br><span class="line">virtualenv movie_online -p &#x2F;opt&#x2F;mypython3&#x2F;bin&#x2F;python3.6</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>激活虚拟环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source ~&#x2F;Envs&#x2F;movie_online&#x2F;bin&#x2F;activate</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.部署代码</p>
<p>生成ssh公钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>把公钥放入gitee私人设置</p>
<p>建目录 托代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;project</span><br><span class="line">cd &#x2F;project</span><br><span class="line">git clone git@gitee.com:pengmao&#x2F;MoDuXiXiaAPP.git movie_online</span><br><span class="line">mkdir &#x2F;project&#x2F;movie_online&#x2F;backend&#x2F;log</span><br><span class="line">mkdir &#x2F;project&#x2F;movie_online&#x2F;backend&#x2F;log&#x2F;gunicorn</span><br></pre></td></tr></table></figure>

<p>4.安装supervisor并使用</p>
<p>给虚拟环境安装pip 包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install -r &#x2F;project&#x2F;movie_online&#x2F;backend&#x2F;requirements.txt</span><br></pre></td></tr></table></figure>

<p>使用自带的python2.6安装supervisord</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deactivate</span><br><span class="line"></span><br><span class="line">pip install supervisor</span><br><span class="line"></span><br><span class="line">mkdir &#x2F;project&#x2F;supervisor</span><br><span class="line">cd &#x2F;project&#x2F;supervisor</span><br><span class="line">echo_supervisord_conf &gt; supervisor.conf</span><br><span class="line"></span><br><span class="line">mkdir &#x2F;project&#x2F;supervisor&#x2F;movie_online_log</span><br></pre></td></tr></table></figure>

<p>supervisord配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[program:movie_online]</span><br><span class="line">command&#x3D;&#x2F;root&#x2F;Envs&#x2F;movie_online&#x2F;bin&#x2F;gunicorn -c gunicorn_conf.py movie_1.wsgi</span><br><span class="line">directory&#x3D;&#x2F;project&#x2F;movie_online&#x2F;backend</span><br><span class="line">startsecs&#x3D;0</span><br><span class="line">stopwaitsecs&#x3D;0</span><br><span class="line">autostart&#x3D;true</span><br><span class="line">autorestart&#x3D;true</span><br><span class="line">stdout_logfile&#x3D;&#x2F;project&#x2F;supervisor&#x2F;movie_online_log&#x2F;gunicorn.log</span><br><span class="line">stderr_logfile&#x3D;&#x2F;project&#x2F;supervisor&#x2F;movie_online_log&#x2F;gunicorn.err</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>supervisord启动命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">supervisord -c &#x2F;project&#x2F;supervisor&#x2F;supervisor.conf</span><br><span class="line">supervisorctl -c &#x2F;project&#x2F;supervisor&#x2F;supervisor.conf status 察看supervisor的状态</span><br><span class="line">supervisorctl -c &#x2F;project&#x2F;supervisor&#x2F;supervisor.conf reload 重新载入 配置文件</span><br><span class="line">supervisorctl -c supervisor.conf stop 停止</span><br></pre></td></tr></table></figure>

<h4 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h4><p>新建日志文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;project&#x2F;logs</span><br><span class="line">mkdir &#x2F;project&#x2F;logs&#x2F;movie_online</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>nginx配置参考</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"> charset utf-8;</span><br><span class="line"> listen 80;</span><br><span class="line"> #server_name api.coolcity.tangrenapp.com;</span><br><span class="line"></span><br><span class="line"> client_max_body_size 5;</span><br><span class="line"> location &#x2F;static &#123;</span><br><span class="line">         client_max_body_size 50m;</span><br><span class="line">         alias &#x2F;project&#x2F;movie_online&#x2F;backend&#x2F;static;</span><br><span class="line">         allow all;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">         client_max_body_size 50m;</span><br><span class="line">         proxy_set_header Host $host;</span><br><span class="line">         proxy_pass http:&#x2F;&#x2F;0.0.0.0:8005;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#error_log &#x2F;root&#x2F;project&#x2F;logs&#x2F;modou&#x2F;error.log;</span><br><span class="line">error_log &#x2F;project&#x2F;logs&#x2F;movie_online&#x2F;error.log;</span><br><span class="line">access_log &#x2F;project&#x2F;logs&#x2F;movie_online&#x2F;access.log;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>最后收集静态文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;project&#x2F;movie_online&#x2F;backend</span><br><span class="line">source ~&#x2F;Envs&#x2F;movie_online&#x2F;bin&#x2F;activate</span><br><span class="line">python3.6 manage.py collectstatic</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="资源服务器"><a href="#资源服务器" class="headerlink" title="资源服务器"></a>资源服务器</h1><p>搭建nginx dav服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.12.2.tar.gz</span><br><span class="line">tar -zxvf nginx-1.12.2.tar.gz</span><br><span class="line">cd nginx-1.12.2</span><br><span class="line">mkdir &#x2F;opt&#x2F;mynginx</span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;opt&#x2F;mynginx --with-http_dav_module</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>dav配置</p>
<p>10.19.96.0/24; 开放内网网段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">        listen 30081;</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            #root &#x2F;var&#x2F;www&#x2F;media;</span><br><span class="line">            root &#x2F;www&#x2F;wwwroot&#x2F;file.coolcity.tangrenapp.com;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         #   client_body_temp_path &#x2F;data&#x2F;client_temp;</span><br><span class="line"></span><br><span class="line">            dav_methods PUT DELETE MKCOL COPY MOVE;</span><br><span class="line"></span><br><span class="line">            create_full_put_path  on;</span><br><span class="line">            dav_access            group:rw  all:r;</span><br><span class="line">            allow 10.19.96.0&#x2F;24;</span><br><span class="line">            deny all;</span><br><span class="line">         &#125;</span><br><span class="line">        error_log  logs&#x2F;pic_error.log;</span><br><span class="line">        access_log  logs&#x2F;pic_access.log;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>user = 我 or 其他人</p>
<p>发帖人(我) 删除权限  对 我的帖子<br>看帖子的人(其他人) 没有删除权限 对 我的帖子<br>小吧主(其他人) 有删除权限 对 我的帖子</p>
<p>权限管理系统 –》 第三方</p>
<p>实现的一种 -&gt; guradian</p>
<p>权限管理系统 -&gt; RBAC-&gt; guradian</p>
<ol>
<li>赋予权限</li>
<li>查看权限</li>
<li>删除权限</li>
</ol>
<p>短评:</p>
<p>1.用户发帖的时候 使用 guradian</p>
<pre><code>1.赋予用户删帖权限
2.赋予管理员删除权限
3.赋予用户修改权限
</code></pre>
<ol start="2">
<li><p>在查看帖子的时候:<br> 去查看一下你有没有删除的权限</p>
</li>
<li><p>请求删除的时候:<br> 去查看一下你有没有删除的权限</p>
</li>
</ol>
<p>代码:<br>    from guardian.shortcuts import assign_perm<br>    from guardian.shortcuts import check_perm<br>    from guardian.shortcuts import remove_perm</p>
]]></content>
      <categories>
        <category>python框架</category>
      </categories>
      <tags>
        <tag>Django项目部署</tag>
      </tags>
  </entry>
  <entry>
    <title>Django框架09--序列化</title>
    <url>/jwangcloud/2889044135/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/Django.jpeg"></p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><span id="more"></span>

<ol>
<li><p>操作系统: </p>
<p> os 操作系统是管理计算机硬件与软件资源的计算机程序，同时也是计算机系统的内核与基石。操作系统需要处理如管<br> 理与配置内存、决定系统资源供需的优先次序、控制输入设备与输出设备、操作网络与管理文件系统等基本事务。操作<br> 系统也提供一个让用户与系统交互的操作界面。</p>
</li>
<li><p>操作系统中的进程调度策略：先来先服务调度算法  短作业(进程)优先调度算法  高优先权优先调度算法  高响应比优先调度算法等</p>
</li>
<li><p>分时操作系统： 将一个时间段分成多段运行多个程序  时分：按时间分  频分：按频率分发</p>
</li>
<li><p>CPU：对指令运行  不同操作系统执行的程序不同：格式不同其无法识别，解析不出指令  例如：windows(PE) Linux(tar)</p>
</li>
<li><p>破解原理：识别格式–找寻相关指令–进行修改</p>
</li>
<li><p>os:python 中可以<br>path:环境变量  命令行输入命令时，会找寻path中的 </p>
</li>
<li><p>程序加载到内存 </p>
<p> 进程包括：文本段（指令） data（数据段 初始化/未初始化）堆（可全局访问 类的对象）<br> 栈（执行函数时会给函数分配一个空间&lt;符合递归&gt;函数执行完成后,栈相关内存销毁,所以不同函数之间的变量不可以相互访问）</p>
</li>
<li><p>地址引用：一个变量指向地址  python全是地址引用</p>
</li>
</ol>
<p>值引用：</p>
<p>进程管理：</p>
<ol start="9">
<li><p>进程创建：fork()  每一个进程都有父进程，不一定有子进程 树状结构 </p>
</li>
<li><p>ps: pid() ppid(父进程)  []：内核进程  未加括号的：用户进程</p>
</li>
</ol>
<h2 id="django-REST-framework"><a href="#django-REST-framework" class="headerlink" title="django REST framework"></a>django REST framework</h2><h3 id="前期知识"><a href="#前期知识" class="headerlink" title="前期知识"></a>前期知识</h3><p>api接口开发，最核心最常见的一个过程就是序列化，所谓序列化就是把数据转换格式，序列化可以分两个阶段：</p>
<p>1.序列化： 把我们识别的数据转换成指定的格式提供给别人。</p>
<pre><code>例如：我们在django的ORM中获取到的数据默认是模型对象，但是模型对象数据无法直接提供给前端或别的
平台使用，所以我们需要把数据进行序列化，变成字符串或者json数据，提供给别人。
</code></pre>
<p>2.反序列化：把别人提供的数据转换/还原成我们需要的格式。</p>
<pre><code>例如：前端js提供过来的json数据，对于python而言就是字符串，我们需要进行反序列化换成模型类对象，
这样我们才能把    数据保存到数据库中。
    1.接收数据[反序列化]
    2.操作数据
    3.响应数据[序列化]
</code></pre>
<h3 id="基础准备"><a href="#基础准备" class="headerlink" title="基础准备"></a>基础准备</h3><p><a href="https://q1mi.github.io/Django-REST-framework-documentation/#django-rest-framework">中文文档</a><br>(github: <a href="https://github.com/encode/django-rest-framework/tree/master">https://github.com/encode/django-rest-framework/tree/master</a>)</p>
<ol>
<li>需要安装的包：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install djangorestframework</span><br><span class="line">pip install markdown       <span class="comment"># Markdown support for the browsable API.</span></span><br><span class="line">pip install django-<span class="built_in">filter</span>  <span class="comment"># Filtering support</span></span><br><span class="line"></span><br><span class="line">或者：</span><br><span class="line">git clone https://github.com/encode/django-rest-framework</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>项目目录下：settings–app添加–’rest_framework’</p>
</li>
<li><p>根urls：</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.conf.urls import url</span><br><span class="line">from django.urls import path, include</span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    </span><br><span class="line">    url(r&#39;^api-auth&#x2F;&#39;, include(&#39;rest_framework.urls&#39;))  #添加该urls</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="jquert-api"><a href="#jquert-api" class="headerlink" title="jquert/api"></a>jquert/api</h3><h4 id="jquery"><a href="#jquery" class="headerlink" title="jquery"></a>jquery</h4><p>1.创建Model并迁移</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class UserModer(models.Model):</span><br><span class="line">    username &#x3D; models.CharField(max_length&#x3D;200, null&#x3D;False, blank&#x3D;False)</span><br><span class="line">    age &#x3D; models.IntegerField()</span><br><span class="line">    gender &#x3D; models.BooleanField(default&#x3D;False)</span><br><span class="line">    </span><br><span class="line">    def to_json(self):</span><br><span class="line">    return &#123;&quot;username&quot;: self.username, &quot;age&quot;: self.age, &quot;gender&quot;: self.gender&#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure>

<p>2.编辑views</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">调用所有的网页页面  例如：foo&#x2F;html&#x2F;index.html&#x2F;</span><br><span class="line"></span><br><span class="line">def index(request, file):</span><br><span class="line">	return render(request, file)</span><br></pre></td></tr></table></figure>

<p>3.前端网页 jquery 接收request中的数据进行处理并显示在前端</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">head头里 index.html 编写用户信息展示表单：</span><br><span class="line">	1.导入jquery:</span><br><span class="line">		&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;code.jquery.com&#x2F;jquery-3.4.1.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">	2.使用：</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(document).ready(function() &#123;</span><br><span class="line">            $.get(&quot;&#x2F;foo&#x2F;api&#x2F;user&#x2F;&quot;,</span><br><span class="line">                function (users) &#123;</span><br><span class="line">                    users.forEach(function (user) &#123;</span><br><span class="line">                        &#x2F;&#x2F; $(&#39;#id_users&#39;).append(user.user);</span><br><span class="line">                        &#x2F;&#x2F; $(&#39;#id_users&#39;).append(user.age);</span><br><span class="line">                       $(&quot;#id_users&quot;).append(&quot;&lt;tr&gt;&lt;td&gt;&quot;+user.username+&quot;&lt;&#x2F;td&gt;&lt;td&gt;&quot; + </span><br><span class="line">                       user.age + &quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&quot;)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">    页面...</span><br><span class="line">    &lt;tbody id &#x3D; &quot;id_users&quot;&gt;</span><br><span class="line">    	上面设置的后端处理内容将显示在这里</span><br><span class="line">    &lt;&#x2F;tbody&gt;</span><br><span class="line"></span><br><span class="line">4.urls创建：如api 1步骤</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="api"><a href="#api" class="headerlink" title="api"></a>api</h4><p>1.urls（该app下）设置api</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app下创建urls.py</span><br><span class="line">from django.urls import path</span><br><span class="line">from foo import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">	path(&#39;html&#x2F;&lt;str:file&gt;&#39;, views.index)</span><br><span class="line">	path(&#39;api&#x2F;user&#x2F;&#39;, views.get_user)</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">根urls:</span><br><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line">from django.conf.urls import url</span><br><span class="line">from django.urls import path, include</span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    path(&#39;foo&#x2F;&#39;, include(&#39;foo.urls&#39;)),</span><br><span class="line">    url(r&#39;^api-auth&#x2F;&#39;, include(&#39;rest_framework.urls&#39;))</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.使用api 实现前后端分离</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前端调用展示相关数据：</span><br><span class="line"></span><br><span class="line">1 html(user.html) 编写用户输入表单:</span><br><span class="line">&lt;form method&#x3D;&#39;post&#39;, action&#x3D;&#39;&#x2F;foo&#x2F;api&#x2F;user&#x2F;&#39;&gt;</span><br><span class="line">	username:&lt;input placeholder&#x3D;&quot;username&quot;, name&#x3D;&quot;username&quot;&gt;....  #添加name以此为POST数据的名称</span><br><span class="line">	&lt;&#x2F;form&gt;</span><br><span class="line">	</span><br><span class="line">2 views:</span><br><span class="line">	只推送数据到前端展示：地址：foo&#x2F;api&#x2F;user&#x2F;</span><br><span class="line">		def get_user(request):</span><br><span class="line">				users &#x3D; UserModer.object.all()</span><br><span class="line">				user_info &#x3D; [u.to_json() for u in users]</span><br><span class="line">				return JsonResponse(user_info, safe&#x3D;False)</span><br><span class="line">	POST则获取前端user.html的表单数据并保存(foo&#x2F;html&#x2F;user.html)&#x2F;否则返回数据到前端(foo&#x2F;api&#x2F;user&#x2F;)</span><br><span class="line">		@csrf_exempt</span><br><span class="line">		def do_user(request):</span><br><span class="line">			if request.method &#x3D;&#x3D; &quot;POST&quot;:</span><br><span class="line">				user &#x3D; UserModel() #取出Model中的字段</span><br><span class="line">				user.username &#x3D; request.POST[&#39;username&#39;]  #赋值给相应字段</span><br><span class="line">				...</span><br><span class="line">				user.save()   #保存到数据库</span><br><span class="line">				return JsonResponse(user.to_json())  #将数据发送给前端  地址：foo&#x2F;api&#x2F;user&#x2F;</span><br><span class="line">			else: 推送数据到前端</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3 urls(当前app中):</span><br><span class="line">	path(&#39;api&#x2F;user&#x2F;&#39;, views.do_user)  #2推送的消息返回前端的地址规则</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="serializers-序列化器"><a href="#serializers-序列化器" class="headerlink" title="serializers 序列化器"></a>serializers 序列化器</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 序列化,序列化器会把模型对象转换成字典,经过response以后变成json字符串</span><br><span class="line">2. 反序列化,把客户端发送过来的数据,经过request以后变成字典,序列化器可以把字典转成模型</span><br><span class="line">3. 反序列化,完成数据校验功能</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="常用字段类型"><a href="#常用字段类型" class="headerlink" title="常用字段类型"></a>常用字段类型</h4><table>
<thead>
<tr>
<th align="center">字  段  名  称</th>
<th align="center">字段构造方式 serializers.字段构造方式()</th>
</tr>
</thead>
<tbody><tr>
<td align="center">BooleanField</td>
<td align="center">BooleanField()</td>
</tr>
<tr>
<td align="center">NullBooleanField</td>
<td align="center">NullBooleanField()</td>
</tr>
<tr>
<td align="center">CharField</td>
<td align="center">CharField(max_length=None, min_length=None, allow_blank=False, trim_whitespace=True)</td>
</tr>
<tr>
<td align="center">EmailField</td>
<td align="center">EmailField(max_length=None, min_length=None, allow_blank=False)</td>
</tr>
<tr>
<td align="center">RegexField</td>
<td align="center">RegexField(regex, max_length=None, min_length=None, allow_blank=False)</td>
</tr>
<tr>
<td align="center">SlugField</td>
<td align="center">SlugField(max<em>length=50, min_length=None, allow_blank=False) 正则字段，验证正则模式 [a-zA-Z0-9</em>-]+</td>
</tr>
<tr>
<td align="center">URLField</td>
<td align="center">URLField(max_length=200, min_length=None, allow_blank=False)</td>
</tr>
<tr>
<td align="center">UUIDField</td>
<td align="center">UUIDField(format=’hex_verbose’) format:1) ‘hex_verbose’ 如”5ce0e9a5-5ffa-654b-cee0-1238041fb31a”2) ‘hex’ 如 “5ce0e9a55ffa654bcee01238041fb31a”3) ‘int’ - 如: “123456789012312313134124512351145145114”4) ‘urn’ 如: “urn:uuid:5ce0e9a5-5ffa-654b-cee0-1238041fb31a”</td>
</tr>
<tr>
<td align="center">IPAddressField</td>
<td align="center">IPAddressField(protocol=’both’, unpack_ipv4=False, **options)</td>
</tr>
<tr>
<td align="center">IntegerField</td>
<td align="center">IntegerField(max_value=None, min_value=None)</td>
</tr>
<tr>
<td align="center">FloatField</td>
<td align="center">FloatField(max_value=None, min_value=None)</td>
</tr>
<tr>
<td align="center">DecimalField</td>
<td align="center">DecimalField(max_digits, decimal_places, coerce_to_string=None, max_value=None, min_value=None)max_digits: 最多位数 decimal_palces: 小数点位置</td>
</tr>
<tr>
<td align="center">DateTimeField</td>
<td align="center">DateTimeField(format=api_settings.DATETIME_FORMAT, input_formats=None)</td>
</tr>
<tr>
<td align="center">DateField</td>
<td align="center">DateField(format=api_settings.DATE_FORMAT, input_formats=None)</td>
</tr>
<tr>
<td align="center">TimeField</td>
<td align="center">TimeField(format=api_settings.TIME_FORMAT, input_formats=None)</td>
</tr>
<tr>
<td align="center">DurationField</td>
<td align="center">DurationField()</td>
</tr>
<tr>
<td align="center">ChoiceField</td>
<td align="center">ChoiceField(choices) choices与Django的用法相同</td>
</tr>
<tr>
<td align="center">MultipleChoiceField</td>
<td align="center">MultipleChoiceField(choices)</td>
</tr>
<tr>
<td align="center">FileField</td>
<td align="center">FileField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)</td>
</tr>
<tr>
<td align="center">ImageField</td>
<td align="center">ImageField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)</td>
</tr>
<tr>
<td align="center">ListField</td>
<td align="center">ListField(child=, min_length=None, max_length=None)</td>
</tr>
<tr>
<td align="center">DictField</td>
<td align="center">DictField(child=)</td>
</tr>
</tbody></table>
<h4 id="选项参数"><a href="#选项参数" class="headerlink" title="选项参数"></a>选项参数</h4><table>
<thead>
<tr>
<th align="center">参数名称</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">max_length</td>
<td align="center">最大长度</td>
</tr>
<tr>
<td align="center">min_length</td>
<td align="center">最小长度</td>
</tr>
<tr>
<td align="center">allow_blank</td>
<td align="center">是否允许为空</td>
</tr>
<tr>
<td align="center">trim_whitespace</td>
<td align="center">是否截断空白字符</td>
</tr>
<tr>
<td align="center">max_value</td>
<td align="center">最大数值</td>
</tr>
<tr>
<td align="center">min_value</td>
<td align="center">最小数值</td>
</tr>
</tbody></table>
<h4 id="通用参数"><a href="#通用参数" class="headerlink" title="通用参数"></a>通用参数</h4><table>
<thead>
<tr>
<th align="center">参数名称</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">read_only</td>
<td align="center">表明该字段仅用于序列化输出，默认False</td>
</tr>
<tr>
<td align="center">write_only</td>
<td align="center">表明该字段仅用于反序列化输入，默认False</td>
</tr>
<tr>
<td align="center">required</td>
<td align="center">表明该字段在反序列化时必须输入，默认True</td>
</tr>
<tr>
<td align="center">default</td>
<td align="center">反序列化时使用的默认值</td>
</tr>
<tr>
<td align="center">allow_null</td>
<td align="center">表明该字段是否允许传入None，默认False</td>
</tr>
<tr>
<td align="center">validators</td>
<td align="center">该字段使用的验证器</td>
</tr>
<tr>
<td align="center">error_messages</td>
<td align="center">包含错误编号与错误信息的字典</td>
</tr>
<tr>
<td align="center">label</td>
<td align="center">用于HTML展示API页面时，显示的字段名称</td>
</tr>
<tr>
<td align="center">help_text</td>
<td align="center">用于HTML展示API页面时，显示的字段帮助提示信息</td>
</tr>
</tbody></table>
<h4 id="创建序列化类（用户为例）"><a href="#创建序列化类（用户为例）" class="headerlink" title="创建序列化类（用户为例）"></a>创建序列化类（用户为例）</h4><p>1.新建文件并导入序列化器 serializers.py  (当前app下)   用于序列化与反序列化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## serializers.py</span><br><span class="line">from rest_framework import serializers</span><br><span class="line"></span><br><span class="line">class UserSerializer(serializers.Serializer):</span><br><span class="line">	username &#x3D; serializers.CharFiled(requird &#x3D; True, max_length&#x3D;50)</span><br><span class="line">	...  #需要进行数据转换的字段设,并修改字段相应类型</span><br><span class="line">	def create(self, validated_data):  #重写create方法 </span><br><span class="line">		model &#x3D; UserModel()</span><br><span class="line">		model.username &#x3D; validated_data[&#39;username&#39;]</span><br><span class="line">		...</span><br><span class="line">		model.save()</span><br><span class="line">		return model </span><br><span class="line">		</span><br><span class="line">model ：指明该序列化器处理的数据字段从模型类Student参考生成</span><br><span class="line">fields ：指明该序列化器包含模型类中的哪些字段，__all__指明包含所有字段   </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.views：获取前端表单数据并返回数据给前端 创建serializer对象</p>
<p>定义好Serializer类后，就可以创建Serializer对象了。</p>
<p>Serializer的构造方法为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Serializer(instance&#x3D;None, data&#x3D;empty, **kwarg)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>1）用于序列化时，将模型类对象传入instance参数</p>
<p>2）用于反序列化时，将要被反序列化的数据传入data参数</p>
<p>3）除了instance和data参数外，在构造Serializer对象时，还可通过context参数额外添加数据，如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">serializer &#x3D; StudentSerializer(instance, context&#x3D;&#123;&#39;request&#39;: request&#125;)</span><br></pre></td></tr></table></figure>
<p>通过context参数附加的数据，可以通过Serializer对象的context属性获取。</p>
<pre><code>1.使用序列化器的时候一定要注意，序列化器声明了以后，不会自动执行，需要我们在视图中进行调用才可以。
2.序列化器无法直接接收数据，需要我们在视图中创建序列化器对象时把使用的数据传递过来。
3.序列化器的字段声明类似于form表单系统。
4.开发restful api时，序列化器会帮我们把模型数据转换成字典.
5.drf提供的视图会帮我们把字典转换成json,或者把客户端发送过来的数据转换字典.
</code></pre>
<p>序列化器的使用分两个阶段：</p>
<p>1.在客户端请求时，使用序列化器可以完成对数据的反序列化。</p>
<p>2.在服务器响应时，使用序列化器可以完成对数据的序列化。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def do_user(request):</span><br><span class="line">	if request.method &#x3D;&#x3D; &quot;POST&quot;:  #foo&#x2F;api&#x2F;user&#x2F;1   </span><br><span class="line">		serializer &#x3D; UserSerializer(data&#x3D;request.POST)   </span><br><span class="line">			#包括：serializer的__init__中有instance,data，many等字段，</span><br><span class="line">		if not serializer.is_valid():  </span><br><span class="line">			return JsonResponse(serializer.errors)</span><br><span class="line">		serializer.save(force_insert&#x3D;True)</span><br><span class="line">		return JsonResponse(serializer.validated_data)  </span><br><span class="line">		</span><br><span class="line">		#serializer中会将data中的数据赋值给validated_data</span><br><span class="line">		</span><br><span class="line">	else:</span><br><span class="line">			users &#x3D; UserModer.object.all()</span><br><span class="line">			user_info &#x3D; [u.to_json() for u in users]</span><br><span class="line">			return JsonResponse(user_info, safe&#x3D;False)</span><br><span class="line">			</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.app_name/urls.py</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">path(&#39;api&#x2F;user&#x2F;&lt;int:id&gt;&#39;, views.do_user) </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.serializers 序列化/反序列化</p>
<p>说明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用序列化器进行反序列化时，需要对数据进行验证后，才能获取验证成功的数据或保存成模型类对象。</span><br><span class="line"></span><br><span class="line">在获取反序列化的数据前，必须调用is_valid()方法进行验证，验证成功返回True，否则返回False。</span><br><span class="line"></span><br><span class="line">验证失败，可以通过序列化器对象的errors属性获取错误信息，返回字典，包含了字段和字段的错误。</span><br><span class="line">如果是非字段错误，可以通过修改REST framework配置中的NON_FIELD_ERRORS_KEY来控制错误字典中的键名。</span><br><span class="line"></span><br><span class="line">验证成功，可以通过序列化器对象的validated_data属性获取数据。</span><br><span class="line"></span><br><span class="line">在定义序列化器时，指明每个字段的序列化类型和选项参数，本身就是一种验证行为。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## serializers.py</span><br><span class="line">class UserSerializer2(serializers.ModelSerializer): #需申明调用模型信息</span><br><span class="line">	class Meta:</span><br><span class="line">		model &#x3D; UserModel  #model添加上to_json  直接继承Model的字段</span><br><span class="line">		exclude &#x3D; (&#39;gender&#39;,)  #不在前端展示的字段</span><br><span class="line">	</span><br><span class="line">## views.py</span><br><span class="line">def do_user(request, id&#x3D;None):</span><br><span class="line">	if not id:</span><br><span class="line">		if request.method &#x3D;&#x3D; &quot;POST&quot;:  #根据前端输入的资源进行保存数据库中并返回给前端  </span><br><span class="line">			serializer &#x3D; UserSerializer(data&#x3D;request.POST)  #数据转换（反序列化） </span><br><span class="line">			if not serializer.is_valid():  </span><br><span class="line">				return JsonResponse(serializer.errors)  #响应错误</span><br><span class="line">			serializer.save(force_insert&#x3D;True)  #存储数据</span><br><span class="line">			return JsonResponse(serializer.validated_data)  #响应数据</span><br><span class="line">		else:  #被序列化的是包含多条数据的查询集QuerySet，可通过many&#x3D;True参数补充说明 </span><br><span class="line">				users &#x3D; UserModer.object.all() #获取数据</span><br><span class="line">				#不需要在model中定义to_json传资源</span><br><span class="line">				user_info &#x3D; UserSerializer2(instance&#x3D;users, many&#x3D;True) #转化多个数据，需要加上many&#x3D;True</span><br><span class="line">				#user_info.data ：序列化器转化后的数据（字典） </span><br><span class="line">				return JsonResponse(user_info.data, safe&#x3D;False)</span><br><span class="line">				#响应数据给客户端</span><br><span class="line">				#返回的Json数据，如果是列表，需要声明safe&#x3D;False</span><br><span class="line">	else:  </span><br><span class="line">		if request.method &#x3D;&#x3D; &quot;GET&quot;：  </span><br><span class="line">			user &#x3D; UserModel.object.get(pk &#x3D; id)  #获取数据</span><br><span class="line">			user_info &#x3D; UserSerializer2(instance&#x3D;user) #数据转换（序列化）</span><br><span class="line">			return JsonResponse(user_info.data)   #响应数据</span><br></pre></td></tr></table></figure>

<h3 id="ModelSerializer"><a href="#ModelSerializer" class="headerlink" title="ModelSerializer"></a>ModelSerializer</h3><p>如果我们想要使用序列化器对应的是Django的模型类，DRF为我们提供了ModelSerializer模型类序列化器来帮助我们快速创建一个Serializer类。</p>
<p>ModelSerializer与常规的Serializer相同，但提供了：</p>
<pre><code>基于模型类自动生成一系列字段
基于模型类自动为Serializer生成validators，比如unique_together
包含默认的create()和update()的实现
</code></pre>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class BookSerializer(serializers.ModelSerializer):</span><br><span class="line">    &quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; Book</span><br><span class="line">        fields &#x3D; &#39;__all__&#39;</span><br><span class="line"></span><br><span class="line">model 指明参照哪个模型类</span><br><span class="line">fields 指明为模型类的哪些字段生成</span><br><span class="line"></span><br><span class="line">我们可以在python manage.py shell中查看自动生成的BookSerializer的具体实现</span><br><span class="line">&gt;&gt;&gt; from booktest.serializers import BookSerializer</span><br><span class="line">&gt;&gt;&gt; serializer &#x3D; BookSerializer()</span><br><span class="line">&gt;&gt;&gt; serializer</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="指定字段"><a href="#指定字段" class="headerlink" title="指定字段"></a>指定字段</h4><ol>
<li><p>使用fields来明确字段，__all__表名包含所有字段，也可以写明具体哪些字段</p>
</li>
<li><p>使用exclude可以明确排除掉哪些字段</p>
</li>
<li><p>fields 指明为模型类的哪些字段生成</p>
</li>
<li><p>指明只读字段  可以通过read_only_fields指明只读字段，即仅用于序列化输出的字段</p>
</li>
</ol>
<h4 id="添加额外参数"><a href="#添加额外参数" class="headerlink" title="添加额外参数"></a>添加额外参数</h4><p>我们可以使用extra_kwargs参数为ModelSerializer添加或修改原有的选项参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class BookSerializer(serializers.ModelSerializer):</span><br><span class="line">    &quot;&quot;&quot;图书序列化器&quot;&quot;&quot;</span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; Book</span><br><span class="line">        fields &#x3D; (&#39;id&#39;, &#39;title&#39;, &#39;pub_date&#39;, &#39;read&#39;, &#39;comment&#39;)</span><br><span class="line">        extra_kwargs &#x3D; &#123;</span><br><span class="line">            &#39;read&#39;: &#123;&#39;min_value&#39;: 0, &#39;required&#39;: True&#125;,</span><br><span class="line">            &#39;comment&#39;: &#123;&#39;min_value&#39;: 0, &#39;required&#39;: True&#125;,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="序列化过程（lesson为例）"><a href="#序列化过程（lesson为例）" class="headerlink" title="序列化过程（lesson为例）"></a>序列化过程（lesson为例）</h3><h4 id="Model创建"><a href="#Model创建" class="headerlink" title="Model创建"></a>Model创建</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#models.py</span><br><span class="line">class LessonModel(models.Model):</span><br><span class="line">    subject &#x3D; models.CharField(max_length&#x3D;255)</span><br><span class="line">    student &#x3D; models.ForeignKey(&#39;UserModer&#39;, on_delete&#x3D;models.CASCADE)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="序列化类"><a href="#序列化类" class="headerlink" title="序列化类"></a>序列化类</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#serializer.py</span><br><span class="line">class LessonSerializer(serializers.ModelSerializer):</span><br><span class="line">	#序列化调用上面学生信息（对student字段进行处理后返回）</span><br><span class="line">	student &#x3D; serializer.SerializerMethodField()</span><br><span class="line">	</span><br><span class="line">	def get_student(self, instance):</span><br><span class="line">		#instance.student 为获取数据</span><br><span class="line">		u &#x3D; UserSerializer2(instance&#x3D;instance.student) #数据转化</span><br><span class="line">		return u.data #返回转化数据  使得该序列化可以转化学生信息数据并一起发给前端</span><br><span class="line">	</span><br><span class="line">	#定义任意需要的字段</span><br><span class="line">	count &#x3D; serializer.SerializerMethodField()</span><br><span class="line">	</span><br><span class="line">	def get_count(self, instance):</span><br><span class="line">		return 12</span><br><span class="line">		</span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; LessonModel  #声明model  (instance中包括的字段)</span><br><span class="line">        fields &#x3D; (&quot;subject&quot;, &quot;student&quot;, &#39;count&#39;)  #指明序列化model中的字段与exclude相反</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="转化为序列化对象"><a href="#转化为序列化对象" class="headerlink" title="转化为序列化对象"></a>转化为序列化对象</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#views.py</span><br><span class="line">def do_lesson(request, id&#x3D;None):</span><br><span class="line">	if not id:</span><br><span class="line">		lesson &#x3D; LessonModel.object.all() #获取数据</span><br><span class="line">		json_lesson &#x3D; LessonSerializer(instance&#x3D;lesson, many&#x3D;True)  #数据转化（序列化）</span><br><span class="line">		return JsonResponse(json_lesson.data, safe&#x3D;False)  </span><br><span class="line">		#响应数据(subject,student,count的所有序列化返回的数据)</span><br></pre></td></tr></table></figure>

<h3 id="反序列化过程"><a href="#反序列化过程" class="headerlink" title="反序列化过程"></a>反序列化过程</h3><h4 id="数据验证-以图书为例"><a href="#数据验证-以图书为例" class="headerlink" title="数据验证(以图书为例)"></a>数据验证(以图书为例)</h4><p>使用序列化器进行反序列化时，需要对数据进行验证后，才能获取验证成功的数据或保存成模型类对象。</p>
<p>在获取反序列化的数据前，必须调用is_valid()方法进行验证，验证成功返回True，否则返回False。</p>
<p>验证失败，可以通过序列化器对象的errors属性获取错误信息，返回字典，包含了字段和字段的错误。如果是非字段错误，可以通过修改REST framework配置中的NON_FIELD_ERRORS_KEY来控制错误字典中的键名。</p>
<p>验证成功，可以通过序列化器对象的validated_data属性获取数据。</p>
<p>在定义序列化器时，指明每个字段的序列化类型和选项参数，本身就是一种验证行为。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">新建一个子应用books。</span><br><span class="line"></span><br><span class="line">data &#x3D; &#123;&#39;title&#39;: &#39;python&#39;&#125;  #传入的数据</span><br><span class="line">serializer &#x3D; BookSerializer(data&#x3D;data)  #序列化</span><br><span class="line">serializer.is_valid()  # True   验证结果返回值 （字段的限制若不满足直接False）</span><br><span class="line">serializer.errors  # &#123;&#125;  错误信息</span><br><span class="line">serializer.validated_data  #  OrderedDict([(&#39;btitle&#39;, &#39;python&#39;)])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>is_valid()方法还可以在验证失败时抛出异常serializers.ValidationError，
可以通过传递raise_exception=True参数开启，REST framework接收到此异常，
会向前端返回HTTP 400 Bad Request响应。
</code></pre>
<h4 id="补充定义验证行为"><a href="#补充定义验证行为" class="headerlink" title="补充定义验证行为"></a>补充定义验证行为</h4><p>1）validate_字段名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class BookSerializer(serializers.Serializer):</span><br><span class="line">    &quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span><br><span class="line">    ...</span><br><span class="line">    def validate_title(self, value):</span><br><span class="line">        if &#39;django&#39; not in value.lower():</span><br><span class="line">            raise serializers.ValidationError(&quot;图书不是关于Django的&quot;)</span><br><span class="line">        return value</span><br><span class="line"></span><br><span class="line">验证：</span><br><span class="line">from book.serializers import BookSerializer</span><br><span class="line">data &#x3D; &#123;&#39;title&#39;: &#39;python&#39;&#125;</span><br><span class="line">serializer &#x3D; BookSerializer(data&#x3D;data)</span><br><span class="line">serializer.is_valid()  # False   </span><br><span class="line">serializer.errors</span><br><span class="line">#  &#123;&#39;title&#39;: [ErrorDetail(string&#x3D;&#39;图书不是关于Django的&#39;, code&#x3D;&#39;invalid&#39;)]&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>多个字段进行验证 定义validate方法</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class BookSerializer(serializers.Serializer):</span><br><span class="line">    &quot;&quot;&quot;图书序列化器&quot;&quot;&quot;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    def validate(self, attrs):</span><br><span class="line">        read &#x3D; attrs[&#39;read&#39;]</span><br><span class="line">        comment &#x3D; attrs[&#39;comment&#39;]</span><br><span class="line">        if read &lt; comment:</span><br><span class="line">            raise serializers.ValidationError(&#39;阅读量小于评论量，不可以通过&#39;)</span><br><span class="line">        return attrs</span><br><span class="line">        </span><br><span class="line">   </span><br><span class="line">from book.serializers import BookSerializer</span><br><span class="line">data &#x3D; &#123;&#39;title&#39;: &#39;about django&#39;, &#39;read&#39;: 10, &#39;comment&#39;: 20&#125;</span><br><span class="line">s &#x3D; BookSerializer(data&#x3D;data)</span><br><span class="line">s.is_valid()  # False</span><br><span class="line">s.errors</span><br><span class="line">#  &#123;&#39;non_field_errors&#39;: [ErrorDetail(string&#x3D;&#39;阅读量小于评论量&#39;, code&#x3D;&#39;invalid&#39;)]&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>validators  字段中添加该补充验证行为选项参数</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def about_django(value):</span><br><span class="line">    if &#39;django&#39; not in value.lower():</span><br><span class="line">        raise serializers.ValidationError(&quot;图书不是关于Django的&quot;)</span><br><span class="line"></span><br><span class="line">class BookSerializer(serializers.Serializer):</span><br><span class="line">    &quot;&quot;&quot;图书序列化器&quot;&quot;&quot;</span><br><span class="line">    id &#x3D; serializers.IntegerField(label&#x3D;&#39;ID&#39;, read_only&#x3D;True)</span><br><span class="line">     #验证字段title</span><br><span class="line">    title &#x3D; serializers.CharField(label&#x3D;&#39;名称&#39;, max_length&#x3D;20, validators&#x3D;[about_django])    	 pub_date &#x3D; serializers.DateField(label&#x3D;&#39;发布日期&#39;, required&#x3D;False)</span><br><span class="line">    read &#x3D; serializers.IntegerField(label&#x3D;&#39;阅读量&#39;, required&#x3D;False)</span><br><span class="line">    comment &#x3D; serializers.IntegerField(label&#x3D;&#39;评论量&#39;, required&#x3D;False)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">from book.serializers import BookSerializer</span><br><span class="line">data &#x3D; &#123;&#39;title&#39;: &#39;python&#39;&#125;</span><br><span class="line">serializer &#x3D; BookSerializer(data&#x3D;data)</span><br><span class="line">serializer.is_valid()  # False   </span><br><span class="line">serializer.errors</span><br><span class="line">#  &#123;&#39;title&#39;: [ErrorDetail(string&#x3D;&#39;图书不是关于Django的&#39;, code&#x3D;&#39;invalid&#39;)]&#125;</span><br></pre></td></tr></table></figure>

<h4 id="保存-更新数据"><a href="#保存-更新数据" class="headerlink" title="保存/更新数据"></a>保存/更新数据</h4><h5 id="以密码保存和更新为例"><a href="#以密码保存和更新为例" class="headerlink" title="以密码保存和更新为例"></a>以密码保存和更新为例</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#Model.py</span><br><span class="line">class UserModel(models.Model):</span><br><span class="line">	password &#x3D; models.CharField(max_length&#x3D;255, null&#x3D;True)</span><br><span class="line">   salt &#x3D; models.CharField(max_length&#x3D;255, default&#x3D;&#39;123456&#39;)</span><br><span class="line"></span><br><span class="line">#serializers.py 序列化</span><br><span class="line"></span><br><span class="line">如果创建序列化器对象的时候，没有传递instance实例，则调用save()方法的时候，create()被调用，相反，</span><br><span class="line">如果传递了instance实例，则调用save()方法的时候，update()被调用</span><br><span class="line"></span><br><span class="line">class UserSerializer2(serializers.ModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; UserModer</span><br><span class="line">        exclude &#x3D; (&#39;password&#39;, ）</span><br><span class="line">	#创建密码  validated_data是反序列化验证成功后获得的数据</span><br><span class="line">    def create(self, validated_data):</span><br><span class="line">        model &#x3D; super().create(validated_data)</span><br><span class="line">        model.salt &#x3D; uuid.uuid4().hex</span><br><span class="line">        password &#x3D; &#39;12345&#39; + model.salt</span><br><span class="line">        import hashlib</span><br><span class="line">        md5 &#x3D; hashlib.md5()</span><br><span class="line">        md5.update(password.encode(&#39;utf-8&#39;))</span><br><span class="line">        model.password &#x3D; md5.hexdigest()</span><br><span class="line">        model.save()</span><br><span class="line">        return model</span><br><span class="line">	# 更新密码</span><br><span class="line">    def update(self, instance, validated_data):</span><br><span class="line">        model &#x3D; super().update(instance, validated_data)</span><br><span class="line">        if &quot;password&quot; in validated_data:</span><br><span class="line">            password &#x3D; validated_data[&#39;password&#39;] + model.salt</span><br><span class="line">            import hashlib</span><br><span class="line">            md5 &#x3D; hashlib.md5()</span><br><span class="line">            md5.update(password.encode(&#39;utf-8&#39;))</span><br><span class="line">            model.password &#x3D; md5.hexdigest()</span><br><span class="line">            model.save()</span><br><span class="line">        	  return model</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="api-view-基于方法的视图"><a href="#api-view-基于方法的视图" class="headerlink" title="api_view(基于方法的视图)"></a>api_view(基于方法的视图)</h3><p>api_view 是一个装饰器，用 http_method_names 来设置视图允许响应的 HTTP 方法列表，举个例子，</p>
<p>编写一个简单的视图，手动返回一些数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@api_view([&#39;GET&#39;, &#39;POST&#39;])  #如果未制定 默认是GET 其它以“405 Method Not Allowed ”进行响应</span><br><span class="line">def hello_world(request):</span><br><span class="line">    if request.method &#x3D;&#x3D; &#39;POST&#39;:</span><br><span class="line">        return Response(&#123;&quot;message&quot;: &quot;Got some data!&quot;, &quot;data&quot;: request.data&#125;)</span><br><span class="line">    return Response(&#123;&quot;message&quot;: &quot;Hello, world!&quot;&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="api-view装饰器"><a href="#api-view装饰器" class="headerlink" title="api_view装饰器"></a>api_view装饰器</h4><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># views.py</span><br><span class="line"></span><br><span class="line">@api_view(&quot;GET&quot;, &quot;POST&quot; ) </span><br><span class="line">def do_user(request, id&#x3D;None): #可指定format:json(前端显示方式为json)</span><br><span class="line">	assert isinstance(request, Request)</span><br><span class="line">	# request.query_params &#x3D;&#x3D; request.GET  urls中的数据</span><br><span class="line">	# request.data &#x3D;&#x3D; request.POST   报文中的数据</span><br><span class="line">	if not id:</span><br><span class="line">		if request.method &#x3D;&#x3D; &quot;POST&quot;:   </span><br><span class="line">			serializer &#x3D; UserSerializer(data&#x3D;request.POST)   </span><br><span class="line">			if not serializer.is_valid():  #序列化验证 </span><br><span class="line">				return JsonResponse(serializer.errors)  </span><br><span class="line">			serializer.save(force_insert&#x3D;True) #保存 </span><br><span class="line">			#return JsonResponse(serializer.validated_data)</span><br><span class="line">			#使用rest_framework 的Response </span><br><span class="line">			return Response(serializer.validated_data)  #响应数据  </span><br><span class="line"> </span><br><span class="line"># app&#x2F;urls</span><br><span class="line">path(&#39;api&#x2F;user&#39;, views.do_user, &#123;&#39;format&#39;:&#39;json&#39;&#125;) #上述指定format后需要制定</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="类视图-APIView例"><a href="#类视图-APIView例" class="headerlink" title="类视图(APIView例)"></a>类视图(APIView例)</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#views.py</span><br><span class="line"></span><br><span class="line">class UserView(APIView):</span><br><span class="line">    def get(self, request, id&#x3D;None, *args, **kwargs):</span><br><span class="line">    # request.query_params &#x3D;&#x3D; request.GET  urls中的数据</span><br><span class="line">	 # request.data &#x3D;&#x3D; request.POST   报文中的数据</span><br><span class="line">        if id:</span><br><span class="line">            user &#x3D; UserModer.objects.get(pk&#x3D;id)</span><br><span class="line">            user_info &#x3D; UserSerializer2(instance&#x3D;user)</span><br><span class="line">            return Response(user_info.data)</span><br><span class="line">        else:</span><br><span class="line">            users &#x3D; UserModer.objects.all()</span><br><span class="line">            users_info &#x3D; UserSerializer2(instance&#x3D;users, many&#x3D;True)</span><br><span class="line">            return Response(users_info.data)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        serializer &#x3D; UserSerializer2(data&#x3D;request.data)</span><br><span class="line">        if not serializer.is_valid():</span><br><span class="line">            return JsonResponse(serializer.errors)</span><br><span class="line">        serializer.save()</span><br><span class="line">        return Response(serializer.validated_data)</span><br><span class="line">    def put(self, request, id&#x3D;None, *args, **kwargs):</span><br><span class="line">    	  if id:</span><br><span class="line">    	  		model &#x3D; UserModel.object.get(pk&#x3D;id)</span><br><span class="line">    	  else:</span><br><span class="line">    	  		model &#x3D; UserModel.object.get(pk&#x3D;request.data[&#39;id&#39;])</span><br><span class="line">    	  serializer &#x3D; UserSerializer2(data&#x3D;request.data)</span><br><span class="line">    	  if not serializer.is_valid():</span><br><span class="line">    	  	  print(serializer.errors)</span><br><span class="line">            return Response(status&#x3D;401)</span><br><span class="line">        serializer.save()</span><br><span class="line">        return Response(serializer.data)</span><br><span class="line">    	  </span><br><span class="line"></span><br><span class="line"># app&#x2F;urls.py</span><br><span class="line"></span><br><span class="line">path(&#39;api&#x2F;user&#x2F;&#39;, views.UserView.as_view())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="mixins"><a href="#mixins" class="headerlink" title="mixins"></a>mixins</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class UserView(mixins.ListModelMixin,</span><br><span class="line">               mixins.CreateModelMixin,</span><br><span class="line">               mixins.RetrieveModelMixin,</span><br><span class="line">               mixins.UpdateModelMixin,</span><br><span class="line">               mixins.DestroyModelMixin,</span><br><span class="line">               generics.GenericAPIView):</span><br><span class="line"></span><br><span class="line">    queryset &#x3D; UserModer.objects.all()</span><br><span class="line">    serializer_class &#x3D; UserSerializer2</span><br><span class="line"></span><br><span class="line">    def get(self, request, pk&#x3D;None, *args, **kwargs):</span><br><span class="line">        if not pk:</span><br><span class="line">            return self.list(request, *args, **kwargs)</span><br><span class="line">        else:</span><br><span class="line">            return self.retrieve(request, pk, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        return self.create(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    def put(self, request, *args, **kwargs):</span><br><span class="line">        return self.update(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    def delete(self, request, *args, **kwargs):</span><br><span class="line">        return self.destroy(request, *args, **kwargs)</span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<h3 id="ModelViewSet"><a href="#ModelViewSet" class="headerlink" title="ModelViewSet"></a>ModelViewSet</h3><p>详细：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#views.py:</span><br><span class="line"></span><br><span class="line">class UserView(ModelViewSet):</span><br><span class="line">    queryset &#x3D; UserModer.objects.all()</span><br><span class="line">    serializer_class &#x3D; UserSerializer2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list_view &#x3D; UserView.as_view(&#123;</span><br><span class="line">        &quot;get&quot;: &quot;list&quot;,</span><br><span class="line">        &quot;post&quot;: &#39;create&#39;&#125;)</span><br><span class="line"></span><br><span class="line">detail_view &#x3D; UserView.as_view(</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;get&quot;: &quot;retrieve&quot;,</span><br><span class="line">        &quot;put&quot;: &quot;update&quot;,</span><br><span class="line">        &quot;delete&quot;: &quot;destroy&quot;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">    # path(&#39;api&#x2F;user&#x2F;&#39;, views.list_view),</span><br><span class="line">    # path(&#39;api&#x2F;user&#x2F;&lt;int:pk&gt;&#39;, views.detail_view),</span><br></pre></td></tr></table></figure>


<p>简化1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#views.py</span><br><span class="line"> class LessonView(ModelViewSet):</span><br><span class="line">     queryset &#x3D; LessonModel.objects.all()</span><br><span class="line">     serializer_class &#x3D; LessonSerializer</span><br><span class="line">     </span><br><span class="line">#app&#x2F;urls.py</span><br><span class="line">from rest_framework.routers import DefaultRouter</span><br><span class="line">router &#x3D; DefaultRouter()</span><br><span class="line">router.register(&#39;user&#39;, views.UserView)</span><br><span class="line">router.register(&#39;lesson&#39;, views.LessonView)</span><br><span class="line"></span><br><span class="line">path(&#39;api&#x2F;&#39;, include(router.urls)),</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>主要是对是否符合查看条件，符合则返回相关响应数据，否则返回权限不足</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from rest_framework.permissions import IsAuthenticated, BasePermission</span><br><span class="line"></span><br><span class="line">class TokenPermissionClass(BasePermission): #验证方法重写</span><br><span class="line">    def has_object_permission(self, request, view, obj):</span><br><span class="line">        pass</span><br><span class="line">    def has_permission(self, request, view):</span><br><span class="line">        if isinstance(view, UserView):</span><br><span class="line">            return False</span><br><span class="line">        return True</span><br><span class="line">           </span><br><span class="line">class LessonView(ModelViewSet):</span><br><span class="line">    permission_classes &#x3D; [TokenPermissionClass]  #调用上面的验证方式</span><br><span class="line">    queryset &#x3D; LessonModel.objects.all()</span><br><span class="line">    serializer_class &#x3D; LessonSerializer</span><br></pre></td></tr></table></figure>


<p>自定义验证</p>
<p>1.新建验证文件 authentications.py</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#authentications.py</span><br><span class="line"></span><br><span class="line">from rest_framework.authentication import BaseAuthentication, BasicAuthentication</span><br><span class="line">from foo.models import UserModer</span><br><span class="line"></span><br><span class="line">class UserPasswordAuthentication(BaseAuthentication):</span><br><span class="line">    def authenticate(self, request):</span><br><span class="line">        user &#x3D; request.query_params.get(&#39;username&#39;)</span><br><span class="line">        password &#x3D; request.query_params.get(&#39;password&#39;)</span><br><span class="line">        try:</span><br><span class="line">            user &#x3D; UserModer.objects.get(username&#x3D;user)</span><br><span class="line">        except:</span><br><span class="line">            return None, None</span><br><span class="line">        new_password &#x3D; password + user.salt</span><br><span class="line">        import hashlib</span><br><span class="line">        md5 &#x3D; hashlib.md5()</span><br><span class="line">        md5.update(new_password.encode(&#39;utf-8&#39;))</span><br><span class="line">        if user.password &#x3D;&#x3D; md5.hexdigest():</span><br><span class="line">            return user, None</span><br><span class="line">        else:</span><br><span class="line">            return None, None</span><br><span class="line">            </span><br><span class="line">#views.py</span><br><span class="line"></span><br><span class="line">class UserView(ModelViewSet):  #若有权限即验证通过，则序列化</span><br><span class="line">    permission_classes &#x3D; [IsAuthenticated]</span><br><span class="line">    authentication_classes &#x3D; [UserPasswordAuthentication]</span><br><span class="line">    queryset &#x3D; UserModer.objects.all()</span><br><span class="line">    serializer_class &#x3D; UserSerializer2</span><br><span class="line"> </span><br><span class="line"> #models.py</span><br><span class="line"> class UserModer(models.Model):</span><br><span class="line"> 	...</span><br><span class="line"> 	</span><br><span class="line">   @property</span><br><span class="line">   def is_authenticated(self):  </span><br><span class="line">   #(IsAuthenticated中request.user和request.user.is_authenticated需要同时满足 这里重写其中一个)</span><br><span class="line">        return True</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#地址栏输入  字段名&#x3D;值 可以查询出该字段里所有符合的值的数据</span><br><span class="line">class UserView(ModelViewSet):  </span><br><span class="line">    queryset &#x3D; UserModer.objects.all()</span><br><span class="line">    serializer_class &#x3D; UserSerializer2</span><br><span class="line"></span><br><span class="line">    def list(self, request, *args, **kwargs):</span><br><span class="line">        for arg, value in request.query_params.items():</span><br><span class="line">            self.queryset &#x3D; self.queryset.filter(**&#123;arg: value&#125;)</span><br><span class="line"></span><br><span class="line">        return super(UserView, self).list(request, *args, **kwargs)</span><br></pre></td></tr></table></figure>

<h3 id="django-filters"><a href="#django-filters" class="headerlink" title="django-filters"></a>django-filters</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install django-filters</span><br><span class="line"></span><br><span class="line">import django_filters.rest_framework</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserView(ModelViewSet):</span><br><span class="line"></span><br><span class="line">    queryset &#x3D; UserModer.objects.all()</span><br><span class="line">    filter_backends &#x3D; [django_filters.rest_framework.DjangoFilterBackend, SearchFilter]</span><br><span class="line">    serializer_class &#x3D; UserSerializer2</span><br><span class="line">    filterset_fields &#x3D; [&#39;gender&#39;, &#39;salt&#39;]</span><br><span class="line"></span><br><span class="line">#http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;foo&#x2F;api&#x2F;user&#x2F;?gender&#x3D;1</span><br><span class="line"></span><br><span class="line">class LessonView(ModelViewSet):</span><br><span class="line">    queryset &#x3D; LessonModel.objects.all()</span><br><span class="line">    serializer_class &#x3D; LessonSerializer</span><br><span class="line">    filter_backends &#x3D; [SearchFilter]</span><br><span class="line">    search_fields &#x3D; [&#39;subject&#39;, &#39;student__username&#39;]</span><br><span class="line"></span><br><span class="line">#http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;foo&#x2F;api&#x2F;lesson&#x2F;?search&#x3D;a</span><br></pre></td></tr></table></figure>











]]></content>
      <categories>
        <category>python框架</category>
      </categories>
      <tags>
        <tag>Django序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>Django框架08--请求类型</title>
    <url>/jwangcloud/1334139912/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/Django.jpeg"></p>
<h3 id="get-put-post-delete含义与区别"><a href="#get-put-post-delete含义与区别" class="headerlink" title="get,put,post,delete含义与区别"></a>get,put,post,delete含义与区别</h3><span id="more"></span>
<h4 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h4><table>
<thead>
<tr>
<th>名称</th>
<th>url</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>POST</td>
<td>/uri</td>
<td>创建</td>
</tr>
<tr>
<td>DELETE</td>
<td>/uri/xxx</td>
<td>删除</td>
</tr>
<tr>
<td>PUT</td>
<td>/uri/xxx</td>
<td>更新或创建</td>
</tr>
<tr>
<td>GET</td>
<td>/uri/xxx</td>
<td>查看</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>1.GET操作是安全的。</p>
<pre><code>所谓安全是指不管进行多少次操作，资源的状态都不会改变。比如我用GET浏览文章，不管浏览多少次，那篇文章还在那，
没有变化。当然，你可能说每浏览一次文章，文章的浏览数就加一，这不也改变了资源的状态么？这并不矛盾，因为这个改变不是GET操作引
起的，而是用户自己设定的服务端逻辑造成的。
</code></pre>
<p>2.PUT，DELETE操作是幂等的。</p>
<pre><code>所谓幂等是指不管进行多少次操作，结果都一样。比如我用PUT修改一篇文章，然后在做同样的操作，每次操作后的结果并没有不同，
DELETE也是一样。顺便说一句，因为GET操作是安全的，所以它自然也是幂等的。
</code></pre>
<p>3.POST操作既不是安全的，也不是幂等。</p>
<pre><code>比如常见的POST重复加载问题：当我们多次发出同样的POST请求后，其结果是创建出了若干的资源。
</code></pre>
<p>4.安全和幂等的意义在于：</p>
<pre><code>    当操作没有达到预期的目标时，我们可以不停的重试，而不会对资源产生副作用。从这个意义上说，POST操作往往是有害的，但很多时
候我们还是不得不使用它。还有一点需要注意的就是，创建操作可以使用POST，也可以使用PUT，区别在于POST 是作用在一个集合资
源之上的（/uri），而PUT操作是作用在一个具体资源之上的（/uri/xxx），再通俗点说，如果URL可以在客户端确定，
    那么就使用PUT，如果是在服务端确定，那么就使用POST，比如说很多资源使用数据库自增主键作为标识信息，而创建的资源的标识信息
到底是什么只能由服务端提供，这个时候就必须使用POST。
</code></pre>
<h4 id="关于GET-POST-的混淆"><a href="#关于GET-POST-的混淆" class="headerlink" title="关于GET POST 的混淆"></a>关于GET POST 的混淆</h4><p>1.先说相同点，只有了解了相同点之后才能理解为什么会发生混淆。两者都能向服务器发送数据，提交的“内容”[注1]的格式相同，都是</p>
<pre><code>param1=value1&amp;param2=value2&amp;....  
</code></pre>
<p>get 和 post 区别如字面，一个是get（获取），一个是post（发送）。</p>
<pre><code>    get用来告诉服务器需要获取哪些内容（uri+query），向静态页面（uri）请求则直接返回文件内容给浏览器，向一个动态页面请求时
可以提供查询参数（query）以获得相应内容。

    post用来向服务器提交内容，主要是为了提交，而不是为了请求内容，就是说post的初衷并不要求服务器返回内容[注2]，只是提交内
容让服务器处理（主要是存储或者处理之后再存储）。
</code></pre>
<p>2.get和post出现混淆是因为对提交的数据处理方法的滥用造成的，数据是无辜的。</p>
<p>混淆之一：</p>
<pre><code>将get提交的用来查询的字段当作是存储数据存入了服务器端文件或者数据库。然后就误以为get是用来提交用于存储的数据的。
</code></pre>
<p>混淆之二：</p>
<pre><code>编写脚本在服务器端通过处理post提交的数据并返回内容。只要有数据，就能用来进行判断，脚本怎写是程序员的事，而不在乎数据来源的形
式（post、get，或者是自己预设值的常量）。这点功能上确实没问题，只是背离的其初始目的而已。
</code></pre>
<p>由于都是要传送数据，且数据格式相同（即使数据格式不同，只要能提取出相应数据）。使用的时候难免出现张冠李戴，将get数据用来存储、将post数据用来检索返回数据。</p>
<p>3.二者区别（用途而“人为”造成）：</p>
<pre><code>    get的长度限制在2048字节（由浏览器和服务器限制的，这是目前IE的数据，曾经是1024字节），很大程度上限制了get用来传递“存
储数据”的数据的能力，所以还是老老实实用来做检索吧；
    post则无此限制（只是HTTP协议规范没有进行大小限制，但受限于服务器的处理能力），因此对于大的数据（一般来说需要存储的数据
可能会比较大，比2048字节大）的传递有天然的优势，谁让它是 nature born post 呢。


    get提交的数据是放在url里，目的是灵活的向服务其提交检索请求，可以在地址栏随时修改数据以变更需要获取的内容，比如直接修改
分页的编号就跳到另外一个分页了（当然也可能是 404）。

    post提交的数据放在http请求的正文里，目的在于提交数据并用于服务器端的存储，而不允许用户过多的更改相应数据（主要是相对于
在url 修改要麻烦很多，url的修改只要点击地址栏输入字符就可以了），除非是专门跑来编辑数据的。

    post和get的安全性在传输的层面上区别不大，但是采用url提交数据的get方式容易被人肉眼看到，或者出现在历史纪录里，还是可能
被肉眼看到，都是一些本地的问题。
</code></pre>
<p>注：get方式主要是为了获得预期内容，即uri+query相同时所得到的内容应该是相同的。而post主要是提交内容，至于是否有必要返回页面可<br>能只是出于用户体验，比如注册时返回你的注册id，但是如果只是返回一个“您已注册成功”的相同页面（即使你post的数据不一样）也没什么好奇怪的。</p>
<h4 id="HTTP-POST-GET-本质区别"><a href="#HTTP-POST-GET-本质区别" class="headerlink" title="HTTP POST GET 本质区别"></a>HTTP POST GET 本质区别</h4><p>1.原理区别</p>
<pre><code>一般在浏览器中输入网址访问资源都是通过GET方式；在FORM提交中，可以通过Method指定提交方式为GET或者POST，默认为GET提交 
Http定义了与服务器交互的不同方法，最基本的方法有4种，分别是GET，POST，PUT，DELETE URL 全称是资源描述符，我们可以这样认
为：一个URL地址，它用于描述一个网络上的资源，而HTTP中的GET，POST，PUT，DELETE就对应着对这个资源的查 ，改 ，增 ，删 4个
操作。到这里，大家应该有个大概的了解了，GET一般用于获取/查询 资源信息，而POST一般用于更新 资源信息(个人认为这是GET和POST
的本质区别，也是协议设计者的本意，其它区别都是具体表现形式的差异 )。 　　
</code></pre>
<p>2.根据HTTP规范，GET用于信息获取，而且应该是安全的和幂等的 。 　　</p>
<pre><code>1.所谓安全的意味着该操作用于获取信息而非修改信息。换句话说，GET请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数
据库查询一样，不会修改，增加数据，不会影响资源的状态。 
　　
* 注意：这里安全的含义仅仅是指是非修改信息。 　　

2.幂等的意味着对同一URL的多个请求应该返回同样的结果。这里我再解释一下幂等 这个概念： 　　

幂等 （idempotent、idempotence）是一个数学或计算机学概念，常见于抽象代数中。 　　

    幂等有以下几种定义：对于单目运算，如果一个运算对于在范围内的所有的一个数多次进行该运算所得的结果和进行一次该运算所得的结
    果是一样的，那么我们就称该运算是幂等的。比如绝对值运算就是一个例子，在实数集中，有abs(a) = abs(abs(a)) 。 　　

    对于双目运算，则要求当参与运算的两个值是等值的情况下，如果满足运算结果与参与运算的两个值相等，则称该运算幂等，如求两个数
    的最大值的函数，有在在实数集中幂等，即max(x,x) = x 。 看完上述解释后，应该可以理解GET幂等的含义了。 　　

    但在实际应用中，以上2条规定并没有这么严格。引用别人文章的例子：比如，新闻站点的头版不断更新。虽然第二次请求会返回不同
    一批新闻，该操作仍然被认为是安全的和幂等的，因为它总是返回当前的新闻。从根本上说，如果目标是当用户打开一个链接时，他可以
    确信从自身的角度来看没有改变资源即可。 
    
     根据HTTP规范，POST表示可能修改变服务器上的资源的请求 。继续引用上面的例子：还是新闻以网站为例，读者对新闻发表自己的评
     论应该通过POST实现，因为在评论提交后站点的资源已经不同了，或者说资源被修改了。 　　

    
</code></pre>
<p>3.上面大概说了一下HTTP规范中，GET和POST的一些原理性的问题。但在实际的做的时候，很多人却没有按照HTTP规范去做，导致这个问题的原因有很多，比如说：</p>
<pre><code> 　　        
    1.很多人贪方便，更新资源时用了GET，因为用POST必须要到FORM（表单），这样会麻烦一点。　　
    2.对资源的增，删，改，查操作，其实都可以通过GET/POST完成，不需要用到PUT和DELETE。 　　
    3.另外一个是，早期的但是Web MVC框架设计者们并没有有意识地将URL当作抽象的资源来看待和设计 。还有一个较为严重的问题是
    传统的Web MVC框架基本上都只支持GET和POST两种HTTP方法，而不支持PUT和DELETE方法。
</code></pre>
]]></content>
      <categories>
        <category>python框架</category>
      </categories>
      <tags>
        <tag>Django请求类型</tag>
      </tags>
  </entry>
  <entry>
    <title>Django框架07--表单</title>
    <url>/jwangcloud/3826544670/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/Django.jpeg"></p>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>django的form有两个功能,第一个是帮助我们生成表单,在html里面,第二个功能是帮我们验证表单</p>
<span id="more"></span>

<h2 id="1-生成表单"><a href="#1-生成表单" class="headerlink" title="1. 生成表单"></a>1. 生成表单</h2><ol>
<li><p>首先我们会在一个外部的forms.py文件里面建立我们的表单类,在这个类的定义的字段会直接显示在html里面,我们不用在html里面去写input标签</p>
<blockquote>
<p>test1/forms.py</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">from django import forms</span><br><span class="line"></span><br><span class="line">class LoginForm(forms.Form):</span><br><span class="line">    zhanghu &#x3D; forms.CharField(max_length&#x3D;10)</span><br><span class="line">    mima &#x3D; forms.CharField(max_length&#x3D;20)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>在views里面去实例化表单类,注意,我们是去实例化forms.py里面的LoginForm 然后把实例化的对象login_form 传递给模板 login_test.html 传递的值是 form</p>
<blockquote>
<p>test1/views.py</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">def test5(request):</span><br><span class="line"></span><br><span class="line">	 from movies.forms import LoginForm</span><br><span class="line">    method &#x3D; request.method</span><br><span class="line"></span><br><span class="line">    if method &#x3D;&#x3D; &quot;GET&quot;:</span><br><span class="line">        login_form &#x3D; LoginForm()</span><br><span class="line">        return render(request,&#39;test1&#x2F;login_test.html&#39;,&#123;&#39;form&#39;:login_form&#125;)</span><br><span class="line">    elif method &#x3D;&#x3D; &quot;POST&quot;:</span><br><span class="line">        account &#x3D; request.POST[&#39;account&#39;]</span><br><span class="line">        password &#x3D; request.POST[&#39;password&#39;]</span><br><span class="line">        return HttpResponse(&#39;POST&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>在html里面去调用form,以为接受值,因为我们在views.py里面定义就是form,当然我们也可以定义其他的值</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">return render(request,&#39;test1&#x2F;login_test.html&#39;,&#123;&#39;form&#39;:login_form&#125;)</span><br><span class="line">	</span><br></pre></td></tr></table></figure>
<blockquote>
<p>templates/movies/login_test.html</p>
</blockquote>
<pre><code> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;hi Login!&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:18001&#x2F;login&#x2F;&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">    &#123;&#123; form &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>python框架</category>
      </categories>
      <tags>
        <tag>Django表单</tag>
      </tags>
  </entry>
  <entry>
    <title>Django框架06--csrf</title>
    <url>/jwangcloud/493232681/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/Django.jpeg"></p>
<h2 id="CSRF概念："><a href="#CSRF概念：" class="headerlink" title="CSRF概念："></a>CSRF概念：</h2><span id="more"></span>

<ol>
<li>全称: CSRF跨站点请求伪造(Cross—Site Request Forgery)</li>
<li>解释: 攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。 如下：其中Web A为存在CSRF漏洞的网站，Web B为攻击者构建的恶意网站，User C为Web A网站的合法用户。</li>
</ol>
<h2 id="CSRF攻击攻击原理及过程"><a href="#CSRF攻击攻击原理及过程" class="headerlink" title="CSRF攻击攻击原理及过程"></a>CSRF攻击攻击原理及过程</h2><ol>
<li><p>用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A；</p>
</li>
<li><p>在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A；</p>
</li>
<li><p>用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B；</p>
</li>
<li><p>网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A；</p>
</li>
</ol>
<ol start="5">
<li>浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。 </li>
</ol>
<h2 id="CSRF攻击实例"><a href="#CSRF攻击实例" class="headerlink" title="CSRF攻击实例"></a>CSRF攻击实例</h2><p>受害者 Bob 在银行有一笔存款，通过对银行的网站发送请求 <a href="http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=bob2">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=bob2</a> 可以使 Bob 把 1000000 的存款转到 bob2 的账号下。通常情况下，该请求发送到网站后，服务器会先验证该请求是否来自一个合法的 session，并且该 session 的用户 Bob 已经成功登陆。</p>
<p>黑客 Mallory 自己在该银行也有账户，他知道上文中的 URL 可以把钱进行转帐操作。Mallory 可以自己发送一个请求给银行：<a href="http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory%E3%80%82%E4%BD%86%E6%98%AF%E8%BF%99%E4%B8%AA%E8%AF%B7%E6%B1%82%E6%9D%A5%E8%87%AA">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory。但是这个请求来自</a> Mallory 而非 Bob，他不能通过安全认证，因此该请求不会起作用。</p>
<p>这时，Mallory 想到使用 CSRF 的攻击方式，他先自己做一个网站，在网站中放入如下代码： src=”<a href="http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</a> ”，并且通过广告等诱使 Bob 来访问他的网站。当 Bob 访问该网站时，上述 url 就会从 Bob 的浏览器发向银行，而这个请求会附带 Bob 浏览器中的 cookie 一起发向银行服务器。大多数情况下，该请求会失败，因为他要求 Bob 的认证信息。但是，如果 Bob 当时恰巧刚访问他的银行后不久，他的浏览器与银行网站之间的 session 尚未过期，浏览器的 cookie 之中含有 Bob 的认证信息。这时，悲剧发生了，这个 url 请求就会得到响应，钱将从 Bob 的账号转移到 Mallory 的账号，而 Bob 当时毫不知情。等以后 Bob 发现账户钱少了，即使他去银行查询日志，他也只能发现确实有一个来自于他本人的合法请求转移了资金，没有任何被攻击的痕迹。而 Mallory 则可以拿到钱后逍遥法外。</p>
<h2 id="防御CSRF攻击"><a href="#防御CSRF攻击" class="headerlink" title="防御CSRF攻击"></a>防御CSRF攻击</h2><h3 id="目前防御-CSRF-攻击主要有三种策略：验证-HTTP-Referer-字段；在请求地址中添加-token-并验证；在-HTTP-头中自定义属性并验证。"><a href="#目前防御-CSRF-攻击主要有三种策略：验证-HTTP-Referer-字段；在请求地址中添加-token-并验证；在-HTTP-头中自定义属性并验证。" class="headerlink" title="目前防御 CSRF 攻击主要有三种策略：验证 HTTP Referer 字段；在请求地址中添加 token 并验证；在 HTTP 头中自定义属性并验证。"></a>目前防御 CSRF 攻击主要有三种策略：验证 HTTP Referer 字段；在请求地址中添加 token 并验证；在 HTTP 头中自定义属性并验证。</h3><h3 id="（1）验证-HTTP-Referer-字段"><a href="#（1）验证-HTTP-Referer-字段" class="headerlink" title="（1）验证 HTTP Referer 字段"></a>（1）验证 HTTP Referer 字段</h3><p>根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，比如需要访问 <a href="http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory%EF%BC%8C%E7%94%A8%E6%88%B7%E5%BF%85%E9%A1%BB%E5%85%88%E7%99%BB%E9%99%86">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory，用户必须先登陆</a> bank.example，然后通过点击页面上的按钮来触发转账事件。这时，该转帐请求的 Referer 值就会是转账按钮所在的页面的 URL，通常是以 bank.example 域名开头的地址。而如果黑客要对银行网站实施 CSRF 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 Referer 是指向黑客自己的网站。因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值，如果是以 bank.example 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果 Referer 是其他网站的话，则有可能是黑客的 CSRF 攻击，拒绝该请求。</p>
<p>这种方法的显而易见的好处就是简单易行，网站的普通开发人员不需要操心 CSRF 的漏洞，只需要在最后给所有安全敏感的请求统一增加一个拦截器来检查 Referer 的值就可以。特别是对于当前现有的系统，不需要改变当前系统的任何已有代码和逻辑，没有风险，非常便捷。</p>
<p>然而，这种方法并非万无一失。Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于 Referer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 Referer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不安全。事实上，对于某些浏览器，比如 IE6 或 FF2，目前已经有一些方法可以篡改 Referer 值。如果 bank.example 网站支持 IE6 浏览器，黑客完全可以把用户浏览器的 Referer 值设为以 bank.example 域名开头的地址，这样就可以通过验证，从而进行 CSRF 攻击。</p>
<p>即便是使用最新的浏览器，黑客无法篡改 Referer 值，这种方法仍然有问题。因为 Referer 值会记录下用户的访问来源，有些用户认为这样会侵犯到他们自己的隐私权，特别是有些组织担心 Referer 值会把组织内网中的某些信息泄露到外网中。因此，用户自己可以设置浏览器使其在发送请求时不再提供 Referer。当他们正常访问银行网站时，网站会因为请求没有 Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。</p>
<p>###（2）在请求地址中添加 token 并验证</p>
<p>CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。</p>
<p>这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 <a href="http://url/?csrftoken=tokenvalue%E3%80%82">http://url?csrftoken=tokenvalue。</a> 而对于 POST 请求来说，要在 form 的最后加上 <input type="”hidden”" name="”csrftoken”" value="”tokenvalue”/">，这样就把 token 以参数的形式加入请求了。但是，在一个网站中，可以接受请求的地方非常多，要对于每一个请求都加上 token 是很麻烦的，并且很容易漏掉，通常使用的方法就是在每次页面加载时，使用 javascript 遍历整个 dom 树，对于 dom 中所有的 a 和 form 标签后加入 token。这样可以解决大部分的请求，但是对于在页面加载之后动态生成的 html 代码，这种方法就没有作用，还需要程序员在编码时手动添加 token。</p>
<p>该方法还有一个缺点是难以保证 token 本身的安全。特别是在一些论坛之类支持用户自己发表内容的网站，黑客可以在上面发布自己个人网站的地址。由于系统也会在这个地址后面加上 token，黑客可以在自己的网站上得到这个 token，并马上就可以发动 CSRF 攻击。为了避免这一点，系统可以在添加 token 的时候增加一个判断，如果这个链接是链到自己本站的，就在后面添加 token，如果是通向外网则不加。不过，即使这个 csrftoken 不以参数的形式附加在请求之中，黑客的网站也同样可以通过 Referer 来得到这个 token 值以发动 CSRF 攻击。这也是一些用户喜欢手动关闭浏览器 Referer 功能的原因。</p>
<p>###（3）在 HTTP 头中自定义属性并验证</p>
<p>这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。</p>
<p>然而这种方法的局限性非常大。XMLHttpRequest 请求通常用于 Ajax 方法中对于页面局部的异步刷新，并非所有的请求都适合用这个类来发起，而且通过该类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作，给用户带来不便。另外，对于没有进行 CSRF 防护的遗留系统来说，要采用这种方法来进行防护，要把所有请求都改为 XMLHttpRequest 请求，这样几乎是要重写整个网站，这代价无疑是不能接受的。</p>
]]></content>
      <categories>
        <category>python框架</category>
      </categories>
      <tags>
        <tag>Django CSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>Django框架05--语法整理</title>
    <url>/jwangcloud/663967090/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/Django.jpeg"></p>
<h2 id="0-笔记格式说明"><a href="#0-笔记格式说明" class="headerlink" title="0.笔记格式说明"></a>0.笔记格式说明</h2><span id="more"></span>

<ol>
<li>代码位置的表示</li>
</ol>
<p>笔记中会有很多代码,比如</p>
<blockquote>
<p>mytest.views.py</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.contrib.auth.models import User</span><br><span class="line">from rest_framework import serializers, viewsets</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<ol>
<li>mytest.views.py表示在根目录下面的 mytest文件夹 下面的views.py中<br>写入或者查找这些代码</li>
<li>下面那边表示代码</li>
<li>… 三个省略号表示已有代码,需要你到代码中去查看</li>
</ol>
<h2 id="1-restful-api简介"><a href="#1-restful-api简介" class="headerlink" title="1. restful api简介"></a>1. restful api简介</h2><ol>
<li><p>作用:关于如何去设计url的,url的设计其实是很麻烦</p>
</li>
<li><p>观点: url表示了网站的资源</p>
<ol>
<li>URL(Uniform Resoure Locator):统一资源定位符</li>
<li>我们是去通过URL去操控网站里面的资源(数据)</li>
<li>这个Url或者资源他是静态的</li>
</ol>
</li>
<li><p>关于资源的操作(动态的)</p>
<ol>
<li>获取 GET方法</li>
<li>修改 PUT PATCH修改</li>
<li>删除 DELETE</li>
<li>新加 POST</li>
</ol>
</li>
<li><p>思考 comments/delete url的问题</p>
<pre><code> 答案: 以restful标准去设计url的话,他所有的url都是表示静态资源的,他不能有动词
</code></pre>
</li>
<li><p>login logout 怎么去改写:<br> 答案 : 登录是关于session的操作</p>
</li>
<li><p><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html">http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a></p>
</li>
</ol>
<h2 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h2><ol>
<li><p>需要安装的软件</p>
<ol>
<li>django 1.11版本</li>
<li>django drf 最新版本<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install django&#x3D;&#x3D;1.11</span><br><span class="line">pip install djangorestframework</span><br><span class="line">pip install markdown</span><br><span class="line">pip install django-filter</span><br><span class="line">pip install coreapi</span><br></pre></td></tr></table></figure></li>
<li>postman发送get或者post方法的工具<br> <a href="https://www.getpostman.com/apps">https://www.getpostman.com/apps</a></li>
</ol>
</li>
<li><p>在setting中加入drf app应用</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS &#x3D; (</span><br><span class="line">    ...</span><br><span class="line">    &#39;rest_framework&#39;,</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在drf_movie_rimi.urls.py中配置url</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.conf.urls import include</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    ...</span><br><span class="line">    url(r&#39;^api-auth&#x2F;&#39;, include(&#39;rest_framework.urls&#39;))</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在settings.py中配置drf的权限</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    # Use Django&#39;s standard &#96;django.contrib.auth&#96; permissions,</span><br><span class="line">    # or allow read-only access for unauthenticated users.</span><br><span class="line">    &#39;DEFAULT_PERMISSION_CLASSES&#39;: [</span><br><span class="line">        &#39;rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly&#39;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>安装drf自动文档生成功能</li>
</ol>
<p>drf_movie_rimi.urls.py</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">from rest_framework.documentation import include_docs_urls</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    ...</span><br><span class="line">    url(r&#39;^docs&#x2F;&#39;, include_docs_urls(title&#x3D;&#39;My API title&#39;))</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>访问文档url  <a href="http://127.0.0.1:8001/docs/">http://127.0.0.1:8001/docs/</a></p>
</blockquote>
<h2 id="3-drf快速上手"><a href="#3-drf快速上手" class="headerlink" title="3. drf快速上手"></a>3. drf快速上手</h2><h3 id="1-示例代码"><a href="#1-示例代码" class="headerlink" title="1. 示例代码"></a>1. 示例代码</h3><ol>
<li>新建一个 test的 app 来实验一下drf</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">startapp mytest</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>书写drf代码</li>
</ol>
<blockquote>
<p>1.定义视图类和视图类需要的序列化类</p>
</blockquote>
<blockquote>
<p>mytest.views.py</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.contrib.auth.models import User</span><br><span class="line">from rest_framework import serializers, viewsets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义序列化数据 把user表里面的 url username mail is_staff字段提取出来</span><br><span class="line">class UserSerializer(serializers.HyperlinkedModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        #使用哪个数据模型</span><br><span class="line">        model &#x3D; User</span><br><span class="line">        #序列化哪些字段出来</span><br><span class="line">        fields &#x3D; (&#39;url&#39;, &#39;username&#39;, &#39;email&#39;, &#39;is_staff&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserViewSet(viewsets.ModelViewSet):</span><br><span class="line">    queryset &#x3D; User.objects.all()</span><br><span class="line">    serializer_class &#x3D; UserSerializer</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.定义路由 把mytest的url包含到总url中</p>
</blockquote>
<blockquote>
<p>drf_movie_rimi.urls.py</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">from django.conf.urls import url,include</span><br><span class="line">from django.contrib import admin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    ...</span><br><span class="line">    url(r&#39;^mytest&#x2F;&#39;, include(&#39;mytest.urls&#39;)),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在mytest的app中定义路由，指向到我们的视图函数</p>
</blockquote>
<blockquote>
<p>mytest.urls.py</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">from rest_framework import routers</span><br><span class="line">from mytest.views import UserViewSet</span><br><span class="line">from django.conf.urls import include,url</span><br><span class="line"></span><br><span class="line">router &#x3D; routers.DefaultRouter()</span><br><span class="line">router.register(r&#39;users&#39;, UserViewSet)</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^&#39;, include(router.urls)),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>使用 createsuperuser 的api 来新建一个或者几个用户的信息</p>
</li>
<li><p>访问接口 查看数据</p>
</li>
<li><p>代码简单解释</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;mytest&#x2F;users&#x2F;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4-知识点讲解"><a href="#4-知识点讲解" class="headerlink" title="4. 知识点讲解"></a>4. 知识点讲解</h2><h3 id="1-views"><a href="#1-views" class="headerlink" title="1. views"></a>1. views</h3><ol>
<li><p>drf的views和django原生的views一样,可以返回数据,获取get,post方法的参数,验证数据等等。<br>也可以像之前listview detailview, createview deleteview 一样,直接帮你做列表和单<br>个数据的查询,创建数据,删除数据</p>
</li>
<li><p>基础view 函数视图</p>
<ol>
<li>我们可以像django最基础的函数视图一样,去返回一个报文给http请求,注意我们需要加上装饰器<br>才能运行</li>
</ol>
<p> 定义views</p>
<blockquote>
<p>mytest.view_test1.py</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">from rest_framework.decorators import api_view</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">@api_view()</span><br><span class="line">def hello_world(request):</span><br><span class="line">    return Response(&#123;&quot;message&quot;: &quot;Hello, world!&quot;&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<pre><code>定义url路由
&gt;mytest.urls.py
</code></pre>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">...</span><br><span class="line">from mytest.view_test1 import hello_world</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    ...</span><br><span class="line">    url(r&#39;test2&#39;,hello_world),</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<pre><code>如果上面的函数运行成功,我们就可以去通过最简单得函数视图去解决 简单得业务逻辑,如get请求
post请求,但是事情没有那么简单

我们会发现你用post 方法是不行的,需要加上方法的装饰器
&gt;mytest.view_test1.py

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">from rest_framework.decorators import api_view</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">@api_view([&#39;GET&#39;, &#39;POST&#39;])</span><br><span class="line">def hello_world(request):</span><br><span class="line">    return Response(&#123;&quot;message&quot;: &quot;Hello, world!&quot;&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
<p>   练习:</p>
<pre><code>  1. 使用postman发送post方法 断点查看request的值,实现一个功能, get post方法过来
分别返回不同的值
  2. 再次观察我们的response
   里面值,我们传递的是一个list或者dict,如果是django的话你会收到一个报错,但是drf里面的response
   会帮我们解析成json数据格式
</code></pre>
<p>   查看其实这个request的值其实是rest_framework的request解析过来的,和我们之间的django request有什么不一样</p>
<ol start="2">
<li>APIView</li>
</ol>
<pre><code>APIView是我们接触到的第一个类视图,就像django的template view一样 是基础的视图类,你需要自己去定义get post
方法,需要自己去定义返回的数据,但是我们可以看到,我们不用自己去解析get方法和post方法,
只用重写get post函数就可以去截取get ost方法传过来的参数

   1. 简单的get post请求
    mytest.view_test1.py
    
    
    
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from rest_framework import authentication, permissions</span><br><span class="line">from django.contrib.auth.models import User</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">class ListUsers(APIView):</span><br><span class="line"></span><br><span class="line">    def get(self, request, format&#x3D;None):</span><br><span class="line">        return Response(&#123;&quot;get&quot;: &quot;Hello, world!&quot;&#125;)</span><br><span class="line"></span><br><span class="line">    def post(self, request, format&#x3D;None):</span><br><span class="line">            return Response(&#123;&quot;post&quot;: &quot;Hello, world!&quot;&#125;)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>


    定义url路由
    &gt;mytest.urls.py

    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">from mytest.view_test1 import ListUsers</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    ...</span><br><span class="line">    url(r&#39;test1&#39;,ListUsers.as_view()),</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

   2. APIView里面包含了很多强大的功能,比如我们权限控制

   我们制作一个接口,访问用户数据接口,由于用户信息比较敏感，我们需要授权用户(登录用户)去才能访问
   APIView里面自带了权限验证接口,接口分为两部分:

   1. 通过一定的方式，比如session或者cookie或者其他区识别用户是哪个
       &gt;authentication_classes

   2. 通过识别好的用户身份，去判断他是否由权限使用这个接口
       &gt; permission_classes

   mytest.view_test1.py
   
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from rest_framework import authentication, permissions</span><br><span class="line"></span><br><span class="line">class ListUsersV2(APIView):</span><br><span class="line"></span><br><span class="line">#通过什么方式来验证用户,这个例子里面是通过token来验证用户信息</span><br><span class="line">authentication_classes &#x3D; (authentication.TokenAuthentication,)</span><br><span class="line">#用户必须是什么级别才能使用这个接口</span><br><span class="line">permission_classes &#x3D; (permissions.IsAdminUser,permissions.IsAuthenticatedOrReadOnly)</span><br><span class="line"></span><br><span class="line">def get(self, request, format&#x3D;None):</span><br><span class="line">    return Response(&#123;&quot;get&quot;: &quot;Hello, world!&quot;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def post(self, request, format&#x3D;None):</span><br><span class="line">    return Response([username for username in User.objects.all()])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

    定义url路由
    &gt;mytest.urls.py

    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">from mytest.view_test1 import ListUsersV2</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    ...</span><br><span class="line">    url(r&#39;test3&#39;,ListUsersV2.as_view()),</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

    3. GenericAPIView解析

        1. GenericAPIView解析继承自 APIView 扩展了他的很多功能
        <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class GenericAPIView(views.APIView):</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

        2. GenericAPIView的具体功能

            1. 强制要求传递 queryset和serializer_class

            <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">queryset &#x3D; None</span><br><span class="line">serializer_class &#x3D; None</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

            2. 为detailview 默认制定pk为查询的依据

            <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lookup_field &#x3D; &#39;pk&#39;</span><br><span class="line">lookup_url_kwarg &#x3D; None</span><br></pre></td></tr></table></figure>

            3. 定义 get_queryset get_serializer_class等class,指定分页 扩展第一个功能

            4. 参看 mytest.view_test5.py 我们可以直接调用他的函数，获取序列化的数据
            返回给前端

            <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">class UserListTest5V1(generics.GenericAPIView):</span><br><span class="line">   queryset &#x3D; User.objects.all()</span><br><span class="line">   serializer_class &#x3D; UserSerializer</span><br><span class="line"></span><br><span class="line">   def get(self, request, format&#x3D;None):</span><br><span class="line">       serializer &#x3D; self.get_serializer(self.get_queryset(), many&#x3D;True)</span><br><span class="line">       return Response(serializer.data)</span><br></pre></td></tr></table></figure>




4. 访问速度控制

mytest.view_test1.py

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from rest_framework.throttling import UserRateThrottle</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">class OncePerDayUserThrottle(UserRateThrottle):</span><br><span class="line">    rate &#x3D; &#39;1&#x2F;day&#39;</span><br><span class="line"></span><br><span class="line">class ListUsersV2(APIView):</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">throttle_classes &#x3D; (OncePerDayUserThrottle,)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
<ol start="3">
<li><p>Generic views 封装了一定功能的view类</p>
<ol>
<li><p>简介: 回想django的listview 我们通过这个类无需自己去数据库取东西,<br>只需要告诉他我们的model是什么 模板用什么 他就可以帮我们自动的完成浏览你要<br>访问的model,然后返回给模板数据</p>
</li>
<li><p>ListAPIView 类似于detailview一样 返回给我们所有数据的列表</p>
<ol>
<li><p>queryset 告诉他我们需要使用哪个数据</p>
</li>
<li><p>serializer_class 告诉他我们使用哪个序列化定义</p>
</li>
</ol>
</li>
</ol>
<p> mytest.view_test2.py</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">from django.contrib.auth.models import User</span><br><span class="line">from rest_framework import generics</span><br><span class="line">from rest_framework.permissions import IsAdminUser</span><br><span class="line">from rest_framework import serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserSerializer(serializers.Serializer):</span><br><span class="line">    username &#x3D; serializers.CharField(max_length&#x3D;50)</span><br><span class="line"></span><br><span class="line">class UserList(generics.ListAPIView):</span><br><span class="line">    queryset &#x3D; User.objects.all()</span><br><span class="line">    serializer_class &#x3D; UserSerializer</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> mytest.urls.py</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">...</span><br><span class="line">from mytest.view_test2 import UserList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    ...</span><br><span class="line">    url(r&#39;test5&#39;,UserList.as_view()),</span><br><span class="line">    url(r&#39;^&#39;, include(router.urls)),</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<pre><code>3. ListAPIView解析

    查看他的源码 发现他是由mixins和GenericAPIView组合生成的一个类,
    其中重写了get方法,让get方法去执行mixins里面的list方法

    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class ListAPIView(mixins.ListModelMixin,</span><br><span class="line">                  GenericAPIView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Concrete view for listing a queryset.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        return self.list(request, *args, **kwargs)</span><br></pre></td></tr></table></figure>

    mixins是什么，如何理解mixins就成了理解这个类的关键

4. Mixin解析

    1. 简介:通过上面的ListAPIView 我们可以有了很便捷的方式去获取数据库里面的
    数据 比如通过下面函数我们就可以获取到序列化的数据
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">serializer &#x3D; self.get_serializer(self.get_queryset(), many&#x3D;True)</span><br></pre></td></tr></table></figure>


    2. 但是这样不符合DRY原则,我们每次使用ListAPIView或者APIVIEW
    我们都需要自己的去序列化数据返回给前,我们需要一种方法,他已经给我们
    写好了,我们只需要去继承他,就可以免费的使用它的序列化方法,所有就有了
    Mixins,我们继承mixins其实 就是去让他改写了我们get post等等方法,我们
    就不用想

    3. mixins
        1. ListModelMixin  对应获取列表的方法

        2. RetrieveModelMixin 对应获获取一条数据

        3. CreateModelMixin 对应创建数据

        4. UpdateModelMixin 对应修改数据的时候调用

        5. DestroyModelMixin 对应删除数据的时候调用






5. 组合构建view的思路解析

    1. APIView

        1. 里面实现了很多基础的方法,比如我们可以通过APIView
        去截获 get post方法，去限制访问速度,限制用户权限

        &gt; 参看 mytest.view_test1.py

        <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"> class ListUsersV2(APIView):</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

        &gt; 参看 APIView的源码

        2. 比如我们需要获取User表里面的部分数据,我们会怎么办

        练习: 自己实现一个通过get,post,put,delete等方法访问,获取用户不同的字段信息,
        或者返回不同的值,表示了你访问了不同的方法

        答案: mytest.view_test3.py
        
        <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from django.contrib.auth.models import User</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ListUsersV2(APIView):</span><br><span class="line"></span><br><span class="line">    def get(self, request, format&#x3D;None):</span><br><span class="line">        return Response([i.username for i in User.objects.all()])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

        3. 使用get方法获取用户数据 username,email,password, 并且是key:value的形式
        答案: mytest.view_test3.py
        
        <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">class ListUsersTest3V2Serializer(serializers.Serializer):</span><br><span class="line">    username &#x3D; serializers.CharField(max_length&#x3D;100)</span><br><span class="line">    email &#x3D; serializers.EmailField()</span><br><span class="line">    password &#x3D; serializers.CharField(max_length&#x3D;100)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ListUsersTest3V2(APIView):</span><br><span class="line"></span><br><span class="line">    def get(self, request, format&#x3D;None):</span><br><span class="line">        # datas &#x3D; []</span><br><span class="line">        # for i in User.objects.all():</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        datas &#x3D; ListUsersTest3V2Serializer(User.objects.all()[0])</span><br><span class="line">        return Response(datas.data)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
        我们可以把数据交给序列化去帮我们把数据转化成可迭代对象或者可以被json化的数据

    2. Mixin + APIView
        1. 通过上面的接口可以知道,我们可以通过APIView实现很多我们想要的功能,
        但是,很多逻辑需要我们自己去实现,比如创建一条时间,遍历一条数据。我们也需要去
        定义get post方法去识别这些方法,来判断是否是遍历数据还是添加数据.这时候 我们
        需要mixin去帮我们实现这些功能,我们就可以少些重复性的代码。

        2. 查看mixin源码 mixins.ListModelMixin 我们可以看到他有一个list方法,
        方法的含义是把model里面的数据交给一个serializer 然后返回数据 这样 listMixin
        就有了遍历所有数据的功能

        <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class ListModelMixin(object):</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">List a queryset.</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">def list(self, request, *args, **kwargs):</span><br><span class="line">    queryset &#x3D; self.filter_queryset(self.get_queryset())</span><br><span class="line"></span><br><span class="line">    page &#x3D; self.paginate_queryset(queryset)</span><br><span class="line">    if page is not None:</span><br><span class="line">        serializer &#x3D; self.get_serializer(page, many&#x3D;True)</span><br><span class="line">        return self.get_paginated_response(serializer.data)</span><br><span class="line"></span><br><span class="line">    serializer &#x3D; self.get_serializer(queryset, many&#x3D;True)</span><br><span class="line">    return Response(serializer.data)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

        3.问题: 既然我们有mixin 为什么不直接继承mixin 而是需要把mixin和APIView
        结合来使用？

    3. ListAPIView其实就这个就是帮你把Mixin和apiview组合好了给你直接使用,
    还有其他很多方法 RetrieveAPIView,DestroyAPIView,RetrieveUpdateDestroyAPIView
    这些便捷的组合方法

    &gt; 我们只需要告诉他使用哪个model queryset serializer_class即可,他自动会帮我们
    完成数据遍历的功能和返回Response的工作
    
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class ListUsersTest3V3(ListAPIView):</span><br><span class="line"></span><br><span class="line">    model &#x3D; User</span><br><span class="line">    queryset &#x3D; User.objects.all()</span><br><span class="line">    serializer_class &#x3D; ListUsersTest3V2Serializer</span><br><span class="line"></span><br></pre></td></tr></table></figure>


    4. rest_framework.viewsets 更加高层的继承方法
        1. GenericAPIView 和 GenericViewSet


            1. 我们可以看到（源码） ListAPIView  viewsets 都是用了各种mixin
           来做组合，但是 他们最后用的GenericAPIView GenericViewSet却不一样。

            2. 所以问题出在 继承的不同的组合mixin 和 GenericAPIView,GenericViewSet
           我们已经了解不同的mixin会给我们带来不同的快捷使用方法
           现在问题就出在 GenericAPIView GenericViewSet

            3. 再次研究 GenericAPIView GenericViewSet我们可以看到
            GenericViewSet继承自 GenericAPIView 和ViewSetMixin，我们已经知道
            GenericAPIView的用处,那么GenericViewSet其实就是去扩展GenericAPIView,
            通过和ViewSetMixin去扩展

            4. ViewSetMixin 其实就是去改写我们的 get post等方法,让他在request.action
            里面变成 list create等等 观察下面的代码


            &gt;mytest.view_test4.py
            
            <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class UserListTest4V1(generics.ListAPIView):</span><br><span class="line">    queryset &#x3D; User.objects.all()</span><br><span class="line">    serializer_class &#x3D; UserSerializer</span><br><span class="line"></span><br><span class="line">    def get_queryset(self):</span><br><span class="line">        x &#x3D; self.request.method</span><br><span class="line">        return super().get_queryset()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserListTest4V2(viewsets.ReadOnlyModelViewSet):</span><br><span class="line">    queryset &#x3D; User.objects.all()</span><br><span class="line">    serializer_class &#x3D; UserSerializer</span><br><span class="line"></span><br><span class="line">    def get_queryset(self):</span><br><span class="line">        x &#x3D; self.action</span><br><span class="line">        return super().get_queryset()</span><br></pre></td></tr></table></figure>

            在return上面断点 查看x的值是什么

            5. 再次查看ListAPIView源码 我们发现他的代码逻辑是重写了
            get方法 把get方法换成mixins里面的list方法
            
            <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">class ListAPIView(mixins.ListModelMixin,</span><br><span class="line">  GenericAPIView):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Concrete view for listing a queryset.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        return self.list(request, *args, **kwargs)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

            6. 查看viewsets中的方法,没有重写任何方法，直接继承过去,
            得益于我们的GenericViewSet把我们的方法换成了list等等,所以可以直接
            去使用

        2. viewset系列的里面的各种方法

            1. ReadOnlyModelViewSet

                只能查看单条数据或者多条数据

            2. ModelViewSet

                增删查改四种方法

6. 总结:
    1. 最基本的drf的view函数

    2. APIView 提供了权限 限速等等功能 和高级的GenericAPIView提供了必须自定义序列化
    和请求哪个数据库

    3. ListCreateAPIView等等组合的view 来实现各种常用的方法 但是他需要改写get post等等

    4.  ModelViewSet 等等更高级的组合view 他无需改写 get post方法

    5.  区分 generics里面的view 和 viewset里面的view 两者都是组合功能 都可以使用,但是后者更好
    用
</code></pre>
<h3 id="2-serializers"><a href="#2-serializers" class="headerlink" title="2. serializers"></a>2. serializers</h3><ol>
<li><p>serializers 序列化类的意义(验证数据和展示数据)</p>
<ol>
<li><p>序列化的简介:<br> 就像form表单一样,帮你生成表单和验证表单,序列化帮你验证和生成数据</p>
</li>
<li><p>序列化的意义:<br> 把我们复杂的数据库请求,请求之后得到的数据,转化成json,xml等简单的数据库格式<br> 类似于之前学到的form表单和formModel类,把我们定义复杂的表单转化成html的实际表单<br> ,这样你就不会在乎数据是怎么转化成html或者json的细节问题,只用定义好你对数据要求的<br> 格式，和需要序列化哪些数据即可</p>
</li>
</ol>
</li>
<li><p>外部使用django:</p>
<ol>
<li><p>django平时使用它的的功能把一些数据存入数据库,我们需要启动django的server(runserver),</p>
<pre><code> 定义view然后做路由,然后定义url，访问url,django才会执行view里面的
 相应的函数,试想一下,如果我们直接去执行一个定义好的文件去存入数据,肯定会报错

 见 mytest.test1.py
</code></pre>
</li>
<li><p>但是我们也可以在不启动django server的情况下,启动django的api,比如刚才的存入数据，我们只需要</p>
<pre><code> 在代码的运行环境中去设置django的目录,django的配置（settings.py）的位置接口,我们可以
 解决这个报错,也就可以从外部去启动django

 见 mytest.test2.py
</code></pre>
</li>
</ol>
</li>
<li><p>如何把对象序列化</p>
<blockquote>
<p>mytest.tests.py  在下面的代码中 创建一个对象 然后把对象交给序列化去处理</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">from django.test import TestCase</span><br><span class="line"></span><br><span class="line"># Create your tests here.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    import sys, os</span><br><span class="line"></span><br><span class="line">    base_dir &#x3D; os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">    sys.path.append(base_dir)</span><br><span class="line">    os.environ[&#39;DJANGO_SETTINGS_MODULE&#39;] &#x3D; &#39;drf_movie_rimi.settings&#39;</span><br><span class="line"></span><br><span class="line">    from datetime import datetime</span><br><span class="line">    from rest_framework import serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    class Comment(object):</span><br><span class="line">        def __init__(self, email, content, created&#x3D;None):</span><br><span class="line">            self.email &#x3D; email</span><br><span class="line">            self.content &#x3D; content</span><br><span class="line">            self.created &#x3D; created or datetime.now()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    comment &#x3D; Comment(email&#x3D;&#39;leila@example.com&#39;, content&#x3D;&#39;foo bar&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    class CommentSerializer(serializers.Serializer):</span><br><span class="line">        email &#x3D; serializers.EmailField()</span><br><span class="line">        content &#x3D; serializers.CharField(max_length&#x3D;200)</span><br><span class="line">        created &#x3D; serializers.DateTimeField()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    serializer &#x3D; CommentSerializer(comment)</span><br><span class="line">    print(serializer.data)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>  &gt;mytest.tests.py
 使用serializer可以帮我们验证错误的数据
</code></pre>
</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">comment_error &#x3D; Comment(email&#x3D;&#39;leila@example.com&#39;, content&#x3D;&#39;foo bar&#39;)</span><br><span class="line">serializer_error &#x3D; CommentSerializer(data&#x3D;comment_error)</span><br><span class="line">print(serializer_error.is_valid())</span><br><span class="line">print(serializer_error.errors)</span><br></pre></td></tr></table></figure>
</code></pre>
<ol start="4">
<li><p>序列化详解</p>
<ol>
<li><p>serializers.Serializer 最基础的序列化类</p>
<ol>
<li><p>需要我们像form 一样自己去定义每个字段的要求</p>
<blockquote>
<p>mytest.tests.py</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class CommentSerializer(serializers.Serializer):</span><br><span class="line">    email &#x3D; serializers.EmailField()</span><br><span class="line">    content &#x3D; serializers.CharField(max_length&#x3D;200)</span><br><span class="line">    created &#x3D; serializers.DateTimeField()</span><br></pre></td></tr></table></figure></li>
<li><p>序列化后的数据，只会包含我们定义的数据，注意,就像form一样,不管我们的原始<br> 数据里面有好多数据,序列化出来的也只有我们定义的时候的那么多字段，注意我们的                对象<br> 有test=5但是序列化后的数据是没有test字段的</p>
<blockquote>
<p>mytest.tests.py</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	        </span><br><span class="line">class Comment(object):</span><br><span class="line">    def __init__(self, email, content, created&#x3D;None):</span><br><span class="line">        self.email &#x3D; email</span><br><span class="line">        self.content &#x3D; content</span><br><span class="line">        self.test &#x3D; &#39;5&#39;</span><br><span class="line">        self.created &#x3D; created or datetime.now()</span><br><span class="line">	        </span><br><span class="line">	        </span><br><span class="line"># 实例化一个对象 给予邮箱和内容</span><br><span class="line">comment &#x3D; Comment(email&#x3D;&#39;leila@example.com&#39;, content&#x3D;&#39;foo bar&#39;)</span><br><span class="line">	        </span><br><span class="line">	        </span><br><span class="line"># 定义序列化的数据要求</span><br><span class="line">class CommentSerializer(serializers.Serializer):</span><br><span class="line">    email &#x3D; serializers.EmailField()</span><br><span class="line">    content &#x3D; serializers.CharField(max_length&#x3D;200)</span><br><span class="line">    created &#x3D; serializers.DateTimeField()</span><br><span class="line">	</span><br></pre></td></tr></table></figure></li>
<li><p>序列化类可以帮我们验证数据是否满足我们定义的要求,就像form验证数据一样</p>
<ol>
<li>我们新建一个对象</li>
<li>把对象进行序列化成dict</li>
<li>把序列化后的数据(dict)交给序列化类检查(注意使用data)</li>
<li>验证后 可以使用is_valid查看是否验证成功</li>
<li>errors可以查看验证失败的信息</li>
<li>验证成功后可以通过validated_data来查看验证成功后的数据</li>
</ol>
<h5 id="注意-他只能验证-dict的数据-而且调用方法也不一样"><a href="#注意-他只能验证-dict的数据-而且调用方法也不一样" class="headerlink" title="注意:他只能验证 dict的数据 而且调用方法也不一样"></a>注意:他只能验证 dict的数据 而且调用方法也不一样</h5><blockquote>
<p>mytest.tests.py</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">comment_error &#x3D; Comment(email&#x3D;&#39;leie@mple.com&#39;, content&#x3D;&#39;foo bar&#39;)</span><br><span class="line">comment_data &#x3D; CommentSerializer(comment_error)</span><br><span class="line">serializer_error &#x3D; CommentSerializer(data&#x3D;comment_data.data)</span><br><span class="line">print(serializer_error.is_valid())</span><br><span class="line">print(serializer_error.errors)</span><br><span class="line">print(serializer_error.validated_data)</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li>
<li><p>我们可以把序列化后的dict转化为json数据格式</p>
<pre><code>   &gt;mytest.tests.py
     
     
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 		...</span><br><span class="line"> 		from rest_framework.renderers import JSONRenderer</span><br><span class="line">json &#x3D; JSONRenderer().render(comment_data.data)</span><br><span class="line">print(json)</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
 
</code></pre>
<p>同样 把json转化回来成dict</p>
<pre><code>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">       ...</span><br><span class="line">       </span><br><span class="line">       from django.utils.six import BytesIO</span><br><span class="line">from rest_framework.parsers import JSONParser</span><br><span class="line">					</span><br><span class="line">stream &#x3D; BytesIO(json)</span><br><span class="line">data &#x3D; JSONParser().parse(stream)</span><br><span class="line">  </span><br></pre></td></tr></table></figure>
 
</code></pre>
</li>
</ol>
</li>
<li><p>serializer 自带数据的存储功能,我们可以定义创建数据或者修改数据的的时候去数据库保存数据</p>
<ol>
<li><p>serializer 带有save 方法,调用save方法可以调用他的create和update方法,<br>在create方法中我们可以去添加自己的逻辑,比如保存数据。</p>
</li>
<li><p>保存数据 我们需要定义create方法 让他在调用save的时候的保存数据</p>
<blockquote>
<p>mytest.serializer_test1.py</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">   # 外部启动django的方法</span><br><span class="line">   import sys, os</span><br><span class="line">   from django.core.wsgi import get_wsgi_application</span><br><span class="line">			</span><br><span class="line">   base_dir &#x3D; os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">   sys.path.append(base_dir)</span><br><span class="line">   os.environ[&#39;DJANGO_SETTINGS_MODULE&#39;] &#x3D; &#39;drf_movie_rimi.settings&#39;</span><br><span class="line">   application &#x3D; get_wsgi_application()</span><br><span class="line">			</span><br><span class="line">   from rest_framework import serializers</span><br><span class="line">   from mytest.models import Mytest</span><br><span class="line">			</span><br><span class="line">   class MyTestSerializer(serializers.Serializer):</span><br><span class="line">       name &#x3D; serializers.CharField(max_length&#x3D;20)</span><br><span class="line">       age &#x3D; serializers.IntegerField()</span><br><span class="line">       id &#x3D; serializers.IntegerField()</span><br><span class="line">			</span><br><span class="line">       #重写save方法 让他验证成功后保存数据</span><br><span class="line">       def create(self, validated_data):</span><br><span class="line">           return Mytest.objects.create(**validated_data)</span><br><span class="line">			</span><br><span class="line">...</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">   serializer_data &#x3D; MyTestSerializer(data&#x3D;&#123;&#39;name&#39;:&#39;测试&#39;,&#39;age&#39;:81&#125;)</span><br><span class="line">   #必须调用了is_valid之后才能调用save方法</span><br><span class="line">   serializer_data.is_valid()</span><br><span class="line">   serializer_data.save()</span><br><span class="line">	</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li>
<li><p>重写update方法 在调用 CommentSerializer(comment, data=data)后再调用save方法 他会去执行我们update函数</p>
<blockquote>
<p>mytest.serializer_test1.py</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      class MyTestSerializer2(serializers.Serializer):</span><br><span class="line">    name &#x3D; serializers.CharField(max_length&#x3D;20)</span><br><span class="line">    age &#x3D; serializers.IntegerField()</span><br><span class="line">    id &#x3D; serializers.IntegerField()</span><br><span class="line">			</span><br><span class="line">    # 重写update方法 让他验证成功后更新数据</span><br><span class="line">    def update(self, instance, validated_data):</span><br><span class="line">        id &#x3D; validated_data.get(&#39;id&#39;)</span><br><span class="line">        #获取manager</span><br><span class="line">        obj &#x3D; instance.objects.filter(pk&#x3D;id)[0]</span><br><span class="line">        #更新数据</span><br><span class="line">        obj.name &#x3D; validated_data.get(&#39;name&#39;, obj.name)</span><br><span class="line">        obj.age &#x3D; validated_data.get(&#39;age&#39;, obj.age)</span><br><span class="line">        try:</span><br><span class="line">            #保存更新</span><br><span class="line">            obj.save()</span><br><span class="line">        except Exception as e:</span><br><span class="line">            x &#x3D; e</span><br><span class="line">            pass</span><br><span class="line">			</span><br><span class="line">        return obj</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">data &#x3D; Mytest.objects.all()[0]</span><br><span class="line">serializer_data &#x3D; MyTestSerializer2(Mytest, data&#x3D;&#123;&#39;id&#39;:4,&#39;name&#39;: &#39;测试&#39;, &#39;age&#39;: 81&#125;)</span><br><span class="line"># 必须调用了is_valid之后才能调用save方法</span><br><span class="line">serializer_data.is_valid()</span><br><span class="line">serializer_data.save()</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li>
<li><p>梳理:</p>
<ol>
<li><p>创建数据 serializer_data = MyTestSerializer(data={‘name’:’测试’,’age’:81})后save是调用create方法</p>
</li>
<li><p>更新数据 serializer_data = MyTestSerializer2(Mytest, data={‘id’:4,’name’: ‘测试’, ‘age’: 81}) 由于没有指定更新到哪个model 所以我们需要把Model传递给我们的MyTestSerializer2</p>
</li>
</ol>
</li>
</ol>
</li>
<li><p>ModelSerializer </p>
<ol>
<li><p>简介 ModelSerializer 类似于我们的formModel类，你需要给定一个数据库的,他会自动的帮你生成验证规则。然后你给定要验证哪些字段(field)就可以了</p>
</li>
<li><p>model serializer中也自带了create和update的方法,我们验证了数据之后可以直接存入数据库(因为我们已经给定了model)</p>
</li>
<li><p>ModelSerializer相当于我们基础serializer的升级版,帮我们简化了很多操作</p>
</li>
<li><p>使用示例</p>
<blockquote>
<p>mytest.serializer_test2.py</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">  # 外部启动django的方法</span><br><span class="line">  import sys, os</span><br><span class="line">  from django.core.wsgi import get_wsgi_application</span><br><span class="line">		</span><br><span class="line">  base_dir &#x3D; os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">  sys.path.append(base_dir)</span><br><span class="line">  os.environ[&#39;DJANGO_SETTINGS_MODULE&#39;] &#x3D; &#39;drf_movie_rimi.settings&#39;</span><br><span class="line">  application &#x3D; get_wsgi_application()</span><br><span class="line">		</span><br><span class="line">  from rest_framework import serializers</span><br><span class="line">  from mytest.models import Mytest</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">  class MyTestSerializer(serializers.ModelSerializer):</span><br><span class="line">      class Meta:</span><br><span class="line">          model &#x3D; Mytest</span><br><span class="line">          fields &#x3D; (&quot;name&quot;, &#39;age&#39;)</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">  data &#x3D; MyTestSerializer(data&#x3D;&#123;&#39;name&#39;: &#39;model&#39;, &#39;age&#39;: 54&#125;)</span><br><span class="line">  data.is_valid()</span><br><span class="line">  data.save()</span><br><span class="line">     </span><br><span class="line">    </span><br></pre></td></tr></table></figure></li>
<li><p>扩展方法:</p>
<ol>
<li>fields : <ol start="2">
<li>’“__all__”‘ 代表所有的字段</li>
<li>exclude = (‘users’,) 代表除了 user字段 其他字段都可以</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><p>综合使用示例:</p>
<blockquote>
<p>mytest.test1_views.py</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">class BookListV2ViewSet(mixins.DestroyModelMixin,mixins.ListModelMixin,mixins.UpdateModelMixin,</span><br><span class="line">						mixins.RetrieveModelMixin,GenericViewSet):</span><br><span class="line">    queryset &#x3D; Book.objects.all()</span><br><span class="line">    serializer_class &#x3D; BookListSerializer</span><br><span class="line"></span><br><span class="line">    def get_queryset(self):</span><br><span class="line"></span><br><span class="line">        method &#x3D; self.request.method</span><br><span class="line"></span><br><span class="line">        x &#x3D; self.action</span><br><span class="line">        return Book.objects.all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">实现一个方法:放里面有书,</span><br><span class="line">1.随便哪个用户可以去创建一本书</span><br><span class="line">2.只有创建这本书的用户可以去修改这本书</span><br><span class="line">3.只有创建这本书的用户可以去删除这本书</span><br><span class="line">4.所有用户可以看到所有的书</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">class BookSerializer(serializers.ModelSerializer):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; Book</span><br><span class="line">        fields &#x3D; &quot;__all__&quot;</span><br><span class="line"></span><br><span class="line">    def create(self, validated_data):</span><br><span class="line">        validated_data[&#39;creator&#39;] &#x3D; self.context[&#39;request&#39;]._user</span><br><span class="line">        validated_data[&#39;name&#39;] &#x3D; &#39;不好意思&#39;</span><br><span class="line"></span><br><span class="line">        return super().create(validated_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def update(self, instance, validated_data):</span><br><span class="line"></span><br><span class="line">        if self.context[&#39;request&#39;]._user !&#x3D; instance.creator:</span><br><span class="line">            raise serializers.ValidationError(&#39;不是创建者&#39;)</span><br><span class="line">        return super().update(instance,validated_data)</span><br><span class="line">	</span><br><span class="line">	</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-url-路由表定义"><a href="#3-url-路由表定义" class="headerlink" title="3. url 路由表定义"></a>3. url 路由表定义</h3><p>1.router.register() 只有继承了viewset的类才能使用</p>
<h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><h3 id="1-项目简介"><a href="#1-项目简介" class="headerlink" title="1. 项目简介"></a>1. 项目简介</h3><ol>
<li><p>下载猫眼电影 高仿猫眼电影app</p>
</li>
<li><p>restful的风格的基本概念</p>
<ol>
<li>api接口开发模式</li>
</ol>
<p> 后台服务器只提供数据接口和返回数据,由前端js负责获取数据。然后动态的展现在前端。</p>
<p> 前后分离的好处–&gt;后端只负责逻辑接口和数据,前端只负责页面展现逻辑。前后端工作进度<br> 互不干扰</p>
<p> 现在主流的开发模式基本都是前后分离</p>
<ol start="2">
<li><p>restful基本概念</p>
<ol>
<li>一切的url代表的是资源,api通过get post del等动作去操控资源</li>
</ol>
<p> restful的目的在于统一化清晰化url的,一个大型网站有很多不同的url,使用restful之后可以很好的管理资源</p>
<p> 相关资料</p>
<blockquote>
<p><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html">http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a></p>
</blockquote>
<blockquote>
<p> <a href="http://www.ruanyifeng.com/blog/2011/09/restful.html">http://www.ruanyifeng.com/blog/2011/09/restful.html</a></p>
</blockquote>
<ol start="2">
<li>restful只是一套url设计理念,具体还是需要自己去实现</li>
</ol>
</li>
<li><p>再次查看接口文档</p>
<ol>
<li><p>create 创建一个实例 post方法</p>
</li>
<li><p>list 获取多个实例 get方法</p>
</li>
<li><p>read 方法 获取指定的实例</p>
</li>
<li><p>update partial_update更新 put PATCH</p>
</li>
<li><p>delete 销毁一个实例 delete</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="2-项目登录"><a href="#2-项目登录" class="headerlink" title="2.项目登录"></a>2.项目登录</h3><ol>
<li><p>新建用户model</p>
<ol>
<li><p>分析:</p>
<ol>
<li>我们知道 django自带的用户系统里面有很多可以用的数据,比如email 是否激活等等,但是还有其他信息需要我们自己去定义,比如手机 生日 昵称 地址 用户头像</li>
</ol>
</li>
<li><p>创建app和user的model</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">startapp users</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建用户模型</p>
</li>
</ol>
<blockquote>
<p>users.model.py</p>
</blockquote>
<pre><code> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     from django.db import models</span><br><span class="line">from django.contrib.auth.models import AbstractUser</span><br><span class="line">		</span><br><span class="line"># Create your models here.</span><br><span class="line"></span><br><span class="line">class UserProfile(AbstractUser):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户信息</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    IS_VIP &#x3D; (</span><br><span class="line">        (False, &#39;非会员&#39;),</span><br><span class="line">        (True, &#39;会员&#39;)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    GENDER &#x3D; (</span><br><span class="line">        (&quot;male&quot;, &quot;男&quot;),</span><br><span class="line">        (&quot;female&quot;, &quot;女&quot;)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    nick_name &#x3D; models.CharField(default&#x3D;&quot;&quot;, max_length&#x3D;50, verbose_name&#x3D;&quot;昵称&quot;, null&#x3D;True, </span><br><span class="line">    								blank&#x3D;True)</span><br><span class="line">    birthday &#x3D; models.DateTimeField(verbose_name&#x3D;&quot;生日&quot;, null&#x3D;True, blank&#x3D;True, </span><br><span class="line">    						auto_created&#x3D;True)</span><br><span class="line">    gender &#x3D; models.CharField(max_length&#x3D;1, choices&#x3D;((&quot;1&quot;, &quot;男&quot;), (&quot;2&quot;, &quot;女&quot;)), default&#x3D;&quot;1&quot;, </span><br><span class="line">    						null&#x3D;True,blank&#x3D;True)</span><br><span class="line">    address &#x3D; models.CharField(max_length&#x3D;100, default&#x3D;&quot;&quot;, verbose_name&#x3D;&#39;用户所在城市&#39;, </span><br><span class="line">    						null&#x3D;True, blank&#x3D;True)</span><br><span class="line">    mobile &#x3D; models.CharField(max_length&#x3D;14, default&#x3D;&quot;&quot;, verbose_name&#x3D;&#39;手机号&#39;)</span><br><span class="line">    register_time &#x3D; models.DateTimeField(auto_now&#x3D;True)</span><br><span class="line">    </span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name &#x3D; &quot;用户信息&quot;</span><br><span class="line">        verbose_name_plural &#x3D; verbose_name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return str(self.mobile)</span><br><span class="line">     </span><br><span class="line">     </span><br></pre></td></tr></table></figure>
</code></pre>
<blockquote>
<p>settings.py</p>
</blockquote>
<pre><code> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  ...</span><br><span class="line">  AUTH_USER_MODEL &#x3D; &quot;users.UserProfile&quot;</span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  INSTALLED_APPS &#x3D; [</span><br><span class="line">		...</span><br><span class="line">    &#39;users.apps.UsersConfig&#39;</span><br><span class="line">]</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
 
  注释掉settings.py里面的 &#39;django.contrib.admin&#39;, 这一行
 
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">makemigrations</span><br><span class="line">migrate</span><br></pre></td></tr></table></figure>
 

  打开注释掉settings.py里面的 &#39;django.contrib.admin&#39;, 这一行
  
</code></pre>
<ol start="4">
<li><p>知识点:</p>
<ol>
<li> 扩展django已经有的user需要去继承django本身的用户模型表</li>
</ol>
<blockquote>
<p>users.model.py</p>
</blockquote>
<pre><code> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     </span><br><span class="line">       from django.contrib.auth.models import AbstractUser</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line"># Create your models here.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserProfile(AbstractUser):</span><br><span class="line">...</span><br><span class="line">     </span><br></pre></td></tr></table></figure>
</code></pre>
<ol start="2">
<li><p>在字段信息中新建 choices 参数,表示字段里面的只能是choices里面元组的几个值之一,tuple里面的第一个值是数据库里面值,第二个是备注,比如 数据库里面存 1 表示男 2表示女</p>
<blockquote>
<p>users.model.py</p>
</blockquote>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     ...</span><br><span class="line">     </span><br><span class="line">       GENDER &#x3D; (</span><br><span class="line">    (&quot;1&quot;, &quot;男&quot;),</span><br><span class="line">    (&quot;2&quot;, &quot;女&quot;)</span><br><span class="line">)</span><br><span class="line">				</span><br><span class="line">nick_name &#x3D; models.CharField(default&#x3D;&quot;&quot;, max_length&#x3D;50, verbose_name&#x3D;&quot;昵称&quot;, </span><br><span class="line">							null&#x3D;True, blank&#x3D;True)</span><br><span class="line">birthday &#x3D; models.DateTimeField(verbose_name&#x3D;&quot;生日&quot;, null&#x3D;True, </span><br><span class="line">							blank&#x3D;True, auto_created&#x3D;True)</span><br><span class="line">gender &#x3D; models.CharField(max_length&#x3D;1, choices&#x3D;GENDER, default&#x3D;&quot;1&quot;, null&#x3D;True,</span><br><span class="line">     </span><br><span class="line">     ...</span><br><span class="line"> </span><br></pre></td></tr></table></figure></li>
<li><p>参数 null=True , blank=True分别表示数据里面可以存null这个值,和数据库里面可以存空值,记住 null 和空值是不一样的</p>
</li>
<li><p>参数 auto_now auto_now_add 表示添加数据的时候默认添加当前时间,以后不会自动修改; 修改数据的时候默认添加当前时间,每次修改都会自动变化</p>
</li>
<li><p>class Meta: 里面的verbose_name 表示amdin查看这个表的时候 会出现你输入的表名</p>
</li>
<li><p>def <strong>str</strong>(self） 表示查看数据的时候(admin中),每一条数据会返回你定制化的标题,比如我们这个表就会返回一系列的手机号</p>
</li>
<li><p>字段里面加入unique表示我们不能重复！             </p>
<blockquote>
<ol>
<li>但是这个unique会造成我们的一个困境,如果是注册手机号的话,我们每次新建用户就必须输入不同的手机号,你不能不输入,但是如果我们是用户名和邮箱注册的话,那么我们在注册的时候是不会用到手机号。</li>
</ol>
</blockquote>
</li>
</ol>
<blockquote>
<ol start="2">
<li>解决方案是给他设置null=True,defalut=None</li>
<li>解决方案的原理是计算机中有一个null|None表示(无),这个在这个计算机中是唯一的</li>
</ol>
</blockquote>
</li>
</ol>
</li>
<li><p>制作 注册 登录 注销模块</p>
<ol>
<li>JWT<ol>
<li>简介: 传统的session登录方式受限于设备和浏览器,如果我们制作的是一个app而不是使用浏览器去访问。那么我们的整个的</li>
</ol>
</li>
</ol>
<pre><code>保持用户登录就会变得很麻烦,再者 判断用户登录是否成功也不能依赖于我们的模板文件了 官网地址：
</code></pre>
<blockquote>
<p><a href="http://getblimp.github.io/django-rest-framework-jwt/">http://getblimp.github.io/django-rest-framework-jwt/</a></p>
</blockquote>
<pre><code>2. token: token有令牌的意思,他类似以于我们的session，是一串加密数字。我们可以把它理解为session的升级版,因为token更灵活,他可以用于手机app 网页任何地方
 
3. JWT: JWT-&gt; json web token 是token的一个json实现标准,你可以理解为一般互联网企业都是这样做的。所以我们也拿来用即可。JWT最明显的特征是 JWT不会存在于数据库，它类似于csrf_token，我们只用去验证加密是否通过,通过之后就是合法的用户。
</code></pre>
</li>
</ol>
<pre><code>      4. 安装

          <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install djangorestframework-jwt</span><br></pre></td></tr></table></figure>

          在配置文件里面加入,下面这行代码的意思是使用token来认证用户身份

          &gt;settings.py

          <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  ...</span><br><span class="line">  REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    # Use Django&#39;s standard &#96;django.contrib.auth&#96; permissions,</span><br><span class="line">    # or allow read-only access for unauthenticated users.</span><br><span class="line">    # &#39;DEFAULT_PERMISSION_CLASSES&#39;: [</span><br><span class="line">    #     &#39;rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly&#39;</span><br><span class="line">    # ]</span><br><span class="line"></span><br><span class="line">    &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: (</span><br><span class="line">        &#39;rest_framework_jwt.authentication.JSONWebTokenAuthentication&#39;,</span><br><span class="line">    ),</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

          &gt;urls.py

          <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from rest_framework_jwt.views import obtain_jwt_token</span><br><span class="line">  #...</span><br><span class="line"></span><br><span class="line">  urlpatterns &#x3D; [</span><br><span class="line">      &#39;&#39;,</span><br><span class="line">      # ...</span><br><span class="line"></span><br><span class="line">      url(r&#39;^api-token-auth&#x2F;&#39;, obtain_jwt_token),</span><br><span class="line">  ]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

      5. 访问 /docs/接口，就可以看到登录的界面(文档自动生成)

      6. 试着登录 就可以看到返回,这个就是我们的登录秘钥,拿着这个秘钥就可以去验证
      用户信息

      <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">&quot;token&quot;: &quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJ1c2VybmFtZSI6ImNhbnZhcyIsImV4cCI6MTUzMjAwODg5OSwiZW1haWwiOiIyQDIuY29tIn0.mVhVHMIZZ2qqhzBen7kS8csylx7yrif1gQhw-09wcus&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
      
      7. 我们把token取出来,在postman上面添加上我们的token
          1. 在post man headers里面去添加一个 key 为 Authorization
          value为 JWT（空格） eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJ1c2VybmFtZSI6ImNhbnZhcyIsImV4cCI6MTUzMjAwODg5OSwiZW1haWwiOiIyQDIuY29tIn0.mVhVHMIZZ2qqhzBen7kS8csylx7yrif1gQhw-09wcus
      
      8. 在我们的views里面去配置用户认证
      
          <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from rest_framework_jwt.authentication import JSONWebTokenAuthentication</span><br><span class="line">class xxxView()</span><br><span class="line">...</span><br><span class="line">	authentication_classes &#x3D; (JSONWebTokenAuthentication,)</span><br></pre></td></tr></table></figure>
          
      9. 再访问我们的接口看看是不是把用户取出来了

      10. JWT配置:
    
        设置token的过期时间JWT_EXPIRATION_DELTA
        
      <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      </span><br><span class="line">       JWT_AUTH &#x3D; &#123;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">   &#39;JWT_EXPIRATION_DELTA&#39;: datetime.timedelta(seconds&#x3D;3600),</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">&#125;</span><br><span class="line">      </span><br></pre></td></tr></table></figure>
          
     
      
  2. 利用JWT做登录接口
      
      1. 我们可以从后台新建用户,所以我们可以先做登录,上面我们看到 JWT 登录成功之后返回的是一串token,所以我们登录的任务就是验证数据库账户密码,然后返回一串token给前端。前端以后的请求每次都会带上这个token来,关于前端具体情况我们不用关心。
      
      2. 所以我们的问题流程就分解为
      
          1. 接收用户传递过来的账户密码
          2. 验证账户密码
          3. 验证成功返回token(这里就不用去调用login 接口了 因为我们不用session去做登录) 
          
      3. 根据上面的问题流程我们的代码聚体步骤就分为:
          1. 通过一个view去接收参数,这个view不需要多余的功能,也不会创建遍历数据,只是接收和返回值，所以我们选用 APIView来做view


          2. 我们需要一个函数去验证用户名和密码,这个函数我们已经知道,django的auth接口
          3. 我们在最后需要一个东西去加密用户信息成为标准token,然后返回给前端,我们需要jwt的标准接口 查看官网 
          
          http://getblimp.github.io/django-rest-framework-jwt/
          
          我们可以看到最后官网给了我们标准的token加密方法,代码指出,我们给定用户,然后交给他的用户,他就会给出token,然后我们把token返回给前段即可
          
              <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      </span><br><span class="line">       from rest_framework_jwt.settings import api_settings</span><br><span class="line">		</span><br><span class="line">jwt_payload_handler &#x3D; api_settings.JWT_PAYLOAD_HANDLER</span><br><span class="line">jwt_encode_handler &#x3D; api_settings.JWT_ENCODE_HANDLER</span><br><span class="line"></span><br><span class="line">payload &#x3D; jwt_payload_handler(user)</span><br><span class="line">token &#x3D; jwt_encode_handler(payload）</span><br></pre></td></tr></table></figure>
              
          4. 根据以上思想形成真实代码示例:
           
           &gt; users.views.py
           
                   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">       </span><br><span class="line">          from rest_framework.views import APIView</span><br><span class="line">from rest_framework_jwt.settings import api_settings</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from django.contrib.auth import authenticate</span><br><span class="line">from .serializers import UserLoginSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserLogin(APIView):</span><br><span class="line">    def post(self, request):</span><br><span class="line"></span><br><span class="line">        datas &#x3D; UserLoginSerializer(data&#x3D;request.POST)</span><br><span class="line">        if datas.is_valid():</span><br><span class="line">            user &#x3D; authenticate(**datas.validated_data)</span><br><span class="line">            if user:</span><br><span class="line">                jwt_payload_handler &#x3D; api_settings.JWT_PAYLOAD_HANDLER</span><br><span class="line">                jwt_encode_handler &#x3D; api_settings.JWT_ENCODE_HANDLER</span><br><span class="line"></span><br><span class="line">                payload &#x3D; jwt_payload_handler(user)</span><br><span class="line">                token &#x3D; jwt_encode_handler(payload)</span><br><span class="line">                return Response(token)</span><br><span class="line"></span><br><span class="line">        return Response(status&#x3D;401)</span><br><span class="line">	</span><br><span class="line">       </span><br></pre></td></tr></table></figure>
                   
               &gt; users.serializers.py
               
               <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     </span><br><span class="line">     from rest_framework import serializers</span><br><span class="line"></span><br><span class="line">class UserLoginSerializer(serializers.Serializer):</span><br><span class="line">    username &#x3D; serializers.CharField(max_length&#x3D;20,help_text&#x3D;&#39;用户名&#39;)</span><br><span class="line">    password &#x3D; serializers.CharField(max_length&#x3D;20,help_text&#x3D;&#39;密码&#39;)</span><br><span class="line">     </span><br></pre></td></tr></table></figure>
               
               
3. 利用JWT做注册接口

    1. 流程解析:
        1. 用户提交注册申请,也就是用户名密码
        2. 后端验证用户名是否存在,存在返回错误
        3. 生成用户
        4. 给生成的用户返回token 然后直接登录成功
        
    2. 代码解析:
    
        1. 接收用户的参数
        2. 验证用户名是否重复
        3. 生成用户
        4. 返回token
    
    3. 代码示例:
            &gt;users.views.py
            
           <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  class UserRegister(APIView):</span><br><span class="line"># 如果是post请求</span><br><span class="line">def post(self, request):</span><br><span class="line">    # 我们验证他的post数据,和序列化</span><br><span class="line">    datas &#x3D; UserLoginSerializer(data&#x3D;request.POST)</span><br><span class="line">    if datas.is_valid():</span><br><span class="line">        # 我们把验证成功的数据交给django验证</span><br><span class="line">        data &#x3D; datas.validated_data</span><br><span class="line">        # 获取用户model</span><br><span class="line">        User &#x3D; get_user_model()</span><br><span class="line">        # 获取用户信息</span><br><span class="line">        user &#x3D; User.objects.filter(username&#x3D;data[&#39;username&#39;])</span><br><span class="line">        # 如果有用户则不创建用户</span><br><span class="line">        if not user:</span><br><span class="line">            user &#x3D; User.objects.create_user(**data)</span><br><span class="line">            # 调用jwt官方指定的方法加密用户信息获取到token</span><br><span class="line">            jwt_payload_handler &#x3D; api_settings.JWT_PAYLOAD_HANDLER</span><br><span class="line">            jwt_encode_handler &#x3D; api_settings.JWT_ENCODE_HANDLER</span><br><span class="line">			</span><br><span class="line">            payload &#x3D; jwt_payload_handler(user)</span><br><span class="line">            token &#x3D; jwt_encode_handler(payload)</span><br><span class="line">            return Response(&#123;&#39;token&#39;: token&#125;)</span><br><span class="line">    # 如果失败,我们统一返回401表示登录不成功</span><br><span class="line">    return Response(status&#x3D;401)</span><br><span class="line">      </span><br></pre></td></tr></table></figure>
           
       还可以使用mixins去注册用户
&gt; users.views.py

        <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line"># 通过mixin来创建用户</span><br><span class="line">from django.contrib.auth.hashers import make_password</span><br><span class="line">from django.contrib.auth import get_user_model</span><br><span class="line">from rest_framework import mixins</span><br><span class="line"></span><br><span class="line">User &#x3D; get_user_model()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserInfoSerializer(serializers.ModelSerializer):</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">略</span><br></pre></td></tr></table></figure>


           
4. 扩展注册接口
    1. 简介:我们的注册远没有那么多简单,我们需要手机注册,发送短信验证码。或者邮箱验证码之类的。然后填入验证码才能激活用户
    2. 为了防止爬虫,我们需要在下面多添加一个图形验证码。每次请求需要用户提交图形验证码系统才会执行发送短信的接口。
    3. 试想一个问题:
    
        1. 发送短信的原理其实就是我们首先去运营商那里购买短信服务,然后提交要送发的短信内容,和接收的短信的手机号。是运营商帮我们去发送短信。然后发送成功后,运营商通知我们短信发送成功。我们去通知用户。

        2. 上面那个流程有一个重大的bug,在上面的步骤中,请求运营商发送短信和等待运营商通知我们的服务器接收短信的时间是很长的。用户会一直卡在那里,程序也会一直卡在那里。如果运营商发送短信的时间很长,那么势必会卡死我们的程序线程。那么一个新开的网站,用户访问量大得时候,你是无法去承载这个网站的
        3. 这个时候,我们需要异步接口,即把发送短信请求或者发送邮箱请求的接口交给其他程序去做,我们不用理会,直接返给给用户申请成功。请求等待短信即可


        4. 画图解释
        
    4. 问题解决思路:
        1. 我们需要知道注册的具体流程:
        
            1. 首先 注册时候手机验证码是在后台生成的,然后存入数据库,但是要首先验证码账户是否存在
            2. 把这个验证码 通过一定的接口发送给用户
            3. 用户得到验证码之后,再把账户和验证码和密码一起提交,服务器收到验证码和用户名之后,对比数据库,如有符合的数据,就可以确认这个手机(收到验证码的手机)是这个用户的。
            4. 传统方式下 第一步第二步是链接在一起的
            5. 如果是异步接口,我们的程序只到第一步,第二步骤会有专门的程序去执行这个接口。
            6. 执行这个异步接口的实现方案是 队列任务,顾名思义,就是让发送验证码这个耗时的操作去让其他程序执行,如果其他程序执行不过来,那么发送验证码任务就会排队处理（在其他程序中,主程序已经结束）,但是这不会影响到用户体验,因为用户收到验证码这个时间本来就是耗时的。
            
    5. 代码思路:
        1. 接受用户账户的接口,验证账户是否已经存在
        2. 生成随机验证码的接口
        3. 请求发送验证码的接口
        4. 接受异步任务的接口
        5. 由于没有手机验证码,我们使用邮箱验证码做替代
        
    6. 基本代码实现 
    
       1. 传统的同步方式 没有图像验证码 发送接收一个邮箱,然后发送邮箱验证码,我们首先建立一个接受验证码的model 里面有邮件 验证码两个字段 外键添加时间判断验证码是否过期
       
          &gt;users.models.py
       
           <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">class CaptchaReg(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户注册验证码</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    captcha &#x3D; models.CharField(max_length&#x3D;6, verbose_name&#x3D;&#39;验证码&#39;, help_text&#x3D;&#39;验证码&#39;)</span><br><span class="line">    email &#x3D; models.EmailField(verbose_name&#x3D;&#39;注册邮箱&#39;,help_text&#x3D;&#39;注册邮箱&#39;)</span><br><span class="line">    add_time &#x3D; models.DateTimeField(auto_now&#x3D;True, verbose_name&#x3D;&#39;添加时间&#39;, </span><br><span class="line">    help_text&#x3D;&#39;添加时间&#39;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name &#x3D; &#39;用户注册验证码&#39;</span><br><span class="line">        verbose_name_plural &#x3D; &#39;用户注册验证码&#39;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>
           
       2. 我们使用createmixins来做view 因为我们相当于去创建一条验证码的数据
       3. 我们需要在serializer中改写captcha的方式,让captcha字段自动去生成,而且不是让用户传递过来

                  
             
      4. 我们还需要创建两个函数
     
          1. 一个是生成随机验证码的

              <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def gen_captcha():</span><br><span class="line">   captcha_str &#x3D; &quot;&quot;</span><br><span class="line">   for i in range(6):</span><br><span class="line">       captcha_str +&#x3D; str(random.randint(0, 9))</span><br><span class="line">   return captcha_str</span><br><span class="line"></span><br></pre></td></tr></table></figure>
          2. 把生成的随机验证码通过邮件发送

        5. 把生成验证码的函数放在serializer里面
            1. 知识点
                1. serializer里面的validate函数可以帮我们验证数据,并且把合法的数据传递给create函数去创建数据,由于我们没有定义captcha字段,但是又需要captcha字段去写入数据库,所以我们在validate里面取增加captcha 当然 增加的是我们函数调用的生成随机验证码
                
            
                    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">			    </span><br><span class="line">class UserRegisterCaptchaCreateSerializer(serializers.ModelSerializer):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    验证邮箱是否已经被注册了</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def create(self, validated_data):</span><br><span class="line">        email &#x3D; validated_data[&#39;email&#39;]</span><br><span class="line">        if User.objects.filter(email&#x3D;email).exists():</span><br><span class="line">            raise serializers.ValidationError(&#39;邮箱已经存在&#39;)</span><br><span class="line"></span><br><span class="line">        return super().create(validated_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def validate(self, attrs):</span><br><span class="line">        captcha &#x3D; captchas.gen_captcha()</span><br><span class="line">        attrs[&#39;captcha&#39;] &#x3D; captcha</span><br><span class="line">        return super().validate(attrs)</span><br><span class="line">  </span><br><span class="line">  </span><br></pre></td></tr></table></figure>
            
    
        6. 生成一个发送通过邮件发送验证码的接口:
            1. 知识点:
            
                1. smtp邮件服务器
                
                    1. smtp邮件服务器是一种协议
                    2. 我们可以调用网易的smtp邮件接口给其他人发邮件
                    3. 其实就相当于你去登录网易邮件手写一封邮件
                    4. 不过由于你有了邮件接口,你可以在程序中配置好账户密码 然后调用程序去帮你发送验证码。效果和3差不多
                2. 邮件发送接口调用
                    1. 查看自己的邮件接口
                        1. https://mail.163.com
                        2. 查看设置 最下面有pop3 smtp imap服务
                        3. 查看网易邮件服务的端口 http://help.163.com/09/1223/14/5R7P3QI100753VB8.html
                        4. 在settings.py里面去配置

                           &gt; mytest.settings.py

                                <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EMAIL_HOST &#x3D; &#39;smtp.163.com&#39;                   #SMTP地址</span><br><span class="line">EMAIL_PORT &#x3D; 25                                 #SMTP端口</span><br><span class="line">EMAIL_HOST_USER &#x3D; &#39;qq360167228@163.com&#39;       #我自己的邮箱</span><br><span class="line">EMAIL_HOST_PASSWORD &#x3D; &#39;rimi123&#39;                  #我的邮箱授权码</span><br><span class="line"></span><br></pre></td></tr></table></figure>

                        5. 然后我们调用邮件函数就可以去发送,函数主要需要邮件标题,邮件内容,收件人的地址三个参数

                            1. 测试版本

                                &gt; mytest.test_mail.py

                                <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    # 外部启动django的方法</span><br><span class="line">    import sys, os</span><br><span class="line">    from django.core.wsgi import get_wsgi_application</span><br><span class="line"></span><br><span class="line">    base_dir &#x3D; </span><br><span class="line">    os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">    sys.path.append(base_dir)</span><br><span class="line">    os.environ[&#39;DJANGO_SETTINGS_MODULE&#39;] &#x3D; </span><br><span class="line">    &#39;drf_movie_rimi.settings&#39;</span><br><span class="line">    </span><br><span class="line">    application &#x3D; get_wsgi_application()</span><br><span class="line"></span><br><span class="line">    from django.core.mail import send_mail</span><br><span class="line"></span><br><span class="line">    x &#x3D; send_mail(&#39;注册验证码&#39;, &#39;Here is the message.&#39;, </span><br><span class="line">    &#39;qq360167228@163.com&#39;,[&#39;qq360167229@163.com&#39;])</span><br><span class="line"></span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure>

                            2. 正式版本:
                                
                                &gt;utils.send_sms_email.py

                                   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">            		</span><br><span class="line">            		from django.core.mail import send_mail</span><br><span class="line">from drf_movie_rimi.settings import EMAIL_HOST_USER</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def my_send_mail(title, context, to_mail):</span><br><span class="line">    # 三个参数为 发送标题 内容 收件人</span><br><span class="line">    res &#x3D; send_mail(title, context, EMAIL_HOST_USER,</span><br><span class="line">                    [to_mail])</span><br><span class="line"></span><br><span class="line">    return bool(res)</span><br><span class="line"></span><br><span class="line">            		</span><br><span class="line">            		</span><br></pre></td></tr></table></figure>

                3. django注册发送验证码的流程

                    1. 知识点:
                    
                        1. 我们需要在整体流程的最后一步 也就是先发送验证码,发送验证码成功后,存储验证码到数据库,然后返回给用户发送成功信息。所以我们需要改写views里面的最后一步 perform_create 在这一步里面,views会存储合法数据到数据库。
                        2. 改写 serializers.py里面的validate 函数,由于我们只提供了email参数,所以我们必须把验证码(captcha加入进去)
                        3. 知识点梳理 

                            perform_create是createmixin里面的方法。他是在最后存储数据的时候调用
                            
                            validate 是serializer里面的方法,他控制了所有有效数据的,我们可以在这里面去改写有效数据
                        
                 
                    
                               
                    &gt;users.views.py
                    
                    
                    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...		</span><br><span class="line"></span><br><span class="line">class UserRegisterCaptchaCreateViewSet(CreateModelMixin, GenericViewSet):</span><br><span class="line">    queryset &#x3D; UserRegisterCaptchaCreateSerializer.Meta.model.objects.all()</span><br><span class="line">    serializer_class &#x3D; UserRegisterCaptchaCreateSerializer</span><br><span class="line"></span><br><span class="line">    def perform_create(self, serializer):</span><br><span class="line">        data &#x3D; serializer.validated_data</span><br><span class="line">        captcha &#x3D; &#39;您的验证码为&#123;&#125;&#39;.format(data[&#39;captcha&#39;])</span><br><span class="line">        res &#x3D; my_send_mail(&#39;注册验证码&#39;,captcha,data[&#39;email&#39;])</span><br><span class="line">        if not res:</span><br><span class="line">            return Response(status&#x3D;401)</span><br><span class="line">        return super().perform_create(serializer)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
        
        
                    &gt;users.serializers.py
                    
                    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">class UserRegisterCaptchaCreateSerializer(serializers.ModelSerializer):</span><br><span class="line">   &quot;&quot;&quot;</span><br><span class="line">   验证邮箱是否已经被注册了</span><br><span class="line">   &quot;&quot;&quot;</span><br><span class="line">					</span><br><span class="line">    def create(self, validated_data):</span><br><span class="line">        email &#x3D; validated_data[&#39;email&#39;]</span><br><span class="line">        if User.objects.filter(email&#x3D;email).exists():</span><br><span class="line">            raise serializers.ValidationError(&#39;邮箱已经存在&#39;)</span><br><span class="line"></span><br><span class="line">        return super().create(validated_data)</span><br><span class="line"></span><br><span class="line">    def validate(self, attrs):</span><br><span class="line">        captcha &#x3D; captchas.gen_captcha()</span><br><span class="line">        attrs[&#39;captcha&#39;] &#x3D; captcha</span><br><span class="line">        return super().validate(attrs)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; CaptchaReg</span><br><span class="line">        fields &#x3D; (&#39;email&#39;,)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
                    
            4. 通过mixins去做用户注册操作的版本
                &gt;users.serializers.py
                
                <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">					#验证码升级版##############</span><br><span class="line">class UserInfoSerializer(serializers.ModelSerializer):</span><br><span class="line"></span><br><span class="line">    # 这个步骤是专门给你用的,用于你去修改已经验证好的数据,大前提是你的数据通过验证了</span><br><span class="line">    # 才去做定制化</span><br><span class="line">    def validate(self, attrs):</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>
                
                &gt;users.views.py
                
                <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">class UserRegisterCaptchaCreateViewSet(CreateModelMixin, GenericViewSet):</span><br><span class="line">    queryset &#x3D; UserRegisterCaptchaCreateSerializer.Meta.model.objects.all()</span><br><span class="line">    serializer_class &#x3D; UserRegisterCaptchaCreateSerializer</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>
        
                
        7. 升级版,使用队列异步发送代码 
        
            1. [首要步骤django-celery知识点](#django-celery)
            
        8. 继续升级邮箱验证码时间的验证
            1. 问题:
                1. 我们不能让一个邮箱才发送了一个邮件就又马上又发送,一般会有一分钟的间隔
                2. 验证码拿过来也是有时效的,一般5分钟内有效
                3. 如果一个验证码验证了,那么他就失效了
            2. 流程梳理:
            
                1. 如果你一个邮件发送后,他会有发送时间，我们规定，在1分钟之后才能发送
                2. 验证邮箱验证码时,我们永远去验证最新（时间）的验证码
                3. 如果验证码发送时间距离验证的时间超过五分钟，那么他也是无效的

            3. 代码实现:
            
                &gt;users.serializers.py
                
                    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">class UserRegisterCaptchaCreateSerializer(serializers.ModelSerializer):</span><br><span class="line">		</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">     #验证是否是发送验证码过于频繁</span><br><span class="line">       expire_time &#x3D; timezone.now() -</span><br><span class="line">       timezone.timedelta(minutes&#x3D;EMAIL_CAPTCHA[&#39;delay_time&#39;][&#39;register&#39;])</span><br><span class="line">					</span><br><span class="line">       if CaptchaReg.objects.filter(email&#x3D;email,add_time__gt&#x3D;expire_time).exists():</span><br><span class="line">           raise serializers.ValidationError(&#39;请稍后再发送邮件&#39;)</span><br><span class="line">					</span><br><span class="line">       return super().create(validated_data)</span><br></pre></td></tr></table></figure>
                    
                &gt;users.settins.py
                    
                    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#邮箱验证码过期时间</span><br><span class="line"></span><br><span class="line">EMAIL_CAPTCHA &#x3D; &#123;</span><br><span class="line">    &#39;expire_time&#39;:&#123;</span><br><span class="line">       &#39;register&#39;:5</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    &#39;delay_time&#39;:</span><br><span class="line">        &#123;</span><br><span class="line">            &#39;register&#39;:1</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
                    
            4. 现在 用户注册的时候,需要把邮箱验证码提交给我们,通过了才能注册
                1.我们加入验证email password username captcha的四个字段的验证码程序
                2.email和capcha要在有效时间内找到才能通过,通过后 用户基本验证成功
            
                &gt;users.views.py
                
                <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">class UserRegisterV2(APIView):</span><br><span class="line">    # 如果是post请求</span><br><span class="line">    def post(self, request):</span><br><span class="line">        # 我们验证他的post数据,和序列化</span><br><span class="line">        datas &#x3D; UserLoginV2Serializer(data&#x3D;request.POST)</span><br><span class="line">        if datas.is_valid():</span><br><span class="line">            # 我们把验证成功的数据交给django验证</span><br><span class="line">            data &#x3D; datas.validated_data</span><br><span class="line">            # 获取用户model</span><br><span class="line">            User &#x3D; get_user_model()</span><br><span class="line">            # 获取用户信息</span><br><span class="line">            user &#x3D; User.objects.filter(username&#x3D;data[&#39;username&#39;])</span><br><span class="line">            # 如果有用户则不创建用户</span><br><span class="line">            if user:</span><br><span class="line">                raise serializers.ValidationError(&#39;用户名重复&#39;)</span><br><span class="line"></span><br><span class="line">            # 验证验证码码是否正确</span><br><span class="line">            expire_time &#x3D; timezone.now() - </span><br><span class="line">            timezone.timedelta(minutes&#x3D;EMAIL_CAPTCHA[&#39;expire_time&#39;][&#39;register&#39;])</span><br><span class="line"></span><br><span class="line">            if not CaptchaReg.objects.filter(email&#x3D;data[&#39;email&#39;], </span><br><span class="line">            captcha&#x3D;data[&#39;captcha&#39;],add_time__gt&#x3D;expire_time).exists():</span><br><span class="line">                raise serializers.ValidationError(&#39;邮箱错误或验证码失效&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            user &#x3D; User.objects.create_user(**data)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

            
        
5. JWT 升级登录接口        
    1. 我们登录接口需要验证用户名或者邮箱然后密码 合法就登录

        代码实现，我们需要把登录的合法用户取出来,然后给JWT加密 返回token信息
               <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">		   		</span><br><span class="line">class UserLogin(APIView):</span><br><span class="line"> # 如果是post请求</span><br><span class="line"> def post(self, request):</span><br><span class="line">     # 我们验证他的post数据,和序列化</span><br><span class="line">     datas &#x3D; UserLoginSerializer(data&#x3D;request.POST)</span><br><span class="line">     if datas.is_valid():</span><br><span class="line">         # 我们把验证成功的数据交给django验证</span><br><span class="line">         user &#x3D; authenticate(**datas.validated_data)</span><br><span class="line">         if user:</span><br><span class="line">             # 调用jwt官方指定的方法加密用户信息获取到token</span><br><span class="line">             jwt_payload_handler &#x3D; api_settings.JWT_PAYLOAD_HANDLER</span><br><span class="line">             jwt_encode_handler &#x3D; api_settings.JWT_ENCODE_HANDLER</span><br><span class="line">					</span><br><span class="line">             payload &#x3D; jwt_payload_handler(user)</span><br><span class="line">             token &#x3D; jwt_encode_handler(payload)</span><br><span class="line">             return Response(&#123;&#39;token&#39;: token&#125;)</span><br><span class="line">     # 如果失败,我们统一返回401表示登录不成功</span><br><span class="line">     return Response(status&#x3D;401)</span><br><span class="line">		   		</span><br></pre></td></tr></table></figure>
               
</code></pre>
<h3 id="3-项目页面展示"><a href="#3-项目页面展示" class="headerlink" title="3.项目页面展示"></a>3.项目页面展示</h3><ol>
<li><p>项目需求分析:</p>
<ol>
<li><p>电影模型分析:</p>
<ol>
<li>首先我们需要一部影片信息的model 存储电影的信息</li>
<li>我们的电影有职员(演员 导演 编辑等等) 他们和电影是多对多</li>
<li>电影职员和类型也是对多对 比如马特达蒙 是演员 导演编辑</li>
<li>电影有所属国家 是多对多关系</li>
<li>电影有制作类型,比如2D, 3D等等 他和电影是对多对关系</li>
<li>电影有分类,比如动作,悬疑,科幻 他和电影是多对多关系</li>
</ol>
</li>
<li><p>影院模型分析:</p>
<ol>
<li>我们购买电影会细化到某个影院,某个座位,某个时间的电影</li>
<li>我们需要影院</li>
<li>我们的影院里面有很多影厅,他和影院是一对多关系</li>
<li>影厅中很多座位,他和影厅是一对多关系</li>
<li>我们电影有很多的片场,每个片场必须有一个影厅,他和影厅是一对多关系</li>
<li>影院有所属城市,他和影院是一对多关系</li>
</ol>
</li>
<li><p>根据上面的分析 我们的模型设计如下</p>
<pre><code> &gt;movie.model.py
</code></pre>
<p> 知识点:</p>
<ol>
<li>help_text 可以做描述文档使用</li>
<li>manytomanyfield  through 可以定制manytomany表</li>
</ol>
</li>
<li><p>合并 迁移数据, 把数据交给amdin后台管理</p>
</li>
</ol>
</li>
<li><p>数据的展示:</p>
<ol>
<li><p>添加了部分数据之后,我们需要把数据给展示出来,运用我们之间学习的知识,做一个电影的数据展示接口</p>
<p> 课堂练习: 1.做一个把所有电影列表展示出来的接口(get方法)</p>
</li>
<li><p>思路梳理:</p>
<ol>
<li>我们需要把数据库的里面的电影信息都展示出来,展示分为两种 一种是遍历一个列表 一种是获取一条数据的详细信息 我们一般来说 遍历只需要大致的信息,而获取详细信息需要更多的信息和关联信息比如演员 演员的相关文章等等</li>
<li>所以我们需要一个 view 一个url 两个serializer</li>
<li>views根据不同的请求 来给出不同的serializer展示信息</li>
</ol>
</li>
<li><p>代码实现(基础):</p>
<ol>
<li><p>我们获取详细信息的时候 我们需要 </p>
<ol>
<li>电影名</li>
<li>电影是否是热门电影</li>
<li>电影是否是最新电影</li>
<li>上映时间</li>
<li>电影类型</li>
<li>电影制片类型(2D,3D)</li>
<li>电影目前的状态(上映中 下架中等等)</li>
<li>电影的部分演员 导演</li>
<li>id号</li>
<li>点赞数量</li>
<li>影片长度</li>
<li>国家</li>
<li>分数(评级)</li>
<li>用户浏览数量<br>…</li>
</ol>
</li>
<li><p>但是我们获取列表的时候只需要</p>
<ol>
<li>电影名</li>
<li>电影想看次数</li>
<li>评分</li>
</ol>
<blockquote>
<p>movie.serializer.py</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">from rest_framework import serializers</span><br><span class="line">	</span><br><span class="line">from .models import MovieDetail</span><br><span class="line">class MovieListSerializer(serializers.ModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; MovieDetail</span><br><span class="line">        fields &#x3D; (&#39;name&#39;,&#39;status&#39;,&#39;user_want_num&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MovieDetailSerializer(serializers.ModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; MovieDetail</span><br><span class="line">        fields &#x3D; &quot;__all__&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>movie.views.py</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">from rest_framework import viewsets</span><br><span class="line"></span><br><span class="line">from .models import MovieDetail</span><br><span class="line"></span><br><span class="line">from .serializers import MovieListSerializer</span><br><span class="line">	</span><br><span class="line">class MovieViewSet(viewsets.ReadOnlyModelViewSet):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    获取电影信息接口</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    queryset &#x3D; MovieDetail.objects.all()</span><br><span class="line">    def get_serializer_class(self):</span><br><span class="line">        if self.action &#x3D;&#x3D; &#39;list&#39;:</span><br><span class="line">            return MovieListSerializer</span><br><span class="line">        if self.action &#x3D;&#x3D; &#39;retrieve&#39;:</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>代码实现 高级</p>
<ol>
<li>通过上面的接口可以看到,很多数据是没有详细的信息的, 比如kind_category,他只有id号,但是没有具体的信息,我们需要获取这些具体的信息来返回给用户</li>
</ol>
<p>  知识点:</p>
<pre><code> 1. 我们需要遍历嵌套的序列化数据
 2. 我们可以通过加入其它的serializer到字段里面取,他就会自动的给我们遍历出嵌套的关系
 3. 如果是manytomany关系 我们需要定义参数 many=true

     &gt;movie.serializers.py
         
         
         <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">from rest_framework import serializers</span><br><span class="line">			</span><br><span class="line">from .models import MovieDetail, MovieCountry, SubTitle, MovieStaff, MovieStaffCategory, </span><br><span class="line">MovieKindCategory,MovieTypeCategory</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MovieListSerializer(serializers.ModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; MovieDetail</span><br><span class="line">        fields &#x3D; (&#39;name&#39;, &#39;status&#39;, &#39;user_want_num&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MovieCountrySerializer(serializers.ModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; MovieCountry</span><br><span class="line">        fields &#x3D; &quot;__all__&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class SubTitleSerializer(serializers.ModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; SubTitle</span><br><span class="line">        fields &#x3D; &quot;__all__&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MovieStaffSerializer(serializers.ModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; MovieStaff</span><br><span class="line">        fields &#x3D; &quot;__all__&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MovieStaffCategorySerializer(serializers.ModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; MovieStaffCategory</span><br><span class="line">        fields &#x3D; &quot;__all__&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MovieKindCategorySerializer(serializers.ModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; MovieKindCategory</span><br><span class="line">        fields &#x3D; &quot;__all__&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MovieTypeCategorySerializer(serializers.ModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; MovieTypeCategory</span><br><span class="line">        fields &#x3D; &quot;__all__&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MovieDetailSerializer(serializers.ModelSerializer):</span><br><span class="line">    movie_state &#x3D; MovieCountrySerializer(many&#x3D;True, read_only&#x3D;True)</span><br><span class="line">    sub_title &#x3D; SubTitleSerializer(many&#x3D;True, read_only&#x3D;True)</span><br><span class="line">    staffs &#x3D; MovieStaffSerializer(many&#x3D;True, read_only&#x3D;True)</span><br><span class="line">    kind_category &#x3D; MovieKindCategorySerializer(many&#x3D;True, read_only&#x3D;True)</span><br><span class="line">    type_category &#x3D; MovieTypeCategorySerializer(many&#x3D;True, read_only&#x3D;True)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; MovieDetail</span><br><span class="line">        fields &#x3D; &quot;__all__&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
         
         
</code></pre>
</li>
<li><p>我们需要统计用户点赞数量和打分情况</p>
<ol>
<li><p>新建点赞和打分情况的类视图(有打分和修改打分,有点赞和取消点赞)</p>
<p> 代码知识点:</p>
<pre><code> 1. 如果两个类都引用的话 会造成循环引用,所以使用第三方来操作两个类
 2. serializers 里面有 hiddenfields 可以隐藏我们需要的值,然后使用                  
 3. serializers.CurrentUserDefault() 可以取出当前用户
</code></pre>
<blockquote>
<p>user_movie_operations.models.py</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">	from django.db import models</span><br><span class="line">from django.contrib.auth import get_user_model</span><br><span class="line"># Create your models here.</span><br><span class="line"></span><br><span class="line">from movie.models import MovieDetail</span><br><span class="line"></span><br><span class="line">User &#x3D; get_user_model()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserStarMovie(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户对电影的评分,一个用户可以对多个电影评分,一部电影也可以拥有多个用户的评分,用户评分之后</span><br><span class="line">    就不能再去评分这个电影了</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    STAR &#x3D; (</span><br><span class="line">        (&#39;1&#39;, &#39;&#39;),</span><br><span class="line">        (&#39;2&#39;, &#39;&#39;),</span><br><span class="line">        (&#39;3&#39;, &#39;&#39;),</span><br><span class="line">        (&#39;4&#39;, &#39;&#39;),</span><br><span class="line">        (&#39;5&#39;, &#39;&#39;),</span><br><span class="line">        (&#39;6&#39;, &#39;&#39;),</span><br><span class="line">        (&#39;7&#39;, &#39;&#39;),</span><br><span class="line">        (&#39;8&#39;, &#39;&#39;),</span><br><span class="line">        (&#39;9&#39;, &#39;&#39;),</span><br><span class="line">        (&#39;10&#39;, &#39;&#39;),</span><br><span class="line">    )</span><br><span class="line">    user &#x3D; models.ForeignKey(User, verbose_name&#x3D;&#39;评论用户&#39;, help_text&#x3D;&#39;评论用户&#39;)</span><br><span class="line">    movie &#x3D; models.ForeignKey(MovieDetail, verbose_name&#x3D;&#39;所属电影&#39;, help_text&#x3D;&#39;所属电影&#39;)</span><br><span class="line">    star &#x3D; models.CharField(max_length&#x3D;2, choices&#x3D;STAR, </span><br><span class="line">    verbose_name&#x3D;&#39;用户对电影的评分&#39;, help_text&#x3D;&#39;用户对电影的评分&#39;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name &#x3D; &#39;用户评论一部电影&#39;</span><br><span class="line">        verbose_name_plural &#x3D; verbose_name</span><br><span class="line"></span><br><span class="line">        unique_together &#x3D; (&quot;user&quot;, &quot;movie&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserFavMovie(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户点赞一个电影</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    user &#x3D; models.ForeignKey(User, verbose_name&#x3D;&#39;点赞用户&#39;, help_text&#x3D;&#39;点赞用户&#39;)</span><br><span class="line">    movie &#x3D; models.ForeignKey(MovieDetail, verbose_name&#x3D;&#39;所属电影&#39;, help_text&#x3D;&#39;所属电影&#39;)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name &#x3D; &#39;用户评论一部电影&#39;</span><br><span class="line">        verbose_name_plural &#x3D; verbose_name</span><br><span class="line"></span><br><span class="line">        unique_together &#x3D; (&quot;user&quot;, &quot;movie&quot;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>user_movie_operations.serializers.py</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">	from rest_framework import serializers</span><br><span class="line">from django.contrib.auth import get_user_model</span><br><span class="line">from .models import UserStarMovie,UserFavMovie</span><br><span class="line"></span><br><span class="line">from movie.serializers import MovieListSerializer</span><br><span class="line"></span><br><span class="line">User &#x3D; get_user_model()</span><br><span class="line"></span><br><span class="line"># class UserStarMovieSerializer(serializers.ModelSerializer):</span><br><span class="line">#     model &#x3D; UserStarMovie</span><br><span class="line">#     fields &#x3D; &quot;__all__&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserFavMovieCreateSerializer(serializers.ModelSerializer):</span><br><span class="line">    user &#x3D; serializers.HiddenField(</span><br><span class="line">        default&#x3D;serializers.CurrentUserDefault()</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; UserFavMovie</span><br><span class="line">        fields &#x3D; (&quot;user&quot;,&quot;movie&quot;,&quot;id&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserFavMovieReadSerializer(serializers.ModelSerializer):</span><br><span class="line">    user &#x3D; serializers.HiddenField(</span><br><span class="line">        default&#x3D;serializers.CurrentUserDefault()</span><br><span class="line">    )</span><br><span class="line">    movie &#x3D; MovieListSerializer(many&#x3D;False)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        model &#x3D; UserFavMovie</span><br><span class="line">        fields &#x3D; (&quot;user&quot;,&quot;movie&quot;,&quot;id&quot;)</span><br><span class="line">	</span><br><span class="line">	</span><br></pre></td></tr></table></figure>
<blockquote>
<p>user_movie_operations.views.py</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">略</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>在遍历电影的时候获取打分获取点赞数量<br> 简介: 我们已经可以让用户对电影打分和点赞,取消点赞了,但是我们需要在浏览电影的时候,把点赞数量和打分情况返回给我们的前端,我们需要在遍历电影的serializer里面做文章</p>
<pre><code>   1. 代码实现:
 
 &gt;movie.serializers.py
 
     <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.db.models import Avg</span><br><span class="line">class MovieListSerializer(serializers.ModelSerializer):</span><br><span class="line">   fav_num &#x3D; serializers.SerializerMethodField(read_only&#x3D;True)</span><br><span class="line">   star_num &#x3D; serializers.SerializerMethodField(read_only&#x3D;True)</span><br><span class="line">				</span><br><span class="line">   def get_star_num(self, obj):</span><br><span class="line">       score &#x3D; UserStarMovie.objects.filter(movie&#x3D;obj).aggregate(Avg(&#39;star&#39;))</span><br><span class="line">       return round(score[&#39;star__avg&#39;],1)</span><br><span class="line">   def get_fav_num(self, obj):</span><br><span class="line">       return UserFavMovie.objects.filter(movie&#x3D;obj).count()</span><br><span class="line">				</span><br><span class="line">   class Meta:</span><br><span class="line">       model &#x3D; MovieDetail</span><br><span class="line">       fields &#x3D; (&#39;name&#39;, &#39;status&#39;, &#39;user_want_num&#39;, &#39;fav_num&#39;, &#39;star_num&#39;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
       6. 知识点:

 1. 我们可以在serializer里面取定义自定义字段方法,只需要继承SerializerMethodField方法,设置read_only = True,然后在下面写上关于他的函数,固定用法 get_xxxx ,serializer就会自动的帮我们使用自定义方法去约束字段信息
 
 
     &gt;serializers.SerializerMethodField(read_only=True)
 
 2. 我们使用了count(),方法去计算点赞的数量

 3. 我们使用了 aggregate 去做统计数据的平均值
 
</code></pre>
</li>
<li><p>使用缓存系统去升级我们的页面</p>
<ol>
<li>简介:每次请求我们都需要大量的计算用户点赞数量，打分的平均值如果请求数量过多,这势必是一个很大的开销,但是这些数据又是相对固定的,你不会每分钟都更新一次电影吧,所以我们需要在获取信息的页面增加缓存</li>
<li>web后台缓存原理:为什么要做缓存,缓存其实就是把数据存储在redis，或者文件系统中,你每次访问,我就把这个缓存的信息返给你,这样,我们就避免了查询数据库的过大开销</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="4-评论系统和权限控制"><a href="#4-评论系统和权限控制" class="headerlink" title="4.评论系统和权限控制"></a>4.评论系统和权限控制</h3><ol>
<li><p>简介:</p>
<p> 1.我们的电影下方带有评论,评论有对评论回复功能,显示回复评论功能,然后有评论的点赞行为<br> 2.用户可以去删除评论,修改评论,管理员看评论不当,也可以去删除评论,屏蔽用户发帖的功能</p>
</li>
<li><p>电影评论的基本实现:</p>
<ol>
<li><p>模型梳理:</p>
<ol>
<li>哪个用户去评论</li>
<li>评论哪一部电影</li>
<li>评论的内容</li>
<li>评论的时间</li>
<li>回复评论(也就是所外键是自己)</li>
</ol>
</li>
<li><p>模型代码实现:</p>
<p> 1.知识点: 在外键中 使用 ‘self’ 可以表示自己对应自己</p>
<blockquote>
<p>user_movie_opertions.models.py</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">class UserMovieShortComments(models.Model):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    用户对一个电影进行评论</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    user &#x3D; models.ForeignKey(User, verbose_name&#x3D;&#39;评论用户&#39;, help_text&#x3D;&#39;评论用户&#39;)</span><br><span class="line">    movie &#x3D; models.ForeignKey(MovieDetail, verbose_name&#x3D;&#39;评论的电影&#39;, help_text&#x3D;&#39;评论的电影&#39;)</span><br><span class="line">    comments &#x3D; models.TextField(max_length&#x3D;255, verbose_name&#x3D;&#39;短评的内容&#39;, help_text&#x3D;&#39;短片的内容&#39;)</span><br><span class="line">    add_time &#x3D; models.DateTimeField(auto_now&#x3D;True, verbose_name&#x3D;&#39;评论的时间&#39;, help_text&#x3D;&#39;评论时间&#39;)</span><br><span class="line">    reply_to &#x3D; models.ForeignKey(&#39;self&#39;,verbose_name&#x3D;&#39;回复某个评论&#39;,</span><br><span class="line">    help_text&#x3D;&#39;回复某个评论也可以不回复&#39;,null&#x3D;True)</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        verbose_name &#x3D; &#39;用户对一个电影进行短评论&#39;</span><br><span class="line">        verbose_name_plural &#x3D; verbose_name</span><br><span class="line"></span><br><span class="line">        unique_together &#x3D; (&#39;user&#39;, &#39;movie&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>评论思路梳理:</p>
<ol>
<li>用户创建评论</li>
<li>用户可以修改评论(自己的)</li>
<li>用户可以删除评论(自己的)</li>
<li>用户可以查看所有评论(自己的)</li>
<li>用户可以查看评论的详细信息(自己的)</li>
</ol>
</li>
<li><p>评论代码实现:</p>
<ol>
<li><p>逻辑代码</p>
<blockquote>
<p>user_movie_opertions.views.py</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">	</span><br><span class="line">	class UserMovieShortCommentsViewSet(ModelViewSet):</span><br><span class="line">	    &quot;&quot;&quot;</span><br><span class="line">	    create:</span><br><span class="line">	        用户增加一条对电影的评论</span><br><span class="line">	    list:</span><br><span class="line">	        查看自己的所有短评</span><br><span class="line">	    retrieve:</span><br><span class="line">	        查看自己的一条短评</span><br><span class="line">	    update:</span><br><span class="line">	        修改自己的短评信息</span><br><span class="line">	    destroy:</span><br><span class="line">	        删除自己的评论信息</span><br><span class="line">	    &quot;&quot;&quot;</span><br><span class="line">	</span><br><span class="line">	    serializer_class &#x3D; UserMovieShortCommentsCreateSerializer</span><br><span class="line">	    queryset &#x3D; UserMovieShortCommentsCreateSerializer.Meta.model.objects.all()</span><br><span class="line">	    permission_classes &#x3D; (IsAuthenticated,)</span><br><span class="line">	</span><br><span class="line">	    def get_throttles(self):</span><br><span class="line">	        if self.action &#x3D;&#x3D; &quot;create&quot;:</span><br><span class="line">	            return [t() for t in (OncePerDayUserThrottle,)]</span><br><span class="line">	</span><br><span class="line">	&#96;&#96;&#96;		</span><br><span class="line">2. 限制用户的速度限速代码</span><br><span class="line"></span><br><span class="line">	&gt;user\_movie_opertions.throttles.py</span><br><span class="line">	</span><br></pre></td></tr></table></figure>
<pre><code> from rest_framework.throttling import UserRateThrottle

 
 class OncePerDayUserThrottle(UserRateThrottle):
     rate = &#39;10/minute&#39;
</code></pre>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">			</span><br><span class="line">3. 升级版,用户评论的权限控制逻辑</span><br><span class="line">	</span><br><span class="line">	1. 简介:</span><br><span class="line">		之前的代码逻辑为用户只能浏览自己的帖子,删除自己的帖子,修改自己的帖子。但是这样的代码逻辑过于简单,我们无法把这些评论交由专门的管理员去管理这些帖子。所以我们需要让某些管理员能够管理其他用户的帖子。这就不仅仅的需要判断一下帖子属于谁这么简单了。我们需要存储帖子的权限是什么,谁能够操控这些权限。</span><br><span class="line">	</span><br><span class="line">	2. 逻辑分析:</span><br><span class="line">	</span><br><span class="line">		1. 首先建立管理员组</span><br><span class="line">		2. 在发帖的时候对用户(个人)和管理员(组)授权</span><br><span class="line">		3. 授权内容为:</span><br><span class="line">			用户: 查看 删除 修改 这个篇帖子</span><br><span class="line">			管理员组: 查看 删除 这个篇帖子</span><br><span class="line">	    4. 用户发帖如果被设置为不能发帖的状态,用户就不能发帖</span><br><span class="line">	3. 代码实现:</span><br><span class="line">		</span><br><span class="line">		1.在创建帖子的时候去添加权限</span><br><span class="line">		&gt;user\_movie_operations.views.py</span><br><span class="line">		</span><br></pre></td></tr></table></figure></li>
</ol>
<p> class UserMovieShortCommentsViewSet(ModelViewSet):</p>
<pre><code> &quot;&quot;&quot;
 create:
     用户增加一条对电影的评论
 list:
     查看自己的所有短评
 retrieve:
     查看自己的一条短评
 update:
     修改自己的短评信息
 destroy:
     删除自己的评论信息
 &quot;&quot;&quot;

 serializer_class = UserMovieShortCommentsCreateSerializer
 queryset = UserMovieShortCommentsCreateSerializer.Meta.model.objects.all()
 permission_classes = (IsAuthenticated,)

 def perform_create(self, serializer):
     user = self.request._user
     group = Group.objects.get_or_create(name=&#39;site_managers&#39;)[0]
     #在创建这篇帖子的时候,授予权限
     #然后再在做操作的时候,查看验证有木有这个权限
     instance = serializer.save()
     assign_perm(&#39;change_usermovieshortcomments&#39;, user, instance)
     assign_perm(&#39;delete_usermovieshortcomments&#39;, user, instance)
     assign_perm(&#39;delete_usermovieshortcomments&#39;, group, instance)


 def get_throttles(self):
     if self.action == &quot;create&quot;:
         return [t() for t in (OncePerDayUserThrottle,)]
</code></pre>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 在必要的时候去查看权限</span><br><span class="line">&gt;user_movie_operations.serialziers.py</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> class UserMovieShortCommentsCreateSerializer(serializers.ModelSerializer):</p>
<pre><code> # 创建短评论的用户
 user = serializers.HiddenField(
     default=serializers.CurrentUserDefault()
 )

 update = serializers.SerializerMethodField(read_only=True)
 delete = serializers.SerializerMethodField(read_only=True)

 def get_update(self, ins):
     user = self.context[&#39;request&#39;]._user

     return &#39;change_usermovieshortcomments&#39; in get_perms(user,ins)

 def get_delete(self, ins):
     user = self.context[&#39;request&#39;]._user
     return &#39;delete_usermovieshortcomments&#39; in get_perms(user,ins)

 class Meta:
     model = UserMovieShortComments
     fields = (&#39;id&#39;,&#39;user&#39;, &quot;movie&quot;, &quot;comments&quot;, &#39;reply_to&#39;,&#39;update&#39;,&#39;delete&#39;)
</code></pre>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">		</span><br><span class="line">4.过多评论 我们需要给他分页,筛选评论</span><br><span class="line"></span><br><span class="line">&gt;参见 分页部分</span><br><span class="line"></span><br><span class="line">### 5. 支付功能的原理与实现</span><br><span class="line"></span><br><span class="line">1. 简介: 我们需要为网站加上支付的功能,他是网站能存活下去的基本</span><br><span class="line"></span><br><span class="line">2. 支付流程: </span><br><span class="line"></span><br><span class="line">	1. 用户在网站内选择想要的商品,点击支付功能</span><br><span class="line">	2. 网站后台先查看用户是否合法,商品是否还有剩余等等</span><br><span class="line">	3. 检查合格后,网站把用户想买的商品锁定起来,以免其他人来购买,并根据付款金额,商品,付款人生成流水号。</span><br><span class="line">	4. 第三步骤还不能成为订单号,因为这个时候用户还没有付款,所以我们需要占时的锁定这个商品。生成流水号,交给用户要支付的平台。</span><br><span class="line">	5. 支付平台会生成支付链接返回给网站后台</span><br><span class="line">	6. 网站后台把支付链接交给用户</span><br><span class="line">	7. 用户通过支付链接付款 </span><br><span class="line">	8. 付款完成后 平台会通过网站支付已经成功</span><br><span class="line">	9. 网站校验平台推送的支付成功信息,没有问题就会把商品交给用户</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	####路梳理</span><br><span class="line">	角色:</span><br><span class="line">	</span><br><span class="line">	    1. 用户</span><br><span class="line">	    2 .网站后台</span><br><span class="line">	    3. 支付平台</span><br><span class="line">	</span><br><span class="line">	 交互:</span><br><span class="line">	 </span><br><span class="line">	     1. 用户是在平台上面给钱,收钱的也是平台</span><br><span class="line">	     2. 平台是发送通知让后台知道用户已经给钱了</span><br><span class="line"></span><br><span class="line">3. 电影项目逻辑梳理:</span><br><span class="line"></span><br><span class="line">	1. 用户选中还没有锁定或者售出的电影座位（用户其实够买的是电影片场里面的座位）</span><br><span class="line">	2. 用户提交够买或者订购的申请</span><br><span class="line">	3. 系统再次检测座位是否被锁定住或者出售</span><br><span class="line">	4. 系统生成一个流水号(为什么叫流水号,因为这个时候用户还没有给钱,他可以取消不给钱,所以只是一个临时的订单叫做流水号） 流水号里面包含用户信息,订单价格,要购买的商品信息(座位)</span><br><span class="line">	5. 系统把这个流水号信息,和要支付的信息交给支付宝或者微信等第三方平台。第三方平台会生成一个支付链接,我们把这个支付链接转交给用户。</span><br><span class="line">	6. 用户一旦得到了支付链接之后,就会在网页或者app里面去跳转 然后支付</span><br><span class="line">	7. 平台收到用户支付的钱之后,会通知系统里面的一个收货接口。</span><br><span class="line">	8. 系统收到收货接口支付成功或者失败的通知之后,把商品正式的提交给那个用户</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">### &lt;span id&#x3D;&quot;django-celery&quot;&gt;5.缓存系统(django-cache)&lt;&#x2F;span&gt;		</span><br><span class="line"></span><br><span class="line">1. django 缓存简介:</span><br><span class="line">	1. django的缓存很灵活,你可以设置缓存到memcached,文件,数据库系统,也可以共享缓存</span><br><span class="line"></span><br><span class="line">2. 缓存分类设置:</span><br><span class="line"></span><br><span class="line">	1. Memcahed缓存:</span><br><span class="line">	</span><br></pre></td></tr></table></figure>
<p> CACHES = {</p>
<pre><code> &#39;default&#39;: &#123;
     &#39;BACKEND&#39;: &#39;django.core.cache.backends.memcached.MemcachedCache&#39;,
     &#39;LOCATION&#39;: &#39;127.0.0.1:11211&#39;,
 &#125;
</code></pre>
<p> }</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">2. 数据库缓存:</span><br><span class="line">	</span><br></pre></td></tr></table></figure>
<p> CACHES = {</p>
<pre><code> &#39;default&#39;: &#123;
     &#39;BACKEND&#39;: &#39;django.core.cache.backends.db.DatabaseCache&#39;,
     &#39;LOCATION&#39;: &#39;my_cache_table&#39;,
 &#125;
</code></pre>
<p> }</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建缓存表,使用数据库缓存之前，你必须用这个命令来创建缓存表：</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<p> python manage.py createcachetable</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. 文件系统:</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> CACHES = {</p>
<pre><code> &#39;default&#39;: &#123;
     &#39;BACKEND&#39;: &#39;django.core.cache.backends.filebased.FileBasedCache&#39;,
     &#39;LOCATION&#39;: &#39;/var/tmp/django_cache&#39;,
 &#125;
</code></pre>
<p> }</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">4. 缓存时间全局设置:</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>  ‘TIMEOUT’: 60</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">		</span><br><span class="line">3. 缓存函数视图</span><br><span class="line"></span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">	1. 使用函数视图 加上装饰器,查看页面是否会缓存</span><br><span class="line">	</span><br><span class="line">		&gt;my\_test.cache_view.py</span><br><span class="line">		</span><br><span class="line">		在装饰器后面加上cache_page(10) 表示缓存10秒</span><br><span class="line">		</span><br></pre></td></tr></table></figure>
<pre><code> from django.views.decorators.cache import cache_page
 @cache_page(10)
 def cache_view(request):
     pass
</code></pre>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">			</span><br><span class="line">2. 同时 我们也可以在url上面加上缓存</span><br><span class="line"></span><br><span class="line">	&gt;my\_test.urls.py</span><br><span class="line">		   </span><br><span class="line">		   </span><br></pre></td></tr></table></figure>
<pre><code>    from django.views.decorators.cache import cache_page
    ...
    url(r&#39;^test13/$&#39;,cache_page(10)(cache_view))
    
</code></pre>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">		</span><br><span class="line">4. django-redis缓存:</span><br><span class="line">		通过这个设置开启redis缓存功能</span><br><span class="line">		</span><br></pre></td></tr></table></figure>
<p> CACHES = {</p>
<pre><code> &#39;default&#39;: &#123;
     &#39;BACKEND&#39;: &#39;django_redis.cache.RedisCache&#39;,
     &#39;LOCATION&#39;: &#39;redis://your_host_ip:6379&#39;,
     &quot;OPTIONS&quot;: &#123;
         &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,
          &quot;PASSWORD&quot;: &quot;yoursecret&quot;,
     &#125;,
 &#125;,
</code></pre>
<p> }</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">		</span><br><span class="line">	1. 使用redis-cli去查看缓存的数据</span><br><span class="line">	2. 查看redis中的key</span><br><span class="line">	</span><br><span class="line">5. 高级缓存配置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	1. TIMEOUT 全局缓存时间设置</span><br><span class="line">	2. OPTIONS:</span><br><span class="line">		</span><br><span class="line">		1. MAX_ENTRIES:高速缓存允许的最大条目数，超出这个数则旧值将被删除. 这个参数默认是300.</span><br><span class="line">		2. CULL_ENTRIES:当达到MAX_FREQUENCY 的时候,被删除的条目比率。 实际比率是 1 &#x2F; CULL_FREQUENCY, 所以设置CULL_FREQUENCY 为2会在达到MAX_ENTRIES 所设置值时删去一半的缓存。 这个参数应该是整数，默认为 3.</span><br><span class="line">		</span><br><span class="line">		 把 CULL_FREQUENCY的值设置为 0 意味着当达到MAX_ENTRIES时,缓存将被清空。 某些缓存后端 (database尤其)这将以很多缓存丢失为代价,大大 提高接受访问的速度。</span><br><span class="line">		 </span><br><span class="line">		3. KEY_PREFIX: 缓存的key的开头</span><br><span class="line">		4. KEY_FUNCTION:一个字符串，其中包含一个函数的虚线路径，该函数定义了如何将前缀，版本和密钥组合成最终缓存密钥。</span><br><span class="line">		5. VERSION：由Django服务器生成的缓存键的默认版本号。</span><br><span class="line">	</span><br><span class="line">	3. 实际的示例</span><br><span class="line">	</span><br></pre></td></tr></table></figure></li>
</ol>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">6. drf_extension缓存配置</span><br><span class="line">	1. 库简介: drf_extension是一个drf的扩展库,它带有对view的扩展和缓存的扩展</span><br><span class="line">	2. 使用的必要条件: 必须是继承了 APIView的类才能使用</span><br><span class="line">	3. CacheResponseMixin 类视图的缓存</span><br><span class="line">		1. 他一般会缓存 get方法</span><br><span class="line">		2. 使用方法</span><br><span class="line">			</span><br><span class="line">	</span><br><span class="line">	4. 配置简介</span><br><span class="line"></span><br><span class="line">		1. DEFAULT_CACHE_RESPONSE_TIMEOUT全局设置缓存的时间</span><br><span class="line">		2. DEFAULT_USE_CACHE 选择使用哪个缓存方式去缓存,一搬不会写</span><br><span class="line">		3. </span><br><span class="line">		</span><br></pre></td></tr></table></figure>
<pre><code> REST_FRAMEWORK_EXTENSIONS = &#123;
     &#39;DEFAULT_CACHE_RESPONSE_TIMEOUT&#39;: 60 * 15
     &#39;DEFAULT_USE_CACHE&#39;: &#39;special_cache&#39;
 &#125;
 
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">5. 使用方式:</span><br><span class="line">	</span><br><span class="line">	&gt;mytest.cache_view.py</span><br><span class="line">	</span><br></pre></td></tr></table></figure>
     from rest_framework_extensions.cache.mixins import CacheResponseMixin
     class BookViewSet(CacheResponseMixin,viewsets.ReadOnlyModelViewSet):


 queryset = Book.objects.all()
 serializer_class = BookSerializer
 
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">7. drf_extension配置深度解析</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">### &lt;span id&#x3D;&quot;django-celery&quot;&gt;5.队列任务(django-celery)&lt;&#x2F;span&gt;</span><br><span class="line"></span><br><span class="line">1. 队列任务的基础概念:</span><br><span class="line">    1. 高并发环境下，由于来不及同步处理，我们需要把这些东西交给一套系统去排队处理。这样不会导致我们主程序卡死,从而不能接受请求，出现大面积404</span><br><span class="line">    2. 画图解释队列架构</span><br><span class="line">    </span><br><span class="line">2. 队列任务的实现方式:</span><br><span class="line">    1. 我们以django celery为例:</span><br><span class="line">        1. 调度器:就是我们的django-celery 他去调用这些任务的执行,我们存储任务执行的结果</span><br><span class="line">        2. 任务执行器:我们发送邮件的函数就是一个任务执行器,celery可以去调度他执行发送邮件的任务。也可以在任务较多的时候。然他排队去执行。</span><br><span class="line">        3. 消息中间件: 我们把一个任务交给了任务执行器。但是任务多久完成，我们是不知道的。他可能在排队,也可能执行失败。也可能执行成功。我们需要一个东西去存储他目前的状态。通用的消息中间件有 redis rabbitMQ。</span><br><span class="line">    2. 队列任务大致流程梳理:</span><br><span class="line">        1. 把发送邮件的任务交给django-celery处理,并把调用任务的变量传递给django-celery</span><br><span class="line">        2. django-celery把这个任务给定一个唯一任务id号,然后存储到消息中间件中(这里我们用redis)</span><br><span class="line">        3. django-celery 把这个任务排队,等到能执行这个任务的时候，他去调用我们发送邮件程序去发送邮件</span><br><span class="line">        4. 当任务执行成功或者失败他都会把这个消息存入到我们的消息中间件中.</span><br><span class="line"></span><br><span class="line"> 3. django-celery:</span><br><span class="line"> </span><br><span class="line">     1. 安装 celery</span><br><span class="line">     </span><br><span class="line">     		第一个安装 celery 第二个安装 python redis 让python能使用redis 第三个安装celery的任务执行结果存储地区</span><br><span class="line">     		</span><br></pre></td></tr></table></figure>
          pip install celery
          pip install redis
          pip install django-celery-results
          
      
      <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">2. 使用redis作为消息中间件,安装redis</span><br><span class="line">	</span><br><span class="line">		[redis安装使用相关知识点](#redis)</span><br><span class="line">		</span><br><span class="line">3. django中配置celery</span><br><span class="line"></span><br><span class="line">    1. 在配置文件下面新加celery.py</span><br><span class="line"></span><br><span class="line">   		</span><br><span class="line">   	</span><br><span class="line">    </span><br><span class="line">    		&gt; drf\_movie_rimi.celery.py</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
         from __future__ import absolute_import, unicode_literals
         import os
         from celery import Celery
         
         # set the default Django settings module for the &#39;celery&#39; program.
         os.environ.setdefault(&#39;DJANGO_SETTINGS_MODULE&#39;, &#39;drf_movie_rimi.settings&#39;)
         
         #启动项目的名字 最好和项目名字一样 broker中间件  backend 存储结果的地方
         app = Celery(&#39;drf_movie_rimi&#39;,
                      broker=&#39;redis://localhost:6379&#39;,
                      backend=&#39;redis://localhost:6379&#39;
         
                      )
         
         #在redis中以CELERY
         app.config_from_object(&#39;django.conf:settings&#39;, namespace=&#39;CELERY&#39;)
         
         #使celery能够读取到所有apps里面分配的任务
         app.autodiscover_tasks()
</code></pre>
</li>
</ol>
<pre><code>         <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line">2. drf\_movie_rimi.settings.py</span><br><span class="line"></span><br></pre></td></tr></table></figure>
          
          INSTALLED_APPS = [
                    ...
                &#39;django_celery_results&#39;,
            ]
            
            ...
            
            CELERY_RESULT_BACKEND = &#39;django-db&#39;
          <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">安装好app之后做迁移</span><br><span class="line"></span><br></pre></td></tr></table></figure>
          makemigrations
          migrate
          <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      </span><br><span class="line">3. 在项目配置的init.py里面加入启动文件</span><br><span class="line"></span><br><span class="line">	drf\_movie_rimi.__init__.py</span><br><span class="line">  				</span><br></pre></td></tr></table></figure>
              
              from __future__ import absolute_import, unicode_literals

            # This will make sure the app is always imported when
            # Django starts so that shared_task will use this app.
            from .celery import app as celery_app
            
            __all__ = (&#39;celery_app&#39;,)
              
              <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">         </span><br><span class="line">4. 启动和使用celery</span><br><span class="line"></span><br><span class="line">	1. 启动django</span><br><span class="line">	2. 在命令行中启动celery</span><br><span class="line">		        </span><br><span class="line">          &gt;启动命令 虚拟环境下 项目目录下执行</span><br><span class="line">          </span><br></pre></td></tr></table></figure>
              celery -A drf_movie_rimi worker -l info 
              <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     </span><br><span class="line">3. 把我们的发送邮件任务转移给celery去执行</span><br><span class="line"></span><br><span class="line">	   1. 按照固定用法引入包</span><br><span class="line">	   2. 在函数前面加入@shared_task装饰器来使他成为队列任务</span><br><span class="line"></span><br><span class="line">     &gt;users.tasks.py</span><br><span class="line">     </span><br></pre></td></tr></table></figure>
              
                 # Create your tasks here
                    from __future__ import absolute_import, unicode_literals
                    from celery import shared_task
                    from utitls import send_sms_email
                    
                    ...
                    
                    
                    @shared_task
                    def reg_send_mail(title, context, to_mail):
                        res = send_sms_email.my_send_mail(title, context, to_mail)
                    
                        success_context = &#39;向&#123;&#125;邮箱发送注册验证码成功,信息内容:&#123;&#125;&#39;.format(to_mail, context)
                        fail_context = &quot;向&#123;&#125;发送邮箱验证码失败&quot;.format(to_mail)
                    
                        if res == 1:
                            return success_context
                        return fail_context

              <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. 在views里面去调用队列,引入我们刚才的队列函数,使用xxx.delay()去唤醒他</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		&gt; users.views.py</span><br></pre></td></tr></table></figure>
                     
                    class UserRegisterCaptchaCreateViewSet(CreateModelMixin, GenericViewSet):
                        queryset = UserRegisterCaptchaCreateSerializer.Meta.model.objects.all()
                        serializer_class = UserRegisterCaptchaCreateSerializer
                    
                        def perform_create(self, serializer):
                            data = serializer.validated_data
                            captcha = &#39;您的验证码为&#123;&#125;&#39;.format(data[&#39;captcha&#39;])
                            #res = my_send_mail(&#39;注册验证码&#39;,captcha,data[&#39;email&#39;])
                            reg_send_mail.delay(&#39;注册验证码&#39;,captcha,data[&#39;email&#39;])
                            
                            ...
                     
                     <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">		            	 </span><br><span class="line">		        4. 在我们的admin后台去查看结果</span><br><span class="line"></span><br><span class="line">		5. 总结：</span><br><span class="line">		</span><br><span class="line">			1. 队列任务是一个抽象概念</span><br><span class="line">			2. 队列任务的标准是叫你去实现 </span><br><span class="line">				1. 调度队列的程序(celery) </span><br><span class="line">				2. 消息中间件-broker(redis)</span><br><span class="line">				3. 执行结果存储器 backend (mysql或者redis)</span><br><span class="line">			3. celery只是python里面去实现了队列的程序,当然你可以自己写,java那些也有自己的程序			</span><br><span class="line">   				</span><br><span class="line"></span><br><span class="line">   			</span><br><span class="line">   			</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">### &lt;span id&#x3D;&quot;redis&quot;&gt;6.redis&lt;&#x2F;span&gt;   </span><br><span class="line"></span><br><span class="line">1. redis的简介:</span><br><span class="line">	1. redis是一个nosql数据库</span><br><span class="line">	2. redis他是一个存在于内存上面的数据库</span><br><span class="line">	3. redis他有时候会用来做缓存</span><br><span class="line">	4. nosql数据库一张表只能有一个特定的用途</span><br><span class="line"></span><br><span class="line">2. redis的安装:</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">3. redis的配置,他的软件的用法</span><br><span class="line"></span><br><span class="line">	1. Makefile: make &amp;&amp; make install的安装依据文档,如果你安装出问题的话,就可以去找个文件</span><br><span class="line">	2. redis.conf 配置文件</span><br><span class="line">	3. sentinel.conf 我们redis 哨兵,高可用配置,如果reids崩掉的话,监听,然后做出决策</span><br><span class="line">	4. 文件夹 src:</span><br><span class="line">		1. redis-benchmark redis的压测工具</span><br><span class="line">		2. redis-server redis-cli redis服务器 reids客户端</span><br><span class="line">		3. redis-sentinel 启动我们的哨兵</span><br><span class="line">	5. 配置文件（redsi.conf）:</span><br><span class="line">		1. bind 127.0.0.1  启动的监听ip 一般监听内网ip</span><br><span class="line">		2. port 6379 监听端口 一般会改掉</span><br><span class="line">		3. masterauth &lt;master-password&gt; 主从备份密码 主的密码 等于你主机 requirepass 前提是你配置了 slaveof</span><br><span class="line">		4. requirepass redis密码</span><br><span class="line">		5. slaveof 127.0.0.1 6379 配置主从 主的ip和端口 让自己成为slaveof（从库）</span><br><span class="line">		7. dump.rdb redis的持久化数据</span><br><span class="line">		8. save 60 10000 表示 60秒之内 你有大于等于10000次数据变化,他就会给你存储到rdb(硬盘)上面</span><br><span class="line">		9. redis有两种存储方式, 一种是rdb 一种是 aof 默认是rdb</span><br><span class="line">			1. rdb的原理是一段时间内把你磁盘的镜像存储下来(思考git) 坏处是:发生灾难,灾难的期间的数据是没有的 比如你 12.00保存了数据 12.00：30秒发生灾难, 30秒的数据就没有了</span><br><span class="line">			2. aof 存储 append only 原理是把你每一次数据库的变化记录下来，恢复数据的时候,根据你每次的变化来推演。 好处: 发生灾难了数据很会很小。坏处:无法达到性能或者是很耗性能</span><br><span class="line">		10. 数据过期命令:</span><br><span class="line">			expire value second 给一个key设置过期时间,完成之后就被删除</span><br><span class="line">			最主要的地方用在缓存数据上面</span><br><span class="line">			</span><br><span class="line">			ttl key可以去看他有还有多少的寿命</span><br><span class="line">			</span><br><span class="line">		</span><br><span class="line">	6. redis命令:</span><br><span class="line">		-h hostip</span><br><span class="line">		-p 端口</span><br><span class="line">		-a 密码</span><br><span class="line">		tips:如果你的密码错误,你是可以链接的,但是你无法看到数据</span><br><span class="line">		链接命令: src&#x2F;redis-cli -h 192.168.0.169 -p 16379 -a rimi12345678</span><br><span class="line">	</span><br><span class="line">	7. redis的数据库结构:</span><br><span class="line">		1. 前提</span><br><span class="line">			1. 大前提 redis 数据库结构是基于nosql的 所以的数据库都是 key value</span><br><span class="line">			2. 没有主键和外键 比如设了外键,主键被删了之后,他的没有任何影响</span><br><span class="line">			3. 表于表之间没有任何关系 </span><br><span class="line">		2. 数据结构:</span><br><span class="line">			1. string 字符串 key value 存储字符串和数字 </span><br><span class="line">				命令: </span><br><span class="line">					1. set 设置key和value</span><br><span class="line">					2. get 获取key所代表的value</span><br><span class="line">					3. incr 自增1</span><br><span class="line">					4. decr 自减1</span><br><span class="line">					5. incrby key num </span><br><span class="line">					6. decrby </span><br><span class="line">			2. hash 散列表:</span><br><span class="line">				1. 相当于一个 dict 但是只有一层</span><br><span class="line">				  命令:</span><br><span class="line">				  	hset 设置一个散列表 hset person1 name luhan age 25 gender renyao</span><br><span class="line">				  	hgetall key 获取hash里面的所有key value</span><br><span class="line">				  	</span><br><span class="line">				  	hmget key field1 field2 ... 获取执行的value  hmget person1 name age</span><br><span class="line">				  	hmset key fiels value 精准的修改hash表(已经存在)里值,没有就会新建</span><br><span class="line">				  	</span><br><span class="line">				  2. 性能优化:</span><br><span class="line">				 		1. 一般不会用hash表,我们用string表来代替他（存入json）</span><br><span class="line">						2. 或者他推荐我们去使用 hgetall命令,少用hmget</span><br><span class="line">				</span><br><span class="line">			3. zset 有序集合:</span><br><span class="line">			</span><br><span class="line">				1. 是一个有排名的集合数据，每一条数据他都有排名:</span><br><span class="line">				</span><br><span class="line">				2. 命令：</span><br><span class="line">					1. 添加数据: zadd key score value 给定数据的分数</span><br><span class="line">					2. 取出数据并且排名: ZREVRANGE hackers 0 -1 withscores</span><br><span class="line">						1. withscores 会把分数一并的给你显示出来</span><br><span class="line">					3. zcard value 统计我们的集合里面的数据量</span><br><span class="line">					4. zscore value key 取出某个key的分数</span><br><span class="line">					5. zrem value key  移除某个分数</span><br><span class="line">			4. set 无序结合:</span><br><span class="line">				</span><br><span class="line">				1. 是一个无需集合:</span><br><span class="line">				</span><br><span class="line">					2.命令:</span><br><span class="line">						1. sadd key value1 value2 .... 添加值到我们的集合里面去</span><br><span class="line">						2. smembers key 获取集合里面的信息</span><br><span class="line">						3. scard key 获取集合的数据</span><br><span class="line">						4. sdiff 集合的差集</span><br><span class="line">			5. list 双向列表结构:</span><br><span class="line">			</span><br><span class="line">				1. 他是双向列表,他可以把数据从左边或者右边压入,压入之后可以左右弹出</span><br><span class="line">				2. 可以用这个来做队列任务</span><br><span class="line"></span><br><span class="line">				</span><br><span class="line">			6. eval redis脚本:</span><br><span class="line">			</span><br><span class="line">				执行脚本可以保证你的数据的一致性</span><br><span class="line">				</span><br><span class="line">				script表示的是lua脚本:</span><br><span class="line">				</span><br><span class="line">					1. lua申明变量需要local</span><br><span class="line">					2. lua拼接字符串需要 ..</span><br><span class="line">					3. 调用脚本的时候 使用 redis.call() 跟你的命令</span><br><span class="line">					4. keys args相当于传递参数进去，在脚本里面大写入KEYS[1]</span><br><span class="line">					</span><br></pre></td></tr></table></figure>
            def new_user():
                script = &quot;&quot;&quot;
                    local user_id = redis.call(&quot;incr&quot;, KEYS[1])
                    local hash_table_name = &quot;user:&quot;..user_id
                    redis.call(&quot;zadd&quot;,&quot;user_set&quot;,user_id,hash_table_name)
                    redis.call(&quot;hmset&quot;,hash_table_name,&quot;name&quot;,user_id)
                &quot;&quot;&quot;
                script1 = r.register_script(script)
                x = script1(keys=[&quot;user_id&quot;], args=[])
            
            <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">6. pipeline:</span><br><span class="line">	可以帮我们加速redis执行效率,一次性执行所有的所有操作</span><br><span class="line">	</span><br></pre></td></tr></table></figure>
                with r.pipeline() as p:
                    for i in range(100000):
                        user_id = p.incr(&#39;user_id&#39;)
                        hash_table_name = &quot;user:&#123;&#125;&quot;.format(user_id)
                        p.zadd(&#39;user_set&#39;, user_id, hash_table_name)
                        p.hmset(hash_table_name, &#123;&quot;name&quot;: &quot;user:&#123;&#125;&quot;.format(user_id), &#39;password&#39;: 
                        &#39;rimiaaa&#123;&#125;&#39;.format(user_id)&#125;)
                    p.execute()
                            
            <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">				</span><br><span class="line">		1. 实验：设计一张表:</span><br><span class="line"></span><br><span class="line">			要求: 使用redis来做用户表</span><br><span class="line">			</span><br><span class="line">			    1. 存入账户密码</span><br><span class="line">			    2. 用户新建之后,id自增</span><br><span class="line">			    3. 可以查看到所有的用户</span><br><span class="line">			    4. 可以统计用户的数量</span><br><span class="line">		</span><br><span class="line">			mytest.redis_test.py</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 8.django-gurdian 控制用户权限的逻辑</span><br><span class="line"></span><br><span class="line">1. 简介:</span><br><span class="line">	  1. 他是django第三方权限管理扩展库</span><br><span class="line">	  2. 为什么要使用权限管理系统?我们参考一下百度贴吧,你发的帖子会被管理员删除掉,当然你自己也可以删除掉自己的帖子,但是你是不能删除其他人或者管理员发出的帖子的。这就是一个典型的权限管理系统</span><br><span class="line">	  3. RBAC-&gt;刚才所讲的问题我们可以通过RBAC模型去解决,RBAC的全称为 role-based access control,即基于角色的访问控制。</span><br><span class="line">	  4. 那其实我们刚才的那个问题就可以化解为授予权限,和在要使用权限的时候去检查这个用户是否有权限。</span><br><span class="line">	  5. django-guradian是一个实现了rabc模型的强大工具,它是专门扩展django权限管理的第三方库。</span><br><span class="line">	  6. 具有授予,删除,查看权限等等丰富的功能</span><br><span class="line">	  7. 官网: http:&#x2F;&#x2F;django-guardian.readthedocs.io&#x2F;en&#x2F;latest&#x2F;</span><br><span class="line">	  8. 他是对象级别的权限控制</span><br><span class="line">	  9. django是model级别的权限控制</span><br><span class="line"></span><br><span class="line">2. 安装:</span><br><span class="line">	  1. 库安装</span><br><span class="line">	  </span><br></pre></td></tr></table></figure>
  $ pip install django-guardian
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 把guardian放入django的apps里面</span><br><span class="line">		</span><br></pre></td></tr></table></figure>
      INSTALLED_APPS = (
     ...
     &#39;guardian&#39;,
    )
  
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	  </span><br></pre></td></tr></table></figure>
  $ pip install django-guardian
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. api使用规范:</span><br><span class="line">	1. 权限授予: guardian.shortcuts.assign_perm(perm, user_or_group, obj&#x3D;None) </span><br><span class="line">	</span><br><span class="line">	2. 权限查看:guardian.shortcuts.get_perms(user_or_group, obj)—返回一个用户给这个对象权限的list,其实就是一个含有perm的list</span><br><span class="line">	</span><br><span class="line">	3. 参数说明: perm要授予的权限(删除或者修改权限),user_or_group授予权限的用户或者用户组(用户),obj被操控的对象(博文</span><br><span class="line">	4. 在model中加入权限: model的Meta里面可以加扩展permissons,这个扩展的permissions就是上面perm参数</span><br><span class="line"></span><br><span class="line">4. 实现我们的逻辑代码:</span><br><span class="line">	1. 我们这个时候就需要给用户分组了 </span><br><span class="line">		1. 普通用户 （使用普通的网站功能）</span><br><span class="line">		2. 网站管理员 （管理用户回复评论中的帖子,删帖,修改用户帖子,屏蔽用户发帖）</span><br><span class="line">		3. 系统管理员 (添加或者删除网站管理员)</span><br><span class="line">	2. 用户发帖之后,帖子是一个对象,所以我们的授权就应该在这个时候去完成</span><br><span class="line">		1. 删除权限</span><br><span class="line">		2. 修改权限</span><br><span class="line">		3. 授予网站管理员和发帖用户这个权限</span><br><span class="line"></span><br><span class="line">5. 底层原理:</span><br><span class="line">	其实是数据库的中数据的记录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 9.pagination django的分页</span><br><span class="line">1. 简介 如果页面的数据过多,那么我们不能在页给他显示完成,我们可以采用分页显示数据,减少数据库压力</span><br><span class="line">2. 实现分页所需要的部件:</span><br><span class="line">	最大数据量 返回给前端表示我们有多少的数据量</span><br><span class="line">	每页数据量 返回给前端每页能显示多少的数据量 当然这个可以修改</span><br><span class="line">	当前页面页码 让前端知道当前在哪个页面上面</span><br><span class="line">3. django中的分页配置:</span><br><span class="line"></span><br><span class="line">    1. 全局默认配置 当我们配置好了之后,会在list页面看到我们的分页信息</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
    
    REST_FRAMEWORK = &#123;
            ...
        
            &#39;DEFAULT_PAGINATION_CLASS&#39;: &#39;rest_framework.pagination.LimitOffsetPagination&#39;,
            &#39;PAGE_SIZE&#39;: 10
&#125;
    
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 定制化分页配置</span><br><span class="line"></span><br><span class="line">	参数解释:</span><br><span class="line">		1. page_size 默认每页个数</span><br><span class="line">		2. page_size_query_param 在url里面去设置每页个数</span><br><span class="line">		3. max_page_size 每页最大的个数 page_size_query_param最大值不能超过他</span><br><span class="line"></span><br></pre></td></tr></table></figure>
    
    
    from rest_framework.pagination import PageNumberPagination
    
    class LargeResultsSetPagination(PageNumberPagination):
        page_size = 10
        page_size_query_param = &#39;page_size&#39;
        max_page_size = 100
        
        
    class MovieShortCommentsReadAllViewSet(ListModelMixin,GenericViewSet):
        &quot;&quot;&quot;
        查看相关电影的所有评论,并且返回可以管理这条评论
        &quot;&quot;&quot;
        serializer_class = UserMovieShortCommentsCreateSerializer
        queryset = UserMovieShortCommentsCreateSerializer.Meta.model.objects.all()
    
        pagination_class = LargeResultsSetPagination
    
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 10.django-filter 筛选数据</span><br><span class="line">1. 简介:</span><br><span class="line"></span><br><span class="line">2. django-filter使用方法:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	1. 在drf中使用filter去搜索或者排序数据</span><br><span class="line">		用法: 1.我们使用 filters去激活 filter_backends让他拥有搜索和排序的功能,然后我们给定搜索和排序的位置即可</span><br><span class="line">		</span><br><span class="line">		</span><br></pre></td></tr></table></figure>
    
    from rest_framework import filters
    class MovieViewSet(mixins.ListModelMixin,mixins.RetrieveModelMixin,mixins.
    UpdateModelMixin,viewsets.GenericViewSet):
        &quot;&quot;&quot;
        获取电影信息接口
        &quot;&quot;&quot;
    
        queryset = MovieDetail.objects.all()
        filter_backends = (filters.SearchFilter, filters.OrderingFilter)
        search_fields = (&#39;name&#39;,)
        ordering_fields = (&#39;id&#39;,)
    
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">2. 分类筛选器</span><br><span class="line"></span><br><span class="line">   1. 简介: 通过上面的配置我们已经可以去搜索字段,然后给定字段的排序了,但是我们还需要分类筛选信息,比如电影类型筛选,上映时间筛选等等</span><br><span class="line">   2. 安装:</span><br><span class="line">   </span><br><span class="line">   	    1. 官方地址: http:&#x2F;&#x2F;django-filter.readthedocs.io&#x2F;en&#x2F;master&#x2F;</span><br><span class="line">   		 2. 安装命令:</span><br><span class="line">   			</span><br></pre></td></tr></table></figure>
               $ pip install django_fliter
               <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">		</span><br><span class="line">3. 使用方法:</span><br><span class="line"></span><br><span class="line">	1. movies.views.py</span><br><span class="line">	 </span><br></pre></td></tr></table></figure>
            
            class MovieViewSet(mixins.ListModelMixin,mixins.RetrieveModelMixin,
            mixins.UpdateModelMixin,viewsets.GenericViewSet):
                &quot;&quot;&quot;
                获取电影信息接口
                &quot;&quot;&quot;
            
                queryset = MovieDetail.objects.all()
                filter_backends = (DjangoFilterBackend,filters.SearchFilter, filters.OrderingFilter)
                search_fields = (&#39;name&#39;,)
                ordering_fields = (&#39;id&#39;,)
                filter_class = MovieDetailFilter
            
            <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">2. 在专门的filters中去配置 类似于我们的form功能</span><br><span class="line"></span><br></pre></td></tr></table></figure>
            
            import django_filters.rest_framework as filters
            from .models import MovieDetail
            
            
            class MovieDetailFilter(filters.FilterSet):
                class Meta:
                    model = MovieDetail
                    fields = [
                        &#39;name&#39;,
                    ]
            
            <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">		</span><br><span class="line">4. fields使用方法:</span><br><span class="line">	 可以用更多选择去约束筛选条件</span><br><span class="line">	 </span><br></pre></td></tr></table></figure>
         
             class Meta:
                model = MovieDetail
                fields = &#123;
                    &#39;name&#39;:[&#39;exact&#39;, &#39;contains&#39;]
                &#125;
         
         <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">			 </span><br><span class="line">			 上面的会给你创建两个筛选字段 一个给你精确匹配，一个给你模糊pip</span><br><span class="line">			 </span><br><span class="line">		5. 筛选条件详解</span><br><span class="line">		</span><br><span class="line">			1. exact 精确匹配</span><br><span class="line">			2. contains icontains 包含 i表示忽略大小写</span><br><span class="line">			3. gt gte 大于 大于等于</span><br><span class="line">			4. lt lte 小于 小于等于</span><br><span class="line">		6. 外键的使用:</span><br><span class="line">		    1. __ 表示魔术方法</span><br><span class="line">		    2. kind_category__name</span><br><span class="line">	   		</span><br><span class="line">	   			</span><br><span class="line">	   		</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">### 11.admin 后台管理定制化</span><br><span class="line"></span><br><span class="line">1. 简介:</span><br><span class="line">   我们的admin里面包含了字段的所有信息,但是有些信息我们是不想让人去修改的,比如所点赞数量,浏览数量,或者其他定制化的东西,所以我们需要调用admin里面的方法去修改我们对admin里面字段的约束</span><br><span class="line">   </span><br><span class="line">2. 约束修改方法:</span><br><span class="line">	1. 只显示哪些字段</span><br><span class="line">		fields &#x3D; (&#39;name&#39;, &#39;status&#39;) </span><br><span class="line">	2. 不显示哪些字段</span><br><span class="line">		exclude &#x3D; (&#39;name&#39;,)</span><br><span class="line">	3. 哪些字段在一行里面去显示:</span><br><span class="line">	</span><br><span class="line">		1. 注意点: 不能把外键放在里面</span><br><span class="line">	</span><br><span class="line">		fields &#x3D; ((&#39;name&#39;, &#39;status&#39;), &#39;sub_title&#39;)</span><br><span class="line">	4. 组合字段展示,可以把字段放在合集里面展示，给出标题和样式。collapse表示下拉栏</span><br><span class="line">	</span><br></pre></td></tr></table></figure>
        fieldsets = (
            (None, &#123;
                &#39;fields&#39;: ((&#39;name&#39;, &#39;status&#39;), &#39;sub_title&#39;)
            &#125;),
            (&#39;Advanced options&#39;, &#123;
                &#39;classes&#39;: (&#39;collapse&#39;,),
                &#39;fields&#39;: (&#39;view_num&#39;, &#39;is_banner&#39;),
            &#125;),
        )
    
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5. list_display:</span><br><span class="line">	顾名思义,会在展示list的时候,展示哪些数据</span><br><span class="line">	</span><br></pre></td></tr></table></figure>
        ...    
        list_display = (&#39;id&#39;,&#39;name&#39;,&#39;status&#39;)
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">6. list_display_links:</span><br><span class="line">	配置了之后会生成一个连接 直接连接过去:</span><br><span class="line">	</span><br></pre></td></tr></table></figure>
    ...    
    list_display_links = (&#39;name&#39;, &#39;status&#39;)
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7. list_editable:</span><br><span class="line">	</span><br><span class="line">	可以直接在list面板修改值,不用进入到里面去修改</span><br><span class="line">	</span><br><span class="line">	list_editable &#x3D; (&quot;status&quot;,)</span><br><span class="line">	</span><br><span class="line">8. list_filter:</span><br><span class="line">	可以在list面板配置分类功能 </span><br><span class="line">	</span><br></pre></td></tr></table></figure>
    list_filter = (&#39;kind_category&#39;,)
    
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9. search_fields:</span><br><span class="line">	搜索框搜索页面</span><br><span class="line">	</span><br></pre></td></tr></table></figure>
    search_fields = [&#39;name&#39;]
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">10. inlines:</span><br><span class="line">	如果有外键指向了这个model,就可以使用inlines方便的管理,而不用去外面单独的编辑外键</span><br><span class="line">	</span><br></pre></td></tr></table></figure>
    class Img(admin.TabularInline):

        model = MovieImages
    
        inlines = [Img]
    
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">	11. 其他:</span><br><span class="line">	</span><br><span class="line">	   https:&#x2F;&#x2F;yiyibooks.cn&#x2F;xx&#x2F;Django_1.11.6&#x2F;ref&#x2F;contrib&#x2F;admin&#x2F;index.html</span><br><span class="line"></span><br><span class="line">3. 富文本编辑器 ckeditor</span><br><span class="line"></span><br><span class="line">    1. 官网 https:&#x2F;&#x2F;github.com&#x2F;django-ckeditor&#x2F;django-ckeditor</span><br><span class="line"></span><br><span class="line">    2. 安装</span><br><span class="line"></span><br></pre></td></tr></table></figure>
    pip install django-ckeditor
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">在settings的app里面加入 ckeditor</span><br><span class="line"></span><br><span class="line">新建文件夹 static</span><br><span class="line"></span><br><span class="line">配置 STATIC_ROOT &#x3D; static</span><br><span class="line"></span><br></pre></td></tr></table></figure>
                
        CKEDITOR_UPLOAD_PATH = &#39;ckeditor/&#39;
        CKEDITOR_RESTRICT_BY_USER = True
        CKEDITOR_BROWSE_SHOW_DIRS = True
        CKEDITOR_RESTRICT_BY_DATE = True
        CKEDITOR_IMAGE_BACKEND = &#39;PIL&#39;
        CKEDITOR_BASEPATH = &quot;/static/ckeditor/ckeditor/&quot;
        CKEDITOR_CONFIGS = &#123;
            &#39;default&#39;: &#123;
                &#39;update&#39;: [&#39;Image&#39;, &#39;Update&#39;, &#39;Flash&#39;, &#39;Table&#39;, &#39;HorizontalRule&#39;, 
                &#39;Smiley&#39;, &#39;SpecialChar&#39;, &#39;PageBreak&#39;],
                &#39;skin&#39;: &#39;moono&#39;,
                # &#39;skin&#39;: &#39;office2013&#39;,
                &#39;toolbar_Basic&#39;: [
                    [&#39;Source&#39;, &#39;-&#39;, &#39;Bold&#39;, &#39;Italic&#39;]
                ],
                # &#39;toolbar_YourCustomToolbarConfig&#39;: [
                #     &#123;&#39;name&#39;: &#39;document&#39;, &#39;items&#39;: [&#39;Source&#39;, &#39;-&#39;, &#39;Save&#39;, &#39;NewPage&#39;,
                 &#39;Preview&#39;, &#39;Print&#39;, &#39;-&#39;, &#39;Templates&#39;]&#125;,
                #     &#123;&#39;name&#39;: &#39;clipboard&#39;, &#39;items&#39;: [&#39;Cut&#39;, &#39;Copy&#39;, &#39;Paste&#39;,
                 &#39;PasteText&#39;, &#39;PasteFromWord&#39;, &#39;-&#39;, &#39;Undo&#39;, &#39;Redo&#39;]&#125;,
                #     &#123;&#39;name&#39;: &#39;editing&#39;, &#39;items&#39;: [&#39;Find&#39;, &#39;Replace&#39;, &#39;-&#39;, 
                &#39;SelectAll&#39;]&#125;,
                #     &#123;&#39;name&#39;: &#39;forms&#39;,
                #      &#39;items&#39;: [&#39;Form&#39;, &#39;Checkbox&#39;, &#39;Radio&#39;, &#39;TextField&#39;, 
                &#39;Textarea&#39;, &#39;Select&#39;, &#39;Button&#39;, &#39;ImageButton&#39;,
                #                &#39;HiddenField&#39;]&#125;,
                #     &#39;/&#39;,
                #     &#123;&#39;name&#39;: &#39;basicstyles&#39;,
                #      &#39;items&#39;: [&#39;Bold&#39;, &#39;Italic&#39;, &#39;Underline&#39;, &#39;Strike&#39;, 
                &#39;Subscript&#39;, &#39;Superscript&#39;, &#39;-&#39;, &#39;RemoveFormat&#39;]&#125;,
                #     &#123;&#39;name&#39;: &#39;paragraph&#39;,
                #      &#39;items&#39;: [&#39;NumberedList&#39;, &#39;BulletedList&#39;, &#39;-&#39;, 
                &#39;Outdent&#39;, &#39;Indent&#39;, &#39;-&#39;, &#39;Blockquote&#39;, &#39;CreateDiv&#39;, &#39;-&#39;,
                #                &#39;JustifyLeft&#39;, &#39;JustifyCenter&#39;, &#39;JustifyRight&#39;, 
                &#39;JustifyBlock&#39;, &#39;-&#39;, &#39;BidiLtr&#39;, &#39;BidiRtl&#39;,
                #                &#39;Language&#39;]&#125;,
                #     &#123;&#39;name&#39;: &#39;links&#39;, &#39;items&#39;: [&#39;Link&#39;, &#39;Unlink&#39;, &#39;Anchor&#39;]&#125;,
                #     &#123;&#39;name&#39;: &#39;insert&#39;,
                #      &#39;items&#39;: [&#39;Image&#39;, &#39;Flash&#39;, &#39;Table&#39;, &#39;HorizontalRule&#39;, 
                &#39;Smiley&#39;, &#39;SpecialChar&#39;, &#39;PageBreak&#39;, &#39;Iframe&#39;]&#125;,
                #     &#39;/&#39;,
                #     &#123;&#39;name&#39;: &#39;styles&#39;, &#39;items&#39;: [&#39;Styles&#39;, &#39;Format&#39;, &#39;Font&#39;, &#39;FontSize&#39;]&#125;,
                #     &#123;&#39;name&#39;: &#39;colors&#39;, &#39;items&#39;: [&#39;TextColor&#39;, &#39;BGColor&#39;]&#125;,
                #     &#123;&#39;name&#39;: &#39;tools&#39;, &#39;items&#39;: [&#39;Maximize&#39;, &#39;ShowBlocks&#39;]&#125;,
                #     &#123;&#39;name&#39;: &#39;about&#39;, &#39;items&#39;: [&#39;About&#39;]&#125;,
                #     &#39;/&#39;,  # put this to force next toolbar on new line
                #     &#123;&#39;name&#39;: &#39;yourcustomtools&#39;, &#39;items&#39;: [
                #         # put the name of your editor.ui.addButton here
                #         &#39;Preview&#39;,
                #         &#39;Maximize&#39;,
                #
                #     ]&#125;,
                # ],
                # &#39;toolbar&#39;: &#39;YourCustomToolbarConfig&#39;,  # put selected toolbar config here
                # # &#39;toolbarGroups&#39;: [&#123; &#39;name&#39;: &#39;document&#39;, &#39;groups&#39;: 
                [ &#39;mode&#39;, &#39;document&#39;, &#39;doctools&#39; ] &#125;],
                # # &#39;height&#39;: 291,
                # # &#39;width&#39;: &#39;100%&#39;,
                # # &#39;filebrowserWindowHeight&#39;: 725,
                # # &#39;filebrowserWindowWidth&#39;: 940,
                # # &#39;toolbarCanCollapse&#39;: True,
                # # &#39;mathJaxLib&#39;: &#39;//cdn.mathjax.org/mathjax/2.2-latest/MathJax.js
                ?config=TeX-AMS_HTML&#39;,
                # &#39;tabSpaces&#39;: 4,
                # &#39;extraPlugins&#39;: &#39;,&#39;.join([
                #     # &#39;uploadimage&#39;,  # the upload image feature
                #     # your extra plugins here
                #     &#39;div&#39;,
                #     &#39;autolink&#39;,
                #     &#39;autoembed&#39;,
                #     &#39;embedsemantic&#39;,
                #     &#39;autogrow&#39;,
                #     # &#39;devtools&#39;,
                #     &#39;widget&#39;,
                #     &#39;lineutils&#39;,
                #     &#39;clipboard&#39;,
                #     &#39;dialog&#39;,
                #     &#39;dialogui&#39;,
                #     &#39;elementspath&#39;
                # ]),
            &#125;
        &#125;
    
    
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">执行 collectstatic</span><br><span class="line"></span><br><span class="line">在url里面取配置静态文件服务器和ckeditor的</span><br><span class="line"></span><br></pre></td></tr></table></figure>
        
        
        urlpatterns = [
                ...
                url(r&#39;^ckeditor/&#39;, include(&#39;ckeditor_uploader.urls&#39;)),
                ...
            
            ]
        ...
        
        urlpatterns += [
                # 启动一个文件服务器(django的文件服务器 实际上线后使用nginx之类的服务器作为文件服务器)
                url(r&#39;^static/(?P&lt;path&gt;.*)$&#39;, serve, &#123;
                    &#39;document_root&#39;: settings.STATIC_ROOT
                &#125;),
                url(r&#39;^media/(?P&lt;path&gt;.*)$&#39;, serve, &#123;
                    &#39;document_root&#39;: settings.MEDIA_ROOT
                &#125;)
            ]
                    
        
        <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line">    CKEDITOR_BASEPATH 一定要在结尾加上 &#x2F; 比如 &quot;&#x2F;static&#x2F;ckeditor&#x2F;ckeditor&#x2F;&quot;</span><br><span class="line">    </span><br><span class="line">3. 在model中取替换我们的field即可,然后去admin里面取查看</span><br><span class="line"></span><br></pre></td></tr></table></figure>
    
        from ckeditor_uploader.fields import RichTextUploadingField
        
        class MovieDetail(models.Model):
        ...
        movie_brief = RichTextUploadingField(default=&#39;目前没有还有简介&#39;, max_length=500, 
        verbose_name=&#39;电影简介&#39;, help_text=&#39;电影简介&#39;)
        ...

    
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">	       </span><br><span class="line">### 12. django 文件存储系统</span><br><span class="line"></span><br><span class="line">1. python 文件基础:</span><br><span class="line">	1. 使用python 打开文件:</span><br><span class="line">	</span><br><span class="line">		1. 使用python 打开文件并写入字符串:</span><br><span class="line"></span><br><span class="line">			读写模式:</span><br><span class="line">			</span><br><span class="line">				r: 只读</span><br><span class="line">				</span><br><span class="line">				r+: 读写</span><br><span class="line">				</span><br><span class="line">				w: 只写</span><br><span class="line">				</span><br><span class="line">				w+: 读写</span><br><span class="line">				</span><br><span class="line">				a: 只写(追加写入)</span><br><span class="line">				</span><br><span class="line">				a+: 读写(追加写入)</span><br><span class="line">				</span><br><span class="line">			&gt;my_test.file_test1.py</span><br><span class="line">			</span><br></pre></td></tr></table></figure>
        def test1():
            file = os.path.join(base_dir,&#39;test1.txt&#39;)
            with open(file,&#39;w+&#39;) as f:
                f.write(&#39;hello worasdfld&#39;)
        
        <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">2. 读取文件 读取大型文件或者打印大型文件的时候需要循环遍历</span><br><span class="line">	</span><br><span class="line">	&gt;my_test.file_test1.py</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
        
        def test3():
            file = os.path.join(base_dir,&#39;test2.txt&#39;)
            with open(file,&#39;r&#39;) as f:
                datas = f.readlines()
                for i in datas:
                    print(i)
        
        <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">			</span><br><span class="line"></span><br><span class="line">2. form-data x-www-form-urlencoded raw binary区别</span><br><span class="line"></span><br><span class="line">	https:&#x2F;&#x2F;blog.csdn.net&#x2F;shangmingtao&#x2F;article&#x2F;details&#x2F;74463500</span><br><span class="line">	</span><br><span class="line">3. urlencode解释:</span><br><span class="line">	</span><br><span class="line">	因为有时候我们get方法里面的参数会带空格 问号等等,但是这些是我们Url的特殊符号,如果url里面带有了空格问号，他就会执行其他命令。而不是把他作为字符串看待，所以我们需要把们encode 变成url不会识别成特殊符号的字符串，参考我们的正则表达式。</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	&gt;my\_test.file_test1.py</span><br><span class="line"></span><br></pre></td></tr></table></figure>
        
def test4():
    from urllib import parse

    url_test = &#39;www.baidu.com?&#39;
    url_params = &#39;a=阿凡达拉水电费&amp;b=发的说法发?生?的浪费阿斯蒂芬&#39;
    print(url_test+ parse.quote(url_params))
        
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">	思考 post方法需要urlencode吗?</span><br><span class="line"></span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line"></span><br><span class="line">4. django 文件理清思路: static vs media</span><br><span class="line">	</span><br><span class="line">	1. static是静态文件</span><br><span class="line">	2. media是资源文件,资源文件是随时会变的,比如用户上传的头像,后台发布的文章,他是随时会变的</span><br><span class="line">	3. 你看的网页是如何显示的图片的?</span><br><span class="line">		一般会有img标签,浏览器遍历到Img标签,取出img标签里面的关于资源文件(图片,视频的网址),然后访问这个url得到的资源文件,显示给用户去看。</span><br><span class="line">	</span><br><span class="line">	4. 图片是如何生成如何传输的?</span><br><span class="line">	</span><br><span class="line">		计算机以RGB三原色或者其他算法来显示图片,其实对计算机来说,图片就是一个普通的txt文件,里面存放的是把这个图片哪个位置显示哪个颜色的信息。比如1080p就是有 1080*1920个像素点,每个像素点表现什么颜色就是我们里面存入的信息。</span><br><span class="line">		</span><br><span class="line">		那么如何传输,只需要传输txt信息给浏览器,浏览器会根据这些信息来解密,展示图片</span><br><span class="line">		</span><br><span class="line">		jpg,png是什么?</span><br><span class="line">			就是把同一个图片里面的信息加密的方式,就像我们的utf8 utf16等等,加密过程中可能会有部分信息的删除。</span><br><span class="line">	</span><br><span class="line">	5. 那么django的媒体系统是如何设计的?</span><br><span class="line">		</span><br><span class="line">		我们可以指定存储图片的位置, media_root，然后我们上传图片后,图片会存在于文件夹中。数据库里面存储的是图片存储的位置信息</span><br><span class="line">	</span><br><span class="line">5. django文件上传基础:</span><br><span class="line"></span><br><span class="line">	1. django 接受的文件上传模式是 form-data模式,如此他会把我们的文件信息(或者二进制流)放入他的 request.FILES,我们使用post上传一个文件,断点查看files里面的信息。</span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">		查看我们传过来的file是什么: 他是一个 inMemoryUploadFile 类</span><br><span class="line">		</span><br><span class="line">	</span><br><span class="line">		&gt;mytest.file_view.py</span><br><span class="line">		</span><br></pre></td></tr></table></figure>
    
    @csrf_exempt
    def test_files(request):
        # write_files(request.FILES[&#39;test_files&#39;])
    
        return HttpResponse(&#39;hello world&#39;)
    
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. 我们可以把这个二进制数据写入到文件中(这个时候 信息还在变量中(内存))</span><br><span class="line"></span><br><span class="line">	1. 我们使用wb+模式来写入文件 因为图片等文件是用二进制流传入的</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">		&gt;mytest.file_view.py</span><br><span class="line">		</span><br></pre></td></tr></table></figure>
        
        def write_files(file):
            media_dir = os.path.join(BASE_DIR, &#39;media&#39;, &#39;test1&#39;)
            media_file = os.path.join(media_dir, file.name)
        
            with open(media_file, &#39;wb+&#39;) as f:
                #断点查看i 二进制
                for i in file.chunks():
                    f.write(i)
        
        <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">2. 我们可以利用这个方法把文件写在外部，注意 你需要文件的写入权限</span><br><span class="line"></span><br><span class="line">	&gt;mytest.file_view.py</span><br><span class="line">	</span><br></pre></td></tr></table></figure>
        def write_files_out_side(file):
            media_dir = os.path.dirname(BASE_DIR)
            media_file = os.path.join(media_dir, &#39;test_store&#39;,file.name)
        
            with open(media_file, &#39;wb+&#39;) as f:
                #断点查看i
                for i in file.chunks():
                    f.write(i)
        
        <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">3. django中自带的文件写入类,我们使用这个类就不用去想我们刚才使用函数方法一样去自己做这些事情了,定义ImageField即可或者FileField。然后我们把inMemoryUploadFile类的对象传递给我们imgfield 他就会自动的帮我们上传完成图片。其实我们刚才的函数是一样的,不过有部分限制:</span><br><span class="line">   1. 图片的传入顶层目录必须是我们在settings中去指定的图片目录。</span><br><span class="line"></span><br><span class="line">   2. 如果图片有重名，他会自动的给我们重命名文件。</span><br><span class="line">   </span><br><span class="line">   3. 他的img字段里面存储的是图片的存储路径,而不是图片</span><br><span class="line"></span><br><span class="line">	&gt;mytest.models.py</span><br><span class="line">	</span><br></pre></td></tr></table></figure>
    class FileTestImage(models.Model):
        name = models.CharField(max_length=20,verbose_name=&#39;文件写入测试名称&#39;)
        img = models.ImageField(upload_to=&#39;test1&#39;,verbose_name=&#39;测试图片&#39;)
    
        class Meta:
            verbose_name = &#39;图片写入测试&#39;
            verbose_name_plural = verbose_name
    
        def __str__(self):
            return self.name
    
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&gt; mytest.file\_test.py</span><br><span class="line"></span><br></pre></td></tr></table></figure>
    
    @csrf_exempt
    def test_files(request):
    
        data = request.FILES[&#39;test_files&#39;]
        # write_files_out_side(request.FILES[&#39;test_files&#39;])
        FileTestImage.objects.create(name=&#39;测试1&#39;,img=data)
    
    
        return HttpResponse(&#39;hello world&#39;)
    
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">4. 问题:我们存储文件需要分开存储,试想一个大型网站有多少用户,一个文件夹里面存储10w张图片?光是系统打开这个文件都已经够消耗资源了。所以我们需要合理的去分割图片存储的文件。最常见的是以日期为准,比如每个月的图片存在于当月文件夹中，又或者每个文件夹存1000张,存满后换下一文件。但是这一切的核心问题是你需要自己去接管图片存储位置的逻辑,然后做适合业务的算法出来</span><br><span class="line"></span><br><span class="line">5. django 文件存储自定义文件夹:</span><br><span class="line"></span><br><span class="line">    1. 我们可以自定义文件的存储位置,只需要给定upload一个函数(平时我们给定的一个字符串,表示文件定死存储在哪里)</span><br><span class="line">	    </span><br></pre></td></tr></table></figure>
        def test_directory_path(instance, filename):
            ext = filename.split(&#39;.&#39;)[-1]
            filename = &#39;&#123;&#125;.&#123;&#125;&#39;.format(uuid.uuid4().hex[:8], ext)
            # return the whole path to the file
            return &quot;&#123;0&#125;/&#123;1&#125;/&quot;.format(&quot;avatar&quot;, filename)
        
        
        <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. 升级版:</span><br><span class="line">    我们需要给定传递给哪个文件夹</span><br><span class="line">     </span><br></pre></td></tr></table></figure>
        
           import uuid
            from django.utils.deconstruct import deconstructible
            from django.utils.timezone import now
            import os
            
            
            @deconstructible
            class UploadToPathAndRename(object):
                def __init__(self, path):
                    year = str(now().year)
                    month = str(now().month)
            
                    self.sub_path = os.path.join(path, year, month)
            
                def __call__(self, instance, filename):
                    ext = filename.split(&#39;.&#39;)[-1]
                    filename = &#39;&#123;&#125;.&#123;&#125;&#39;.format(uuid.uuid4().hex[:8], ext)
                    return os.path.join(self.sub_path, filename)
        
        <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">		    </span><br><span class="line">	6. </span><br><span class="line"></span><br><span class="line">&lt;!--3. 分布式文件传输</span><br><span class="line"></span><br><span class="line">	1. 新的问题:</span><br><span class="line">		我们已经把图片路径切割为自己定制化的路径了，但是依然有一个问题，一般线上的服务器都是把图片存储在一个专门的目录</span><br><span class="line">		或者一个专门的文件服务器上面,我们这样存在整体代码里面是不可行的。静态文件可以在代码文件里面,但是媒体文件不行。</span><br><span class="line">		</span><br><span class="line">	2. 解决上面的问题其实就是做一个系统把文件可以写到另外的文件夹(本机器中)</span><br><span class="line">	3. 我们可以使用分布式存储库来解决这个问题 django-resto</span><br><span class="line">	</span><br><span class="line"></span><br></pre></td></tr></table></figure>
    $ pip install django-resto
    
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">		</span><br></pre></td></tr></table></figure>
    
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 13. django 部署</span><br><span class="line"></span><br><span class="line">1. 基础知识:</span><br><span class="line">	1. 我们的web服务是一个deamon程序,他们需要一直稳定的跑在服务器上面,每当有浏览器请求过来,他就需要去解析报文,然后把含有(get post参数等)的信息传递给我们的程序</span><br><span class="line">	2. web服务也有可能崩掉,所以我们需要一个第三方的程序去监听他,在web服务down的时候去自动的启动</span><br><span class="line"></span><br><span class="line">2. gunicorn 部署</span><br><span class="line">	1. 简介 gunicorn是一个django的cgi服务,它最主要的特点是轻量化 简单配置 可以使用python来做配置文件</span><br><span class="line"></span><br><span class="line">	2. 使用:</span><br><span class="line">	</span><br><span class="line">		1. 安装gunicorn服务</span><br><span class="line">		</span><br></pre></td></tr></table></figure>
        $ pip install gunicorn
        
        <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. gunicorn的配置文件</span><br><span class="line"></span><br><span class="line">	</span><br></pre></td></tr></table></figure>
        
        import multiprocessing
        import os
        
        base_dir = os.path.dirname(os.path.abspath(__file__))
        # unix:file_path 使用socket方式
        bind = &quot;0.0.0.0:8009&quot;
        #socket_file = os.path.join(base_dir,&#39;mysocket&#39;,&#39;mysock.sock&#39;)
        #bind = &quot;unix:&#123;&#125;&quot;.format(socket_file)
        # 2-4 x $(NUM_CORES) range
        workers = multiprocessing.cpu_count() * 2 + 1
        #worker_class= &quot;gevent&quot;
        # port = 8002
        backlog = 2048  # 就是设置允许挂起的连接数的最大值
        # timeout默认值：30
        # reload 默认值：False 重载 更改代码的时候重启workers， 只建议在开发过程中开启。
        reload = False
        # daemon以守护进程形式来运行Gunicorn进程。默认值：False
        daemon = False
        # accesslog 设置访问日志存放的地方
        # 默认值：None
        accesslog = os.path.join(base_dir, &#39;log&#39;, &#39;gunicorn&#39;, &#39;access.log&#39;)
        # errorlog 设置错误日志的存放地址
        errorlog = os.path.join(base_dir, &#39;log&#39;, &#39;gunicorn&#39;, &#39;error.log&#39;)

        
        <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">3. 在django项目下面去启动服务器</span><br><span class="line"></span><br></pre></td></tr></table></figure>
        
        command=/Users/canvas/virtualenvs/django_drf_rimi_teaching/bin/gunicorn -c 
        gunicorn_conf.py drf_movie_rimi.wsgi &amp;
        
        <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">			</span><br><span class="line">3. superviosr</span><br><span class="line"></span><br><span class="line">	1. 在上面我们完成了gunicorn的部署之后,我们需要一个第三方监听程序去监听他。所以我们决定使用superviosr来做这个事情</span><br><span class="line">	2. supservioser的安装</span><br><span class="line">	</span><br><span class="line">		注意使用sudo 和python 2.4 以上版本，不能使用python3</span><br><span class="line">		</span><br></pre></td></tr></table></figure>
    sudo pip2.7 install supervisor
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. 安装完成之后,首选配置</span><br><span class="line"></span><br></pre></td></tr></table></figure>
    
        
        ; Sample supervisor config file.
        ;
        ; For more information on the config file, please see:
        ; http://supervisord.org/configuration.html
        ;
        ; Notes:
        ;  - Shell expansion (&quot;~&quot; or &quot;$HOME&quot;) is not supported.  Environment
        ;    variables can be expanded using this syntax: &quot;%(ENV_HOME)s&quot;.
        ;  - Quotes around values are not supported, except in the case of
        ;    the environment= options as shown below.
        ;  - Comments must have a leading space: &quot;a=b ;comment&quot; not &quot;a=b;comment&quot;.
        ;  - Command will be truncated if it looks like a config file comment, e.g.
        ;    &quot;command=bash -c &#39;foo ; bar&#39;&quot; will truncate to &quot;command=bash -c &#39;foo &quot;.
        
        [unix_http_server]
        file=/tmp/supervisor.sock   ; the path to the socket file
        ;chmod=0700                 ; socket file mode (default 0700)
        ;chown=nobody:nogroup       ; socket file uid:gid owner
        ;username=user              ; default is no username (open server)
        ;password=123               ; default is no password (open server)
        
        [inet_http_server]         ; inet (TCP) server disabled by default
        port=127.0.0.1:9001        ; ip_address:port specifier, *:port for all iface
        username=user              ; default is no username (open server)
        password=123               ; default is no password (open server)
        
        [supervisord]
        logfile=/tmp/supervisord.log ; main log file; default $CWD/supervisord.log
        logfile_maxbytes=50MB        ; max main logfile bytes b4 rotation; default 50MB
        logfile_backups=10           ; # of main logfile backups; 0 means none, default 10
        loglevel=info                ; log level; default info; others: debug,warn,trace
        pidfile=/tmp/supervisord.pid ; supervisord pidfile; default supervisord.pid
        nodaemon=false               ; start in foreground if true; default false
        minfds=1024                  ; min. avail startup file descriptors; default 1024
        minprocs=200                 ; min. avail process descriptors;default 200
        ;umask=022                   ; process file creation umask; default 022
        ;user=chrism                 ; default is current user, required if root
        ;identifier=supervisor       ; supervisord identifier, default is &#39;supervisor&#39;
        ;directory=/tmp              ; default is not to cd during start
        ;nocleanup=true              ; don&#39;t clean up tempfiles at start; default false
        ;childlogdir=/tmp            ; &#39;AUTO&#39; child log dir, default $TEMP
        ;environment=KEY=&quot;value&quot;     ; key value pairs to add to environment
        ;strip_ansi=false            ; strip ansi escape codes in logs; def. false
        
        ; The rpcinterface:supervisor section must remain in the config file for
        ; RPC (supervisorctl/web interface) to work.  Additional interfaces may be
        ; added by defining them in separate [rpcinterface:x] sections.
        
        [rpcinterface:supervisor]
        supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface
        
        ; The supervisorctl section configures how supervisorctl will connect to
        ; supervisord.  configure it match the settings in either the unix_http_server
        ; or inet_http_server section.
        
        [supervisorctl]
        serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket
        ;serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket
        ;username=chris              ; should be same as in [*_http_server] if set
        ;password=123                ; should be same as in [*_http_server] if set
        ;prompt=mysupervisor         ; cmd line prompt (default &quot;supervisor&quot;)
        ;history_file=~/.sc_history  ; use readline history if available
        
        ; The sample program section below shows all possible program subsection values.
        ; Create one or more &#39;real&#39; program: sections to be able to control them under
        ; supervisor.
        
        ;[program:theprogramname]
        ;command=/bin/cat              ; the program (relative uses PATH, can take args)
        ;process_name=%(program_name)s ; process_name expr (default %(program_name)s)
        ;numprocs=1                    ; number of processes copies to start (def 1)
        ;directory=/tmp                ; directory to cwd to before exec (def no cwd)
        ;umask=022                     ; umask for process (default None)
        ;priority=999                  ; the relative start priority (default 999)
        ;autostart=true                ; start at supervisord start (default: true)
        ;startsecs=1                   ; # of secs prog must stay up to be running (def. 1)
        ;startretries=3                ; max # of serial start failures when starting (default 3)
        ;autorestart=unexpected        ; when to restart if exited after running (def: unexpected)
        ;exitcodes=0,2                 ; &#39;expected&#39; exit codes used with autorestart (default 0,2)
        ;stopsignal=QUIT               ; signal used to kill process (default TERM)
        ;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)
        ;stopasgroup=false             ; send stop signal to the UNIX process group (default false)
        ;killasgroup=false             ; SIGKILL the UNIX process group (def false)
        ;user=chrism                   ; setuid to this UNIX account to run the program
        ;redirect_stderr=true          ; redirect proc stderr to stdout (default false)
        ;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO
        ;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
        ;stdout_logfile_backups=10     ; # of stdout logfile backups (0 means none, default 10)
        ;stdout_capture_maxbytes=1MB   ; number of bytes in &#39;capturemode&#39; (default 0)
        ;stdout_events_enabled=false   ; emit events on stdout writes (default false)
        ;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO
        ;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
        ;stderr_logfile_backups=10     ; # of stderr logfile backups (0 means none, default 10)
        ;stderr_capture_maxbytes=1MB   ; number of bytes in &#39;capturemode&#39; (default 0)
        ;stderr_events_enabled=false   ; emit events on stderr writes (default false)
        ;environment=A=&quot;1&quot;,B=&quot;2&quot;       ; process environment additions (def no adds)
        ;serverurl=AUTO                ; override serverurl computation (childutils)
        
        ; The sample eventlistener section below shows all possible eventlistener
        ; subsection values.  Create one or more &#39;real&#39; eventlistener: sections to be
        ; able to handle event notifications sent by supervisord.
        
        ;[eventlistener:theeventlistenername]
        ;command=/bin/eventlistener    ; the program (relative uses PATH, can take args)
        ;process_name=%(program_name)s ; process_name expr (default %(program_name)s)
        ;numprocs=1                    ; number of processes copies to start (def 1)
        ;events=EVENT                  ; event notif. types to subscribe to (req&#39;d)
        ;buffer_size=10                ; event buffer queue size (default 10)
        ;directory=/tmp                ; directory to cwd to before exec (def no cwd)
        ;umask=022                     ; umask for process (default None)
        ;priority=-1                   ; the relative start priority (default -1)
        ;autostart=true                ; start at supervisord start (default: true)
        ;startsecs=1                   ; # of secs prog must stay up to be running (def. 1)
        ;startretries=3                ; max # of serial start failures when starting (default 3)
        ;autorestart=unexpected        ; autorestart if exited after running (def: unexpected)
        ;exitcodes=0,2                 ; &#39;expected&#39; exit codes used with autorestart (default 0,2)
        ;stopsignal=QUIT               ; signal used to kill process (default TERM)
        ;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)
        ;stopasgroup=false             ; send stop signal to the UNIX process group (default false)
        ;killasgroup=false             ; SIGKILL the UNIX process group (def false)
        ;user=chrism                   ; setuid to this UNIX account to run the program
        ;redirect_stderr=false         ; redirect_stderr=true is not allowed for eventlisteners
        ;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO
        ;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
        ;stdout_logfile_backups=10     ; # of stdout logfile backups (0 means none, default 10)
        ;stdout_events_enabled=false   ; emit events on stdout writes (default false)
        ;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO
        ;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
        ;stderr_logfile_backups=10     ; # of stderr logfile backups (0 means none, default 10)
        ;stderr_events_enabled=false   ; emit events on stderr writes (default false)
        ;environment=A=&quot;1&quot;,B=&quot;2&quot;       ; process environment additions
        ;serverurl=AUTO                ; override serverurl computation (childutils)
        
        ; The sample group section below shows all possible group values.  Create one
        ; or more &#39;real&#39; group: sections to create &quot;heterogeneous&quot; process groups.
        
        ;[group:thegroupname]
        ;programs=progname1,progname2  ; each refers to &#39;x&#39; in [program:x] definitions
        ;priority=999                  ; the relative start priority (default 999)
        
        ; The [include] section can just contain the &quot;files&quot; setting.  This
        ; setting can list multiple files (separated by whitespace or
        ; newlines).  It can also contain wildcards.  The filenames are
        ; interpreted as relative to this file.  Included files *cannot*
        ; include files themselves.
        
        ;[include]
        ;files = relative/directory/*.ini
        
        [program:django3]
        command=/Users/canvas/virtualenvs/django_drf_rimi_teaching/bin/gunicorn -c 
        gunicorn_conf.py drf_movie_rimi.wsgi &amp;
        directory=/Users/canvas/project/django_drf_rimi_teaching/drf_movie_rimi
        startsecs=0
        stopwaitsecs=0
        autostart=true
autorestart=true


    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">4. 启动它</span><br><span class="line"></span><br></pre></td></tr></table></figure>
    

    supervisord -c supervisor1.conf    
    
    
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">		</span><br><span class="line">	5. 使用supervisorctl去查看状态</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 14. nginx 服务器</span><br><span class="line"></span><br><span class="line">1. nginx 服务器说明:</span><br><span class="line">	</span><br><span class="line">	nginx是一款反向代理服务器 -&gt; 代理服务器意思是本身不会处理任何代码,他只是将你的请求转发给其他端口处理 比如他可以把服务交给django服务程序处理</span><br><span class="line">	</span><br><span class="line">	nginx是纯C语言实现的 性能很高 他的意义是引擎的意思</span><br><span class="line">	</span><br><span class="line">	一般我们会把nginx作为文件服务器,因为文件服务器的特性是没有什么逻辑程序在其中,只需要单纯的按照协议来发送文件请求即可,这点也符合nginx的代码简单 效率高的特点。</span><br><span class="line">	</span><br><span class="line">	我们一般会把django中的文件交给nginx处理,django只负责逻辑代码，比如复杂的数据库请求，序列化等等</span><br><span class="line">	</span><br><span class="line">2. nginx的安装</span><br><span class="line"></span><br><span class="line">	1. 官网下载 编译安装</span><br><span class="line">	</span><br></pre></td></tr></table></figure>
    $ http://nginx.org/download/nginx-1.15.2.tar.gz
    
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">解压</span><br><span class="line"></span><br></pre></td></tr></table></figure>
    $ ./configure
    $ sudo make &amp;&amp; make install
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. nginx启动命令和重启命令</span><br><span class="line"></span><br></pre></td></tr></table></figure>
    $ sudo /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx_test.conf 
    
    $ sudo /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx_test.conf -s reload
    
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. nginx服务器配置解释</span><br><span class="line"></span><br><span class="line">	1. user 后面跟启动用户 和用户所在的用户组</span><br><span class="line">	2. worker_processes 启动多少个线程</span><br><span class="line">	3. events 需要多少最大连接</span><br><span class="line">	4. error_log 错误日志</span><br><span class="line">	5. http 代码http模块 nginx里面只能有一个http&#123;&#125;</span><br><span class="line">	6. server 表示虚拟服务器 一个http里面可以有很多虚拟服务器</span><br><span class="line">	7. listen 表示绑定到哪个端口</span><br><span class="line">	8. location 表示端口对应的url匹配模式(正则表达式)</span><br><span class="line">	9. root表示如果是文件服务的话，他会去哪里找到文件</span><br><span class="line">	10. proxy_pass 表示转发到哪个服务上面去</span><br><span class="line"></span><br></pre></td></tr></table></figure>
#使用nginx的 用户和用户组
user  canvas staff;
worker_processes  2;

#错误日志地方
error_log  /Users/canvas/project/django_drf_rimi_teaching/drf_movie_rimi/log/nginx/error_run.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events &#123;
    worker_connections  4096;
&#125;


http &#123;
    include       mime.types;
    default_type  application/octet-stream;


    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    #监听18080端口
    server &#123;
        charset utf-8;
        listen 18080;

        #client_max_body_size 5;
           #location /static &#123;
        #    client_max_body_size 5m;
           #    alias /root/project/moudu_movie_online_test/backend/static;
        #    allow all;
           #&#125;

        location / &#123;
            client_max_body_size 5m;
               proxy_set_header Host $host;
               #把18080端口转发给8005
               proxy_pass http://127.0.0.1:8005;
        &#125;

        error_log /Users/canvas/project/django_drf_rimi_teaching/drf_movie_rimi/log/nginx/error.log;
        access_log /Users/canvas/project/django_drf_rimi_teaching/drf_movie_rimi/log/nginx/access.log;
    &#125;

    server &#123;
        listen 10081;
        root  /Users/canvas/project/django_drf_rimi_teaching/drf_movie_rimi;
        location ~ .*\.(js|css|html|gif|jpg|jpeg|png|bmp|dat|zip|jz|mp3|exe|dds|alpha|rar|spr|dll|pdb|
        pak|xxx|pck|cur|rs|atf|pwz|flv|lnk|psd|pwb|wav)$
        
        &#123;
            expires      240h;
        &#125;

        error_log /Users/canvas/project/django_drf_rimi_teaching/drf_movie_rimi/log/nginx/
        static_error.log;
        access_log /Users/canvas/project/django_drf_rimi_teaching/drf_movie_rimi/log/nginx/
        static_access.log;
    &#125;
&#125;


```
</code></pre>
]]></content>
      <categories>
        <category>python框架</category>
      </categories>
      <tags>
        <tag>Django语法整理</tag>
      </tags>
  </entry>
  <entry>
    <title>Django框架04--基础知识</title>
    <url>/jwangcloud/3407305082/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/Django.jpeg"></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><span id="more"></span>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装：</span><br><span class="line">pip3 install django -i https:&#x2F;&#x2F;pypi.doubanio.com&#x2F;simple&#x2F;</span><br><span class="line"></span><br><span class="line">查看：</span><br><span class="line">django-admin</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pycharm中可直接创建</span><br><span class="line"></span><br><span class="line">或者命令行：django-admin startproject priject_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">运行Django：python3 manage.py runserver   浏览器打开有小火箭即成功</span><br><span class="line"></span><br><span class="line">创建app：python3 manage.py  startapp app_name</span><br><span class="line"></span><br><span class="line">pycharm: debug运行  ：edit可设置ip和端口</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h3><h4 id="配置目录"><a href="#配置目录" class="headerlink" title="配置目录"></a>配置目录</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">与Django一样名字的目录为配置目录</span><br><span class="line"></span><br><span class="line">urls：各种链接，功能的实现，路由URL    </span><br><span class="line">	1.path(‘地址栏取名’,相关函数)</span><br><span class="line">		例如：path(&#39;hello&#x2F;&#39;, views.hello_world) </span><br><span class="line">	2.需要使用import调用函数所在文件 调用的为views中的函数</span><br><span class="line">		例如：from app1 import views</span><br><span class="line">settings：</span><br><span class="line">	1.allowed_hosts（允许访问的IP）bug:同一局域网里IP可随意访问</span><br><span class="line">	2.templates:模版  ‘dirs’：确认html放置的文件夹</span><br><span class="line">		例如：&#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;)]</span><br><span class="line">			base_dir:该项目的路径</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="app操作"><a href="#app操作" class="headerlink" title="app操作"></a>app操作</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">自己建立的app包中：</span><br><span class="line"></span><br><span class="line">views：创建函数   </span><br><span class="line">	1.httpresponse函数：创建报文内容 用于return HttpResponse(‘html语句’)  需要使用import导入该函数</span><br><span class="line">	2.requests参数：创建函数时必须加上该参数，用于接收数据等便于使用 </span><br><span class="line">	3.render(re参数,html位置—&gt;直接html名,参数dict) ：将其发送给浏览器</span><br></pre></td></tr></table></figure>



<h4 id="文件发送"><a href="#文件发送" class="headerlink" title="文件发送"></a>文件发送</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html：</span><br><span class="line">	1.创建放置html文件夹</span><br><span class="line">	2.确认文件夹位置：settings 2  templates中</span><br><span class="line">	3.书写html</span><br><span class="line">	4.编写调用函数 views 3</span><br><span class="line">	5.urls增加该网页 urls 1，2</span><br><span class="line"></span><br><span class="line">css&#x2F;js&#x2F;images(静态文件访问):</span><br><span class="line">	1.在编写的html中增加</span><br><span class="line">		&lt;head&gt;中加：</span><br><span class="line">		激活：</span><br><span class="line">             &#123;% load static %&#125;</span><br><span class="line">             自动生成静态文件链接：</span><br><span class="line">	      &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&#39;&#123;% static &quot;css.css&quot; %&#125;&#39;&gt;</span><br><span class="line">		html中的&#123;&#123;&#125;&#125;</span><br><span class="line">		&lt;li&gt;&#123;&#123; age &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">		编写views中的函数内容时可以将&#123;&#123;&#125;&#125;中的参数以dict的形式发送过来并替换其中的字段</span><br><span class="line">	2.创建css js文件夹</span><br><span class="line">	3.settings添加：</span><br><span class="line">		1.设置访问url的路径（网址名）：STATIC_URL &#x3D; &#39;&#x2F;static&#x2F;&#39;	</span><br><span class="line">		2.确认位置：STATICFILES_DIRS &#x3D; [os.path.join(BASE_DIR, “html存放路径”),] </span><br><span class="line">	</span><br><span class="line">		</span><br><span class="line">	4.配置urls:</span><br><span class="line">	    from django.conf import settings  调用上面的设置</span><br><span class="line">	 from django.conf.urls.static import static   调用该函数</span><br><span class="line">	 urlpatterns &#x3D; [</span><br><span class="line">				]+static(settings.STATIC_URL)</span><br><span class="line">	5.书写css js images</span><br><span class="line">	6.浏览器访问：&#x2F;static&#x2F;css.css</span><br><span class="line">	7.浏览器访问对应html便可以</span><br></pre></td></tr></table></figure>


<h4 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h4><p>1.与settings在相同文件夹下创建：my.cnf普通文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># my.cnf</span><br><span class="line">[client]</span><br><span class="line">database &#x3D; NAME</span><br><span class="line">user &#x3D; USER</span><br><span class="line">password &#x3D; PASSWORD</span><br><span class="line">default-character-set &#x3D; utf8mb4</span><br></pre></td></tr></table></figure>

<p>2.settings设置：databases 中将本身数据库配置替换成mysql的配置代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># settings.py</span><br><span class="line">DATABASES &#x3D; &#123;</span><br><span class="line">  		&#39;default&#39;: &#123;</span><br><span class="line">   		   &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,</span><br><span class="line">    		  &#39;OPTIONS&#39;: &#123;</span><br><span class="line">    		      &#39;read_default_file&#39;: os.path.join(base_dir,‘django_s’,’my.cnf’),</span><br><span class="line">    		  &#125;,</span><br><span class="line"> 		 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.安装pymysql : </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install pymsql </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; pycharm&#x2F;preferences&#x2F;project.django_s&#x2F;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4.Django使用mysql：settings同级的__init__中增加代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">		</span><br><span class="line">(1).__init__中代码：</span><br><span class="line"></span><br><span class="line">	import pymysql			</span><br><span class="line">	pymysql.version_info(2,0,0)        &lt;—版本报错问题解决 无可不修改</span><br><span class="line">	pymysql.install_as_MySQLdb()</span><br><span class="line"></span><br><span class="line">(2).在external library&#x2F;&#x2F;site-packages&#x2F;django&#x2F;db&#x2F;backends&#x2F;mysql&#x2F;operations</span><br><span class="line">中将与下面5 1对应修改146行  可以先运行会自定跳到该错误这里修改即可</span><br><span class="line"></span><br><span class="line">last_executed_query中query.decode改成encode</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><p>1.命令行：在manage.py同级目录下执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 manage.py migrate   —&gt;在mysql中直接创建django内置的表 </span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">(1).出现’decode’:在 external library&#x2F;python 3.7&#x2F;site-packages&#x2F;django&#x2F;db&#x2F;backends&#x2F;mysql&#x2F;operations</span><br><span class="line">last_executed_query中query.decode改成encode  (直接vim修改)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>2.orm:通过对象操作数据库</p>
<p>（1）在views同级的models.py中编写定义自己的数据库表：即class创建</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如：创建一个文章发布的数据库</span><br><span class="line">	score &#x3D; models.FloatField(default &#x3D; 0,verbose_name&#x3D;‘电影评分’)</span><br><span class="line">	class Article(models.Model):</span><br><span class="line">	title &#x3D; models.CharField(max_length&#x3D;255)  #文章标题</span><br><span class="line">	punish_time &#x3D; models.DateTimeField()  #文章发布时间</span><br><span class="line">	author &#x3D; models.CharField(max_length&#x3D;20) #文章作者</span><br><span class="line">	text &#x3D; models.CharField(max_length&#x3D;2000)  #文章内容</span><br><span class="line">		</span><br><span class="line">	def __str__(self):</span><br><span class="line">		return self.title       (admin中直接以title字段显示)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（2）在settings：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">installed_apps&#x3D;[‘添加自己创建的app,即views所在文件夹名’ 例：’app1’]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（3）生成数据库表：命令行执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.python3 manage.py makemigrations    (会在migrations文件夹下生成一个数据库迁移文件) </span><br><span class="line">2.python3 manage.py migrate     （根据（3）生成的建表文件在数据库中建表）</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>注意：1执行成功的迁移文件会在数据库中django_migrations表中也创建一个该记录  
        必须同时存在才行 不然会一直报错：table
解决：
    （1）删除migrations中的相关文件 再删除数据库表中的对应的记录 重新执行上述两个命令
</code></pre>
<p>(4）数据库表数据读取并在html中显示出来：</p>
<pre><code>1.创建html相关网页
2.views：
    创建函数提取：
            引入models中的相关class  即2(1)中创建的相关表的类名
            from app1.models import Article
            
    编写发送函数：
            def article(requests):
                #相当于select * from article where id = 1 语句（并未执行）：
                data = Article.objects.filter(id=1)
                #切片执行该语句：
                res = data[0]
                return render(requests,’article.html’,&#123;html中&#123;&#123;&#125;&#125;&#125;的对应值dict&#125;)
3.配置urls ：与上面urls配置一样 先导入再添加
</code></pre>
<h4 id="admin用户创建"><a href="#admin用户创建" class="headerlink" title="admin用户创建"></a>admin用户创建</h4><p>1.命令行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 manage.py createsuperuser  (本次设置user:wangqi password:wang1995)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.添加数据库到admin：</p>
<p>   （1）admin文件中添加代码</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 导入models中创建的数据库类名：</span><br><span class="line"> from app1.models import Article</span><br><span class="line">添加到admin中：</span><br><span class="line">@admin.register(Article)</span><br><span class="line">class ArticleAdmin(admin.ModelAdmin):</span><br><span class="line">	pass</span><br></pre></td></tr></table></figure>
</code></pre>
<p>   (2）浏览器中进入admin即有自己创建的数据库，可以进行相关插入等操作</p>
<h4 id="外部app-或者html"><a href="#外部app-或者html" class="headerlink" title="外部app(或者html)"></a>外部app(或者html)</h4><p>1.在django文件夹下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 manage.py startapp ‘名字’  创建新的app</span><br><span class="line">先运行 python3 manage.py rumserver  确定Django开启成功</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.将其外部的网页代码放入django 项目下</p>
<p>3.配置路径 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">settings installed_apps添加该app名 templates:添加html存放路径  </span><br><span class="line">在最后添加存放静态文件（html中的css&#x2F;js）的代码以及媒体文件的media路径（见下）</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>4.配置urls  先连接index.html看是否成功</p>
<p>5.设置css/js/images</p>
<pre><code>    1) python中 提供 win+r 可以查询+替换修改代码中的相关代码  
    2) 在使用正则表达式时需要勾选Regex  
    3) 查询：(css/.*\.css)  加括号表示一个整体    \ 转译     
    4) 替换：&#123;% static ‘$1’ %&#125;    $1表示匹配（3）中的第一个括号里的东西 再replace
         
         
</code></pre>
<p>6.建立数据库:</p>
<pre><code>    1)modele:建表 + 命令行操作数据库链接
    2)admin建立后台
    3)settings设置路径 databases添加数据库my.cnf文件位置
    4)views添加查询和插入函数     将切片转到html代码中去：
            html中循环：&#123;% for %&#125;     循环代码     &#123;% endear %&#125;

					
	例如


	views:
				def index_movie(requests):
					data = Movie.objects.all()
					return render(requests, 'index.html', &#123;‘data’:data&#125;
	html：
						&#123;% for movie in data %&#125;
						<li><p class="title">&#123;&#123; movie.title &#125;&#125;</p></li>
						&#123;% endfor %&#125;
模版中切片：&#123;% for movie in data |slice:"0:5"%&#125;
        取前5个


5)url建立连接
</code></pre>
<p>7.图片处理：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">models:添加字段：</span><br><span class="line"></span><br><span class="line">		img &#x3D; models.ImageField(upload_to&#x3D;&#39;images&#39;,verbose_name&#x3D;&#39;电影图片&#39;)再执行数据库操作2（3）</span><br><span class="line">		</span><br><span class="line">注意 ：进行3第一步时会跳出选择：</span><br><span class="line">			1.后续更改 先创建 2.退出,先添加 选择1 然后随便添加内容回车html中修改图片的链接</span><br><span class="line">		   </span><br></pre></td></tr></table></figure>

<p>8.html中使用自定义函数：</p>
<p>函数模版：</p>
<pre><code>在app中建立一个目录：名字固定：templatetags  其中包含__init__文件
创建一个功能名.py文件
在该.py中自定义函数编写：
    模版：from django import template
          register = template.Library()
          import math

        @register.filter(name = ‘count_star’)  #计算星星数量
        def count_star(value):
            return range(math.floor(value))


在需要该函数的html中装载：&#123;% load 功能名 %&#125;
</code></pre>
<p>9.媒体文件访问</p>
<p>图片以及视频与静态文件分开：</p>
<p>(1)创建图片视频等存放文件夹</p>
<p>(2)settings : </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">templates添加：django.template.context_processors.media</span><br><span class="line">			最后添加：#代表媒体文件的存储路径</span><br><span class="line">			MEDIA_ROOT &#x3D; os.path.join(BASE_DIR,&#39;media&#39;)  #指定后 其媒体文件根目录为media</span><br><span class="line">			MEDIA_URL &#x3D; &#39;&#x2F;media&#x2F;&#39;</span><br><span class="line">					</span><br></pre></td></tr></table></figure>

<p>(3)urls：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">调用re_path 使用正则表达式</span><br><span class="line">		from django.urls import path,re_path</span><br><span class="line">		from django.views.static import serve</span><br><span class="line">		from p1904_django2.settings import MEDIA_ROOT,MEDIA_URL</span><br><span class="line">		urlpatterns添加：</span><br><span class="line"> 			re_path(r&#39;^media&#x2F;(?P&lt;path&gt;.*)$&#39;, serve, &#123;&#39;document_root&#39;:MEDIA_ROOT&#125;),</span><br><span class="line"> 			   </span><br></pre></td></tr></table></figure>


<p>(4)html:</p>
<pre><code>装载：&#123;% load movie_extras %&#125; 
 替换所有img:&#123;% static  movie.img.url %&#125;    \&#123; % static  &#39;(images/.*\.jpg)&#39; %\&#125;
    替换成： &#123;&#123; MEDIA_URL &#125;&#125;images/m15.jpg     \&#123; MEDIA_URL &#125;&#125;$1
    以及：&#123;&#123; movie.img.url &#125;&#125;
    
</code></pre>
<p>(5)models：</p>
<pre><code>修改img的存储结构（路径格式）其媒体跟目录为media 只需要在这个跟目录下创建images文件用来存放媒体文件即可
</code></pre>
<p>10.登陆 注册 退出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">django 自带用户表  auth_user :password   pbkdf2_sha256$150000$   使用sha256加密了150000次</span><br><span class="line">		   使用该表并使用orm继承并扩展</span><br><span class="line">		1.建立一个用户单独的app python3 manage.py startalp users    (django官网：documentation 查询user有步骤)</span><br><span class="line">		2.用户models 中 </span><br><span class="line">			from django.contrib.auth.models import AbstractUser   #在用户app中继承用户模型</span><br><span class="line">			class UserInfo(Abstract..)</span><br><span class="line">		3.添加app到 settings：确认其修改</span><br><span class="line">			INS.._APP添加：users</span><br><span class="line">			AUTH_USER_MODEL &#x3D; ‘users.UserInfo’</span><br><span class="line">		4.命令行执行：数据库迁移  执行时会出问题：用户表在数据库中存在，删除不了</span><br><span class="line">								解决办法：在Django之前就创建好上诉继承代码 若已经创建 直接删除所有表</span><br><span class="line">										然后再python3 manage两步  再创建命令行超级用户</span><br><span class="line">		5.注册功能：</span><br><span class="line">			views：导入数据库models中创建表类名</span><br><span class="line">				def register(requests):pass   </span><br><span class="line">					UserInfo.objects.create_user(username&#x3D;requ.POST[‘username’],password&#x3D;..)  creat_user:可在生成名字时就会生成密码					return HttpResponse(‘hello’) #检测链接</span><br><span class="line">				</span><br><span class="line">				出现CSRF验证：settings中middleware中注销掉Csrf  </span><br><span class="line">				     </span><br><span class="line">			urls：添加该函数到path</span><br><span class="line">				网页中找到注册表单—html中找到相应位置 修改action http:&#x2F;&#x2F;ip&#x2F;register函数   所有表单信息便传到该函数的requests中</span><br><span class="line">			</span><br><span class="line">		6.登陆功能：</span><br><span class="line">			views：def login(re..):</span><br><span class="line">				username &#x3D; re…POST[‘username’]</span><br><span class="line">				password &#x3D; re…POST[‘ps’]</span><br><span class="line">				user &#x3D; UserInfo.objects.filter(username&#x3D;username)[0]  #数据库查询语句 查询用户表中username密码</span><br><span class="line">						check_password 函数(需要导入)： 检测密码</span><br><span class="line">				return  </span><br><span class="line"></span><br><span class="line">				注意：表单形式的验证前后端需要同时做：</span><br><span class="line">				例如：密码验证需要前后端都同时做</span><br><span class="line">						前端：html：min_length &#x3D; ‘4’   （这里设置后，如果后端没改，前端网页里的限制条件仍然可以改，因其html保存在本地的，在elements中						可以修改，相当于漏洞）</span><br><span class="line">							后端：if leng(‘username’) &lt; 4:</span><br><span class="line">									return HttpResponse(‘用户名长度必须大于4’)</span><br><span class="line"></span><br><span class="line">		7.登陆注册只用后端做的方法</span><br><span class="line">			forms模块(表单渲染 生成表单和验证表单 生成表单属于index中的  解决6中注意)  class LoginForm(forms.Form)</span><br><span class="line">			charfield:数据库中为varchar()   html:type元素    </span><br><span class="line">			app中创建forms.py文件：			</span><br><span class="line">				导入forms模块  :</span><br><span class="line">			 	与创建module一样创建相关class，比如登陆表单的input字段等</span><br><span class="line">							密码字段定义：password &#x3D; forms.CharField(min_length &#x3D; 8, widget &#x3D; forms.PasswordInput)  将type中改成password</span><br><span class="line">							邮箱字段:EmailField</span><br><span class="line">							网址字段:urlfiled</span><br><span class="line">			views:添加该相关函数的值到html调用函数中进行实例化，f &#x3D; LoginForm()   表示在html中生成表单</span><br><span class="line">			html:在form表单中直接使用该字段</span><br><span class="line">		</span><br><span class="line">			验证表单：users app中</span><br><span class="line">				导入表单</span><br><span class="line">				f &#x3D; LoginForm(requests.POST)    </span><br><span class="line">				print(f.is_valid())  :ture false    表示该表单符合创建表单其中的字段限制</span><br><span class="line">				username &#x3D; f.cleaned_data[‘username’]    从cleaned中取html中验证成功的相关字段  （与form表单中的字段名需要一致） 用户不存在:try</span><br><span class="line"></span><br><span class="line">			ModelForm模块（与数据库相连，比上面更好,可以以数据库中字段创建表）：  </span><br><span class="line">					forms.py:</span><br><span class="line">					from django.contrib.auth import get_user_model  #获取user的数据库信息  类</span><br><span class="line">					User &#x3D; get_user_model()			</span><br><span class="line">					class UserForm(forms.ModelForm):      #</span><br><span class="line">						class Meta: </span><br><span class="line">							model &#x3D; User      #创建用户模版</span><br><span class="line">							fields &#x3D; (“username”, “password”)    #需要验证的字段</span><br><span class="line">							widgets &#x3D; &#123;         #选择需要修改的字段</span><br><span class="line">								‘password’: forms.PasswordInput(attrs&#x3D;&#123;“min_length”:8&#125;),     #设置最小长度 （数据库中该字段只有max_length）</span><br><span class="line">								‘username’: forms.TextInput(attrs&#x3D;&#123;“min_length”:4, ‘class’: text&#125;)  #启动class字段</span><br><span class="line">										&#125;</span><br><span class="line">					html&#x2F;views：</span><br><span class="line">					users&#x2F;views:登陆注意:is_valid()函数会验证在数据库中是否存在，需要在上述中将该方法在上面类下重写方法  def validate_unique(self):pass</span><br><span class="line">				</span><br><span class="line"></span><br><span class="line">		8.保持登陆： Django中的login方法  </span><br><span class="line">			引用：from django.contrib.auth import login as user_login</span><br><span class="line">				在登陆函数中users&#x2F;views&#x2F;login:check_password 正确后：user_login(requests, user) 将该user加到报文中，并在html中保存为session以及数据库中				保存</span><br><span class="line">			在登陆页面（index.html）：加入判断语句：&#123;% if not requests.user.is_authenticated %&#125; 判断是否登陆，以此返回不同的标签 &#123;% else %&#125;&#123;% endif %&#125; 以此保持登陆</span><br><span class="line">		退出：loginout模块</span><br><span class="line">			user&#x2F;views: def logout:user_logout(requests) return HttpResponse(‘logout success’)</span><br><span class="line">			urls中配置</span><br><span class="line">			html中加入到相关href中</span><br><span class="line">		urls:可以设置别名：name&#x3D;‘’    相应href 中可以使用&#123;% url ‘别名’ %&#125;  可以把固定地址换成与后台同步</span><br><span class="line">		</span><br><span class="line">跳转页面		</span><br><span class="line">from django.shortcuts import redirect	</span><br><span class="line">from django.urls </span><br><span class="line">return redirect(‘http&#x2F;&#x2F; …’)</span><br><span class="line">return redirect(‘别名’)</span><br></pre></td></tr></table></figure>


<p>10 评分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 新建评分app</span><br><span class="line">settings：添加app</span><br><span class="line">新建model：导入models Movie get_user_model 模块</span><br><span class="line">		User &#x3D; get_user_model</span><br><span class="line">		class Score(models.Model):</span><br><span class="line">			tags &#x3D; ((1, ‘aa’),(2,’bb’),)</span><br><span class="line">			movie_score &#x3D; models.Int..(choices&#x3D;tags)  选择分数</span><br><span class="line">			movie &#x3D; models.ForieginKey(‘movie.Movie’, on_delete&#x3D;models.CASCADE)   删除的方式</span><br><span class="line">			user &#x3D; models.for…key(‘users.UserInfo, ..’)</span><br><span class="line"></span><br><span class="line">			class Meta:</span><br><span class="line">				unique_together &#x3D; (‘movie’, ‘user’)  唯一</span><br><span class="line"></span><br><span class="line">注意：字段不能与相关联表的字段重合</span><br><span class="line"></span><br><span class="line">命令行创建数据库表	</span><br><span class="line"></span><br><span class="line">修改之前自定义打星函数：</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>11.部署：将本地代码放到云服务器以便所有人都可以访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.服务器</span><br><span class="line">2.登陆部署电脑：ssh rimi@10.2.0.26</span><br><span class="line">3.本地上传代码到 git 再在部署电脑上拷贝下来</span><br><span class="line">4. 部署机：安装django, 注意版本号</span><br><span class="line">5.输出本地关于oython3的所有包版本号:pip3 freeze &gt; requirements.txt</span><br><span class="line">6.服务器:pip3 install -r requirements.txt</span><br><span class="line">7. 启动 0.0.0.0:8000 所有人都可以访问（测试用）gunicorn(上线)</span><br><span class="line">8.gunicorn:    安装   线程数量：cpu*2 +1   进程 &#x3D; 线程&#x2F;2   </span><br><span class="line">9.启动：wigs: scoket 接收http协议    需要将python的socket替换成wigs</span><br><span class="line">10.访问日志&#x2F;报错</span><br><span class="line">11.图片美化  分类搜索  活动  后台分类（分级） </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python框架</category>
      </categories>
      <tags>
        <tag>Django基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Django框架03--视图</title>
    <url>/jwangcloud/3329310760/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/Django.jpeg"></p>
<h2 id="函数视图"><a href="#函数视图" class="headerlink" title="函数视图"></a>函数视图</h2><span id="more"></span>

<ol>
<li><p>基础视图分析:</p>
<ol>
<li> request 里面有所有的信息,他的信息是我们的wsgi解析之后的报文,回想一下http协议,他所有的信息都在报文里面,是一个很长的字符串,但是我们看到的request里面是dict和object,说明django框架已经帮我们解析好了报文里面的信息</li>
<li>HttpResponse是django帮我们封装响应报文,返回我们想给浏览器返回的信息,当然也有其他的返回值,他们都是django帮我们封装好的<!--more-->   
 Http404<br> HttpResponseForbidden<br> …</li>
</ol>
<blockquote>
<p>movies/views.py</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def test1(request):</span><br><span class="line">    return HttpResponse(&quot;Hello, world!&quot;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>快捷函数</p>
<ol>
<li><p>我们来写一个能够渲染模板的函数,那么他需要使用HttpResponse来给用户返回信息</p>
<blockquote>
<p>movies/views.py</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def test5(request):</span><br><span class="line">   from django.template import loader</span><br><span class="line">   t &#x3D; loader.get_template(&#39;movies&#x2F;index.html&#39;)</span><br><span class="line">   return HttpResponse(t.render(&#123;&#125;,request))</span><br></pre></td></tr></table></figure></li>
<li><p>如果我们觉得这样写很麻烦,那么我们可以使用快捷函数 render来帮我们做这个事情,凡是在 from django.shortcuts 中定义的函数,都是帮我们快捷的完成一些功能的函数</p>
<blockquote>
<p>movies/views.py</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">		</span><br><span class="line">def test2(request):</span><br><span class="line">		</span><br><span class="line">   return render(request,&#39;movies&#x2F;index.html&#39;)</span><br><span class="line">		</span><br></pre></td></tr></table></figure></li>
<li><p>查看一下render的源码,我们发现 其实就是我们刚才的原始函数,不过他帮我们做了一层封装</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def render(request, template_name, context&#x3D;None, content_type&#x3D;None, status&#x3D;None, using&#x3D;None):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Returns a HttpResponse whose content is filled with the result of calling</span><br><span class="line">    django.template.loader.render_to_string() with the passed arguments.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    content &#x3D; loader.render_to_string(template_name, context, request, using&#x3D;using)</span><br><span class="line">    return HttpResponse(content, content_type, status)</span><br><span class="line">		</span><br></pre></td></tr></table></figure>
</li>
<li><p>其他快捷函数</p>
<ol>
<li>redirec 重定向,在访问一个网页的时候,帮助我们重定向 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">def test6(request):</span><br><span class="line"></span><br><span class="line"> 			return redirect(&#39;https:&#x2F;&#x2F;www.baidu.com&#39;)</span><br></pre></td></tr></table></figure></li>
<li>get_object_or_404 帮助我们查找数据,如果没有数据则返回404的错误 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">			</span><br><span class="line">def test7(request):</span><br><span class="line">    obj &#x3D; get_object_or_404(Test,pk&#x3D;1)</span><br><span class="line"></span><br><span class="line">    return HttpResponse(obj.name)</span><br><span class="line">			</span><br></pre></td></tr></table></figure>
</li>
<li>课堂练习<ol>
<li>如果不使用 redict快捷函数那么要怎么实现</li>
<li>如果不使用get_object_or_404 那么要怎么实现</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><p>装饰器</p>
<ol>
<li><p>使用装饰器去控制函数视图的行为 </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">		</span><br><span class="line">from django.views.decorators.http import require_http_methods</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">@require_http_methods([&#39;GET&#39;])</span><br><span class="line">def test8(request):</span><br><span class="line">    return HttpResponse(&#39;hello&#39;)</span><br><span class="line">		</span><br></pre></td></tr></table></figure>
<ol>
<li>require_http_methods 控制行为,list传递</li>
<li>require_GET get行为</li>
<li>require_POST() post行为</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="类视图"><a href="#类视图" class="headerlink" title="类视图"></a>类视图</h2><pre><code>lietview
deleteview
</code></pre>
]]></content>
      <categories>
        <category>python框架</category>
      </categories>
      <tags>
        <tag>Django视图</tag>
      </tags>
  </entry>
  <entry>
    <title>Django框架02--搭建第一个页面</title>
    <url>/jwangcloud/2301932064/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/Django.jpeg"></p>
<h2 id="apps详解"><a href="#apps详解" class="headerlink" title="apps详解:"></a>apps详解:</h2><span id="more"></span>

<h4 id="1-apps和整体配置文件内部结构"><a href="#1-apps和整体配置文件内部结构" class="headerlink" title="1. apps和整体配置文件内部结构"></a>1. apps和整体配置文件内部结构</h4><ol start="0">
<li><p>最外部的manage.py</p>
<p> 一个命令行工具,实现django各种功能的文件,比如数据库迁移,静态文件收集,启动django服务等等</p>
</li>
<li><p>首先我们来查看一下 djano_mvc_ppt的结构</p>
<ol>
<li>_<em>init</em>_.py 它告诉Python这个目录应该被看做一个Python包</li>
<li> settings.py 项目的整体配置文件,包含项目启动哪些app,中间件设置,第三方包配置等等都在里面</li>
<li>urls.py 总路由配置文件</li>
<li>wsgi.py 网关协议入口程序</li>
</ol>
</li>
<li><p>apps的结构</p>
<p> migrations 文件夹,数据库迁移记录文件<br> init.py apps 初始化文件 一般为空即可<br> admin.py 自定义admin后台管理的地方<br> apps.py app的在项目注册的名称,默认就行了<br> models.py 定义数据模型<br> tests.py 单元测试地址<br> views.py 视图</p>
</li>
</ol>
<h4 id="2-第一个简单页面"><a href="#2-第一个简单页面" class="headerlink" title="2. 第一个简单页面"></a>2. 第一个简单页面</h4><blockquote>
<p>movies/views.py</p>
</blockquote>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.http import HttpResponse</span><br><span class="line">def test1(request):</span><br><span class="line">    return HttpResponse(&quot;Hello, world!&quot;)</span><br></pre></td></tr></table></figure>
</code></pre>
<blockquote>
<p>djano_mvc_ppt/urls.py    </p>
</blockquote>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">	</span><br><span class="line">from movies.views import test1</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    </span><br><span class="line">    url(r&#39;^test1$&#39;,test1)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</code></pre>
<blockquote>
<p>访问 <a href="http://127.0.0.1:8000/test1">http://127.0.0.1:8000/test1</a></p>
</blockquote>
<h4 id="1-解释"><a href="#1-解释" class="headerlink" title="1.解释"></a>1.解释</h4><ol>
<li>views 是我们视图函数 他们负责给用户返回什么样的信息</li>
<li>url 是路由,试想一个网站有不同的页面,怎么样来走到不同的页面,就是通过这的路由分发来做的。我们把test1的网站转发到我们的views.py里面的test1函数</li>
<li>终上所述,我们在访问页面的时候,就得到了第一个页面</li>
</ol>
<p><img data-src="/jwangcloud/2301932064/chapter2/chapter2_1.png" alt="选择编译器安装"></p>
<h4 id="3-第二个页面"><a href="#3-第二个页面" class="headerlink" title="3. 第二个页面"></a>3. 第二个页面</h4><ol>
<li>我们知道,百度等网页是复杂的html构成的,所以我们需要前端人员的html网页支持,django可以渲染出前端的html网页,使用render<blockquote>
<p>movies/views.py</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def test2(request):</span><br><span class="line">	</span><br><span class="line">   return render(request,&#39;movies&#x2F;index.html&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>djano_mvc_ppt/urls.py    </p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">	</span><br><span class="line">from movies.views import test2</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    </span><br><span class="line">    url(r&#39;^test2$&#39;,test2)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>templates/movies/index.html</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;hello html&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">	</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="1-解释-1"><a href="#1-解释-1" class="headerlink" title="1.解释"></a>1.解释</h4><p>django可以通过一定的方式,把html网页送给浏览器,这时候就不需要我们去直接回复一个字符串</p>
<h4 id="4-第三个页面"><a href="#4-第三个页面" class="headerlink" title="4. 第三个页面"></a>4. 第三个页面</h4><blockquote>
<p>movies/models.py</p>
</blockquote>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line"># Create your models here.</span><br><span class="line"></span><br><span class="line">class Test(models.Model):</span><br><span class="line">    name &#x3D; models.CharField(max_length&#x3D;11)</span><br></pre></td></tr></table></figure>
</code></pre>
<blockquote>
<p>djano_mvc_ppt/settings.py</p>
</blockquote>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">INSTALLED_APPS &#x3D; [</span><br><span class="line">    &#39;django.contrib.admin&#39;,</span><br><span class="line">    &#39;django.contrib.auth&#39;,</span><br><span class="line">    &#39;django.contrib.contenttypes&#39;,</span><br><span class="line">    &#39;django.contrib.sessions&#39;,</span><br><span class="line">    &#39;django.contrib.messages&#39;,</span><br><span class="line">    &#39;django.contrib.staticfiles&#39;,</span><br><span class="line">    &#39;movies&#39;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
    
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python manage.py makemigrations</span><br><span class="line">$ python manage.py migrate</span><br></pre></td></tr></table></figure>
&gt;movies/views.py

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def test3(request):</span><br><span class="line">    from movies.models import Test</span><br><span class="line">    user &#x3D; Test.objects.all()[0]</span><br><span class="line"></span><br><span class="line">    return render(request,&#39;movies&#x2F;index2.html&#39;,context&#x3D;&#123;&#39;name&#39;:user.name&#125;)</span><br></pre></td></tr></table></figure>

&gt;templates/movies/index2.html
&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;hello &#123;&#123; name &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">	</span><br></pre></td></tr></table></figure>
</code></pre>
<h4 id="1-解释-2"><a href="#1-解释-2" class="headerlink" title="1.解释"></a>1.解释</h4><ol>
<li><p>model可以直接操控数据库,我们不用去写sql语句了,使用对象实例化就可以获取到语句</p>
</li>
<li><p>views可以把数据库传递给html,我们称为模板渲染,因为不是html语法,他需要python去加工一下(渲染)</p>
</li>
</ol>
<h2 id="mtv模式"><a href="#mtv模式" class="headerlink" title="mtv模式"></a>mtv模式</h2><h4 id="1-解释-3"><a href="#1-解释-3" class="headerlink" title="1. 解释"></a>1. 解释</h4><p>我们上述的模式就是mtv模式</p>
<ol>
<li>views专门负责取出数据来,怎么取,取多少数据都在views里面</li>
<li>model专门负责数据库控制,数据库字段怎么定义,这些字段代表什么就是model.py做的事情</li>
<li>html文件负责页面的展现,css js等都写在里面,他就专门负责页面怎么美观就行了</li>
</ol>
<h4 id="2-综述"><a href="#2-综述" class="headerlink" title="2. 综述"></a>2. 综述</h4><p>以上就是我们框架的基本模式,主要的思想就是各司其职,分层
    </p>
]]></content>
      <categories>
        <category>python框架</category>
      </categories>
      <tags>
        <tag>Django页面搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Django框架01--入门</title>
    <url>/jwangcloud/216270077/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/Django.jpeg"></p>
<h2 id="1-虚拟环境安装和django项目启动"><a href="#1-虚拟环境安装和django项目启动" class="headerlink" title="1. 虚拟环境安装和django项目启动"></a>1. 虚拟环境安装和django项目启动</h2><span id="more"></span>

<h4 id="1-安装python虚拟环境"><a href="#1-安装python虚拟环境" class="headerlink" title="1.安装python虚拟环境"></a>1.安装python虚拟环境</h4><pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pip install virtualenv</span><br><span class="line">$ pip install virtualenvwrapper</span><br><span class="line"></span><br><span class="line">$ pip install virtualenvwrapper-win (windows系列)</span><br><span class="line"></span><br><span class="line">$ export WORKON_HOME&#x3D;~&#x2F;Envs</span><br><span class="line">$ mkdir -p $WORKON_HOME</span><br><span class="line">$ source &#x2F;usr&#x2F;local&#x2F;bin&#x2F;virtualenvwrapper.sh</span><br></pre></td></tr></table></figure>
</code></pre>
<blockquote>
<p>虚拟环境位置文档位置</p>
</blockquote>
<blockquote>
<p><a href="https://virtualenvwrapper.readthedocs.io/en/latest/">https://virtualenvwrapper.readthedocs.io/en/latest/</a></p>
</blockquote>
<ol>
<li>注意点 virtualenv是初级的工具 只能用在你当前文件夹的目录下面去新建</li>
<li>wrapper所带的 mkvirtualenv 和 workon命令可以让你在任何地方管理虚拟环境 不用考虑文件夹位置</li>
</ol>
<h4 id="2-新建一个虚拟环境-激活虚拟环境-并且安装django-查看安装的django版本"><a href="#2-新建一个虚拟环境-激活虚拟环境-并且安装django-查看安装的django版本" class="headerlink" title="2.新建一个虚拟环境 激活虚拟环境 并且安装django 查看安装的django版本"></a>2.新建一个虚拟环境 激活虚拟环境 并且安装django 查看安装的django版本</h4><pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">virtualenv ruimi_django -p python3.6</span><br><span class="line">source ruimi_django&#x2F;bin&#x2F;activate</span><br><span class="line">pip install django&#x3D;&#x3D;1.11</span><br><span class="line">python -m django --version</span><br></pre></td></tr></table></figure>
</code></pre>
<h4 id="3-pycharm安装django环境"><a href="#3-pycharm安装django环境" class="headerlink" title="3.pycharm安装django环境"></a>3.pycharm安装django环境</h4><ol>
<li>在pycharm中选择newproject django</li>
<li>选择虚拟环境(你在本地建好的虚拟环境)</li>
<li>点击create,新建成功</li>
</ol>
<p><img data-src="/jwangcloud/216270077/chapter1/chapter1_2.png" alt="选中新建环境"><br><img data-src="/jwangcloud/216270077/chapter1/chapter1_1.png" alt="选择编译器安装"></p>
<h4 id="4-命令行安装django"><a href="#4-命令行安装django" class="headerlink" title="4. 命令行安装django"></a>4. 命令行安装django</h4><ol>
<li><p>使用命令行创建django 效果等同于pycharm 其实pycharm的原理就是去帮你执行这些命令而已</p>
</li>
<li><p>我们需要先切换到有django的虚拟环境才行</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ django-admin startproject test</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="通过django创建第一个app和命令配置文件说明"><a href="#通过django创建第一个app和命令配置文件说明" class="headerlink" title="通过django创建第一个app和命令配置文件说明"></a>通过django创建第一个app和命令配置文件说明</h2><h4 id="1-通过django-创建第一个app"><a href="#1-通过django-创建第一个app" class="headerlink" title="1 通过django 创建第一个app"></a>1 通过django 创建第一个app</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">django-admin startapp movies</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>有两个djano_mvc_ppt 第一个是总目录 第二个djano_mvc_ppt是项目的配置目录 settings urls 路由就在里面。他是定义整个项目的配置路由等。<br>我们刚才新建的是app目录是单独的功能目录,比如用户信息就可以新建一个目录来表示。在app目录里面我们去定义视图,模型等等。这个在后面章节会讲到。</p>
</blockquote>
<h4 id="2-启动django"><a href="#2-启动django" class="headerlink" title="2 启动django"></a>2 启动django</h4><ol>
<li><p>命令行来启动django </p>
<ol>
<li>python必须是我们的django环境里面的python程序</li>
<li>manage.py是我们django项目目录下面的manage.py</li>
<li>runserver是启动django 后台服务的命令 后面跟上ip和端口即可</li>
</ol>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure>
</li>
<li><p>pycharm 启动django项目</p>
<ol>
<li><p>debug模式, 使用debug模式启动django,我们可以打断点,程序过来以后,就能截取到值</p>
</li>
<li><p>run 模式,那么程序只会执行,不会有断点查看功能<br> <img data-src="/jwangcloud/216270077/chapter1/chapter1_3.png" alt="选择编译器安装"></p>
</li>
<li><p>最后 我们可以在下方 看到运行的状态 </p>
<p> <img data-src="/jwangcloud/216270077/chapter1/chapter1_4.png" alt="选择编译器安装"></p>
</li>
<li><p>启动完成后我们就可以查看启动是否成功了    </p>
<p> <img data-src="/jwangcloud/216270077/chapter1/chapter1_5.png" alt="选择编译器安装"></p>
</li>
</ol>
</li>
</ol>
<h2 id="为什么使用1-11版本"><a href="#为什么使用1-11版本" class="headerlink" title="为什么使用1.11版本"></a>为什么使用1.11版本</h2><ol>
<li>2.0版本的lts(long time serve)目前还没有出来,到2019年我们就可以顺利使用django 2.0啦</li>
</ol>
<pre><code>![选择编译器安装](md_pics/chapter1/chapter1_6.png)
</code></pre>
]]></content>
      <categories>
        <category>python框架</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>通用技术03--hexo博客搭建</title>
    <url>/jwangcloud/3848869124/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/hexo.jpeg" width="1000" height="200" align="middle">

<meta name="referrer" content="no-referrer">

<p>版权声明：本文为github博主「_xaoxuu」的原创文章，遵循 CC4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。</p>
<p><a href="https://xaoxuu.com/blog/2017-07-05-hexo-blog/">原文链接: </a><a href="https://xaoxuu.com/blog/2017-07-05-hexo-blog/">https://xaoxuu.com/blog/2017-07-05-hexo-blog/</a></p>
<h2 id="搭建基于hexo的独立博客"><a href="#搭建基于hexo的独立博客" class="headerlink" title="搭建基于hexo的独立博客"></a>搭建基于hexo的独立博客</h2><span id="more"></span>

<h3 id="傻瓜式操作-仅限于macos系统"><a href="#傻瓜式操作-仅限于macos系统" class="headerlink" title="傻瓜式操作(仅限于macos系统)"></a>傻瓜式操作(仅限于macos系统)</h3><p>打开终端，cd 到你想创建博客的地方，执行这一行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -O &#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;xaoxuu&#x2F;hexo.sh&#x2F;master&#x2F;hexo.sh&#39; -# &amp;&amp; chmod 777 hexo.sh &amp;&amp; . hexo.sh -i init</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="详细操作"><a href="#详细操作" class="headerlink" title="详细操作"></a>详细操作</h3><h4 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h4><p>Hexo依赖Node.js和git。如果电脑上没有node环境可以去 Nodejs官网 下载。安装完成可以查看版本，在终端输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm -v    #出现版本号表示安装成功</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><p>macOS自带git，可以跳过此步骤。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Windows: Download &amp; install git.</span><br><span class="line">Mac: Install it with Homebrew, MacPorts or installer.</span><br><span class="line">Linux (Ubuntu, Debian): sudo apt-get install git-core</span><br><span class="line">Linux (Fedora, Red Hat, CentOS): sudo yum install git-core</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="安装Command-Line-Tools"><a href="#安装Command-Line-Tools" class="headerlink" title="安装Command Line Tools"></a>安装Command Line Tools</h4><p>macOS需要安装Command Line Tools，Windows可以跳过这一步骤。在终端输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xcode-select --install</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>点击install 安装</p>
<h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>安装如图：</p>
<p>若出现下图,则需要以管理员身份运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo npm install hexo-cli -g</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<h4 id="开始运行hexo"><a href="#开始运行hexo" class="headerlink" title="开始运行hexo"></a>开始运行hexo</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h4><p>执行完上面几条命令之后，在浏览器打开地址：<a href="http://localhost:4000/%E5%B0%B1%E4%BC%9A%E7%9C%8B%E5%88%B0hexo%E4%B8%BA%E4%BD%A0%E6%8F%90%E4%BE%9B%E7%9A%84%E9%BB%98%E8%AE%A4%E4%B8%BB%E9%A2%98%E3%80%82%E5%A6%82%E6%9E%9C%E4%BD%A0%E4%B8%8D%E5%96%9C%E6%AC%A2hexo%E8%87%AA%E5%B8%A6%E7%9A%84%E4%B8%BB%E9%A2%98%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%8E%BB">http://localhost:4000/就会看到hexo为你提供的默认主题。如果你不喜欢hexo自带的主题，可以去</a> hexo官网 找个喜欢的主题。下载主题源码到…/你的博客/themes/里面，根据主题的README文档提示，可能需要安装一些依赖包，或者对主题的_config.myl文件进行修改。如果你想使用本站的博客主题的话，只需要打开终端，cd到你博客所在的目录，执行以下这条命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo.sh i x</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果提示 command not found ，说明你的电脑上还没有使用过 hexo.sh 脚本，那么可以执行下面这一段命令下载脚本然后应用主题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -O &#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;xaoxuu&#x2F;hexo.sh&#x2F;master&#x2F;hexo.sh&#39; -# &amp;&amp; chmod 777 hexo.sh &amp;&amp; . hexo.sh -i i x</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="博客书写"><a href="#博客书写" class="headerlink" title="博客书写"></a>博客书写</h4><p>你可以按照 官方文档 的方法去创建一个具有初始化内容的md文件到…/你的博客/source/_posts/位置，当然也可以通过其他任意方式创建md文件，只要文件开头有如下格式的内容即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">layout:     post</span><br><span class="line">date:       2017-07-05</span><br><span class="line">title:      如何搭建基于Hexo的独立博客</span><br><span class="line">categories: [Dev, Cocoa]</span><br><span class="line">tags:</span><br><span class="line">    - Hexo</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">这是预览</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line">这是正文</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="在文章中添加图片、音乐等"><a href="#在文章中添加图片、音乐等" class="headerlink" title="在文章中添加图片、音乐等"></a>在文章中添加图片、音乐等</h4><p>安装图片插件-路径选择你的博客文件夹 即_plot文件夹下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br><span class="line">或者</span><br><span class="line">npm install https:&#x2F;&#x2F;github.com&#x2F;CodeFalling&#x2F;hexo-asset-image -- save</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在_config.yml配置文件中，修改为 post_asset_folder: true， 然后新建一篇文章</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new post ceshi  #会生成一个附带的相同名字的文件夹放置图片，以及一个.md文件写内容</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>文章引用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![图片名](图片完整名字：例如book.png) 即相对路径</span><br><span class="line"></span><br><span class="line">当然也可以使用cdn来存储图片，这样速度会相对来说快一点</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>音乐</p>
<p>大家可以看网易云音乐的官网，播放音乐可以生成外链，直接拿来用就行了。iframe插件可以在代码中设置宽高等参数，auto为自动播放。flash不可以自己设置参数。看喜好，随便你。<br>其他音乐，把插件中的链接替换成要播放的链接就可以了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#iframe插件</span><br><span class="line"></span><br><span class="line">&lt;iframe frameborder&#x3D;&quot;no&quot; border&#x3D;&quot;0&quot; marginwidth&#x3D;&quot;0&quot; marginheight&#x3D;&quot;0&quot; width&#x3D;330 height&#x3D;86 src&#x3D;&quot;&#x2F;&#x2F;music.163.com&#x2F;outchain&#x2F;player?type&#x3D;2&amp;id&#x3D;505820138&amp;auto&#x3D;0&amp;height&#x3D;66&quot;&gt;</span><br><span class="line">&lt;&#x2F;iframe&gt;</span><br><span class="line"></span><br><span class="line">#flash插件</span><br><span class="line"></span><br><span class="line">&lt;embed src&#x3D;&quot;&#x2F;&#x2F;music.163.com&#x2F;style&#x2F;swf&#x2F;widget.swf?sid&#x3D;40249713&amp;type&#x3D;2&amp;auto&#x3D;0&amp;width&#x3D;320&amp;height&#x3D;66&quot; width&#x3D;&quot;340&quot; height&#x3D;&quot;86&quot; allowNetworking&#x3D;&quot;all&quot;&gt;</span><br><span class="line">&lt;&#x2F;embed&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>链接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[我的微博](http:&#x2F;&#x2F;weibo.com&#x2F;u&#x2F;123455)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>视频</p>
<p>视频链接最好是打开就是视频的链接（支持youku，YouTube）<br>可以把视频上传到优酷，腾讯视频，生成外链再拿来用。（上传需要注册和实名认证）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;iframe</span><br><span class="line">height&#x3D;498 width&#x3D;510</span><br><span class="line">src&#x3D;&quot;http:&#x2F;&#x2F;player.youku.com&#x2F;embed&#x2F;XMzY0MzgxNDMyOA&#x3D;&#x3D;&quot;</span><br><span class="line">frameborder&#x3D;0 allowfullscreen&gt;</span><br><span class="line">&lt;&#x2F;iframe&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h4><p>博客发布到服务器才能被外网访问，如果你有服务器更好，可以支持一些有趣的功能，例如 hexo-admin 可以为你的博客增加后台管理功能，在其他地方只要登录管理员账号就可以在线写博文了。但是如果没有自己的服务器的，也可以将博客托管到 GitHub 、 Coding 等网站。他们的优缺点如下：</p>
<p>GitHub<br>优点：功能最强大，最知名，偏技术性的博客力荐。<br>缺点：国内访问稍慢（以前是很慢，现在已经好多了，但是仍不及国内的服务快）；GitHub服务器屏蔽了百度爬虫，要想被百度收录，需要去百度站长平台手动提交。</p>
<p>Coding<br>优点：国内访问速度很快，一键申请并配置好SSL证书，很容易被百度收录。<br>缺点：只能通过CNAME方式设置域名，也就意味着你不能同时使用域名邮箱等其他域名服务。</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>hexo博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>通用技术02--hexo</title>
    <url>/jwangcloud/2780304565/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/hexo.jpeg" width="1000" height="200" align="middle">

<span id="more"></span>

<meta name="referrer" content="no-referrer">

<p>版权声明：本文为github博主「_xaoxuu」的原创文章，遵循 CC4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。</p>
<p><a href="https://hexo.io/zh-cn/docs/commands">原文地址</a></p>
<h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init [folder]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p>
<h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>


<p>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new &quot;post title with whitespace&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<table>
<thead>
<tr>
<th>参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td>-p, –path</td>
<td align="left">自定义新文章的路径</td>
</tr>
<tr>
<td>-r, –replace</td>
<td align="left">如果存在同名文章，将其替换</td>
</tr>
<tr>
<td>-s, –slug</td>
<td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td>
</tr>
</tbody></table>
<p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 index.md 文件。你可以使用 –path 参数来覆盖上述行为、自行决定文件的目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page --path about&#x2F;me &quot;About me&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以上命令会创建一个 source/about/me.md 文件，同时 Front Matter 中的 title 为 “About me”</p>
<p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page --path about&#x2F;me</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此时 Hexo 会创建 source/_posts/about/me.md，同时 me.md 的 Front Matter 中的 title 为 “page”。这是因为在上述命令中，hexo-cli 将 page 视为指定文章的标题、并采用默认的 layout。</p>
<h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ hexo generate</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>生成静态文件。</p>
<table>
<thead>
<tr>
<th>选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td>-d, –deploy</td>
<td align="left">文件生成后立即部署网站</td>
</tr>
<tr>
<td>-w, –watch</td>
<td align="left">监视文件变动</td>
</tr>
<tr>
<td>-b, –bail</td>
<td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td>
</tr>
<tr>
<td>-f, –force</td>
<td align="left">强制重新生成文件Hexo 引入了差分机制，如果 public 目录存在，那么 hexo g 只会重新生成改动的文件。使用该参数的效果接近 hexo clean &amp;&amp; hexo generate</td>
</tr>
<tr>
<td>-c, –concurrency</td>
<td align="left">最大同时生成文件的数量，默认无限制</td>
</tr>
</tbody></table>
<p>该命令可以简写为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>

<h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>发表草稿。</p>
<h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ hexo server</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/%E3%80%82">http://localhost:4000/。</a></p>
<table>
<thead>
<tr>
<th>选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td>-p, –port</td>
<td align="left">重设端口</td>
</tr>
<tr>
<td>-s, –static</td>
<td align="left">只使用静态文件</td>
</tr>
<tr>
<td>-l, –log</td>
<td align="left">启动日记记录，使用覆盖记录格式</td>
</tr>
</tbody></table>
<h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>部署网站。</p>
<p>参数    |描述<br>| — | :—|<br>-g, –generate    |部署之前预先生成静态文件</p>
<p>该命令可以简写为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo render &lt;file1&gt; [file2] ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>渲染文件。</p>
<p>参数    |描述<br>| — | :—|<br>-o, –output|    设置输出路径</p>
<h3 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ hexo migrate &lt;type&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>从其他博客系统 迁移内容。</p>
<h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>


<p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p>
<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure>


<p>列出网站资料。</p>
<h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo version</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>显示 Hexo 版本。</p>
<h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><h3 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo --safe</span><br></pre></td></tr></table></figure>

<p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>
<h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo --debug</span><br></pre></td></tr></table></figure>


<p>在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并 提交调试信息到 GitHub。</p>
<h3 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo --silent</span><br></pre></td></tr></table></figure>

<p>隐藏终端信息。</p>
<h3 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用 custom.yml 代替默认的 _config.yml</span><br><span class="line">$ hexo server --config custom.yml</span><br><span class="line"></span><br><span class="line"># 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高</span><br><span class="line">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>自定义配置文件的路径，指定这个参数后将不再使用默认的 _config.yml。<br>你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 使用 custom.yml 代替默认的 _config.yml</span><br><span class="line">$ hexo server --config custom.yml</span><br><span class="line"></span><br><span class="line"># 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json</span><br><span class="line">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 _multiconfig.yml。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p>
<h3 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo --draft</span><br></pre></td></tr></table></figure>

<p>显示 source/_drafts 文件夹中的草稿文章。</p>
<h3 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo --cwd &#x2F;path&#x2F;to&#x2F;cwd</span><br></pre></td></tr></table></figure>

<p>自定义当前工作目录（Current working directory）的路径。</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>通用技术01--git</title>
    <url>/jwangcloud/2499844314/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/git.jpeg" width="1000" height="300" align="middle">

<h1 id="git基础"><a href="#git基础" class="headerlink" title="git基础"></a>git基础</h1><span id="more"></span>

<h2 id="认知git"><a href="#认知git" class="headerlink" title="认知git"></a>认知git</h2><ol>
<li>git知识库：<a href="https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80">https://git-scm.com/book/zh/v1/Git-基础</a></li>
<li>安装git：brew install git 升级：brew update git</li>
<li>git: 版本控制，将一个项目（文件）作为一个仓库并对其进行监控（需要进入当前文件或者项目中）</li>
</ol>
<h2 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h2><ol>
<li>git init: 初始化文件（仓库），启动文件git仓库</li>
<li>git status: 监听该文件（项目）发生的变化</li>
<li>git add 文件名: 将工作区产生的变化记录并暂存到缓冲区</li>
<li>git commit -m “注释内容”：将add 的变化添加注释并提交本次记录（若没有-m，则会进入vim编辑器中进行编译注释）</li>
<li>git log :查看其记录，使用 jk 上下移动光标，Q键退出</li>
<li>git reset –hard 记录编号：回到该编号所在记录（编号可只截取一部分）</li>
<li>git diff:若在add前对文本进行编辑并修改过，则可通过该命令进行显示修改的内容</li>
<li>git config –global user,name “ “(user.email 邮箱)</li>
<li>git merge 分支名：合并分支</li>
<li>git log –graph :查看详细分支记录</li>
<li>删除分支：git branch -d 分支名    </li>
<li>git rm –cached 缓冲区存在的记录名: 删除加入缓冲区的该记录</li>
<li>.gitignore文件：将不想记录其改变的文件名写入该文件，此后将不会产生写入文件夹发生的变化<pre><code>注意：若在git管理的文件夹下创建空的文件夹，该变化不会被记录。
</code></pre>
</li>
</ol>
<h2 id="git分支"><a href="#git分支" class="headerlink" title="git分支"></a>git分支</h2><ol>
<li><p>git分支：在mmaster分支上再创建其它分支记录（使用指针head进行移动记录点）</p>
</li>
<li><p>git checkout -b ‘分支名’： 新建并切换到新分支</p>
</li>
<li><p>git branch ‘分支名’： 新建分支</p>
</li>
<li><p>git checkout ‘分支名’： 切换到该分支</p>
<pre><code> 注意：若从某一个记录移到另一个分支的某一编码上时，
 需先切换（checkout）分支再切换(reset --hard)到某一个记录。
</code></pre>
</li>
</ol>
<h2 id="git-分支合并"><a href="#git-分支合并" class="headerlink" title="git 分支合并"></a>git 分支合并</h2><ol>
<li>快进合并：只有一条分支记录发生改变，另一个未发生改变的分支合并该分支：只需要将未发生改变的分支指针直接移到另一分支末端，即：先进入未发生改变的分支（checkout） 再合并发生记录的分支（git merge 发生改变的分支）</li>
<li>非冲突合并：与快进合并一样，因其两天分支的记录或者变化互不干扰</li>
<li>冲突合并：与上述操作一样，但需要在发生冲突的地方进行手动确认，并修改，此时产生的新变化也需要进行提交并注释。</li>
</ol>
<h1 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h1><h2 id="GitHub创建"><a href="#GitHub创建" class="headerlink" title="GitHub创建"></a>GitHub创建</h2><ol>
<li>github：远程仓库，还有：code、码云</li>
<li>建立仓库步骤：<pre><code> (1). 新建远程仓库 （GitHub网站上新建，会产生一个https或者ssh）
 (2). 将https或ssh添加到本地仓库并重命名：
         git remote add 别名 https(ssh) --若不是一个仓库需要进行初始化
 (3). 推送本地仓库到GitHub：git push 链接别名 分支名
 
</code></pre>
</li>
<li>删除远程仓库链接：git remote rm 链接别名</li>
<li>查看远程仓库：git remote</li>
<li>删除远程地址：git remote remove 别名</li>
<li>查看远程仓库链接：git remote -v(详细信息)</li>
<li>查看所有分支：git branch -a</li>
<li>若A修改文档并推送到远程仓库，B也修改了此文档进行推送则不会成功，后推送的需要在A修改推送后再将远程仓库的先抓取下来，进行冲突合并后再推送</li>
<li>远程仓库抓取：git pull （分支名）</li>
<li>推送到远程仓库：git push （分支名）</li>
</ol>
<h2 id="创建GitHub博客"><a href="#创建GitHub博客" class="headerlink" title="创建GitHub博客"></a>创建GitHub博客</h2><pre><code>1. 安装jeklly :sudo gem install bundler jekyll
2. 端口输入：Jekyll 确认是否安装成功
3. 创建本地Jekyll文件：Jekyll new 文件名
4. 进入该文件（第一次需要初始化仓库）
5. 安装markdown 并编辑文件（命名与__plot中文档一致）--&gt; 博客内容
6. 将其推送到GitHub的（learn666-gif.github.io）仓库（需要自己在GitHub网站创建）中去
7. 进入博客：learn666-gif.github.io
</code></pre>
<h2 id="…or-create-a-new-repository-on-the-command-line"><a href="#…or-create-a-new-repository-on-the-command-line" class="headerlink" title="…or create a new repository on the command line"></a>…or create a new repository on the command line</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;# python_resources&quot; &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md   #可能不成功，使用 touch README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin git@github.com:learn666-gif&#x2F;python_resources.git</span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="…or-push-an-existing-repository-from-the-command-line"><a href="#…or-push-an-existing-repository-from-the-command-line" class="headerlink" title="…or push an existing repository from the command line"></a>…or push an existing repository from the command line</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:learn666-gif&#x2F;python_resources.git</span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>通用技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>数据分析01--spark</title>
    <url>/jwangcloud/648089816/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/date.jpeg" width="1000" height="300" align="middle">

<h1 id="spark"><a href="#spark" class="headerlink" title="spark"></a>spark</h1><p><a href="http://spark.apache.org/docs/2.4.4/">官方文档</a></p>
<span id="more"></span>

<h1 id="什么是spark"><a href="#什么是spark" class="headerlink" title="什么是spark"></a>什么是spark</h1><p>Spark 是一个用来实现快速而通用的集群计算的平台。优点：</p>
<ul>
<li>极快的处理速度。spark是基于内存的计算框架，因此不需要对磁盘进行多次的读写。</li>
<li>适用于各种各样原先需要多种不同的分布式平台的场景，包括批处理、迭代算法、交互式查询、流处理。</li>
<li>拥有丰富的编程接口。支持python, java, scalar等语言。</li>
</ul>
<h2 id="spark结构图"><a href="#spark结构图" class="headerlink" title="spark结构图"></a>spark结构图</h2><pre>
 +-----------+     +----------+  +----------+  +----------+
 |           |     |          |  |          |  |          |  
 | spark SQL |     |  spark   |  |  MLIB    |  | GragH X  |
 |           |     | streaming|  |          |  |          |
 +-----------+     +----------+  +----------+  +----------+
 +--------------------------------------------------------+
 |                                                        |
 |            SPARK                  CORE                 |
 |                                                        |
 +--------------------------------------------------------+
 +-----------+     +--------------------+  +----------+
 |           |     |                    |  |          |
 | 独立调度器  |     |       YARN         |  |  MESOS   |
 |           |     |                    |  |          |
 +-----------+     +--------------------+  +----------+  
</pre>
<ol>
<li>spark core: 定义了rdd的接口，实现spark的基本功能例如：任务调度，内存管理，错误恢复，与存储系统交互等模块。</li>
<li>spark sql: 用于操作结构化数据的程序包。</li>
<li>spark streaming: 提供对实时数据流式计算的组件。</li>
<li>spark MLIB: 提供用于一组机器学习的库。</li>
<li>spark GraphX: 用于操作图的程序库。</li>
<li>群集管理器：用于让spark高效的在数千计的节点之间伸缩计算。</li>
</ol>
<h2 id="spark的用途"><a href="#spark的用途" class="headerlink" title="spark的用途"></a>spark的用途</h2><ul>
<li>数据科学任务（对科学家）</li>
<li>数据处理应用（对工程师）</li>
</ul>
<h1 id="spark安装与运行"><a href="#spark安装与运行" class="headerlink" title="spark安装与运行"></a>spark安装与运行</h1><h2 id="下载及安装"><a href="#下载及安装" class="headerlink" title="下载及安装"></a>下载及安装</h2><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><ul>
<li><p>配置JAVA</p>
<pre>
  #vim ~/.bash_profile or ~/.bashrc
     export JAVA_HOME=INSTALLATION_PATH
     export PATH=$PATH:$JAVA_HOME/bin     #可选
  #. ~/.bash_profile or ~/.bashrc
</pre></li>
<li><p>配置spark</p>
<pre>
  #vim ~/.bash_profile or ~/.bashrc
    export SPARK_HOME=SPARK_INSTALLATION_PATH
    export PATH=$PATH:$SPARK_HOME/bin:$SPARK_HOME/sbin     #可选
  #. ~/.bash_profile or ~/.bashrc
</pre></li>
<li><p>测试配置是否成功</p>
<pre>
   # PYSPARK_PYTHON=python3 pyspark
</pre>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2></li>
<li><p>启动master</p>
<pre>
#start-master.sh -h IP -p PORT
</pre></li>
<li><p>启动slave</p>
<pre>
#start-slave.sh spark://IP:PORT
</pre></li>
</ul>
<h2 id="打开shell"><a href="#打开shell" class="headerlink" title="打开shell"></a>打开shell</h2>  <pre>
 #pyspark --master spark://HOST:PORT or PYSPARK_DRIVER_PYTHON=ipython SPARK_DIST_CLASSPATH=$(hadoop classpath) pyspark --master spark://localhost:7077
 </pre>
<h2 id="提交独立应用"><a href="#提交独立应用" class="headerlink" title="提交独立应用"></a>提交独立应用</h2><p>#spark-submit test.py</p>
<h1 id="spark核心概念"><a href="#spark核心概念" class="headerlink" title="spark核心概念"></a>spark核心概念</h1><p> spark程序由一个驱动器（driver）与多个执行器（executor）组成。</p>
<ul>
<li>驱动器：包含了应用的main函数，并且定义了集群上的分布式数据集与对这些数据的相关操作。</li>
<li>执行器：用于执行操作的执行对象。</li>
</ul>
<h1 id="spark编程"><a href="#spark编程" class="headerlink" title="spark编程"></a>spark编程</h1><p>每一spark应用都应该包含一个sparkcontext对象。初始化过程如下：<br>from pyspark import SparkConf, SparkContext<br>conf = SparkConf().setMaster(“localhost:7077”).setAppName(“my app”)<br>sc = SparkContext(conf)</p>
<p>sc.stop()</p>
<h1 id="RDD编程"><a href="#RDD编程" class="headerlink" title="RDD编程"></a>RDD编程</h1><p>RDD称为分布式弹性数据集，在spark中对数据的操作不外乎就是创建rdd，转化rdd与调用rdd等。</p>
<h2 id="RDD基础"><a href="#RDD基础" class="headerlink" title="RDD基础"></a>RDD基础</h2><p>rdd就是spark中不可变的分布式对象集合，每个rdd都被分为多个分区，这些分区运行在集群中的不同节点上。</p>
<h3 id="rdd的创建"><a href="#rdd的创建" class="headerlink" title="rdd的创建"></a>rdd的创建</h3><ul>
<li>读取外部数据集。<pre>
    rdd = sc.textFile("file:///test.txt")
</pre></li>
<li>在驱动器程序里分发驱动器程序的对象集合。<pre>
    rdd = sc.parallelize((1,2,3,4,5,6,7,8,9))
<pre></pre></pre></li>
</ul>
<h3 id="rdd的操作"><a href="#rdd的操作" class="headerlink" title="rdd的操作"></a>rdd的操作</h3><ul>
<li>转化（transform)。生成新的rdd,转化操作为惰性操作，每一次转化不会真的发生除非被“行动操作”进行触发<pre>
filter,返回一个由通过传给filter的函数的元素组成的RDD
map，将函数用于RDD中的每个元素并返回新的RDD。
flatMap，将函数用于RDD中的每个元素并将返回的迭代器中的元素生成新的RDD
distinct，去重
union，生成一个包含两个RDD中所有元素的RDD
intersection，求两个RDD共同的元素的RDD
subtract，移除一个RDD中的内容
cartesian，求与另一个RDD的笛卡尔乘积
</pre></li>
<li>PairRDD转化操作<pre>
reduceByKey(func),合并相同键的值。
groupByKey()，对具有相同键的值进行分组。
combineByKey()，使用不同的返回类型合并具有相同的键。
mapValues(func)，对Pair RDD中的每个值应用一个函数而不改变键值。
flatMapValues(func)
keys()，返回一个包含键的RDD。
values()，返回一个包含值的RDD。
sortByKey()，返回一个根据键排序的RDD。
subtractByKey(),删除掉RDD中与其它RDD中键相同的元素。
join，对两个RDD进行内连接。
</pre></li>
<li>行动 (action)。执行转化操作并收集结果。<pre>
reduce,并行整合RDD中所有数据
aggregate，与reduce类似，但是通常返回不同类型的函数
collect,返回RDD中所有的元素
take，从RDD中返回num个元素
first，返回第一个元素
count，求元素个数
top，从RDD中返回最前面num个元素
foreach，对RDD中的每个元素使用给定的函数
</pre></li>
</ul>
<h2 id="聚合操作"><a href="#聚合操作" class="headerlink" title="聚合操作"></a>聚合操作</h2><p> 当数据集以键值的形式组织的时候，聚合具有相同键的元素进行一些统计是很常见的操作。下面几个方法用于常见的聚合：</p>
<pre>
fold
combine
reduce
reduceByKey
foldByKey
</pre>

<h1 id="数据的读取与保存"><a href="#数据的读取与保存" class="headerlink" title="数据的读取与保存"></a>数据的读取与保存</h1><h2 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h2><table>
<thead>
<tr>
<th>格式名称</th>
<th>结构化</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>文本文件</td>
<td>否</td>
<td>文本文件的每一行作为记录</td>
</tr>
<tr>
<td>json</td>
<td>半结构化数据</td>
<td>要求每行一条记录</td>
</tr>
<tr>
<td>csv</td>
<td>是</td>
<td>文本格式，在电子表格中使用</td>
</tr>
<tr>
<td>sequence file</td>
<td>是</td>
<td>一种hadoop中常见的文件格式</td>
</tr>
<tr>
<td>protocol buffer</td>
<td>是</td>
<td>快速，节约空间的语言格式</td>
</tr>
<tr>
<td>对象文件</td>
<td>是</td>
<td>用来将spark作业中的数据存储下来以让共享<br>的代码读取</td>
</tr>
</tbody></table>
<h2 id="文本文件"><a href="#文本文件" class="headerlink" title="文本文件"></a>文本文件</h2><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><pre>
input = sc.textFile("file:///myfile.txt") #读取本地文件
hdfs_file = sc.textFile("hdfs://192.168.34.45:9099/myfile.txt") #读取hdfs文本文件。
input = sc.wholeTextFiles("file:///20190101.logs") #返回一个pair RDD，键为文件名，值为文本见类容。
</pre>
<p><b style="color:red">注意:</b> 当传递的路径为一个文件夹路径时，则会读出所有的文件。</p>
<h3 id="保存文本文件"><a href="#保存文本文件" class="headerlink" title="保存文本文件"></a>保存文本文件</h3><pre>
result.saveAsTextFile(outputFile)
</pre>

<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="读取-1"><a href="#读取-1" class="headerlink" title="读取"></a>读取</h3><pre>
import json
data = input.map(lambda x: json.loads(x))
</pre>
<h3 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h3><pre>
result.map(lambda x: json.dumps(x)).saveAsTextFile(output)
</pre>

<h2 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h2><h3 id="读取-2"><a href="#读取-2" class="headerlink" title="读取"></a>读取</h3><pre>
def map_to_csv(line):
    input = StringIO.StringIO(line)     
    reader = csv.DictReader(input, 
            fieldnames= ["姓名", "年龄"])     
    return reader.next()

rdd = sc.textFile("file:///users.txt).map(map_to_csv)
</pre>

<h3 id="保存-1"><a href="#保存-1" class="headerlink" title="保存"></a>保存</h3><pre>
import csv
import StringIO

def map_records_to_csv(records):
    output = StringIO()
    csv_writer = csv.DictWriter(output, fieldnames=("姓名", "年龄"))
    for r in records:
        csv_writer.write_row(r)
    return [output.getValues()]

rdd.map(map_records_to_csv).saveAsTextFile(output_path)
</pre>

<h1 id="Spark-SQL结构化数据"><a href="#Spark-SQL结构化数据" class="headerlink" title="Spark SQL结构化数据"></a>Spark SQL结构化数据</h1><p>在各种情况下，我们把一条 SQL 查询给 Spark SQL，让它对一个数据源执行查询（选出一些字段或者对字段使用一些函数），然后得到由 Row 对象组成的 RDD，每个 Row 对象表示一条记录。在 Python 中，可以使用 row[column_number] 以及 row.column_name 来访问元素。</p>
<h2 id="JSON-1"><a href="#JSON-1" class="headerlink" title="JSON"></a>JSON</h2><pre>
from pyspark.sql.dataframe import DataFrame

sf = SparkConf().setMaster("spark://192.168.0.104:7077").setAppName("WordCount")
hiveCtx = SparkSession.builder.config(conf=sf).getOrCreate()
hiveCtx.sparkContext.setLogLevel("WARN")
json_file = hiveCtx.read.json("file:///media/psf/Home/Workspace/Rimi/P1901/lessons/spark/users.json")
# json_file = hiveCtx.createDataFrame([{"name":"john", "age":34}, {"name":"bob", "age": 45}])
df = json_file.select(["name", "age"])
df.show()
</pre>

<h3 id="使用sql查询表"><a href="#使用sql查询表" class="headerlink" title="使用sql查询表"></a>使用sql查询表</h3><p>json_file.createOrReplaceTempView(“user”) # 将读出的结构化数据创建一张临时表<br>users = hiveCtx.sql(“select name, age from user”) # 执行sql语句<br>users.show()</p>
<h3 id="保存文件"><a href="#保存文件" class="headerlink" title="保存文件"></a>保存文件</h3><p>users.write.save(“file:///users.json”, format=”json”)</p>
<h2 id="CSV-1"><a href="#CSV-1" class="headerlink" title="CSV"></a>CSV</h2><pre>
from pyspark.sql.dataframe import DataFrame

sf = SparkConf().setMaster("spark://192.168.0.104:7077").setAppName("WordCount")
hiveCtx = SparkSession.builder.config(conf=sf).getOrCreate()
hiveCtx.sparkContext.setLogLevel("WARN")
csv_file = hiveCtx.read.csv("file:///media/psf/Home/Workspace/Rimi/P1901/lessons/spark/users.csv", sep=",", header=True)
df = csv_file.select(["name", "age"])
df.show()
</pre>

<h3 id="保存文件-1"><a href="#保存文件-1" class="headerlink" title="保存文件"></a>保存文件</h3><p>users.write.save(“file:///users.csv”, format=”csv”)</p>
<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><pre>
table = hiveCtx.read.jdbc("jdbc:mysql://localhost/roc", "django_migrations", 
                          properties={ 'user' : 'root', 'password' : '123456' })
table.show()
</pre>

<h3 id="保存到数据库"><a href="#保存到数据库" class="headerlink" title="保存到数据库"></a>保存到数据库</h3><pre>
data.write.save(format="jdbc", url="jdbc:mysql://localhost/ggchat", dbtable="test2", user="root", password="123456")
</pre>

<h2 id="用户自定义函数（UDF）"><a href="#用户自定义函数（UDF）" class="headerlink" title="用户自定义函数（UDF）"></a>用户自定义函数（UDF）</h2><p>用户自定义函数，也叫 UDF，可以让我们使用 Python/Java/Scala 注册自定义函数，并在 SQL 中调用。这种方法很常用，通常用来给机构内的</p>
<ul>
<li>9-36：Python 版本耳朵字符串长度 UDF</li>
</ul>
<pre>

hiveCtx.registerFunction("strLenPython", lambda x: len(x), IntegerType()) 
lengthSchemaRDD = hiveCtx.sql("SELECT strLenPython('text') FROM tweets LIMIT 10")

</pre>

<h1 id="Spark配置与调优"><a href="#Spark配置与调优" class="headerlink" title="Spark配置与调优"></a>Spark配置与调优</h1><h2 id="使用SparkConf配置Spark"><a href="#使用SparkConf配置Spark" class="headerlink" title="使用SparkConf配置Spark"></a>使用SparkConf配置Spark</h2><pre>
sc = SparkConf()
sc.set("spark.app.name", "spark test")
sc.set("spark.master", "spark://localhost:7077")
sc.set("spark.ui.port", 4444)
</pre>

<h2 id="常用的选项"><a href="#常用的选项" class="headerlink" title="常用的选项"></a>常用的选项</h2><table>
<thead>
<tr>
<th>选项</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>spark.executor.memory</td>
<td>512m</td>
<td>为每个执行器进程分配的内存</td>
</tr>
<tr>
<td>spark.executor.cores</td>
<td>1</td>
<td>限制应用使用的核心数量</td>
</tr>
<tr>
<td>spark.cores.max</td>
<td>无</td>
<td>使用的核心总数</td>
</tr>
<tr>
<td>spark.speculation</td>
<td>false</td>
<td>是否开启任务预测</td>
</tr>
<tr>
<td>spark.[X].port</td>
<td>任意值</td>
<td>设置spark用到的端口</td>
</tr>
</tbody></table>
<h1 id="Spark-Streaming"><a href="#Spark-Streaming" class="headerlink" title="Spark Streaming"></a>Spark Streaming</h1><p>许多应用需要即时处理收到的数据，例如用来实时追踪页面访问统计的应用、训练机器学习模型的应用，还有自动检测异常的应用。Spark Streaming 是 Spark 为这些应用而设计的模型。它允许用户使用一套和批处理非常接近的 API 来编写流式计算应用，这样就可以大量重用批处理应用的技术甚至代码。</p>
<h2 id="Streaming例子"><a href="#Streaming例子" class="headerlink" title="Streaming例子"></a>Streaming例子</h2><pre>
from pyspark.streaming import StreamingContext
from pyspark import SparkConf,SparkContext
# 设置集群信息
sf = SparkConf().setMaster("spark://192.168.0.104:7077").setAppName("xxxxxx")
sc = SparkContext(conf=sf)
sc.setLogLevel("ERROR")
# 初始化streaming对象
s = StreamingContext(sc, 1)
# 设置检查点机制
s.checkpoint("file:///media/psf/Home/Workspace/Rimi/P1901/lessons/spark/checkpoints")
# 通过网络读取数据流形成dstream
dstream = s.socketTextStream("192.168.0.103", 7777)
# 设置滑动窗口
dstream = dstream.window(3)
# dstream转化操作
dstream = dstream.flatMap(lambda x: x.split()).map(lambda x: (x, 1)).groupByKey().mapValues(lambda x: len([w for w in x]))
dstream.pprint()
s.start()
s.awaitTermination()
</pre>

<h2 id="DStream"><a href="#DStream" class="headerlink" title="DStream"></a>DStream</h2><p>DStream被称为离散化流，和spark中的rdd类似。它会随着时间的推移而收到数据的队列。<br>在内部每个时间区间收到的数据都作为rdd存在，而dstream由这些rdd组成。</p>
<h3 id="DStream的输入源"><a href="#DStream的输入源" class="headerlink" title="DStream的输入源"></a>DStream的输入源</h3><ul>
<li>flume</li>
<li>kafka</li>
<li>hdfs</li>
<li>其它网络io</li>
</ul>
<h3 id="DStream的操作"><a href="#DStream的操作" class="headerlink" title="DStream的操作"></a>DStream的操作</h3><ul>
<li>转化</li>
<li>输出</li>
</ul>
<h2 id="架构与抽象"><a href="#架构与抽象" class="headerlink" title="架构与抽象"></a>架构与抽象</h2><p>使用“微批次”的架构，把流式计算当作一系列连续的小规模批处理来对待。Spark Streaming 从各种输入源中读取数据，并把数据分组为小的批次。新的批次按均匀的时间间隔创建出来。在每个时间区间开始的时候，一个新的批次就创建出来，在该区间内收到的数据都会被添加到这个批次中。在时间区间结束时，批次停止增长。时间区间的大小是由批次间隔这个参数决定的。批次间隔一般设在 500 毫秒到几秒之间，由应用开发者配置。每个输入批次都形成一个</p>
<pre>

        +---+--------------------------------+
------->| r |  +-----+ +-----+    +------+   |
        | c |  |     | |     | ...|      |   |   output
------->| e |  |     | |     |    |      |   | ---------->
        | v |  +-----+ +-----+    +------+   |
------->|   |    Spark Streaming             |
        +---+--------------------------------+

</pre>

<pre>
             +------+ +------+ +------+
DStream ---> | 0-1s | | 1-2s | | 2-3s | --->
             +------+ +------+ +------+
              RDD1    RDD2    RDD3
</pre>

<h2 id="转化操作"><a href="#转化操作" class="headerlink" title="转化操作"></a>转化操作</h2><h3 id="无状态转化"><a href="#无状态转化" class="headerlink" title="无状态转化"></a>无状态转化</h3><p>在无状态转化操作中，每个批次的处理不依赖于之前批次的数据。转化操作，例如 map() 、 filter() 、 reduceByKey() 等，都是无状态转化操作。</p>
<pre>
map: 对 DStream 中的每个元素应用给定函数，返回由各元素输出的元素组成的 DStream。
flatMap:
filter: 对 DStream 中的每个元素应用给定函数，返回由各元素输出的元素组成的 DStream。
repartition: 改变 DStream 的分区数。
reduceByKey: 将每个批次中键相同的记录归约。
groupByKey: 将每个批次中的记录根据键分组。
</pre>
<h3 id="有状态转化"><a href="#有状态转化" class="headerlink" title="有状态转化"></a>有状态转化</h3><p>相对地，有状态转化操作需要使用之前批次的数据或者是中间结果来计算当前批次的数据。有状态转化操作包括基于滑动窗口的转化操作和追踪状态变化的转化操作。</p>
<ul>
<li>设置窗口大小与滑动步长<pre>
...
stream.checkpoint("/checkpoint")
...
ds = stream.socketTextStream("192.168.0.103", 7777)
ds.window(3, 1) # 窗口大小与步长必须是时间间隔的整数倍。
</pre></li>
</ul>
<h2 id="输入源"><a href="#输入源" class="headerlink" title="输入源"></a>输入源</h2><ul>
<li><p>读取文件目录中的文本文件流</p>
 <pre>
 s = stream.textFileStream("logs")
 </pre></li>
<li><p>网络文本流</p>
<pre>
s = stream.socketTextStream("127.0.0.1", 7777)
</pre></li>
<li><p>其它流（flume, kafka etc）</p>
</li>
</ul>
<h3 id="数据源的合并"><a href="#数据源的合并" class="headerlink" title="数据源的合并"></a>数据源的合并</h3><p>如前文所述，可以使用类似 union() 这样的操作将多个 DStream 合并。通过这些操作符，可以把多个输入的 DStream 合并起来。有时，使用多个接收器对于提高聚合操作中的数据获取的吞吐量非常必要（如果只用一个接收器，可能会成为性能瓶颈）。另外，有时我们需要用不同的接收器来从不同的输入源中接收各种数据，然后使用</p>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>将dstream输出到数据库或文件系统之中，实现输出的api如下：</p>
<table>
<thead>
<tr>
<th>输出方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>print</td>
<td>将dstream数据输出到终端</td>
</tr>
<tr>
<td>saveAsTextFiles</td>
<td>将dstream保存到文本文本</td>
</tr>
<tr>
<td>saveAsObjectFiles</td>
<td>将dstream保存成对象文件</td>
</tr>
<tr>
<td>saveAsHadoopFiles</td>
<td>将dstream保存成hadoop文件</td>
</tr>
<tr>
<td>foreachRDD</td>
<td>迭代dstream，通过提供的回调函数处理传递的RDD</td>
</tr>
</tbody></table>
<h1 id="Spark大数据分析实例"><a href="#Spark大数据分析实例" class="headerlink" title="Spark大数据分析实例"></a>Spark大数据分析实例</h1><h2 id="购物篮分析"><a href="#购物篮分析" class="headerlink" title="购物篮分析"></a>购物篮分析</h2><p>购物篮分析(MarketBasketAnalysis,MBA)是一个流行的数据挖掘技术,市场营销和<br>电子商务专业人员经常用这个技术来揭示不同商品或商品组之间的相似度。数据挖掘的<br>一般目标是从庞大的数据集合中提取有趣的关联信息,例如数百万超市或信用卡销售交<br>易。购物篮分析可以帮助我们找出很可能会一起购买的商品,关联规则挖掘会发现一个<br>交易集中商品之间的相关性。然后市场营销人员可以使用这些关联规则在商店货架上或<br>在线将相关的商品搜放在相邻的位置,使顾客能购买更多的商品。为购物篮分析挖掘关<br>联规则时要找出频繁商品集,这是一个计算密集型问题,所以非常适合利用MapReduce<br>来解决。</p>
<p>在数据挖掘中，关联规则有两个度量标准：</p>
<ul>
<li>支持度。一个项集出现的频度，例如：Support({A,C}) = 2表示只在两个交易中同时出现</li>
<li>置信度。关联规则左件与右件共同出现的频繁程度。</li>
</ul>
<p>购物篮分析是用于回答以下问题：</p>
<ul>
<li>哪些商品会一起购买</li>
<li>每个购物篮有哪些商品</li>
<li>哪些商品应当降价</li>
<li>商品应当如何相邻摆放已实现最大利润</li>
</ul>
<h3 id="分析流程"><a href="#分析流程" class="headerlink" title="分析流程"></a>分析流程</h3><ol>
<li><p>给定交易清单：</p>
<pre><code> t1: crackers, icecream, coke, apple
 t2: chicken, pizza, coke, bread
 t3: baguette, soda, shampoo, crackers, pepsi, apple
 t4: baguette, cream, cheese, diapers, milk
 t5: crackers, coke, apple, baguette, soda
</code></pre>
</li>
<li><p>构建项集(1阶，2阶，3阶), 对于每次交易以两个组合。<br>例如：((crackers, icecream), 1), ((crackers, coke), 1), ….</p>
<pre><code>((chiken, pizza), 1), ((chiken, coke), 1), ((chiken, bread), 1), ((pizza, coke), 1), ...
((crackers, icecream, coke), 1), ((baguette, soda, apple), 2) ...
(crackers, 1), (icecream, 1), (coke, 1) ....
</code></pre>
</li>
<li><p>统计各个阶出现的频度<br>例如：((crackers, icecream), 1), ((coke, apple), 2), ((baguette, soda), 2) …</p>
<pre><code> (crackers, 2), (coke, 3) ....
</code></pre>
</li>
<li><p>生成所有子模式<br>例如： ((a, b, c), 2) =&gt;</p>
<pre><code>  ((a, b, c), (null, 2))
  ((a, b), ((a, b ,c), 2))
  ((a, c), ((a, b, c), 2))
  ((b, c), ((a, b, c), 2))
</code></pre>
</li>
<li><p>组合子模式(groupByKey)<br>例如：</p>
<pre><code> ([a,b],[(null,2),([a,b,d],1),([a,b,c],1)])
 ([a,b,d],[(null,1)])
 ([c],[(nu1l,3),([b,c],3),([a,c],1)])
 ([b,d],[([a,b,d],1),(null,1)])
 ([d],[([b,d],1),(null,1),([a,d],1)])
</code></pre>
</li>
<li><p>生成关联规则<br>例如：<br>[([a, b], [d], 0.5), ([a, b], [c], 0.5)]<br>[]<br>[([c], [b], 1), ([c], [a], 0.33333)]<br>….</p>
</li>
</ol>
<pre>

# 导出spark库
from pyspark import SparkContext, SparkConf
import re

# 组合算法
def combine(s, n):
    def _iterator(collector, s, i, c, n, data=None):
        if c >= n:
            collector.append(tuple(data))
            return

        for x in range(i, len(s)):
            data.append(s[x])
            _iterator(collector, s, x + 1, c + 1, n, data)
            data.pop()

    data_set = []
    chars = []
    _iterator(data_set, s, 0, 0, n, chars)
    return data_set

sparkConf = SparkConf()
sparkConf.set("spark.master", "spark://10.0.0.252:7077")
sparkConf.set("spark.app.name", "MBA")
sparkConf.set("spark.executor.memory", "512m")
sparkConf.set("spark.executor.cores", "2")

sparkContext = SparkContext.getOrCreate(sparkConf)
sparkContext.setLogLevel("ERROR")
rdd = sparkContext.textFile("file:///root/transaction.txt")


def parse_T(x):
    _, info = re.split(":\\s*", x)
    data = re.split("\\s*,\\s*", info)

    data_set = []

    for d in combine(data, 2) + combine(data, 3):
        data_set.append((d, 1))

    return data_set

# 按二阶三阶进行组合，分组并求出分组后的总和
rdd1 = rdd.flatMap(f=parse_T).groupByKey().mapValues(lambda v: sum(v))

def gen_sub_seq(x):
    key, value = x
    sub_data_set = [(key, (None, value))]
    keys = combine(key, len(key) - 1)
    for k in keys:
        sub_data_set.append((k, (key, value)))
    return sub_data_set

# 求子序列
rdd2 = rdd1.flatMap(f=gen_sub_seq).groupByKey().mapValues(lambda v: [i for i in v])

def not_list(src, dst):
    for x in dst:
        src.remove(x)
    return src


def do_result(x):
    key, value = x
    data_set = []
    total = 0
    for c in value:
        if c[0] == None:
            total = c[1]
        else:
            data_set.append(c)

    if not data_set:
        return data_set

    results = []
    for k, v in data_set:
        if total == 0:
            continue

        pp = float(v) / float(total)
        results.append((pp, (key, not_list(list(k), key))))

    return results

# 求关联性，并排序打印
rdd3 = rdd2.flatMap(f=do_result).sortByKey(ascending=False)
for x in rdd3.top(100):
    print(x)

sparkContext.stop()

</pre>

<h1 id="MLIB机器学习"><a href="#MLIB机器学习" class="headerlink" title="MLIB机器学习"></a>MLIB机器学习</h1><h2 id="机器学习分类"><a href="#机器学习分类" class="headerlink" title="机器学习分类"></a>机器学习分类</h2><ul>
<li>分类</li>
<li>回归</li>
<li>聚类</li>
</ul>
<h2 id="机器学习一般流程"><a href="#机器学习一般流程" class="headerlink" title="机器学习一般流程"></a>机器学习一般流程</h2><ul>
<li>使用字符串RDD表示消息</li>
<li>使用特征提取算法把文本数据转化为数值特征</li>
<li>对向量RDD调用分类算法，并返回模型</li>
<li>使用模型在测试数据集上测试</li>
<li>评估</li>
<li>部署</li>
</ul>
<h2 id="常用的机器学习算法"><a href="#常用的机器学习算法" class="headerlink" title="常用的机器学习算法"></a>常用的机器学习算法</h2><ul>
<li>分布式随机森林</li>
<li>K-means聚类算法</li>
<li>最小二乘发</li>
<li>支持向量机</li>
<li>等</li>
</ul>
<h2 id="spark机器学习"><a href="#spark机器学习" class="headerlink" title="spark机器学习"></a>spark机器学习</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul>
<li>Vector</li>
</ul>
<p>既支持稠密向量也支持稀疏向量，前者表示向量的每一位都存储下来，后者则只存储非零位以节约空间。后面会简单讨论不同种类的向量。</p>
<ul>
<li>LabeledPoint</li>
</ul>
<p>用来表示带标签的数据点。它包含一个特征向量与一个标签（由一个浮点数表示)</p>
<ul>
<li>Rating</li>
</ul>
<p>用户对一个产品的评分，在 mllib.recommendation 包中，用于产品推荐。</p>
<ul>
<li>Model类</li>
</ul>
<p>每个 Model 都是训练算法的结果，一般有一个 predict() 方法可以用来对新的数据点或数据点组成的 RDD 应用该模型进行预测。</p>
<h3 id="分类与回归"><a href="#分类与回归" class="headerlink" title="分类与回归"></a>分类与回归</h3><p>分类与回归是监督式学习的两种主要形式。监督式学习指算法尝试使用有标签的训练数据（也就是已知结果的数据点）根据对象的特征预测结果。分类和回归的区别在于预测的变量的类型：在分类中，预测出的变量是离散的（也就是一个在有限集中的值，叫作类别）；比如，分类可能是将邮件分为垃圾邮件和非垃圾邮件，也有可能是文本所使用的语言。在回归中，预测出的变量是连续的（例如根据年龄和体重预测一个人的身高）。</p>
<ol>
<li>线性回归</li>
</ol>
<p>线性回归是回归中最常用的方法之一，是指用特征的线性组合来预测输出值。MLlib 也支 持 L1 和 L2 的正则的回归，通常称为 Lasso 和 ridge 回归。</p>
<pre>
from pyspark.mllib.regression import LabeledPoint 
from pyspark.mllib.regression import LinearRegressionWithSGD 
points = # (创建LabeledPoint组成的RDD) 
model = LinearRegressionWithSGD.train(points, iterations=200, intercept=True) 
print "weights: %s, intercept: %s" % (model.weights, model.intercept)
model.predict()
</pre>

<ol start="2">
<li>逻辑回归</li>
</ol>
<p>逻辑回归是一种二元分类方法，用来寻找一个分隔阴性和阳性示例的线性分割平面。逻辑回归是一种二元分类方法，用来寻找一个分隔阴性和阳性示例的线性分割平面。在MLlib中，它接收一组标签为0或1的LabeledPoint，返回可以预测新点的分类的 LogisticRegressionModel 对象。</p>
<ol start="3">
<li>支持向量机</li>
</ol>
<p>支持向量机（简称 SVM）算法是另一种使用线性分割平面的二元分类算法，同样只预期 0 或者 1 的标签。通过 SVMWithSGD 类，我们可以访问这种算法，它的参数与线性回归和逻辑回归的参数差不多。返回的 SVMModel 与 LogisticRegressionModel 一样使用阈值的方式进行预测。</p>
<ol start="4">
<li>朴素贝叶斯</li>
</ol>
<p>朴素贝叶斯（Naive Bayes）算法是一种多元分类算法，它使用基于特征的线性函数计算将一个点分到各类中的得分。这种算法通常用于使用 TF-IDF 特征的文本分类，以及其他一些应用。MLlib 实现了多项朴素贝叶斯算法，需要非负的频次（比如词频）作为输入特征。</p>
<ol start="5">
<li>决策树与随机森林</li>
</ol>
<p>决策树是一个灵活的模型，可以用来进行分类，也可以用来进行回归。决策树以节点树的形式表示，每个节点基于数据的特征作出一个二元决定（比如，这个人的年龄是否大于20 ？），而树的每个叶节点则包含一种预测结果（例如，这个人是不是会买一个产品？）。决策树的吸引力在于模型本身容易检查，而且决策树既支持分类的特征，也支持连续的特征。</p>
<h3 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h3><p>聚类算法是一种无监督学习任务，用于将对象分到具有高度相似性的聚类中。前面提到的监督式任务中的数据都是带标签的，而聚类可以用于无标签的数据。该算法主要用于数据探索（查看一个新数据集是什么样子）以及异常检测（识别与任意聚类都相距较远的点）。</p>
<ol>
<li>K-means</li>
</ol>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>数据存储与处理01--hadoop</title>
    <url>/jwangcloud/1462761565/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/date.jpeg" width="1000" height="300" align="middle">


<h2 id="hadoop"><a href="#hadoop" class="headerlink" title="hadoop"></a>hadoop</h2><span id="more"></span>

<h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><h4 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h4><blockquote>
<p>jdk下载:<br>最好下载以前的稳定版本，此次使用的jdk版本为1.8</p>
<p><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">下载地址</a></p>
</blockquote>
<blockquote>
<p>hadoop下载：下载稳定版本， 此次使用Hadoop版本为2.7.7</p>
<p><a href="https://hadoop.apache.org/releases.html">下载地址</a></p>
</blockquote>
<h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#vim ~&#x2F;.bash_profile</span><br><span class="line"></span><br><span class="line">#Setting PATH for hadoop 2.7.7</span><br><span class="line">export HADOOP_HOME&#x3D;&#x2F;Users&#x2F;rimi&#x2F;Desktop&#x2F;hadoop-2.7.7</span><br><span class="line">export PATH&#x3D;$PATH:$HADOOP_HOME&#x2F;bin</span><br><span class="line">export PATH&#x3D;$PATH:$HADOOP_HOME&#x2F;sbin</span><br><span class="line"></span><br><span class="line">#Setting JAVA_HOME for jdk 1.8</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;jdk1.8.0_231.jdk&#x2F;Contents&#x2F;Home</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>编辑保存完成后，执行命令： source .bash_profile </p>
<p>查看是否配置成功：echo $JAVA_HOME  /  echo $HADOOOP_HOME</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#修改hadoop-env.sh配置文件(可不用)</span><br><span class="line">#hadoop-2.7.7&#x2F;etc&#x2F;hadoop</span><br><span class="line">#vim hadoop-env.sh</span><br><span class="line"></span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;jdk1.8.0_231.jdk&#x2F;Contents&#x2F;Home</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="hadoop伪分布式配置"><a href="#hadoop伪分布式配置" class="headerlink" title="hadoop伪分布式配置"></a>hadoop伪分布式配置</h3><ol>
<li>hadoop/etc/hadoop/core-site</li>
</ol>
<table>
<thead>
<tr>
<th align="center">No.</th>
<th align="center">参数名</th>
<th align="center">默认值</th>
<th align="center">参数解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">fs.defaultFS</td>
<td align="center">file:///</td>
<td align="center">文件系统主机和端口</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">io.file.buffer.size</td>
<td align="center">4096</td>
<td align="center">流文件的缓冲区大小</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">hadoop.tmp.dir</td>
<td align="center">/tmp/hadoop-${user.name }</td>
<td align="center">临时文件夹</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim core-site.xml</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">       &lt;!--指定namenode的地址(必须)--&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">               &lt;name&gt;fs.defaultFS&lt;&#x2F;name&gt;</span><br><span class="line">               &lt;value&gt;hdfs:&#x2F;&#x2F;10.2.0.104&lt;&#x2F;value&gt;</span><br><span class="line">   &lt;&#x2F;property&gt;</span><br><span class="line">   &lt;!--用来指定使用hadoop时产生文件的存放目录--&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">            &lt;name&gt;hadoop.tmp.dir&lt;&#x2F;name&gt;</span><br><span class="line">            &lt;value&gt;file:&#x2F;data&#x2F;hadoop&#x2F;hadoop-2.6.0&#x2F;tmp&lt;&#x2F;value&gt; </span><br><span class="line">   &lt;&#x2F;property&gt;</span><br><span class="line">   	&lt;property&gt;</span><br><span class="line">   	   &lt;!--用来指定使用hadoop时的节点数（需要）--&gt;</span><br><span class="line">            &lt;name&gt;dfs.replication&lt;&#x2F;name&gt;</span><br><span class="line">            &lt;value&gt;1&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">    	&lt;!--用来设置检查点备份日志的最长时间--&gt;</span><br><span class="line">    	&lt;name&gt;fs.checkpoint.period&lt;&#x2F;name&gt; </span><br><span class="line">    	&lt;value&gt;3600&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ol start="2">
<li>hadoop/ect/hadoop/hdfs-site</li>
</ol>
<table>
<thead>
<tr>
<th align="center">No.</th>
<th align="center">参数名</th>
<th align="center">默认值</th>
<th align="center">参数解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">dfs.namenode.secondary.http-address</td>
<td align="center">0.0.0.0:50090</td>
<td align="center">定义HDFS对应的HTTP服务器地址和端口</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">dfs.namenode.name,dir</td>
<td align="center">file://${hadoop.tmp.dir}/dfs/name</td>
<td align="center">定义DFS的名称节点在本地文件系统的位置</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">dfs,datanode.data.dir</td>
<td align="center">file://${hadoop.tmp.dir}/dfs/data</td>
<td align="center">定义DFS数据节点存储数据块时存储在本地文件系统的位置</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">dfs.replication</td>
<td align="center">3</td>
<td align="center">缺省的块复制数量</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">dfs.webhdfs.enabled</td>
<td align="center">true</td>
<td align="center">是否通过http协议读取hdfs文件，如果选是，则集群安全性较差</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim hdfs-site.xml</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;!--指定hdfs保存数据的副本数量--&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">             &lt;name&gt;dfs.replication&lt;&#x2F;name&gt;</span><br><span class="line">             &lt;value&gt;2&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">	&lt;!--指定hdfs中namenode的存储位置--&gt;</span><br><span class="line">				&lt;name&gt;dfs.namenode.name.dir&lt;&#x2F;name&gt;</span><br><span class="line">				&lt;value&gt;file:&#x2F;&#x2F;&#x2F;Users&#x2F;rimi&#x2F;Desktop&#x2F;bigdata&#x2F;namenode&lt;&#x2F;value&gt;</span><br><span class="line">	&lt;&#x2F;property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">	&lt;!--指定hdfs中datanode的存储位置--&gt;</span><br><span class="line">      		   &lt;name&gt;dfs.datanode.data.dir&lt;&#x2F;name&gt;</span><br><span class="line">      		   &lt;value&gt;file:&#x2F;&#x2F;&#x2F;Users&#x2F;rimi&#x2F;Desktop&#x2F;bigdata&#x2F;datanode&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ol start="3">
<li>重新格式化： hdfs namenode -format</li>
</ol>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>1.查看集群上所有文件：</p>
<blockquote>
<p>hdfs dfs -ls /</p>
</blockquote>
<p>2.分别启动namenode/datanode: </p>
<blockquote>
<p>hdfs –daemon start namenode / hdfs –daemon start datanode</p>
</blockquote>
<p>3.查看该集群此ip下的文件：</p>
<blockquote>
<p>hdfs dfs -ls hdfs://10.2.0.104/</p>
</blockquote>
<p>4.创建文件夹：</p>
<blockquote>
<p>hdfs dfs -mkdirs hdfs://10.2.0.104/text</p>
</blockquote>
<p>5.logs 中可以查看日志 查看错误</p>
<blockquote>
<p>cd hadoop-2.7.7/logs/</p>
</blockquote>
<p>6.hadoop 2.* 版本可以网页查看所有namenode datanode</p>
<blockquote>
<p>浏览器输入：10.2.0.104:50070  </p>
</blockquote>
<p>7.停止namenode/datanode</p>
<blockquote>
<p>hdfs stop namenode(datanode)</p>
</blockquote>
<p>8.对地址统一管理：</p>
<blockquote>
<p>hadoop/etc/hadoop/  </p>
<p>编辑workers: vim workers   注意：前面版本名字为slaves  </p>
</blockquote>
<p>9.停止和开始所有hadoop服务：</p>
<blockquote>
<p>sbin/</p>
<p>stop-dfs.sh  停止</p>
</blockquote>
<blockquote>
<p>start-dfs.sh 开始</p>
</blockquote>
<p>10.从集群下载文件</p>
<blockquote>
<p>hdfs dfs -get hdfs://10.0.0.252:9000/data/hadoop-2.7.7.tar.gz ./  下载</p>
</blockquote>
<p>11.实现域名重定向</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#sudo vim &#x2F;etc&#x2F;hosts</span><br><span class="line"></span><br><span class="line">127.0.0.1       localhost</span><br><span class="line">255.255.255.255 broadcasthost</span><br><span class="line">::1             localhost</span><br><span class="line">0.0.0.0 1020104.local  </span><br></pre></td></tr></table></figure>

<p>12.配置Hadoop的主要5个文件</p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">配置文件名</th>
<th align="center">配置对象</th>
<th align="center">主要内容</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">hadoop-env.sh</td>
<td align="center">hadoop运行环境</td>
<td align="center">用来定义hadoop运行环境相关的配置信息</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">core-site.xml</td>
<td align="center">集群全局参数</td>
<td align="center">用于定义系统级别的参数，如HDFS URL 、Hadoop的临时目录等</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">hdfs-site.xml</td>
<td align="center">HDFS</td>
<td align="center">如名称节点和数据节点的存放位置、文件副本的个数、文件的读取权限等</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">mapred-site.xml</td>
<td align="center">Mapreduce参数</td>
<td align="center">包括JobHistory Server 和应用程序参数两部分，如reduce任务的默认个数、任务所能够使用内存的默认上下限等</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">yarn-site.xml</td>
<td align="center">集群资源管理系统参数</td>
<td align="center">配置ResourceManager ，nodeManager的通信端口，web监控端口等</td>
</tr>
</tbody></table>
<h3 id="分布式配置："><a href="#分布式配置：" class="headerlink" title="分布式配置："></a>分布式配置：</h3><h4 id="分配ip"><a href="#分配ip" class="headerlink" title="分配ip"></a>分配ip</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># etc&#x2F;hadoop&#x2F; </span><br><span class="line"># vim workers(或者slaves) </span><br><span class="line"></span><br><span class="line">10.2.0.104      1020104.local     namenode（存储的是文件属性）  datanode</span><br><span class="line">10.2.0.195      Mac-of-Jack.local  datanode （存储文件数据）</span><br><span class="line">10.2.0.166      rimideiMac-5.local  datanode （存储文件数据）</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="yarn-site-xml"><a href="#yarn-site-xml" class="headerlink" title="yarn-site.xml"></a>yarn-site.xml</h4><ol>
<li>重要参数</li>
</ol>
<table>
<thead>
<tr>
<th align="center">No.</th>
<th align="center">参数名</th>
<th align="center">默认值</th>
<th align="center">参数解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">yarn.resourcemanager.address</td>
<td align="center">0.0.0.0:8032</td>
<td align="center">ResourceManager（以下简称RM） 提供客户端访问的地址。客户端通过该地址向RM提交应用程序，杀死应用程序等</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">yarn.resourcemanager.scheduler.address</td>
<td align="center">0.0.0.0:8030</td>
<td align="center">RM提供给ApplicationMaster的访问地址。ApplicationMaster同通过该地址向RM申请资源、释放资源等</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">yarn,resoucemanager.resource.resource-tracker.address</td>
<td align="center">0.0.0.0:8031</td>
<td align="center">RM提供NodeManager的地址。NodeManager通过该地址向RM汇报心跳，领取任务等</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">yarn.resourcemanager.admin.address</td>
<td align="center">0.0.0.0:8033</td>
<td align="center">RM提供管理员的访问地址。管理员通过该地址向RM发送管理命令等</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">yarn.resourcemanager.webapp.address</td>
<td align="center">0.0.0.0:8088</td>
<td align="center">RM对web服务提供地址。用户可通过该地址在浏览器中查看集群各类信息</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">yarn.nodemanager.aux-services</td>
<td align="center"></td>
<td align="center">通过该配置项，用户可以自定义一些服务，例如Map-Reduce的shuffle功能就是采用这种方式实现的，这样就可以在NodeManager上扩展自己的服务</td>
</tr>
</tbody></table>
<blockquote>
<p>注意：不同版本配置可能不同</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#hadoop 3.1</span><br><span class="line">#etc&#x2F;hadoop</span><br><span class="line">#vim yarn-site.xml</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;yarn.scheduler.capacity.root.queues&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;value&gt;a,b,c&lt;&#x2F;value&gt;</span><br><span class="line">  &lt;description&gt;The queues at the this level (root is the root queue).</span><br><span class="line">  &lt;&#x2F;description&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;yarn.scheduler.capacity.root.a.queues&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;value&gt;a1,a2&lt;&#x2F;value&gt;</span><br><span class="line">  &lt;description&gt;The queues at the this level (root is the root queue).</span><br><span class="line">  &lt;&#x2F;description&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;yarn.scheduler.capacity.root.b.queues&lt;&#x2F;name&gt;</span><br><span class="line">  &lt;value&gt;b1,b2,b3&lt;&#x2F;value&gt;</span><br><span class="line">  &lt;description&gt;The queues at the this level (root is the root queue).</span><br><span class="line">  &lt;&#x2F;description&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br><span class="line"></span><br><span class="line">#hadoop 2.7</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;!-- Site specific YARN configuration properties --&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">  			&lt;name&gt;yarn.nodemanager.aux-services&lt;&#x2F;name&gt;</span><br><span class="line">  			&lt;value&gt;mapreduce_shuffle&lt;&#x2F;value&gt;</span><br><span class="line">	&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>mapred-site.xml  </li>
</ol>
<blockquote>
<p>注意hadoop 2.7 需要将 mapre-site.xml.template 重新命名为 mapred-site.xml </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#etc&#x2F;hadoop</span><br><span class="line">#mv mapre-site.xml.template mapred-site.xml </span><br><span class="line">#vim mapred-site.xml</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.framework.name&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;value&gt;yarn&lt;&#x2F;value&gt;&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>mapred-site.xml 重要参数说明</li>
</ol>
<table>
<thead>
<tr>
<th align="center">No.</th>
<th align="center">参数名</th>
<th align="center">默认值</th>
<th align="center">参数解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">mapreduce.framework.name</td>
<td align="center">local</td>
<td align="center">取值local、classic或yarn其中之一，如果不是yarn，则不会使用yarn集群来实现资源的分配</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">mapreduce.jobhistory.address</td>
<td align="center">0.0.0.0:10020</td>
<td align="center">定义历史服务器的地址和端口，通过历史服务器查看已经运行完的Mapreduce作业记录</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">mapreduce.jobhistory.webapp.address</td>
<td align="center">0.0.0.0:19888</td>
<td align="center">定义历史服务器web应用访问的地址和端口</td>
</tr>
</tbody></table>
<ol start="4">
<li>启动资源管理器：</li>
</ol>
<blockquote>
<p>yarn –daemon start resourcemanager </p>
<p>hadoop 2.7版本：sbin/yarn-daemon.sh start resourcemanager</p>
</blockquote>
<h4 id="完整步骤（错误解决-127-99999）"><a href="#完整步骤（错误解决-127-99999）" class="headerlink" title="完整步骤（错误解决/127 99999）"></a>完整步骤（错误解决/127 99999）</h4><p>1.jdk环境变量  </p>
<p>2.Hadoop环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Setting PATH for Python 3.7</span><br><span class="line"># The original version is saved in .bash_profile.pysave</span><br><span class="line">PATH&#x3D;&quot;&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.7&#x2F;bin:$&#123;PATH&#125;&quot;</span><br><span class="line">export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;bin:$PATH</span><br><span class="line">export PATH&#x3D;$PATH:Desktop&#x2F;bs4&#x2F;chrom&#x2F;chromedriver</span><br><span class="line"></span><br><span class="line">export #Setting PATH for hadoop 2.7.7</span><br><span class="line">export HADOOP_HOME&#x3D;&#x2F;Users&#x2F;rimi&#x2F;Desktop&#x2F;hadoop-2.7.7</span><br><span class="line">export PATH&#x3D;$PATH:$HADOOP_HOME&#x2F;bin</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;jdk-12.jdk&#x2F;Contents&#x2F;Home</span><br></pre></td></tr></table></figure>

<p>3.停止所有：sbin/stop-all.sh</p>
<p>4.开始所有：sbin/start-all.sh</p>
<p>5.查看是否存在进程：jps 存在则杀死该进程  kill 6163</p>
<p>6.脚本启动：sbin/hadoop-daemon.sh –script hdfs start namenode(datanode)</p>
<p>7.查看是否启动：jps</p>
<p>8.开启resourcemanager:sbin/yarn-daemon.sh start resourcemanager(nodemanager) 重复7</p>
<p>9.hdfs dfs -mkdirs hdfs://10.2.0.104/text hdfs创建文件</p>
<p>10.推送数据到hdfs：hdfs dfs -put 本地路径 上传路径</p>
<p>11.hdfs dfs -ls hdfs://10.2.0.104/</p>
<p>12.执行某一个分析 </p>
<blockquote>
<p>hadoop jar $HADOOP_HOME/share/hadoop/tools/lib/hadoop-streaming-2.7.7.jar -input hdfs://10.2.0.104/mewas/data.txt -mapper ~/Desktop/mewas/map.py -reducer ~/Desktop/mevas/reduce.py  -output /data-output</p>
</blockquote>
<blockquote>
<p>出现错误： builtin-java classes where applicable </p>
<p>解释：文件必须是可执行的 并且数据在hdfs中存在(ls -l查看文件权限)</p>
<p>解决：本地检查map运行是否正确：运行： cat data.txt | python ./map.py </p>
<p>在.py中加入注释：#!/usr/bin/env python  表面这是一个python文件使用python编码解释器</p>
</blockquote>
<p>13.数据处理方法编写：map/reduce (详细请看 :  <a href="https://hadoop.apache.org/docs/stable/hadoop-mapreduce-client/hadoop-mapreduce-client-core/MapReduceTutorial.html">MapReduce Tutorial</a>)</p>
<p>14.若运行过12则需要删除output再重新运行：</p>
<blockquote>
<p>hdfs dfs -rm -r /data-output</p>
<p>hadoop jar $HADOOP_HOME/share/hadoop/tools/lib/hadoop-streaming-2.7.7.jar -input hdfs://10.2.0.104/mewas/data.txt -mapper ~/Desktop/mewas/map.py -reducer ~/Desktop/mevas/reduce.py  -output /data-output</p>
</blockquote>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>数据存储</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>数据分析02--spark错误分析</title>
    <url>/jwangcloud/3907582757/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/date.jpeg" width="1000" height="300" align="middle">

<h2 id="spark错误分析"><a href="#spark错误分析" class="headerlink" title="spark错误分析"></a>spark错误分析</h2><span id="more"></span>


<p><a href="http://spark.apache.org/docs/2.4.4/">官方文档</a></p>
<p>错误1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1020104:sbin rimi$ .&#x2F;start-master.sh </span><br><span class="line">starting org.apache.spark.deploy.master.Master, logging to &#x2F;Users&#x2F;rimi&#x2F;Desktop&#x2F;spark-2.4.4-bin-hadoop2.7&#x2F;</span><br><span class="line">logs&#x2F;spark-rimi-org.apache.spark.deploy.master.Master-1-1020104.local.out</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>解决：本地ip未找到，添加</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#sudo vim &#x2F;etc&#x2F;hosts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1       localhost</span><br><span class="line">255.255.255.255 broadcasthost</span><br><span class="line">::1             localhost</span><br><span class="line">0.0.0.0 1020104.local   (这一个没有)</span><br></pre></td></tr></table></figure>

<p>错误2</p>
<blockquote>
<p>spark 与 jdk 不兼容  </p>
</blockquote>
<p>解决：</p>
<blockquote>
<p>下载saprk2.7 或者更加稳定版本  jdk下载1.8  8u231</p>
<p>重新配置jdk环境</p>
</blockquote>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机基础01--计算机硬件</title>
    <url>/jwangcloud/1575270746/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/computer.jpeg" width="1000" height="300" align="middle">


<h3 id="计算机硬件概述"><a href="#计算机硬件概述" class="headerlink" title="计算机硬件概述"></a>计算机硬件概述</h3><span id="more"></span>

<p>1.构成：内存、显卡、主板、硬盘、CPU</p>
<p>2.单位换算：1PB = 1024TB 1TB = 1024GB 1GB = 1024MB 1MB =             1024KB 1KB = 1024B 1B = 8b</p>
<p>3.软件与硬件：</p>
<pre><code>（1） 主板：属于集成其他硬件的基石 DDR4 DDR3等
（2） 显卡（GPU）:直接插在主板之上，用于图形处理 PCI-E插槽
（3） 内存：存储CPU所传输的信息（运算数据）与硬盘进行数据交换
（4） CPU：中央处理器，一个超大规模的集成电路、属于运算核心和控制核心
（5） 硬盘：存储内存中的传输信息，可以恢复（包含磁头、磁道、扇区、柱面）HDD SSD。
</code></pre>
<h3 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h3><p>1.python：编译与运行是同步进行，JAVA：先编译整体再运行，更稳定</p>
<p>2.编译器：将高级语言（python、Java c语言等）翻译成底层语言（机器汇编语言）</p>
<p>3.存储方式：机械硬盘：磁极确定01 固态硬盘：电信号（电压确定01）</p>
<p>4.数据传输方式：</p>
<pre><code>CPU --&gt;（写入） 内存 --&gt;（写入） 硬盘
    &lt;-- (读取)     &lt;-- （读取）
| -------    主板     ------|
</code></pre>
<p>5.SATA线：串行高级技术附件</p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>计算机硬件</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构02--从数据结构到Java常用集合</title>
    <url>/jwangcloud/2612458690/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="从数据结构到Java常用集合"><a href="#从数据结构到Java常用集合" class="headerlink" title="从数据结构到Java常用集合"></a>从数据结构到Java常用集合</h1><p>​    数据结构想必大家都不会陌生，对于一个成熟的程序员而言，熟悉和掌握数据结构和算法也是基本功之一。数据结构本身其实不过是数据按照特点关系进行存储或者组织的集合，特殊的结构在不同的应用场景中往往会带来不一样的处理效率。</p>
<p>​    常用的数据结构可根据数据访问的特点分为<strong>线性结构</strong>和<strong>非线性结构</strong>。线性结构包括常见的链表、栈、队列等，非线性结构包括<strong>树</strong>、<strong>图</strong>等。数据结构种类繁多，本篇内容将通过图解的方式对常用的数据结构以及在java中的实现进行介绍和讲解，以方便大家更深入的掌握常用数据结构和集合的基本知识。</p>
<p><strong>数据结构组织图</strong></p>
<p><img data-src="https://img-blog.csdnimg.cn/20200526095818285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlZXdvcmtzaG9w,size_16,color_FFFFFF,t_70" alt="å¨è¿éæå¥å¾çæè¿°"> </p>
<p><strong>Java集合组织图</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/999804-20170918091025493-1734810124.png" alt="img"> </p>
<h1 id="1-数组"><a href="#1-数组" class="headerlink" title="1 数组"></a>1 数组</h1><p>​    数组可以说是最基本最常见的数据结构。数组一般用来存储相同类型的数据，可通过数组名和下标进行数据的访问和更新。数组中元素的存储是按照先后顺序进行的，同时，在内存中也是按照这个顺序进行连续存放。数组相邻元素之间的内存地址的间隔一般就是数组数据类型的大小。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200811092114529.png" alt="image-20200811092114529"></p>
<h2 id="1-1-ArrayList概述"><a href="#1-1-ArrayList概述" class="headerlink" title="1.1 ArrayList概述"></a>1.1 ArrayList概述</h2><p>　　1）ArrayList是可以动态增长和缩减的索引序列，它<strong>是基于数组实现</strong>的List类。</p>
<p>　　2）该类封装了一个动态再分配的Object[]数组，每一个类对象都有一个capacity属性，表示它们所封装的Object[]数组的长度，当向ArrayList中添加元素时，该属性值会自动增加。</p>
<p>　　3）ArrayList的用法和Vector向类似，但是Vector是一个较老的集合，具有很多缺点，不建议使用。</p>
<p>　　　　另外，ArrayList和Vector的区别是：ArrayList是线程不安全的，当多条线程访问同一个ArrayList集合时，程序需要手动保证该集合的同步性，而Vector则是线程安全的。</p>
<p>　　4）ArrayList和Collection的关系：</p>
<p>　　　　　　<img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/999804-20171018145151287-1709338098.png" alt="img"></p>
<h2 id="1-2-ArrayList的数据结构"><a href="#1-2-ArrayList的数据结构" class="headerlink" title="1.2 ArrayList的数据结构"></a>1.2 ArrayList的数据结构</h2><p>​    分析一个类的时候，数据结构往往是它的灵魂所在，理解底层的数据结构其实就理解了该类的实现思路，具体的实现细节再具体分析。</p>
<p>　　ArrayList的数据结构是：</p>
<p>　　　　<img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/999804-20171018145259474-886553593.png" alt="img"></p>
<p>​    说明：底层的数据结构就是数组，数组元素类型为Object类型，即可以存放所有类型数据。我们对ArrayList类的实例的所有的操作底层都是基于数组的。</p>
<h2 id="1-3-ArrayList源码分析"><a href="#1-3-ArrayList源码分析" class="headerlink" title="1.3 ArrayList源码分析"></a>1.3 ArrayList源码分析</h2><h3 id="1-3-1、继承结构和层次关系"><a href="#1-3-1、继承结构和层次关系" class="headerlink" title="1.3.1、继承结构和层次关系"></a>1.3.1、继承结构和层次关系</h3><p>　　<img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/999804-20171018145449709-655616177.png" alt="img"></p>
<p>　　<img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/999804-20171018145519068-1615466435.png" alt="img"></p>
<p>　　我们看一下ArrayList的继承结构：</p>
<p>　　　ArrayList extends AbstractList</p>
<p>　　　AbstractList extends AbstractCollection </p>
<p>　　所有类都继承Object 所以ArrayList的继承结构就是上图这样。</p>
<p>分析：</p>
<p>　1）为什么要先继承AbstractList，而让AbstractList先实现List<E>？而不是让ArrayList直接实现List<E>？</E></E></p>
<p>​        这里是有一个思想，接口中全都是抽象的方法，而抽象类中可以有抽象方法，还可以有具体的实现方法，正是利用了这一点，让AbstractList实现接口中一些通用的方法，而具体的类，如ArrayList就继承这个AbstractList类，拿到一些通用的方法，然后自己在实现一些自己特有的方法，这样一来，让代码更简洁，就继承结构最底层的类中通用的方法都抽取出来，先一起实现了，减少重复代码。所以一般看到一个类上面还有一个抽象类，应该就是这个作用。</p>
<h3 id="1-3-2、类中的属性"><a href="#1-3-2、类中的属性" class="headerlink" title="1.3.2、类中的属性"></a>1.3.2、类中的属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 版本号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8683452581122892189L</span>;</span><br><span class="line">    <span class="comment">// 缺省容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 空对象数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line">    <span class="comment">// 缺省空对象数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line">    <span class="comment">// 元素数组</span></span><br><span class="line">    <span class="keyword">transient</span> Object[] elementData;</span><br><span class="line">    <span class="comment">// 实际元素大小，默认为0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="comment">// 最大数组容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-3、构造方法"><a href="#1-3-3、构造方法" class="headerlink" title="1.3.3、构造方法"></a>1.3.3、构造方法</h3><p>　　ArrayList有三个构造方法：</p>
<p>　　　　<img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/999804-20171018150642912-329826692.png" alt="img"></p>
<p>　　1）无参构造方法　　</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Constructs an empty list with an initial capacity of ten.　　这里就说明了默认会给10的大小，所以说一开始arrayList的容量是10.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="comment">//ArrayList中储存数据的其实就是一个数组，这个数组就是elementData，在123行定义的 private transient Object[] elementData;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;　　</span><br><span class="line">    <span class="keyword">super</span>();        <span class="comment">//调用父类中的无参构造方法，父类中的是个空的构造方法</span></span><br><span class="line">    <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;<span class="comment">//EMPTY_ELEMENTDATA：是个空的Object[]， 将elementData初始化，elementData也是个Object[]类型。空的Object[]会给默认大小10，等会会解释什么时候赋值的。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>备注：</p>
<p>　　　　　　<img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/999804-20171018151107834-18136797.png" alt="img"></p>
<p>　　　　　　<img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/999804-20171018151047193-1603738126.png" alt="img"></p>
<p>2）有参构造函数一</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an empty list with the specified initial capacity.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  initialCapacity  the initial capacity of the list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if the specified initial capacity</span></span><br><span class="line"><span class="comment">     *         is negative</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(); <span class="comment">//父类中空的构造方法</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)    <span class="comment">//判断如果自定义大小的容量小于0，则报下面这个非法数据异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity]; <span class="comment">//将自定义的容量大小当成初始化elementData的大小</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　总结：arrayList的构造方法就做一件事情，就是初始化一下储存数据的容器，其实本质上就是一个数组，在其中就叫elementData。</p>
<h3 id="1-3-4、核心方法"><a href="#1-3-4、核心方法" class="headerlink" title="1.3.4、核心方法"></a>1.3.4、核心方法</h3><h4 id="1、add-方法"><a href="#1、add-方法" class="headerlink" title="1、add()方法"></a>1、add()方法</h4><p>　　　　<img data-src="https://images2017.cnblogs.com/blog/999804/201710/999804-20171018162356787-2047160796.png" alt="img"></p>
<p>1）boolean add(E)；//默认直接在末尾添加元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 把元素添加到集合的末尾</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//确定数组容量是否足够，size是数据个数，所以+1. </span></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>); </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在数组中正确的位置上添加元素e，并size++</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ensureCapacityInternal(xxx);</strong>　确定内部容量的方法　　</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用于确定数组容量</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断初始化elementdata是否为一个空数组</span></span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果是，相当于是空数组没有长度，则获取“默认的容量”和“传入参数”两者之间的最大值</span></span><br><span class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//确认实际的容量，判断是否需要进行扩容操作</span></span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ensureExplicitCapacity(xxx)；</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断是否需要扩容</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//记录修改次数</span></span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果最小大小 减 数组长度 大于0 -&gt; 进行数组扩容</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//实际进入扩容机制</span></span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>grow(xxx); arrayList核心的方法，能扩展数组大小的真正秘密。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* ArrayList扩容的核心方法。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// oldCapacity为旧容量，newCapacity为新容量</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将扩充前的elementData大小给oldCapacity</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//将oldCapacity 右移一位，其效果相当于oldCapacity/2</span></span><br><span class="line">    <span class="comment">//newCapacity就是1.5倍的oldCapacity</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//检查新容量是否大于最小需要容量，若小于最小需要容量，那么就把最小需要容量当作数组的新容量</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查新容量是否超出了ArrayList所定义的最大容量，</span></span><br><span class="line"><span class="comment">     * 若超出了，则调用hugeCapacity()来比较minCapacity和 MAX_ARRAY_SIZE，</span></span><br><span class="line"><span class="comment">     * 如果minCapacity大于MAX_ARRAY_SIZE，则新容量则为Interger.MAX_VALUE，否则，新容量大小则为 MAX_ARRAY_SIZE。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//比较minCapacity和 MAX_ARRAY_SIZE</span></span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//新的容量大小已经确定好了，就copy数组，改变容量大小</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>hugeCapacity();</strong>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个就是上面用到的方法，很简单，就是用来赋最大值。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">    <span class="comment">//如果minCapacity都大于MAX_ARRAY_SIZE，那么就Integer.MAX_VALUE返回，反之将MAX_ARRAY_SIZE返回</span></span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line">    MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2）void add(int，E)；在特定位置添加元素，也就是插入元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 在此列表中的指定位置插入指定的元素。 </span></span><br><span class="line"><span class="comment">*先调用 rangeCheckForAdd 对index进行界限检查；然后调用 ensureCapacityInternal 方法保证capacity足够大；</span></span><br><span class="line"><span class="comment">*再将从index开始之后的所有成员后移一个位置；将element插入index位置；最后size加1。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//arraycopy()这个实现数组之间复制的方法一定要看一下，下面就用到了arraycopy()方法实现数组自己复制自己</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>rangeCheckForAdd(index)　　</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)   <span class="comment">//插入的位置肯定不能大于size 和小于0</span></span><br><span class="line"><span class="comment">//如果是，就报这个越界异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong>：</p>
<p>　正常情况下会扩容1.5倍，特殊情况下（新扩展数组大小已经达到了最大值）则只取最大值。</p>
<p>　当我们调用add方法时，实际上的函数调用如下：</p>
<p>　　　　　　<img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/999804-20171018160516646-1985692158.png" alt="img"></p>
<p>说明：程序调用add，实际上还会进行一系列调用，可能会调用到grow，grow 会调用hugeCapacity。</p>
<h4 id="2、remove-方法"><a href="#2、remove-方法" class="headerlink" title="2、remove()方法"></a>2、remove()方法</h4><p>　其实这几个删除方法都是类似的。我们选择几个讲，其中fastRemove(int)方法是private的，是提供给remove(Object)这个方法用的。</p>
<p>　　　　<img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/999804-20171018154558896-1270971770.png" alt="img"><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/999804-20171018154624115-1149460965.png" alt="img"></p>
<p><strong>1）remove(int)：</strong>删除指定位置上的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);<span class="comment">//检查index的合理性</span></span><br><span class="line"></span><br><span class="line">    modCount++;<span class="comment">//增加修改次数</span></span><br><span class="line">    E oldValue = elementData(index);<span class="comment">//通过索引直接找到该元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;<span class="comment">//计算要移动的位数。</span></span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//这个方法也已经解释过了，就是用来移动元素的。</span></span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    <span class="comment">//将--size上的位置赋值为null，让gc(垃圾回收机制)更快的回收它。</span></span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">    <span class="comment">//返回删除的元素。</span></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2）remove(Object)：</strong>这个方法可以看出来，arrayList是可以存放null值得。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过元素来删除该元素，就依次遍历，如果有这个元素，就将该元素的索引传给fastRemobe(index)，使用这个方法来删除该元素，</span></span><br><span class="line"><span class="comment">//fastRemove(index)方法的内部跟remove(index)的实现几乎一样，这里最主要是知道arrayList可以存储null值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200811141939777.png" alt="image-20200811141939777"></p>
<p><strong>3）clear()：</strong>将elementData中每个元素都赋值为null，等待垃圾回收将这个给回收掉，所以叫clear</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// clear to let GC do its work</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        elementData[i] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    总结：：remove函数用户移除指定下标的元素，此时会把指定下标到数组末尾的元素向前移动一个单位，并且会把数组最后一个元素设置为null，这样是为了方便之后将整个数组不被使用时，会被GC，可以作为小的技巧使用。</p>
<h4 id="3、set-方法"><a href="#3、set-方法" class="headerlink" title="3、set()方法"></a>3、set()方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 检验索引是否合法</span></span><br><span class="line">    rangeCheck(index);</span><br><span class="line">    <span class="comment">// 旧值</span></span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line">    <span class="comment">// 赋新值</span></span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    <span class="comment">// 返回旧值</span></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：设定指定下标索引的元素值</p>
<h4 id="4、indexOf-方法"><a href="#4、indexOf-方法" class="headerlink" title="4、indexOf()方法"></a>4、indexOf()方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从首开始查找数组里面是否存在指定元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123; <span class="comment">// 查找的元素为空</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) <span class="comment">// 遍历数组，找到第一个为空的元素，返回下标</span></span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 查找的元素不为空</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) <span class="comment">// 遍历数组，找到第一个和指定元素相等的元素，返回下标</span></span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 没有找到，返回空</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：从头开始查找与指定元素相等的元素，注意，是可以查找null元素的，意味着ArrayList中可以存放null元素的。与此函数对应的lastIndexOf，表示从尾部开始查找。</p>
<h4 id="5、get-方法"><a href="#5、get-方法" class="headerlink" title="5、get()方法"></a>5、get()方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 检验索引是否合法</span></span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> elementData(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　说明：get函数会检查索引值是否合法（只检查是否大于size，而没有检查是否小于0），值得注意的是，在get函数中存在element函数，element函数用于返回具体的元素，具体函数如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">E <span class="title">elementData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　说明：返回的值都经过了向下转型（Object -&gt; E），这些是对我们应用程序屏蔽的小细节。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1）arrayList可以存放null。<br>2）arrayList本质上就是一个elementData数组。<br>3）arrayList区别于数组的地方在于能够自动扩展大小，其中关键的方法就是grow()方法。<br>4）arrayList中removeAll(collection c)和clear()的区别就是removeAll可以删除批量指定的元素，而clear是全删除集合中的元素。<br>5）arrayList由于本质是数组，所以它在数据的查询方面会很快，而在插入删除这些方面，性能下降很多，有移动很多数据才能达到应有的效果<br>6）arrayList实现了RandomAccess，所以在遍历它的时候推荐使用for循环。</p>
<h1 id="2-链表"><a href="#2-链表" class="headerlink" title="2 链表"></a>2 链表</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h2><p>​    链表相较于数组，除了数据域，还增加了指针域用于构建链式的存储数据。链表中每一个节点都包含此节点的数据和指向下一节点地址的指针。由于是通过指针进行下一个数据元素的查找和访问，使得链表的自由度更高。</p>
<p>​    当对节点进行增加和删除时，只需要对上一节点的指针地址进行修改，而无需变动其它的节点。不过事物皆有两极，指针带来高自由度的同时，自然会牺牲数据查找的效率和多余空间的使用。</p>
<p>​    一般常见的是有头有尾的单链表，对指针域进行反向链接，还可以形成双向链表或者循环链表。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200811143924271.png" alt="image-20200811143924271"></p>
<p><strong>链表类型</strong></p>
<p>1.1）单向链表：</p>
<p>　element：用来存放元素</p>
<p>　next：用来指向下一个节点元素</p>
<p>　通过每个结点的指针指向下一个结点从而链接起来的结构，最后一个节点的next指向null。</p>
<p>　　　　　　<img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/999804-20171018163705615-546509635.png" alt="img"></p>
<p>1.2）单向循环链表</p>
<p>　element、next 跟前面一样</p>
<p>　在单向链表的最后一个节点的next会指向头节点，而不是指向null，这样存成一个环</p>
<p>　　　　　　<img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/999804-20171018163849318-946854643.png" alt="img"></p>
<p>1.3）双向链表</p>
<p>　element：存放元素</p>
<p>　pre：用来指向前一个元素</p>
<p>　next：指向后一个元素</p>
<p>　双向链表是包含两个指针的，pre指向前一个节点，next指向后一个节点，但是第一个节点head的pre指向null，最后一个节点的tail指向null。</p>
<p>　　　　　　<img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/999804-20171018164025990-1035906814.png" alt="img"></p>
<p>1.4）双向循环链表</p>
<p>　element、pre、next 跟前面的一样</p>
<p>　第一个节点的pre指向最后一个节点，最后一个节点的next指向第一个节点，也形成一个“环”。</p>
<p>　　　　　　<img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/999804-20171018164246521-25397602.png" alt="img"></p>
<p><strong>链表和数组对比</strong></p>
<p>​    链表和数组在实际的使用过程中需要根据自身的优劣势进行选择。链表和数组的异同点也是面试中高频的考察点之一。这里对单链表和数组的区别进行了对比和总结。</p>
<table>
<thead>
<tr>
<th></th>
<th>数组</th>
<th>链表</th>
</tr>
</thead>
<tbody><tr>
<td>内存地址</td>
<td>连续的内存空间</td>
<td>非连续的内存空间</td>
</tr>
<tr>
<td>数据长度</td>
<td>长度固定，一般不可动态扩容</td>
<td>长度可动态变化</td>
</tr>
<tr>
<td>增删效率</td>
<td>低，需要移动被修改元素之后的所有元素</td>
<td>高，只需要修改指针指向</td>
</tr>
<tr>
<td>查询效率</td>
<td>高，可用过数组名和下标直接访问</td>
<td>低，只能通过遍历节点依次查询</td>
</tr>
<tr>
<td>数据访问方式</td>
<td>随机访问</td>
<td>顺序访问</td>
</tr>
</tbody></table>
<h2 id="2-2-LinkedList"><a href="#2-2-LinkedList" class="headerlink" title="2.2 LinkedList"></a>2.2 LinkedList</h2><h3 id="2-2-1-概述"><a href="#2-2-1-概述" class="headerlink" title="2.2.1 概述"></a>2.2.1 概述</h3><p>　　<img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/999804-20171018185451506-2136799134.png" alt="img"></p>
<ul>
<li>是一种可以在任何位置进行高效地插入和移除操作的<strong>有序序列</strong>，它是基于<strong>双向链表</strong>实现的。</li>
<li>是一个继承于AbstractSequentialList的双向链表。它也可以被当作堆栈、队列或双端队列进行操作。</li>
<li>实现 List 接口，能对它进行队列操作。</li>
<li>实现 Deque 接口，即能将LinkedList当作双端队列使用。</li>
<li>实现了Cloneable接口，即覆盖了函数clone()，能克隆。</li>
<li>实现java.io.Serializable接口，这意味着LinkedList支持序列化，能通过序列化去传输。</li>
<li>是非同步，线程不安全的。</li>
</ul>
<h3 id="2-2-2-数据结构"><a href="#2-2-2-数据结构" class="headerlink" title="2.2.2 数据结构"></a>2.2.2 数据结构</h3><p>　　　　<img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/999804-20171018164511396-1020210450.png" alt="img"></p>
<p>​    如上图所示，LinkedList底层使用的双向链表结构，有一个头结点和一个尾结点，双向链表意味着我们可以从头开始正向遍历，或者是从尾开始逆向遍历，并且可以针对头部和尾部进行相应的操作。</p>
<h3 id="2-2-3-特性"><a href="#2-2-3-特性" class="headerlink" title="2.2.3 特性"></a>2.2.3 特性</h3><p>　1）异步，也就是非线程安全</p>
<p>　2）双向链表。由于实现了list和Deque接口，能够当作队列来使用。</p>
<p>　　链表：查询效率不高，但是插入和删除这种操作性能好。</p>
<p>　3）是顺序存取结构</p>
<h3 id="2-2-4-源码分析"><a href="#2-2-4-源码分析" class="headerlink" title="2.2.4 源码分析"></a>2.2.4 源码分析</h3><h4 id="2-2-4-1-类的属性"><a href="#2-2-4-1-类的属性" class="headerlink" title="2.2.4.1 类的属性"></a>2.2.4.1 类的属性</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实际元素个数，链表长度</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头结点</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尾结点</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</span><br></pre></td></tr></table></figure>

<p>　　LinkedList的属性非常简单，一个头结点、一个尾结点、一个表示链表中实际元素个数的变量。</p>
<h4 id="2-2-4-2-构造方法"><a href="#2-2-4-2-构造方法" class="headerlink" title="2.2.4.2 构造方法"></a>2.2.4.2 构造方法</h4><p>两个构造方法(两个构造方法都是规范规定需要写的）</p>
<p>1）空参构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Constructs an empty list.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2）有参构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将集合c中的各个元素构建成LinkedList链表。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用无参构造函数</span></span><br><span class="line">    <span class="keyword">this</span>();</span><br><span class="line">    <span class="comment">// 添加集合中所有的元素</span></span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：会调用无参构造函数，并且会把集合中所有的元素添加到LinkedList中。　　　</p>
<h5 id="2-2-4-2-1-内部类（Node）"><a href="#2-2-4-2-1-内部类（Node）" class="headerlink" title="2.2.4.2.1 内部类（Node）"></a>2.2.4.2.1 内部类（Node）</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据前面介绍双向链表就知道这个代表什么了，linkedList的奥秘就在这里。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E item; <span class="comment">// 数据域（当前节点的值）</span></span><br><span class="line">    Node&lt;E&gt; next; <span class="comment">// 后继（指向当前一个节点的后一个节点）</span></span><br><span class="line">    Node&lt;E&gt; prev; <span class="comment">// 前驱（指向当前节点的前一个节点）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数，赋值前驱后继</span></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：内部类Node就是实际的结点，用于存放实际元素的地方。　　　　　</p>
<h5 id="2-2-4-2-2-核心方法"><a href="#2-2-4-2-2-核心方法" class="headerlink" title="2.2.4.2.2 核心方法"></a>2.2.4.2.2 核心方法</h5><h6 id="1-add-方法"><a href="#1-add-方法" class="headerlink" title="1 add()方法"></a>1 add()方法</h6><p>　　　　<img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/999804-20171018180421865-139109156.png" alt="img"></p>
<p>1）add(E)</p>
<p>说明：add函数用于向LinkedList中添加一个元素，并且添加到链表尾部。具体添加到尾部的逻辑是由linkLast函数完成的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 添加到末尾</span></span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LinkLast()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Links e as last element.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;    <span class="comment">//临时节点l(L的小写)保存last，也就是l指向了最后一个节点</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);<span class="comment">//将e封装为节点，并且e.prev指向了最后一个节点</span></span><br><span class="line">    last = newNode;<span class="comment">//newNode成为了最后一个节点，所以last指向了它</span></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)    <span class="comment">//判断是不是一开始链表中就什么都没有，如果没有，则newNode就成为了第一个节点，first和last都要指向它</span></span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span>    <span class="comment">//正常的在最后一个节点后追加，那么原先的最后一个节点的next就要指向现在真正的最后一个节点，原先的最后一个节点就变成了倒数第二个节点</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;<span class="comment">//添加一个节点，size自增</span></span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; lists = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">lists.add(<span class="string">&quot;e1&quot;</span>);</span><br><span class="line">lists.add(<span class="string">&quot;e2&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>一开始，first和last都为null，此时链表什么都没有，当第一次调用该方法后，first和last均指向了第一个新加的节点E1：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200811160819443.png" alt="image-20200811160819443"></p>
<p>第二次调用该方法，加入新节点E2。首先，将last引用赋值给l，接着new了一个新节点E2，并且E2的prve指向l，接着将新节点E2赋值为last</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200811161146898.png" alt="image-20200811161146898"></p>
<p>接着判断l==null? 所以走的else语句，将l的next引用指向新节点E2</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200811161204522.png" alt="image-20200811161204522"></p>
<p>最后，size+1，modCount+1，退出该方法，局部变量l销毁</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200811161244413.png" alt="image-20200811161244413"></p>
<h6 id="2-remove-Object-o"><a href="#2-remove-Object-o" class="headerlink" title="2 remove(Object o)"></a>2 remove(Object o)</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先通过看上面的注释，我们可以知道，如果我们要移除的值在链表中存在多个一样的值，那么我们会移除index最小的那个，也就是最先找到的那个值，如果不存在这个值，那么什么也不做</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里可以看到，linkedList也能存储null</span></span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//循环遍历链表，直到找到null值，然后使用unlink移除该值。下面的这个else中也一样</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x.item == <span class="keyword">null</span>) &#123;</span><br><span class="line">                unlink(x);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                unlink(x);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>unlink(xxxx)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Unlinks non-null node x.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//不能传一个null值过，注意，看之前要注意之前的next、prev这些都是谁。</span></span><br><span class="line">    <span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// assert x != null;</span></span><br><span class="line"><span class="comment">//拿到节点x的三个属性</span></span><br><span class="line">        <span class="keyword">final</span> E element = x.item;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里开始往下就进行移除该元素之后的操作，也就是把指向哪个节点搞定。</span></span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//说明移除的节点是头节点，则first头节点应该指向下一个节点</span></span><br><span class="line">            first = next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//不是头节点，prev.next=next：有1、2、3，将1.next指向3</span></span><br><span class="line">            prev.next = next;</span><br><span class="line"><span class="comment">//然后解除x节点的前指向。</span></span><br><span class="line">            x.prev = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//说明移除的节点是尾节点</span></span><br><span class="line">            last = prev;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//不是尾节点，有1、2、3，将3.prev指向1. 然后将2.next=解除指向。</span></span><br><span class="line">            next.prev = prev;</span><br><span class="line">            x.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//x的前后指向都为null了，也把item为null，让gc回收它</span></span><br><span class="line">        x.item = <span class="keyword">null</span>;</span><br><span class="line">        size--;    <span class="comment">//移除一个节点，size自减</span></span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> element;    <span class="comment">//由于一开始已经保存了x的值到element，所以返回。</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h6 id="3-get-index"><a href="#3-get-index" class="headerlink" title="3 get(index)"></a>3 get(index)</h6><p>get(index)查询元素的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the element at the specified position in this list.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index index of the element to return</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the element at the specified position in this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//这里没有什么，重点还是在node(index)中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="keyword">return</span> node(index).item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>node(index)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the (non-null) Node at the specified element index.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//这里查询使用的是先从中间分一半查找</span></span><br><span class="line">    <span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line"><span class="comment">//&quot;&lt;&lt;&quot;:*2的几次方 “&gt;&gt;”:/2的几次方，例如：size&lt;&lt;1：size*2的1次方，</span></span><br><span class="line"><span class="comment">//这个if中就是查询前半部分</span></span><br><span class="line">         <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;<span class="comment">//index&lt;size/2</span></span><br><span class="line">            Node&lt;E&gt; x = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">                x = x.next;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//前半部分没找到，所以找后半部分</span></span><br><span class="line">            Node&lt;E&gt; x = last;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">                x = x.prev;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h6 id="4-indexOf-Object-o"><a href="#4-indexOf-Object-o" class="headerlink" title="4 indexOf(Object o)"></a>4 indexOf(Object o)</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个很简单，就是通过实体元素来查找到该元素在链表中的位置。跟remove中的代码类似，只是返回类型不一样。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x.item == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (o.equals(x.item))</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>　　1）linkedList本质上是一个<strong>双向链表</strong>，通过一个Node内部类实现的这种链表结构。<br>　　2）能存储null值<br>　　3）跟arrayList相比较，就真正的知道了，LinkedList在删除和增加等操作上性能好，而ArrayList在查询的性能上好<br>　　4）从源码中看，它不存在容量不足的情况<br>　　5）linkedList不光能够向前迭代，还能像后迭代，并且在迭代的过程中，可以修改值、添加值、还能移除值。<br>　　6）linkedList不光能当链表，还能当队列使用，这个就是因为实现了Deque接口。</p>
<h1 id="3-栈"><a href="#3-栈" class="headerlink" title="3 栈"></a>3 栈</h1><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><p>​    栈是一种比较简单的数据结构，常用一句话描述其特性，<strong>后进先出</strong>。栈本身是一个线性表，但是在这个表中只有一个口子允许数据的进出。这种模式可以参考腔肠动物…即进食和排泄都用一个口…</p>
<p>​    栈的常用操作包括<strong>入栈push</strong>和<strong>出栈pop</strong>，对应于数据的压入和压出。还有访问栈顶数据、判断栈是否为空和判断栈的大小等。由于栈后进先出的特性，常可以作为数据操作的临时容器，对数据的顺序进行调控，与其它数据结构相结合可获得许多灵活的处理。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/20200526101351156.gif" alt="在这里插入图片描述"></p>
<h2 id="3-2-Stack"><a href="#3-2-Stack" class="headerlink" title="3.2 Stack"></a>3.2 Stack</h2><p>​    Stack是栈。它的特性是：先进后出(FILO, First In Last Out)。java工具包中的Stack是继承于Vector(矢量队列)的，由于Vector是通过数组实现的，这就意味着，Stack也是通过数组实现的，而非链表。当然，我们也可以将LinkedList当作栈来使用。Stack的继承关系</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200620035809710.png" alt="image-20200620035809710"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 版本ID。这个用于版本升级控制，这里不须理会！</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1224463164541339165L</span>;</span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// push函数：将元素存入栈顶</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">push</span><span class="params">(E item)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将元素存入栈顶。</span></span><br><span class="line">    <span class="comment">// addElement()的实现在Vector.java中</span></span><br><span class="line">    addElement(item);</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pop函数：返回栈顶元素，并将其从栈中删除</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    E   obj;</span><br><span class="line">    <span class="keyword">int</span>  len = size();</span><br><span class="line">    obj = peek();</span><br><span class="line">    <span class="comment">// 删除栈顶元素，removeElementAt()的实现在Vector.java中</span></span><br><span class="line">    removeElementAt(len - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// peek函数：返回栈顶元素，不执行删除操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>  len = size();</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">    <span class="comment">// 返回栈顶元素，elementAt()具体实现在Vector.java中</span></span><br><span class="line">    <span class="keyword">return</span> elementAt(len - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找“元素o”在栈中的位置：由栈底向栈顶方向数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取元素索引，elementAt()具体实现在Vector.java中</span></span><br><span class="line">    <span class="keyword">int</span> i = lastIndexOf(o);</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> size() - i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-队列"><a href="#4-队列" class="headerlink" title="4 队列"></a>4 队列</h1><p>​    队列是栈的兄弟结构，与栈的后进先出相对应，队列是一种先进先出的数据结构。顾名思义，队列的数据存储是如同排队一般，先存入的数据先被压出。常与栈一同配合，可发挥最大的实力。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/20200526101424265.gif" alt="在这里插入图片描述"></p>
<h1 id="5-树"><a href="#5-树" class="headerlink" title="5 树"></a>5 树</h1><h2 id="5-1-树的基本概念"><a href="#5-1-树的基本概念" class="headerlink" title="5.1 树的基本概念"></a>5.1 树的基本概念</h2><p>​    树是数据结构中非常重要的一个存在。在Java中对树进行了大量的使用，如TreeMap、HashMap等。并且如MySQL、MongoDB也都使用到了树。 那么树到底是什么呢？</p>
<p>​    树是由N个节点组成的，每个节点中都会进行数据的存储。当N=0时，被称为空树。在任何一颗树中，有且只有一个根节点，在根节点下可以继续进行扩展，形成互不相交的集合。其中每个集合本身又可以理解为是一颗树，他们则被称为子树。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200811181101295.png" alt="image-20200811181101295"></p>
<table>
<thead>
<tr>
<th>节点</th>
<th>树中的元素</th>
</tr>
</thead>
<tbody><tr>
<td>节点的度</td>
<td>节点拥有子树的个数，二叉树的度不能大于2</td>
</tr>
<tr>
<td>高度</td>
<td>叶子节点的高度为1，叶子节点的父节点高度为2，依次类推。</td>
</tr>
<tr>
<td>根节点</td>
<td>树的顶部节点。</td>
</tr>
<tr>
<td>子节点</td>
<td>父节点的下层节点。</td>
</tr>
<tr>
<td>叶子节点</td>
<td>没有子节点的节点，也被称为终端节点、度为0的节点。</td>
</tr>
</tbody></table>
<p>​    树的种类也非常的多：二叉树、平衡二叉树、红黑树、B树、B+树、哈夫曼树、B*树等等。</p>
<h2 id="5-2-二叉树"><a href="#5-2-二叉树" class="headerlink" title="5.2 二叉树"></a>5.2 二叉树</h2><h3 id="5-2-1-基本概念"><a href="#5-2-1-基本概念" class="headerlink" title="5.2.1 基本概念"></a>5.2.1 基本概念</h3><p>​    二叉树的特点是树的每个节点最多只能有两个子节点。其中一棵树叫做根的左子树，另一颗叫根的右子树。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200811190601991.png" alt="image-20200811190601991"></p>
<p>​    如果节点数量超过两个，则不能叫做二叉树，而叫做多路树。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200811190425678.png" alt="image-20200811190425678"></p>
<h3 id="5-2-2-特点"><a href="#5-2-2-特点" class="headerlink" title="5.2.2 特点"></a>5.2.2 特点</h3><ul>
<li>每个节点最多有两颗子树，所以二叉树中不存在度(该结点孩子的个数)大于2的节点。</li>
<li>左子树和右子树是有顺序的。</li>
<li>即使树中某节点只有一颗子树， 也要区分它是左子树还是右子树。</li>
</ul>
<h3 id="5-2-3-特殊的二叉树"><a href="#5-2-3-特殊的二叉树" class="headerlink" title="5.2.3 特殊的二叉树"></a>5.2.3 特殊的二叉树</h3><h4 id="5-2-3-1-满二叉树"><a href="#5-2-3-1-满二叉树" class="headerlink" title="5.2.3.1 满二叉树"></a>5.2.3.1 满二叉树</h4><p>​    在一棵二叉树中。如果所有分支结点都存在<strong>左子树和右子树</strong>，并且<strong>所有叶子都在同一层上</strong>，这样的二叉树称为满二叉树。其特点如下：</p>
<ul>
<li>假设深度为k，且含有2^k-1个结点的树。</li>
<li>叶子只能出现在最下一层。出现在其它层就不可能达成平衡。</li>
<li>非叶子结点的度一定是2。</li>
<li>在同样深度的二叉树中，满二叉树的结点个数最多，叶子数最多。</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200811192235886.png" alt="image-20200811192235886"></p>
<h4 id="5-2-3-2-完全二叉树"><a href="#5-2-3-2-完全二叉树" class="headerlink" title="5.2.3.2 完全二叉树"></a>5.2.3.2 完全二叉树</h4><p>​    完全二叉树是一颗特殊的二叉树。假设一个二叉树的高度为h，如果说它是一颗完全二叉树的话，需要满足以下规则：</p>
<ul>
<li><p>叶子结点只能出现在最下层和次下层。</p>
</li>
<li><p>最下层的叶子结点集中在树的左部。</p>
</li>
<li><p>倒数第二层若存在叶子结点，一定在右部连续位置。</p>
</li>
<li><p>如果结点度为1，则该结点只有左孩子，即没有右子树。</p>
</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200811193944229.png" alt="image-20200811193944229"></p>
<h4 id="5-2-3-3-斜树"><a href="#5-2-3-3-斜树" class="headerlink" title="5.2.3.3 斜树"></a>5.2.3.3 斜树</h4><p>​    所有的节点都之后左子树的二叉树叫做左斜树，同理还存在右斜树。一旦产生这种情况，相当于树结构退化为了链表，查找一个节点的时间复杂度为O(n)，查询效率严重降低。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200811230829771.png" alt="image-20200811230829771"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200811230952490.png" alt="image-20200811230952490"></p>
<h3 id="5-2-4-存储结构"><a href="#5-2-4-存储结构" class="headerlink" title="5.2.4 存储结构"></a>5.2.4 存储结构</h3><p>​    二叉树的顺序存储结构就是使用一维数组存储二叉树中的结点，并且结点的存储位置，就是数组的下标索引。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200811232239278.png" alt="image-20200811232239278"></p>
<p>当二叉树为完全二叉树时，结点数刚好填满数组。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200811232514640.png" alt="image-20200811232514640"></p>
<p>当不为完全二叉树时，采用顺序存储又是什么样子呢？</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200811232851079.png" alt="image-20200811232851079"></p>
<p>其中，∧表示数组中此位置没有存储结点。此时可以发现，顺序存储结构中已经出现了空间浪费的情况。</p>
<p>在极端的右斜树极端情况对应的顺序存储结构。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200811233033805.png" alt="image-20200811233033805"></p>
<p>可以看出，对于这种右斜树极端情况，采用顺序存储的方式是十分浪费空间的。因此，顺序存储一般适用于完全二叉树。</p>
<h3 id="5-2-5-二叉树遍历"><a href="#5-2-5-二叉树遍历" class="headerlink" title="5.2.5 二叉树遍历"></a>5.2.5 二叉树遍历</h3><h4 id="5-2-5-1-定义"><a href="#5-2-5-1-定义" class="headerlink" title="5.2.5.1 定义"></a>5.2.5.1 定义</h4><p><strong>二叉树的遍历</strong>是指从二叉树的根结点出发，按照某种次序依次访问二叉树中的所有结点，使得每个结点被访问一次，且仅被访问一次。<br>二叉树的访问次序可以分为四种：</p>
<ul>
<li>前序遍历</li>
<li>中序遍历</li>
<li>后序遍历</li>
<li>层序遍历</li>
</ul>
<h4 id="5-2-5-2-前序遍历"><a href="#5-2-5-2-前序遍历" class="headerlink" title="5.2.5.2 前序遍历"></a>5.2.5.2 前序遍历</h4><p>​    从根结点出发，当<strong>第一次</strong>到达结点时就输出结点数据，按照<strong>先向左再向右的方向</strong>访问。简单理解就是：父节点-&gt;左子树-&gt;右子树</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200811235242745.png" alt="image-20200811235242745"></p>
<p>流程如下：</p>
<p>1）从根结点出发，则第一次到达结点A，故输出A。</p>
<p>2）继续向左访问，第一次访问结点B，故输出B。</p>
<p>3）按照同样的规则，输出D，输出H。</p>
<p>4）当到达叶子节点H，返回到D，此时已经是第二次到达D，则不输出D。继续向右，输出I。</p>
<p>5）I为叶子节点，返回到D。此时D的左右子树已经访问完毕，则返回到B，访问B的右子树，输出E。</p>
<p>6）向E的左子树，输出J。</p>
<p>7）按照同样的规则，继续输出C、F、G。</p>
<p>最终结果为：<strong>ABDHIEJCFG</strong></p>
<h4 id="5-2-5-3-中序遍历"><a href="#5-2-5-3-中序遍历" class="headerlink" title="5.2.5.3 中序遍历"></a>5.2.5.3 中序遍历</h4><p>​    从根结点出发，当<strong>第二次到达结点</strong>时则输出结点数据，按照先向左再向右的方向访问。简单理解就是：左子树-&gt;父节点-&gt;右子树</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812000716284.png" alt="image-20200812000716284"></p>
<p>流程如下：</p>
<p>1）从根节点触发，则第一次到达结点A，不输出A，继续向左访问，第一次到达结点B，不输出B，继续到达D、H，都不进行输出。</p>
<p>2）到达H，H左子树为空，则返回到H，此时是第二次访问H，则输出H。</p>
<p>3）H右子树为空，则返回到D，此时第二次到达D，则输出D。</p>
<p>4）D存在右子树，则向右到达I，I的左子树为空，则返回到I，此时是第二次访问I，则输出I。</p>
<p>5）I的右子树为空，则返回到D，此时是第三次到达D，不做输出。</p>
<p>6）继续向上，到达B，此时是第二次到达B，则输出B。</p>
<p>7）按照同样的规则，后续输出J、E、A、F、C、G。</p>
<p>最终结果为：<strong>HDIBJEAFCG</strong></p>
<h4 id="5-2-5-4-后序遍历"><a href="#5-2-5-4-后序遍历" class="headerlink" title="5.2.5.4 后序遍历"></a>5.2.5.4 后序遍历</h4><p>​    从根结点出发，当第三次到达结点时则输出输出，按照先向左后向右的方式访问。简单理解就是：左子树 -&gt; 右子树 -&gt;父节点</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812001640297.png" alt="image-20200812001640297"></p>
<p>流程如下：</p>
<p>1）从根结点出发，则第一次到达结点A，不输出A，继续向左访问，到达B、D、H。</p>
<p>2）到达H，H左子树为空，则返回到H，此时第二次访问H，不做输出。</p>
<p>3）到达H，H右子树为空，则返回到H，此时第三次访问H，输出H。</p>
<p>4）H返回到D，第二次到达D，不做输出。</p>
<p>5）继续访问I，同时I的左右子树均为空，第三次时，输出I。</p>
<p>6）I返回到D，第三次到达D，输出D。</p>
<p>7）按照同样的规则，输出J、E、B、F、G、C、A。</p>
<p>最终结果为：<strong>HIDJEBFGCA</strong></p>
<h4 id="5-2-5-5-层次遍历"><a href="#5-2-5-5-层次遍历" class="headerlink" title="5.2.5.5 层次遍历"></a>5.2.5.5 层次遍历</h4><p>​    按照树的层次自上而下的遍历二叉树。</p>
<p>​    最终结果为：<strong>ABCDEFGHIJ</strong></p>
<h2 id="5-3-二叉搜索树"><a href="#5-3-二叉搜索树" class="headerlink" title="5.3 二叉搜索树"></a>5.3 二叉搜索树</h2><h3 id="5-3-1-定义"><a href="#5-3-1-定义" class="headerlink" title="5.3.1 定义"></a>5.3.1 定义</h3><p>​    二叉搜索树，也被称为二叉查找树、二叉排序树。对于基础二叉树来说，数据查找、数据变动的效率都是非常低效的。因此才产生了二叉搜索树。</p>
<p>其定义规则如下：</p>
<ul>
<li>若左子树不为空，则左子树上的各个结点的值，均<strong>小于</strong>它的父节点的值。</li>
<li>若右子树不为空，则右子树上的各个结点的值，均<strong>大于</strong>它的父节点的值。</li>
<li>没有值相等的结点。</li>
<li>左右子树也分别为二叉搜索树。</li>
<li>不一定是一颗完全二叉树，因此，二叉搜索树不能用数组来存储。</li>
</ul>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812004718795.png" alt="image-20200812004718795"></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812004836213.png" alt="image-20200812004836213"></p>
<h3 id="5-3-2-查找"><a href="#5-3-2-查找" class="headerlink" title="5.3.2 查找"></a>5.3.2 查找</h3><p>流程：</p>
<p>（1）如果树是空的，则查找结束，无匹配。<br>（2）如果被查找的值和节点的值相等，查找成功。<br>（3）如果被查找的值小于节点的值，递归查找左子树。<br>（4）如果被查找的值大于节点的值，递归查找右子树。</p>
<h3 id="5-3-3-插入"><a href="#5-3-3-插入" class="headerlink" title="5.3.3 插入"></a>5.3.3 插入</h3><p>流程：</p>
<p>（1）先检测该元素是否在树中已经存在。如果已经存在，则不进行插入。<br>（2）若元素不存在，则进行查找过程，并将元素插入在查找结束的位置。</p>
<p>图解：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812005834866.png" alt="image-20200812005834866"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812005900285.png" alt="image-20200812005900285"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812005932267.png" alt="image-20200812005932267"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812010233539.png" alt="image-20200812010233539"></p>
<h3 id="5-3-4-删除"><a href="#5-3-4-删除" class="headerlink" title="5.3.4 删除"></a>5.3.4 删除</h3><h4 id="5-3-4-1-删除节点为叶子节点"><a href="#5-3-4-1-删除节点为叶子节点" class="headerlink" title="5.3.4.1 删除节点为叶子节点"></a>5.3.4.1 删除节点为叶子节点</h4><p>​    该方式最简单，只需找到对应节点，直接删除即可。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812010738152.png" alt="image-20200812010738152"></p>
<h4 id="5-3-4-2-删除的节点只有左子树"><a href="#5-3-4-2-删除的节点只有左子树" class="headerlink" title="5.3.4.2 删除的节点只有左子树"></a>5.3.4.2 删除的节点只有左子树</h4><p>​    需要将节点的左子树替代被删除节点的位置。</p>
<p> <img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812010956148.png" alt="image-20200812010956148"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812011121765.png" alt="image-20200812011121765"></p>
<h4 id="5-3-4-3-删除的节点只有右子树"><a href="#5-3-4-3-删除的节点只有右子树" class="headerlink" title="5.3.4.3 删除的节点只有右子树"></a>5.3.4.3 删除的节点只有右子树</h4><p>​    需要将右子树替代被删除节点的位置。与左子树思想一致。</p>
<h4 id="5-3-4-4-删除的节点拥有左右子树"><a href="#5-3-4-4-删除的节点拥有左右子树" class="headerlink" title="5.3.4.4 删除的节点拥有左右子树"></a>5.3.4.4 删除的节点拥有左右子树</h4><p>此情况操作起来最为复杂。操作流程如下：</p>
<p>（1）遍历待删除节点的左子树，找到其左子树中的最大节点。<br>（2）将最大节点代替被删除节点。<br>（3）删除左子树中的最大节点。</p>
<p>同理，也可以选取右子树中的最小值取代它并删除原结点。</p>
<h2 id="5-4-平衡二叉树"><a href="#5-4-平衡二叉树" class="headerlink" title="5.4 平衡二叉树"></a>5.4 平衡二叉树</h2><h3 id="5-4-1-定义"><a href="#5-4-1-定义" class="headerlink" title="5.4.1 定义"></a>5.4.1 定义</h3><p>​    二叉搜索树一定程度上可以提高搜索效率，但是当有序序列为{1,2,3,4,5,6}时，此时构造的二叉搜索树为右斜树。可以发现二叉树已经退化为了单链表，搜索效率降低为O(n)。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812121026874.png" alt="image-20200812121026874"></p>
<p>​    在此二叉搜索树中查找元素6需要查找6次。二叉搜索树的查找效率取决于树的高度，因此树的高度越低，其查询效率就会越高。同样的序列，更改存储方式，查找元素6时只需要比较三次，查询效率提升一倍。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812121258289.png" alt="image-20200812121258289"></p>
<p>​    可以看出当节点数目一定，保持树的左右两端保持平衡，树的查找效率最高。这种<strong>左右子树的高度相差不超过1的树为平衡二叉树</strong>。 </p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812121843134.png" alt="image-20200812121843134"></p>
<h3 id="5-4-2-平衡因子"><a href="#5-4-2-平衡因子" class="headerlink" title="5.4.2 平衡因子"></a>5.4.2 平衡因子</h3><p>​    <strong>定义：</strong>某节点的左子树与右子树的高度(深度)差即为该节点的平衡因子（BF,Balance Factor），平衡二叉树中不存在平衡因子大于1的节点。在一棵平衡二叉树中，节点的平衡因子只能取-1、1或者0。</p>
<h3 id="5-4-3-左旋与右旋"><a href="#5-4-3-左旋与右旋" class="headerlink" title="5.4.3 左旋与右旋"></a>5.4.3 左旋与右旋</h3><h4 id="5-4-3-1-左旋"><a href="#5-4-3-1-左旋" class="headerlink" title="5.4.3.1 左旋"></a>5.4.3.1 左旋</h4><p>如图所示的平衡二叉树</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812144003778.png" alt="image-20200812144003778"></p>
<p>如在此平衡二叉树插入节点62，树结构变为：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812144025384.png" alt="image-20200812144025384"></p>
<p>​    可以得出40节点的左子树高度为1，右子树高度为3，此时平衡因子为-2，树失去平衡。为保证树的平衡，此时需要对节点40做出旋转，因为右子树高度高于左子树，对节点进行左旋操作，流程如下：<br>（1）原根节点的右孩子替代此节点位置。<br>（2）原根节点的右孩子的左子树变为原根节点的右子树。<br>（3）原根节点本身变为右孩子的左子树。</p>
<p>左旋流程：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812144139196.png" alt="image-20200812144139196"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812144238932.png" alt="image-20200812144238932"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812144307930.png" alt="image-20200812144307930"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812144409076.png" alt="image-20200812144409076"></p>
<h4 id="5-4-3-2-右旋"><a href="#5-4-3-2-右旋" class="headerlink" title="5.4.3.2 右旋"></a>5.4.3.2 右旋</h4><p>右旋操作与左旋类似，操作流程为：<br>（1）原根节点的左孩子代表此节点<br>（2）原根节点的左孩子的右子树变为节点的左子树。<br>（3）原根节点作为左孩子节点的右子树。</p>
<p>过程如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812144551327.png" alt="image-20200812144551327"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812144614420.png" alt="image-20200812144614420"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812144931963.png" alt="image-20200812144931963"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812145020443.png" alt="image-20200812145020443"></p>
<h3 id="5-4-4-插入"><a href="#5-4-4-插入" class="headerlink" title="5.4.4 插入"></a>5.4.4 插入</h3><p>​    假设一颗 AVL 树的某个节点为A，有时会使 A 的左右子树高度差大于 1，从而破坏了原有 AVL 树的平衡性。平衡二叉树插入节点的情况分为以下2种：</p>
<h4 id="5-4-4-1-A的左孩子的左子树插入节点"><a href="#5-4-4-1-A的左孩子的左子树插入节点" class="headerlink" title="5.4.4.1 A的左孩子的左子树插入节点"></a>5.4.4.1 <strong>A的左孩子的左子树插入节点</strong></h4><p>​    假设现在有这样的一颗平衡二叉树：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812145217565.png" alt="image-20200812145217565"></p>
<p> 节点A的左孩子为B，B的左子树为D，无论在节点D的左子树或者右子树中插入F均会导致节点A失衡。因此需要对节点A进行旋转操作。A的平衡因子为2，值为正，因此对A进行右旋操作。</p>
<p>过程如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812145401573.png" alt="image-20200812145401573"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812145421078.png" alt="image-20200812145421078"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812145436943.png" alt="image-20200812145436943"></p>
<h4 id="5-4-4-2-A的右孩子的右子树插入节点"><a href="#5-4-4-2-A的右孩子的右子树插入节点" class="headerlink" title="5.4.4.2 A的右孩子的右子树插入节点"></a>5.4.4.2 <strong>A的右孩子的右子树插入节点</strong></h4><p>插入节点F后，节点A的平衡因子为-2，对节点A进行左旋操作。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812145617938.png" alt="image-20200812145617938"></p>
<p>过程如下：</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812145630930.png" alt="image-20200812145630930"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812145642271.png" alt="image-20200812145642271"></p>
<h3 id="5-4-5-删除"><a href="#5-4-5-删除" class="headerlink" title="5.4.5 删除"></a>5.4.5 删除</h3><p>平衡二叉树的删除情况与二叉搜索树删除情况相同，同样分为以下四种情况：<br>（1）删除叶子节点<br>（2）删除节点只有左子树<br>（3）删除节点只有右子树<br>（4）删除节点既有左子树又有右子树<br>平衡二叉树的节点删除与二叉搜索树删除方法一致，但是需要在节点删除后判断树是否仍然保持平衡，若出现失衡情况，需要进行调整。</p>
<h2 id="5-5-红黑树"><a href="#5-5-红黑树" class="headerlink" title="5.5 红黑树"></a>5.5 红黑树</h2><h3 id="5-5-1-概述"><a href="#5-5-1-概述" class="headerlink" title="5.5.1 概述"></a>5.5.1 概述</h3><p>​    <strong>红黑树</strong>是树的数据结构中最为重要的一种。Java的容器TreeSet、TreeMap均使用红黑树实现。JDK1.8中HashMap中也加入了红黑树。每个节点都带有颜色属性，颜色为<strong>红色</strong>或<strong>黑色</strong>。除了二叉查找树一般要求以外，对于任何有效的红黑树还增加了如下的额外要求:</p>
<p>1）节点要么是黑色要么是红色。</p>
<p>2）根结点一定是黑色的。</p>
<p>3）每个叶子节点都带有两个空(NIL)的黑色节点。</p>
<p>4）每个红色节点的两个子节点一定是黑色，因此不会存在两个连续的红色节点，红色节点的父节点一定是黑色节点。</p>
<p>5）从任一节点到它所能到达的叶子节点的所有路径都包含相同数目的黑色节点。从而达到黑色平衡。（平衡二叉树是一个完美平衡的树，红黑树是非完美平衡树，但是一个完美的黑色平衡二叉查找树）。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812152853784.png" alt="image-20200812152853784"></p>
<h3 id="5-5-2-节点名称"><a href="#5-5-2-节点名称" class="headerlink" title="5.5.2 节点名称"></a>5.5.2 节点名称</h3><p><strong>父节点——P(Parent)</strong><br><strong>祖父节点——G(GrandParent)</strong><br><strong>叔叔节点——U(Uncle)</strong><br><strong>当前节点——C(Current)</strong><br><strong>兄弟节点——B(Brother)</strong><br><strong>左孩子——L(Left)</strong><br><strong>右孩子——R(Right)</strong></p>
<h2 id="5-6-B树"><a href="#5-6-B树" class="headerlink" title="5.6 B树"></a>5.6 B树</h2><h3 id="5-6-1-思考"><a href="#5-6-1-思考" class="headerlink" title="5.6.1 思考"></a>5.6.1 思考</h3><p>​    数据库的增删改查等操作是开发过程中最为常见也是尤为重要的，尤其是现在大数据的兴起，导致数据存储量急剧增加，提升数据的操作效率就变得尤为关键。大部分数据库的索引都采用树的结构存储，这是因为树的查询效率相对较高，且保持有序。<br>​    对于二叉搜索树的时间复杂度是**O(logN)**，在算法以及逻辑上来分析，二叉搜索树的查找速度以及数据比较次数都是较小的。但是我们不得不考虑一个新的问题。数据量是远大于内存大小的，那我们在查找数据时并不能将全部数据同时加载至内存。既然不能全部加载至内存中就只能逐步的去加载磁盘中某个页，简而言之就是逐一的去加载磁盘，加数据分块的加载至内存进行查找与比较。</p>
<p>​    如图所示，在树中查找10，树的每个节点代表一个磁盘页，相当于每次访问一个新节点代表一次磁盘IO。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812160925972.png" alt="image-20200812160925972"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812160951908.png" alt="image-20200812160951908"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812161008354.png" alt="image-20200812161008354"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812161021409.png" alt="image-20200812161021409"></p>
<hr>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812161040177.png" alt="image-20200812161040177"></p>
<p>​    通过查找过程可以看出，磁盘IO次数与树的高度相关，在最坏情况下，磁盘IO次数等于树的高度。由于磁盘IO过程是相对耗时效率较低的，因此，在设计数据存储结构时需要降低树的高度，即将一棵“瘦高”的树变得“矮胖”。<br>​    当数据数目相同，在保持有序前提下，降低树高度，只需将节点中存储的key值增加，即二叉搜索树中每个节点只有一个数据元素，而在<strong>B树中每个节点可以有多个数据元素</strong>。</p>
<h3 id="5-6-2-定义"><a href="#5-6-2-定义" class="headerlink" title="5.6.2 定义"></a>5.6.2 定义</h3><p>​    B树也成B-树。它是一颗多路平衡查找树（所有的叶子节点拥有相同的高度）。当描述一颗B树时需要指定它的<strong>阶数</strong>，阶数表示一个节点最多有多少个孩子节点，一般用字母m表示。当m取2时，就是一颗二叉查找树。</p>
<p>要定义一颗m阶的B树，需要遵循以下五条原则：</p>
<p>1）根节点最少可以只有一个元素，且至少要有两个子节点。</p>
<p>2）每个节点最多有m-1个元素。</p>
<p>3）非根节点至少有(m/2)-1个元素。m/2要进行向上取整，如m/2=1.5=2。</p>
<p>4）每个结点中的元素都按照从小到大的顺序排列，每个元素的左子树中的所有元素都小于它，而右子树中的所有元素都大于它。</p>
<p>5）所有叶子节点都位于同一层，相当于根节点到每个叶子节点的长度相同。</p>
<h3 id="5-6-3-操作"><a href="#5-6-3-操作" class="headerlink" title="5.6.3 操作"></a>5.6.3 操作</h3><p>​    B树的查找其实是对二叉搜索树查找的扩展， 与二叉搜索树不同的地方是，B-树中每个节点有不止一棵子树。在B-树中查找某个结点时，需要先判断要查找的结点在哪棵子树上，然后在结点中逐个查找目标结点。B树的查找过程相对简单，与二叉搜索树类似，因此不再赘述。</p>
<h4 id="5-6-3-1-插入"><a href="#5-6-3-1-插入" class="headerlink" title="5.6.3.1 插入"></a>5.6.3.1 插入</h4><p>​    B树的插入操作是指在树种插入一条新记录，即（key, value）的键值对。如果B树中已存在需要插入的键值对，则用需要插入的value替换旧的value。若B树不存在这个key，则一定是在叶子结点中进行插入操作。</p>
<p>插入流程如下：</p>
<p>1）根据要插入的key的值，对B树执行查找操作，查找到待插入数据的当前节点位置。</p>
<p>2）判断<strong>当前节点key的个数是否小于等于m-1</strong>，若满足，则直接插入数据。</p>
<p>3）若不满足，以<strong>节点中间的key</strong>为中心分裂成<strong>左右两部分</strong>，然后将这个<strong>中间的key插入到父节点中</strong>，这个key的左子树指向分裂后的左半部分，这个key的右子树指向分裂后的右半部分，然后将当前节点指向父节点，继续执行第三步。</p>
<p>下面以5阶B树为例，介绍B树的插入操作，在5阶B树中，结点最多有4个key，最少有2个key。</p>
<p>1：<strong>插入38，此时为空树，直接插入，并作为根节点。继续插入22、76、40，符合情形（2），直接插入。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812193205493.png" alt="image-20200812193205493"></p>
<p>2：<strong>插入51，符合情形（3），执行分裂。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812193415970.png" alt="image-20200812193415970"></p>
<p>3：<strong>按照相同的步骤继续插入13、21</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812193649389.png" alt="image-20200812193649389"></p>
<p>4：<strong>插入39，符合情形（3），导致节点分裂。选择中值22作为父节点，并将22节点上移，与40节点进行合并。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812193754228.png" alt="image-20200812193754228"></p>
<p>5：<strong>按照同样的插入规则，继续向树中插入key为30、27、33、36、35、34、24、29的数据。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812210944524.png" alt="image-20200812210944524"></p>
<p>6：<strong>继续插入key为26的数据，插入之后需要执行节点分裂。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812211108009.png" alt="image-20200812211108009"></p>
<p>7：<strong>将key为27的数据节点上移至父节点</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812211157198.png" alt="image-20200812211157198"></p>
<p>8：<strong>此时父节点已经有4个key，插入key27的数据后需要执行节点分裂，树的高度加1。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812211227694.png" alt="image-20200812211227694"></p>
<p>9：<strong>再依次插入14，23，28，29，31，32。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812211332462.png" alt="image-20200812211332462"></p>
<h4 id="5-6-3-2-删除"><a href="#5-6-3-2-删除" class="headerlink" title="5.6.3.2 删除"></a>5.6.3.2 删除</h4><p>删除流程如下：</p>
<p>1）如果当前需要删除的key位于非叶子结点，则用距离最近的后继key覆盖要删除的key。然后在后继key所在的子支中删除该后继key。此时后继key一定位于叶子节点上，这个过程和二叉搜索树删除节点的方式类似。</p>
<p>2）删除这个记录后，若<strong>该节点key个数大于等于(m/2)-1</strong>，结束删除操作。</p>
<p>3）如果不是，则<strong>如果兄弟节点key个数大于(m/2)-1</strong>，则父节点中的key下移到该节点，兄弟节点中的一个key上移，删除操作结束。</p>
<p>4）否则，将父节点中的key下移与当前节点及它的兄弟节点中的key合并，形成一个新的节点。原父节点中的key的两个孩子指针就变成了一个孩子指针，指向这个新节点。然后当前节点的指针指向父节点，重复步骤2。</p>
<p>图解流程：</p>
<p>1：<strong>首先删除21，符合情形（2）直接删除。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812212450909.png" alt="image-20200812212450909"></p>
<p>2：<strong>继续删除27，符合情形（1），使用后继节点28替代27，并删除28。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812212701762.png" alt="image-20200812212701762"></p>
<p>3：<strong>删除28后，节点中只有29一个key，因此需要按照情形（3）调整。29左兄弟节点有三个节点，将28下移，兄弟节点中26上移。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812213149187.png" alt="image-20200812213149187"></p>
<p>4：<strong>继续删除32。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812213457870.png" alt="image-20200812213457870"></p>
<p>5：<strong>删除32后，需要按照情形（3）进行调整。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812213606267.png" alt="image-20200812213606267"></p>
<p>6：<strong>当前节点的兄弟节点只有2个key，则将父节点下移，将当前节点与一个兄弟节点合并，调整完毕。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812213719819.png" alt="image-20200812213719819"></p>
<p>7：<strong>继续删除39节点。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812213922242.png" alt="image-20200812213922242"></p>
<p>8：<strong>删除39节点后，需要按照情形（4）进行调整。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812213959770.png" alt="image-20200812213959770"></p>
<p>9：<strong>调整过后，当前节点变为只有key40的节点，需要按照情形（3）进行调整。执行节点合并，合并操作包含根节点，导致合并之后，树的高度减1。</strong></p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812214145220.png" alt="image-20200812214145220"></p>
<h3 id="5-6-4-性能分析"><a href="#5-6-4-性能分析" class="headerlink" title="5.6.4 性能分析"></a>5.6.4 性能分析</h3><p>​    <strong>B树是一种平衡的多路查找树。</strong>其设计思路主要是通过节点中存储不止一个key，来降低树的高度。同等比较次数下，树的高度小保证磁盘IO次数相对较少，提高查找效率。在文件系统以及数据库索引等场景下应用较多，如MongoDB。</p>
<p><strong>查找性能</strong><br>  B树的查找分成两种：一种是从一个结点查找另一结点的地址的时候，需要定位磁盘地址(查找地址)，查找代价极高。另一种是将结点中的有序关键字序列放入内存，进行优化查找(可以用折半)，相比查找代价极低。而B树的高度很小，因此在这一背景下，B树比任何二叉结构查找树的效率都要高很多。<br><strong>插入性能</strong><br>  B树的插入会发生结点的分裂操作。当插入操作引起了s个节点的分裂时，磁盘访问的次数为h(读取搜索路径上的节点)＋2s(回写两个分裂出的新节点)＋1（回写新的根节点或插入后没有导致分裂的节点）。因此，所需要的磁盘访问次数是h+2s+1，最多可达到3h+1。因此插入的代价较大。<br><strong>删除性能</strong><br>  B树的删除会发生结点合并操作。最坏情况下磁盘访问次数是3h＝（找到包含被删除元素需要h次读访问）+（获取第2至h层的最相邻兄弟需要h-1次读访问）+（在第3至h层的合并需要h-2次写访问）+（对修改过的根节点和第2层的两个节点进行3次写访问）。</p>
<h2 id="5-7-B-树"><a href="#5-7-B-树" class="headerlink" title="5.7 B+树"></a>5.7 B+树</h2><p><strong>B+树</strong>是在B树基础进一步优化得到的一种数据结构。B+树相比于B树具有更高的查询效率。</p>
<h3 id="5-7-1-定义"><a href="#5-7-1-定义" class="headerlink" title="5.7.1 定义"></a>5.7.1 定义</h3><p>1）B+树包含2种类型的结点：内部结点（也称索引结点）和叶子结点。</p>
<p>2）根结点本身即可以是内部结点，也可以是叶子结点。根结点的关键字个数最少可以只有1个。</p>
<p>3）B+树与B树最大的不同是内部结点不保存数据，只用于索引，所有数据（或者说记录）都保存在叶子结点中。</p>
<p>4） m阶B+树表示了<strong>内部结点最多有m-1个关键字</strong>，阶数m同时限制了<strong>叶子结点最多存储m-1个数据</strong>。</p>
<p>5）内部结点中的key都按照从小到大的顺序排列，对于内部结点中的一个key，左树中的所有key都小于它，右子树中的key都大于等于它。叶子结点中的数据也按照key的大小排列。</p>
<p>6）<strong>每个叶子结点都存有相邻叶子结点的指针</strong>，叶子结点本身依关键字的大小自小而大顺序链接。</p>
<p>如图所示的B+树中，灰色节点代表索引节点，索引节点中只有key，而不含数据data。橙色节点代表叶子节点，叶子节点中既有key值又有数据data。叶子节点采用单链表的方式链接。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/image-20200812215025439.png" alt="image-20200812215025439"></p>
<h3 id="5-7-2-特点"><a href="#5-7-2-特点" class="headerlink" title="5.7.2 特点"></a>5.7.2 特点</h3><p>1）索引节点的key值均会出现在叶子节点中。</p>
<p>2）索引节点中的key值在叶子节点中或者为最大值或者为最小值。</p>
<p>3）叶子节点使用单链表的形式链接起来。</p>
<h3 id="5-7-3-性能分析"><a href="#5-7-3-性能分析" class="headerlink" title="5.7.3 性能分析"></a>5.7.3 性能分析</h3><p><strong>查找性能</strong><br> 1）在相同数量的待查数据下，B+树查找过程中需要调用的磁盘IO操作要少于普通B-树。由于B+树所在的磁盘存储背景下，因此B+树的查找性能要好于B-树。<br> 2）B+树的查找效率更加稳定，因为所有叶子结点都处于同一层中，而且查找所有关键字都必须走完从根结点到叶子结点的全部历程。因此同一颗B+树中，任何关键字的查找比较次数都是一样的。而B树的查找是不稳定的。<br><strong>插入性能</strong><br>  B+树的插入过程与B树类似，性能也基本一致。<br><strong>删除性能</strong><br>  删除性能与B树也基本一致。</p>
<h2 id="5-8-面试问题"><a href="#5-8-面试问题" class="headerlink" title="5.8 面试问题"></a>5.8 面试问题</h2><h3 id="5-8-1-hashmap为什么使用红黑树而不用别的树"><a href="#5-8-1-hashmap为什么使用红黑树而不用别的树" class="headerlink" title="5.8.1 hashmap为什么使用红黑树而不用别的树"></a>5.8.1 hashmap为什么使用红黑树而不用别的树</h3><p>​    红黑树是一个比较特殊的树，跟他能产生对比的是平衡二叉树。但是平衡二叉树的严格平衡牺牲了插入、删除操作的性能，来保证了查询的高效。 而红黑树则采用了折中策略，即不牺牲太大的插入删除性能，同时又保证稳定高效的查找效率。</p>
<h3 id="5-8-2-为什么MongoDB索引使用B树，而MySQL使用B-树"><a href="#5-8-2-为什么MongoDB索引使用B树，而MySQL使用B-树" class="headerlink" title="5.8.2 为什么MongoDB索引使用B树，而MySQL使用B+树"></a>5.8.2 为什么MongoDB索引使用B树，而MySQL使用B+树</h3><p>​    MongoDB是一个非关系型数据库，对于遍历数据的需求很低，更多的是在做一些单一记录查询。而对于MySQL这种关系型数据库来说，进行遍历关联查询的需求就会很高。</p>
<p>​    结合B树与B+树的特点来说，B树的查询效率不固定，最好的情况是O（1），所以在做单一数据查询时，B树的平均性能会更好。但如果要对B树进行遍历的话，由于各个节点间没有指针相连，所以性能会很低。</p>
<p>​    而B+树最大的特点是数据只会出现在叶子节点，因此对于单条数据查询，其一定会进入到叶子节点上，因此平均性能没有B树好。但B+树的叶子节点有指针相连，在进行遍历时，其效率会明显优于B树。</p>
<h1 id="6-堆"><a href="#6-堆" class="headerlink" title="6 堆"></a>6 堆</h1><p>​    了解完二叉树，再来理解堆就不是什么难事了。堆通常是一个可以被看做一棵树的数组对象。堆的具体实现一般不通过指针域，而是通过构建一个一维数组与二叉树的父子结点进行对应，因此堆总是一颗完全二叉树。</p>
<p>对于任意一个父节点的序号n来说（这里n从0算），它的子节点的序号一定是2n+1，2n+2，因此可以直接用数组来表示一个堆。</p>
<p>不仅如此，堆还有一个性质：堆中某个节点的值总是不大于或不小于其父节点的值。将根节点最大的堆叫做最大堆或<strong>大根堆</strong>，根节点最小的堆叫做最小堆或<strong>小根堆</strong>。</p>
<p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/MongoDB/assets/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlZXdvcmtzaG9w,size_16,color_FFFFFF,t_7015" alt="在这里插入图片描述"><br>堆常用来实现优先队列，在面试中经常考的问题都是与排序有关，比如堆排序、topK问题等。由于堆的根节点是序列中最大或者最小值，因而可以在建堆以及重建堆的过程中，筛选出数据序列中的极值，从而达到排序或者挑选topK值的目的。</p>
<h2 id="案例PriorityBlockingQueue中二叉堆的使用"><a href="#案例PriorityBlockingQueue中二叉堆的使用" class="headerlink" title="案例PriorityBlockingQueue中二叉堆的使用"></a>案例PriorityBlockingQueue中二叉堆的使用</h2><h3 id="put过程："><a href="#put过程：" class="headerlink" title="put过程："></a>put过程：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        offer(e); <span class="comment">// never need to block</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">        lock.lock();<span class="comment">//加锁</span></span><br><span class="line">        <span class="keyword">int</span> n, cap;</span><br><span class="line">        Object[] array;</span><br><span class="line">     	<span class="comment">//如果元素个数大于等于数组长度，开始扩容</span></span><br><span class="line">        <span class="keyword">while</span> ((n = size) &gt;= (cap = (array = queue).length))</span><br><span class="line">            tryGrow(array, cap);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//一开始构建队列的时候传入comparator</span></span><br><span class="line">            Comparator&lt;? <span class="keyword">super</span> E&gt; cmp = comparator;</span><br><span class="line">            <span class="keyword">if</span> (cmp == <span class="keyword">null</span>)</span><br><span class="line">                <span class="comment">//使用元素自带的comparator进行比较，并排序</span></span><br><span class="line">                siftUpComparable(n, e, array);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="comment">//使用comparator进行比较，并排序</span></span><br><span class="line">                siftUpUsingComparator(n, e, array, cmp);</span><br><span class="line">            size = n + <span class="number">1</span>;<span class="comment">//增加元素个数</span></span><br><span class="line">            notEmpty.signal();<span class="comment">//唤醒take线程</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();<span class="comment">//解锁</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新元素堆内上浮实现</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">siftUpComparable</span><span class="params">(<span class="keyword">int</span> k, T x, Object[] array)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//尝试转化插入对象为Comparable实例</span></span><br><span class="line">        Comparable&lt;? <span class="keyword">super</span> T&gt; key = (Comparable&lt;? <span class="keyword">super</span> T&gt;) x; </span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 新元素x的数组下标为k，对应的父节点的下标为(k-1)/2</span></span><br><span class="line">            <span class="keyword">int</span> parent = (k - <span class="number">1</span>) &gt;&gt;&gt; <span class="number">1</span>; </span><br><span class="line">            Object e = array[parent];</span><br><span class="line">            <span class="comment">//如果子节点已经比父节点还要大，不需要再跟上层节点比较，新元素上浮结束</span></span><br><span class="line">            <span class="keyword">if</span> (key.compareTo((T) e) &gt;= <span class="number">0</span>) </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//如果子节点已经比父节点小，父节点下沉，新元素上浮一次</span></span><br><span class="line">            array[k] = e; </span><br><span class="line">            k = parent; <span class="comment">//新元素上浮后继续与新的父节点比较大小，直到k=0或者新的父节点小于新元素</span></span><br><span class="line">        &#125;</span><br><span class="line">        array[k] = key;<span class="comment">//新元素在堆中插入正确的位置。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">tryGrow</span><span class="params">(Object[] array, <span class="keyword">int</span> oldCap)</span> </span>&#123;</span><br><span class="line">     	<span class="comment">//扩容期间需要解锁，能够让其他线程继续执行</span></span><br><span class="line">        lock.unlock(); <span class="comment">// must release and then re-acquire main lock</span></span><br><span class="line">        Object[] newArray = <span class="keyword">null</span>;<span class="comment">//新数组</span></span><br><span class="line">     	<span class="comment">//cas标识，如果为0，表示当前没有线程对数组扩容</span></span><br><span class="line">        <span class="keyword">if</span> (allocationSpinLock == <span class="number">0</span> &amp;&amp;</span><br><span class="line">            <span class="comment">//cas方式设置值0-&gt;1</span></span><br><span class="line">            UNSAFE.compareAndSwapInt(<span class="keyword">this</span>, allocationSpinLockOffset,</span><br><span class="line">                                     <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//开始扩容</span></span><br><span class="line">                <span class="comment">//计算新的数组长度</span></span><br><span class="line">                <span class="keyword">int</span> newCap = oldCap + ((oldCap &lt; <span class="number">64</span>) ?</span><br><span class="line">                                       (oldCap + <span class="number">2</span>) : <span class="comment">// grow faster if small</span></span><br><span class="line">                                       (oldCap &gt;&gt; <span class="number">1</span>));</span><br><span class="line">                <span class="comment">//计算容量不能超过最大大小</span></span><br><span class="line">                <span class="keyword">if</span> (newCap - MAX_ARRAY_SIZE &gt; <span class="number">0</span>) &#123;    <span class="comment">// possible overflow</span></span><br><span class="line">                    <span class="keyword">int</span> minCap = oldCap + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (minCap &lt; <span class="number">0</span> || minCap &gt; MAX_ARRAY_SIZE)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">                    newCap = MAX_ARRAY_SIZE;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (newCap &gt; oldCap &amp;&amp; queue == array)</span><br><span class="line">                    newArray = <span class="keyword">new</span> Object[newCap];<span class="comment">//创建新的数组用来保存元素</span></span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                allocationSpinLock = <span class="number">0</span>;<span class="comment">//重置标识，表示扩容完毕</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newArray == <span class="keyword">null</span>) <span class="comment">// back off if another thread is allocating</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">        lock.lock();<span class="comment">//重新加锁</span></span><br><span class="line">     	<span class="comment">//如果数组还是原来的数组</span></span><br><span class="line">        <span class="keyword">if</span> (newArray != <span class="keyword">null</span> &amp;&amp; queue == array) &#123;</span><br><span class="line">            queue = newArray;<span class="comment">//设置为新数组</span></span><br><span class="line">            System.arraycopy(array, <span class="number">0</span>, newArray, <span class="number">0</span>, oldCap);<span class="comment">//转移元素到新数组</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="take过程"><a href="#take过程" class="headerlink" title="take过程"></a>take过程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> E <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">        lock.lockInterruptibly();<span class="comment">//加锁</span></span><br><span class="line">        E result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> ( (result = dequeue()) == <span class="keyword">null</span>)</span><br><span class="line">                notEmpty.await();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = size - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;<span class="comment">//队列为空</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Object[] array = queue;</span><br><span class="line">            E result = (E) array[<span class="number">0</span>];<span class="comment">//取出第一个,二叉堆中第一个最小</span></span><br><span class="line">            E x = (E) array[n];</span><br><span class="line">            array[n] = <span class="keyword">null</span>;<span class="comment">//设置为空</span></span><br><span class="line">            Comparator&lt;? <span class="keyword">super</span> E&gt; cmp = comparator;</span><br><span class="line">            <span class="keyword">if</span> (cmp == <span class="keyword">null</span>)</span><br><span class="line">                siftDownComparable(<span class="number">0</span>, x, array, n);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                siftDownUsingComparator(<span class="number">0</span>, x, array, n, cmp);</span><br><span class="line">            size = n;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//空元素堆内下沉实现</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">siftDownComparable</span><span class="params">(<span class="keyword">int</span> k, T x, Object[] array, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Comparable&lt;? <span class="keyword">super</span> T&gt; key = (Comparable&lt;? <span class="keyword">super</span> T&gt;) x;</span><br><span class="line">            <span class="keyword">int</span> half = n &gt;&gt;&gt; <span class="number">1</span>; <span class="comment">// loop while a non-leaf  half最后一个有子节点的父节点下标</span></span><br><span class="line">            <span class="keyword">while</span> (k &lt; half) &#123; </span><br><span class="line">                <span class="keyword">int</span> child = (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>; <span class="comment">// assume left child is least</span></span><br><span class="line">                Object c = array[child];</span><br><span class="line">                <span class="keyword">int</span> right = child + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (right &lt; n</span><br><span class="line">                        &amp;&amp; ((Comparable&lt;? <span class="keyword">super</span> T&gt;) c)</span><br><span class="line">                                .compareTo((T) array[right]) &gt; <span class="number">0</span>)</span><br><span class="line">                    c = array[child = right];  <span class="comment">//比较出左右子节点更小的那个子节点</span></span><br><span class="line">                <span class="keyword">if</span> (key.compareTo((T) c) &lt;= <span class="number">0</span>) <span class="comment">//如果左右子节点的最小值大于数组末尾的值，那么数组末尾的值直接放到父节点，空节点下沉结束</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                array[k] = c; <span class="comment">// 如果子节点最小值小于数据末尾的值，子节点上浮到父空节点</span></span><br><span class="line">                k = child; <span class="comment">//空节点下滑到最小子节点的位置</span></span><br><span class="line">            &#125;</span><br><span class="line">            array[k] = key; <span class="comment">// 最后空节点填充数组最后的值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Java常用集合</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构01--红黑树转化过程</title>
    <url>/jwangcloud/1785477089/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="红黑树转化过程"><a href="#红黑树转化过程" class="headerlink" title="红黑树转化过程"></a>红黑树转化过程</h1><p>添加操作宏观过程：首先将红黑树当作一颗查找树一样将结点插入，然后将结点着为红色，最后通过旋转和重新着色的方法使之重新成为红黑树</p>
<span id="more"></span>

<p>将新加入的结点涂成红色的原因：</p>
<p>1）不违背红黑树的性质5：从任意一个结点出发到空叶子结点，经过的黑色结点个数相同</p>
<p>2）按照红黑树的性质4我们知道红黑树中黑结点的个数至少是红结点个数的两倍，所以新增结点的父亲结点是黑结点的概率比较大，如果新增结点的父节点为黑色，那么此时不需要再去进行任何调整操作，因此效率很高，所以新结点应该涂成红色</p>
<p>少违背一条性质，意味着我们后续的旋转和重新着色操作会简单很多</p>
<p>现在我们来看看新增一个红色的结点会违背红黑树的5条性质中的哪些？</p>
<blockquote>
<p>1）每个结点或红或黑</p>
<p>2）根结点是黑色</p>
<p>3）空叶子结点是黑色</p>
<p>4）如果一个结点是红色，那么它的子节点是黑色</p>
<p>5）从任意一个结点出发到空的叶子结点经过的黑结点个数相同</p>
</blockquote>
<p>1.显然没有违背</p>
<p>2.根据查找树的特定，插入操作不好改变根结点，所以也没有违背</p>
<p>3.插入的肯定不是空叶子结点，所以也没有违背</p>
<p>4.有可能违背！！！</p>
<p>5.插入结点涂成红色就是为了不违背第5条性质</p>
<p>现在我们来分析一下新增的结点（红色）插入之后可能面临的几种情况，以及他们的处理措施</p>
<p>1.插入的结点为根结点</p>
<p>将新插入的红色结点变成黑色结点，满足根结点为黑色结点的要求！</p>
<p>2.父亲结点为黑色结点</p>
<p>这个时候不需要进行任何调整操作，此时的树仍然是一颗标准的红黑树</p>
<p>3.父亲结点为红色结点的情况下，叔叔结点为红色结点（不用考虑左右）</p>
<p>解决方案：将叔叔和父亲结点改为黑色，爷爷结点改为红色，未完</p>
<p>然后又将爷爷结点当作插入结点看待，一直进行上面的操作，直到当前结点为根结点，然后将根结点变成黑色</p>
<p>原图：</p>
<p>图4</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213128551-1953687643.jpg"><img data-src="/jwangcloud/1785477089/1301290-20190418213129039-1750834042.jpg" alt="红黑树"></a></p>
<p>插入一个125的结点：</p>
<p>图5</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213129398-2128554117.jpg"><img data-src="/jwangcloud/1785477089/1301290-20190418213129777-667737935.jpg" alt="红黑树"></a></p>
<p>现在125结点和130结点都是红色的，显然违背了规则4，所以将新插入结点的父亲130结点和插入结点的叔叔结点150变成黑色，并将新插入结点的爷爷结点140变成红色，图如下：</p>
<p>图6</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213130230-631833017.jpg"><img data-src="/jwangcloud/1785477089/1301290-20190418213130624-539000870.jpg" alt="红黑树"></a></p>
<p>然后又将140结点当作新插入结点处理（因为140结点和新插入结点面临的情况都是一样的：和父亲结点都是红色），也就是做如下处理：将140结点的父亲结点120和140的叔叔结点60变成黑色结点，将140结点的爷爷结点变成红色，因为遍历到了根结点，要满足根结点是黑色的性质要求，所以又将140的爷爷结点也就是根结点变成黑色，图如下：</p>
<p>图7</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213130950-338187702.jpg"><img data-src="/jwangcloud/1785477089/1301290-20190418213131667-1276564969.jpg" alt="红黑树"></a></p>
<p>到这里，为新插入结点125所做的某些结点重新着色的操作就完成了，现在该树是标准的红黑树了！</p>
<p>4.新插入的结点的父亲结点为红色，其叔叔结点为黑色，</p>
<p>1）父亲结点为爷爷结点的左孩子，新插入结点为父节点的左孩子（左左情况）</p>
<p>2）父亲结点为爷爷结点的右孩子，新插入结点为父亲结点的右孩子（右右情况）</p>
<p>上述两种情况都是同一个处理办法</p>
<p>比如下图，新插入结点为25，其父亲结点30为红色，其叔叔结点为空黑色叶子结点，且新插入结点和其父节点都是左孩子：</p>
<p>图8</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213132372-445385592.jpg"><img data-src="/jwangcloud/1785477089/1301290-20190418213133079-1448372531.jpg" alt="红黑树"></a></p>
<p>我们将其父亲结点和爷爷结点颜色互换，然后针对爷爷结点进行一次左旋，图如下：</p>
<p>图9</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213133579-1872891758.jpg"><img data-src="/jwangcloud/1785477089/1301290-20190418213134136-940254682.jpg" alt="红黑树"></a></p>
<p>现在这颗树完全满足红黑树的5个性质了（最好自己对照5个性质看一下）</p>
<p>现在又一个问题，我们为什么要进行旋转？</p>
<p>假设我们只将新增结点的父亲结点和其爷爷结点的颜色互换了，图如下：</p>
<p>图10</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213136355-1206399166.jpg"><img data-src="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213136770-843083460.jpg" alt="Inked红黑树(D:/课程研发/项目三加强课程/jdk集合/assets/1301290-20190418213136770-843083460.jpg)_LI"></a></p>
<p>我们发现上述两条到叶子结点的路径经过的黑色结点数量不一样！！！，所以它不满足红黑树的第5条性质，所以这就是我们旋转的意义所在！！！（因为无论你这么旋转都没有改变结点颜色，改变的是结点的位置，而这位置改变刚好能使得树满足红黑树的第5条性质！）</p>
<p>5.新插入的结点的父亲结点是红色，其叔叔结点是黑色</p>
<p>1）插入结点是右结点，父节点是左结点</p>
<p>2）插入结点是左结点，父亲结点是右结点</p>
<p>上述两种情况都是同一个处理办法</p>
<p>比如下图，新插入结点是126，其父结点125为红色，其叔叔结点为空的黑色结点，而且插入结点是右结点，父结点是左结点</p>
<p>图11</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213137143-547506862.jpg"><img data-src="/jwangcloud/1785477089/1301290-20190418213137634-1958102851.jpg" alt="红黑树"></a></p>
<p>我们将父亲结点125看作当前结点进行左旋，旋转结果如下：</p>
<p>图12</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213138385-1642628320.jpg"><img data-src="/jwangcloud/1785477089/1301290-20190418213139039-597178902.jpg" alt="红黑树"></a></p>
<p>现在我们的当前结点是125，现在125的处境和上面的情况4是一样的（父节点为红，叔叔结点为黑，插入结点为左结点，父亲结点也为左孩子）现在我们继续按照情况4的处理办法处理上述情况（措施和情况4一样，父亲结点和爷爷结点互换颜色，然后针对爷爷结点进行左旋），处理后情况如下：</p>
<p>图13</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213139526-1239863354.jpg"><img data-src="/jwangcloud/1785477089/1301290-20190418213140154-225773995.jpg" alt="红黑树"></a></p>
<p>现在树就是一颗标准的红黑树了！</p>
<p>我们现在总结一下插入结点面临的几种情况以及采取的措施：</p>
<blockquote>
<p>1.树为空，插入的结点为根结点</p>
<p>直接将插入的结点变成黑色</p>
<p>2.父亲结点为黑色结点</p>
<p>不需要任何操作</p>
<p>3.父亲结点为红色结点的情况下：</p>
<p>  3.1 叔叔结点也为红色结点</p>
<p>  将叔叔和父亲结点改为黑色，爷爷结点改为红色，未完，然后又将爷爷结点当作插入结点看待，一直进行上</p>
<p>  面的操作，直到当前结点为根结点，然后将根结点变成黑色</p>
<p>  3.2 叔叔结点为黑色结点的情况下：</p>
<p>​    3.2.1 （父亲结点为左孩子，插入结点也为左孩子）||（父亲结点为右孩子，插入结点也为右孩子）</p>
<p>​    将父亲结点和爷爷结点的颜色互换，然后针对爷爷结点进行一次左旋</p>
<p>​    3.2.2 （父亲结点为左孩子，插入结点为右孩子）||（父亲结点为右孩子，插入结点为左孩子）</p>
<p>​    针对父结点进行左旋，此时左旋后的情况必定是3.2.1的情况，然后按照3.2.1的情况处理</p>
</blockquote>
<p>现在我们来讨论一下，为什么插入的情况只有上面这些：</p>
<blockquote>
<p>1.爷爷结点为红色结点的情况下，父亲结点只能为黑色（红黑树的性质4），处理操作：上面情况2</p>
<p>2.爷爷结点为黑色的情况下，父亲结点和叔叔结点：可以为红色，也可以为黑色</p>
<p>2.1 父亲结点为黑，叔叔结点为黑：处理操作：上面情况2</p>
<p>2.2 父亲结点为黑，叔叔结点为红：处理操作：上面情况2</p>
<p>2.3 父亲结点为红，叔叔结点为红：处理操作：上面情况3.1</p>
<p>   （上面3种情况都是不用考虑左右的）</p>
<p>2.4 父亲结点为红，叔叔结点为黑：</p>
<p>   2.4.1 父亲结点为左孩子，叔叔结点为左孩子：处理操作：上面情况3.2.1</p>
<p>   2.4.2 父亲结点为右孩子，叔叔结点为右孩子：处理操作：上面情况3.2.1</p>
<p>   2.4.3 父亲结点为左孩子，插入结点为右孩子：处理操作：上面情况3.2.2</p>
<p>   2.4.4 父亲结点为右孩子，插入结点为左孩子：处理操作：上面情况3.2.2</p>
</blockquote>
<p>总结：可以发现我们没有遗漏任何情况，所有可能面临的情况我们都处理了</p>
<p>五.红黑树之删除结点</p>
<p>先说一个删除结点的过程原理：首先将红黑树当作一个二叉查找树，将该结点从二叉查找树种删除，然后通过一些列重新着色操作等一系列措施来修正该树，使之重新成为一颗红黑树</p>
<p>删除结点其实很容易，难的是如何使得删除结点后的树重新成为一个红黑树</p>
<p>我们可以根据删除结点N的儿子个数分为三种情况：</p>
<p>1.删除结点没有儿子</p>
<p>2.删除结点有1个儿子</p>
<p>3.删除结点有2个儿子</p>
<p>接下来我们又可以对以上三种情况继续进行细分</p>
<blockquote>
<p>一.删除结点没有儿子的情况：</p>
<p>1）删除结点为红色</p>
<p>2）删除结点为黑色，其兄弟结点没有儿子</p>
<p>3）删除结点为黑色，其兄弟结点有一个孩子不空，并且该孩子为右孩子</p>
<p>4）删除结点为黑色，其兄弟结点有一个孩子不空，并且该孩子为左孩子</p>
<p>5）删除结点为黑色，其兄弟结点有两个孩子，而且兄弟结点为红色</p>
<p>6）删除结点为黑色，其兄弟结点有两个孩子，而且兄弟结点为黑色</p>
<p>二.删除结点只有一个儿子的情况：</p>
<p>1）删除结点为黑色，其唯一的儿子结点为红色（必定是红色，要不然不符合红黑树的第5条性质）</p>
<p>2）删除结点为红色，其儿子结点只能为黑：红黑树中不存在这种情况，要不然无法满足红黑树第5条性质</p>
<p>三.删除结点有两个儿子的情况：</p>
</blockquote>
<p>现在我们就具体分析一下面临不同的操作到达该这么操作：</p>
<p>一.删除结点没有儿子的情况：</p>
<p>1）删除结点为红色</p>
<p>直接删除，比如下图，想要删除130结点</p>
<p>图14</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213142426-2090249626.jpg"><img data-src="/jwangcloud/1785477089/1301290-20190418213143002-1972356300.jpg" alt="红黑树2"></a></p>
<p>直接删除130结点，结果图如下：</p>
<p>图15</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213143416-622890444.jpg"><img data-src="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213143907-1237419880.jpg" alt="红黑树2(D:/课程研发/项目三加强课程/jdk集合/assets/1301290-20190418213143907-1237419880.jpg)"></a></p>
<p>因为删除的是红色结点，不会影响红黑树第5条性质，所以可以直接删除</p>
<p>2）删除结点为黑色，其兄弟结点没有儿子</p>
<p>这种情况下其兄弟结点也肯定是黑色的（要满足红黑树第5条性质），假设现在要删除的是150这个结点，原图如下：</p>
<p>图16</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213144218-1282006452.jpg"><img data-src="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213144640-886967587.jpg" alt="红黑树2(D:/课程研发/项目三加强课程/jdk集合/assets/1301290-20190418213144640-886967587.jpg)"></a></p>
<p>先删除结点150，然后将兄弟结点126变成红色，父亲结点140变成黑色，结果如下：<br>图17</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213145054-327962837.jpg"><img data-src="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213145413-74677869.jpg" alt="红黑树2(D:/课程研发/项目三加强课程/jdk集合/assets/1301290-20190418213145413-74677869.jpg)"></a></p>
<p>这样做的目的是为了满足红黑树的第5条性质，要不然根到最右边的叶子结点经过的黑色结点只有3个，而其他路径有4个</p>
<p>3）删除结点为黑色，其兄弟结点有一个孩子不空，并且该孩子和兄弟结点在同一边（同为左子树或者同为右子树）</p>
<p>假设现在要删除的结点为110，其兄弟结点140只有一个孩子150，而且都是右子树，满足上述条件，原图如下：</p>
<p>图18</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213145790-262880313.jpg"><img data-src="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213146047-331676828.jpg" alt="红黑树2(D:/课程研发/项目三加强课程/jdk集合/assets/1301290-20190418213146047-331676828.jpg)"></a></p>
<p>先把需要删除的结点110删除，然后这个时候需要交换兄弟结点140和父亲结点120的颜色，并且把父亲结点120涂成黑色，把兄弟结点的子节点150涂成黑色</p>
<p>1.如果兄弟结点和兄弟结点的儿子都在右子树的话：对父亲结点进行左旋</p>
<p>2.如果兄弟结点和兄弟结点的儿子都在左子树的话：对父亲结点进行右旋</p>
<p>上图是第一种情况，所以对父结点120进行左旋，结果如下：</p>
<p>图19</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213146363-1785346604.jpg"><img data-src="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213146883-809046894.jpg" alt="红黑树2(D:/课程研发/项目三加强课程/jdk集合/assets/1301290-20190418213146883-809046894.jpg)"></a></p>
<p>通过对某些结点重新着色和旋转，又将该树变成了一个标准的红黑树了</p>
<p>4）删除结点为黑色，其兄弟结点有一个孩子不空，并且该孩子和兄弟结点不在同一边（右左或者左右的情况）</p>
<p>（这种情况下，兄弟结点的儿子50结点只能为红色，要不然满足不了红黑树的第5条性质）</p>
<p>假设我们现在要删除的结点是80结点，其兄弟结点只有一个儿子，而且兄弟结点和兄弟结点的儿子是左右的情况（兄弟结点为左结点，兄弟结点的儿子为右结点），符合上述要求，原图如下：</p>
<p>图20</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213147180-1045105456.jpg"><img data-src="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213147585-336052673.jpg" alt="红黑树2(D:/课程研发/项目三加强课程/jdk集合/assets/1301290-20190418213147585-336052673.jpg)"></a></p>
<p>现在我们先将需要删除的80结点删除，然后将兄弟结点和兄弟结点的儿子结点颜色互换</p>
<p>如果兄弟结点是左子树，兄弟结点的儿子结点是右子树：对兄弟结点进行左旋</p>
<p>如果兄弟结点是右子树，兄弟结点的儿子结点是左子树：对兄弟结点进行右旋</p>
<p>上图的情况是进行左旋，也就是对兄弟结点30进行左旋，结果如下图：</p>
<p>图21</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213147968-1502850913.jpg"><img data-src="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213148409-1345914502.jpg" alt="红黑树2(D:/课程研发/项目三加强课程/jdk集合/assets/1301290-20190418213148409-1345914502.jpg)"></a></p>
<p>注意！！，现在还没有结束变换，我们发现变换之后的红黑树情况和情况3中的情况很相似，兄弟结点50和兄弟结点的子节点30处在同一边，我们可以按照情况3的处理办法进行处理：</p>
<p>交换兄弟结点50和父亲结点60的颜色，把父亲结点60和兄弟结点的子节点30涂成黑色</p>
<p>1.如果兄弟结点和兄弟结点的儿子都在右子树的话：对父亲结点进行左旋</p>
<p>2.如果兄弟结点和兄弟结点的儿子都在左子树的话，对父亲结点进行右旋</p>
<p>上图的情况是第2中，所以对父亲结点60进行右旋，结果如下：</p>
<p>图22</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213149990-459648064.jpg"><img data-src="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213826098-454745347.jpg" alt="红黑树2(D:/课程研发/项目三加强课程/jdk集合/assets/1301290-20190418213826098-454745347.jpg)"></a></p>
<p>5)删除结点为黑色，其兄弟结点有两个孩子，兄弟结点为黑色而且两个孩子结点也为黑色</p>
<p>现在我们假设要删除的结点是130结点，其兄弟结点有两个孩子（可以把空的叶子结点看成黑色的儿子结点），而且兄弟结点和兄弟结点的儿子结点都是黑色，符合上述情况，原图如下：</p>
<p>图23</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213826558-2049643803.jpg"><img data-src="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213826841-45465719.jpg" alt="红黑树2(D:/课程研发/项目三加强课程/jdk集合/assets/1301290-20190418213826841-45465719.jpg)"></a></p>
<p>先直接删除需要删除的结点130，然后将父亲结点140和兄弟结点150颜色互换即可，结果如下：</p>
<p>图24</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213827106-1587598381.jpg"><img data-src="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213827464-669837359.jpg" alt="红黑树2(D:/课程研发/项目三加强课程/jdk集合/assets/1301290-20190418213827464-669837359.jpg)"></a></p>
<p>6)删除结点为黑色，其兄弟结点有两个孩子，而且兄弟结点为红色</p>
<p>假设我们要删除的结点是110，其兄弟结点140为红色而且有两个孩子，原图如下：</p>
<p>图25</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213827880-1100951737.jpg"><img data-src="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213828198-1874419200.jpg" alt="红黑树2(D:/课程研发/项目三加强课程/jdk集合/assets/1301290-20190418213828198-1874419200.jpg)"></a></p>
<p>我们先交换兄弟结点140和父亲结点120的颜色</p>
<p>1.被删除的元素为左子树：对父亲结点左旋</p>
<p>2.被删除的元素为右子树：对父亲结点右旋</p>
<p>上图的情况是第一种情况，所以我们对父亲结点140进行左旋，按照上面操作之后（未完），结果如下：</p>
<p>图26</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213828574-824243492.jpg"><img data-src="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213828905-466826326.jpg" alt="红黑树2(D:/课程研发/项目三加强课程/jdk集合/assets/1301290-20190418213828905-466826326.jpg)"></a></p>
<p>我们发现完成上述操作之后树还不是一个标准的红黑树（到叶子结点的一条路径黑色结点只有3个，而其他的路径有4个），我们发现现在红黑树的情况又和情况5的很像，所以我们按照情况5的做法继续：</p>
<p>我们要需要删除的结点还没有被删除（我特意留到最后删除的，就是为了在这里表示父亲结点是谁的父亲结点…）,现在我们将父亲结点120和兄弟结点130的颜色互换即可，结果如下：</p>
<p>图27</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213829226-1201577917.jpg"><img data-src="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213829608-385779842.jpg" alt="红黑树2(D:/课程研发/项目三加强课程/jdk集合/assets/1301290-20190418213829608-385779842.jpg)"></a></p>
<p>我们现在对删除结点没有儿子结点的6种删除情况进行一下总结：</p>
<p>删除结点没有儿子结点：</p>
<blockquote>
<p>1）删除结点为红色：</p>
<p>直接删除</p>
<p>2）删除结点为黑色，其兄弟结点没有儿子：</p>
<p>兄弟结点变红，父亲结点变黑，然后将父亲结点当作当前结点按照这几种情形处理，直到当前结点为根结点</p>
<p>3）删除结点为黑色，其兄弟结点有一个孩子不空，并且该孩子和兄弟结点在同一边（同为左子树或者同为右子树）：</p>
<p>1.不管是括号中那种情况，先交换兄弟结点和父亲结点的颜色，并且把父亲结点和兄弟结点的子结点涂成黑色</p>
<p>2.1如果兄弟结点和兄弟结点的儿子都在右子树的话：对父亲结点进行左旋</p>
<p>2.2如果兄弟结点和兄弟结点的儿子都在左子树的话：对父亲结点进行右旋</p>
<p>4）删除结点为黑色，其兄弟结点有一个孩子不空，并且该孩子和兄弟结点不在同一边（右左或者左右的情况）：</p>
<p>1.先将兄弟结点和兄弟结点的儿子结点颜色互换</p>
<p>2.1如果兄弟结点是左子树，兄弟结点的儿子结点是右子树：对兄弟结点进行左旋</p>
<p>2.2如果兄弟结点是右子树，兄弟结点的儿子结点是左子树：对兄弟结点进行右旋</p>
<p>3.将后续变换按照第3条处理</p>
<p>5)删除结点为黑色，其兄弟结点有两个孩子，兄弟结点为黑色而且两个孩子结点也为黑色：</p>
<p>1.将父亲结点和兄弟结点颜色互换</p>
<p>6）删除结点为黑色，其兄弟结点有两个孩子，而且兄弟结点为红色：</p>
<p>1.将兄弟结点和父亲结点的颜色互换</p>
<p>2.1 被删除的元素为左子树：对父亲结点左旋</p>
<p>2.2 被删除的元素为右子树：对父亲结点右旋</p>
<p>3.将后续变换按照第5条进行处理</p>
</blockquote>
<p>以上6种情况讨论的都是删除结点没有儿子的情况（空叶子结点不算儿子结点）</p>
<p>现在我们来看看删除结点仅有一个儿子结点的情况！</p>
<p>二.删除结点仅有一个儿子结点的情况</p>
<p>1）删除结点为黑色，儿子结点无论左右都可以</p>
<p>比如我们要删除的结点是120结点，删除结点为黑色，唯一的儿子结点130为红色（必须是红色，不然违背红黑树第5条性质）原图如下：</p>
<p>图28</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213830022-258318747.jpg"><img data-src="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213830431-836031235.jpg" alt="红黑树2(D:/课程研发/项目三加强课程/jdk集合/assets/1301290-20190418213830431-836031235.jpg)"></a></p>
<p>我们将需要删除的结点120删除，然后将子节点130涂黑放到被删除结点120的位置，结果如下：</p>
<p>图29</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213830742-419419153.jpg"><img data-src="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213831046-1031506610.jpg" alt="assets/1301290-20190418213831046-1031506610.jpg)"></a></p>
<p>2）删除结点为红色：其儿子结点只能为黑，红黑树中不存在这种情况，要不然无法满足红黑树第5条性质</p>
<p>总结一下删除结点只有一个儿子的情况：</p>
<blockquote>
<p>1）删除结点为黑色，儿子结点无论左右都可以</p>
<p>将儿子结点涂成黑色放到被删除结点的位置</p>
</blockquote>
<p>下面我们来看看删除结点有两个儿子结点的情况</p>
<p>三.删除结点有两个儿子结点</p>
<p>找到删除结点的右子树中最左的结点，两两值交换，然后删除结点的情况就变成了上面两种情况中的一种了</p>
<p>1.删除结点只有一个儿子的情况</p>
<p>2.删除结点没有儿子的情况</p>
<p>比如下图</p>
<p>图30</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213831356-1043670689.jpg"><img data-src="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213831789-1881553616.jpg" alt="红黑树2(D:/课程研发/项目三加强课程/jdk集合/assets/1301290-20190418213831789-1881553616.jpg)"></a></p>
<p>假设要删除的结点是120，先找到结点120右子树中最左的结点125，交换两者的值，图如下：</p>
<p>图31</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213832155-491562182.jpg"><img data-src="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213832474-2085751065.jpg" alt="红黑树2(D:/课程研发/项目三加强课程/jdk集合/assets/1301290-20190418213832474-2085751065.jpg)"></a></p>
<p>现在120仍然是要删除的结点，我们发现删除结点120没有一个儿子，而且其兄弟结点也没有儿子，那么其对应的情况为：</p>
<blockquote>
<p>2）删除结点为黑色，其兄弟结点没有儿子：</p>
<p>兄弟结点变红，父亲结点变黑</p>
</blockquote>
<p>经过上面的变形，结果如下：</p>
<p>图32</p>
<p><a href="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213832792-2073015214.jpg"><img data-src="https://img2018.cnblogs.com/blog/1301290/201904/1301290-20190418213833448-224931959.jpg" alt="红黑树2(D:/课程研发/项目三加强课程/jdk集合/assets/1301290-20190418213833448-224931959.jpg)"></a></p>
<p>经过变换，该树变成了一颗标准的红黑树</p>
<p>所以当删除结点右两个儿子结点的时候，我们只需要按照搜索二叉树的删除方法替换删除值，这样就可以将情况变成删除结点没有儿子结点或者1个儿子结点的情况处理了</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>红黑树</tag>
      </tags>
  </entry>
  <entry>
    <title>python扩展知识01--设计模式</title>
    <url>/jwangcloud/1761882267/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/python01.jpeg"></p>
<h3 id="python与设计模式"><a href="#python与设计模式" class="headerlink" title="python与设计模式"></a>python与设计模式</h3><span id="more"></span>

<h4 id="1-定义："><a href="#1-定义：" class="headerlink" title="1.定义："></a>1.定义：</h4><blockquote>
<p>设计模式是面对各种问题进行提炼和抽象而形成的解决方案。这些设计方案是前人不断试验，考虑了封装性、复用性、效率、可修改、可移植等各种因素的高度总结。它不限于一种特定的语言，它是一种解决问题的思想和方法。</p>
</blockquote>
<h4 id="2-分类"><a href="#2-分类" class="headerlink" title="2.分类"></a>2.分类</h4><p>设计模式可以分为三个大类：创建类设计模式、结构类设计模式、行为类设计模式。</p>
<p>创建类设计模式可以分为</p>
<blockquote>
<p>单例模式、工厂模式、抽象工厂模式、原型模式、建造者模式；</p>
</blockquote>
<p>结构类设计模式可以分为</p>
<blockquote>
<p>装饰器模式、适配器模式、门面模式、组合模式、享元模式、桥梁模式；</p>
</blockquote>
<p>行为类设计模式可以细分为</p>
<blockquote>
<p>策略模式、责任链模式、命令模式、中介者模式、模板模式、迭代器模式、访问者模式、观察者模式、解释器模式、备忘录模式、状态模式。</p>
</blockquote>
<h4 id="3-设计模式与软件框架"><a href="#3-设计模式与软件框架" class="headerlink" title="3.设计模式与软件框架"></a>3.设计模式与软件框架</h4><p>设计模式和软件框架在软件设计中是两个不同的研究领域：</p>
<blockquote>
<p>A、设计模式如前边的定义所讲，它指的是针对一类问题的解决方法，一个设计模式可应用于不同的框架和被不同的语言所实现；而框架则是一个应用的体系结构，是一种或多种设计模式和代码的混合体；</p>
</blockquote>
<blockquote>
<p>B、设计模式相较于框架更容易移植，并且可以用各种语言实现，而软件框架则受限于领域大环境。虽然设计模式和软件框架有很多不同，但在某些方面他们二者是统一的，即重视软件复用，提高开发效率。</p>
</blockquote>
<h4 id="4-软件架构和设计模式"><a href="#4-软件架构和设计模式" class="headerlink" title="4.软件架构和设计模式"></a>4.软件架构和设计模式</h4><p>软件架构可以由不同的框架和不同的设计模式，再加上特定的构件组合来实现；</p>
<p>框架可以根据设计模式结合特定编程语言和环境来实现。</p>
<p>设计模式就是解决单一问题的设计思路和解决方法。</p>
<h3 id="python与设计模式–单例模式"><a href="#python与设计模式–单例模式" class="headerlink" title="python与设计模式–单例模式"></a>python与设计模式–单例模式</h3><h4 id="1-单例模式"><a href="#1-单例模式" class="headerlink" title="1.单例模式"></a>1.单例模式</h4><blockquote>
<p>单例模式是所有设计模式中比较简单的一类，其定义如下：Ensure a class has only one instance, and provide a global point of access to it.（保证某一个类只有一个实例，而且在全局只有一个访问点）</p>
</blockquote>
<h4 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h4><ol>
<li>模块：</li>
</ol>
<blockquote>
<p>Python 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 .pyc 文件，当第二次导入时，就会直接加载 .pyc<br>文件，而不会再次执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Singleton(object):</span><br><span class="line">    def foo(self):</span><br><span class="line">        pass</span><br><span class="line">singleton &#x3D; Singleton()</span><br><span class="line"></span><br><span class="line">from a import singleton</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>装饰器</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def Singleton(cls):</span><br><span class="line">    _instance &#x3D; &#123;&#125;</span><br><span class="line">    def _singleton(*args, **kargs):</span><br><span class="line">        if cls not in _instance:</span><br><span class="line">            _instance[cls] &#x3D; cls(*args, **kargs)</span><br><span class="line">        return _instance[cls]</span><br><span class="line">    return _singleton</span><br><span class="line"></span><br><span class="line">@Singleton</span><br><span class="line">class A(object):</span><br><span class="line">    a &#x3D; 1</span><br><span class="line">    def __init__(self, x&#x3D;0):</span><br><span class="line">        self.x &#x3D; x</span><br><span class="line"></span><br><span class="line">a1 &#x3D; A(2)</span><br><span class="line">a2 &#x3D; A(3)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>类(多线程)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import time</span><br><span class="line">import threading</span><br><span class="line">class Singleton(object):</span><br><span class="line">    _instance_lock &#x3D; threading.Lock()</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        time.sleep(1)</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def instance(cls, *args, **kwargs):</span><br><span class="line">        if not hasattr(Singleton, &quot;_instance&quot;):</span><br><span class="line">            with Singleton._instance_lock:</span><br><span class="line">                if not hasattr(Singleton, &quot;_instance&quot;):</span><br><span class="line">                    Singleton._instance &#x3D; Singleton(*args, **kwargs)</span><br><span class="line">        return Singleton._instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def task(arg):</span><br><span class="line">    obj &#x3D; Singleton.instance()</span><br><span class="line">    print(obj)</span><br><span class="line">for i in range(10):</span><br><span class="line">    t &#x3D; threading.Thread(target&#x3D;task,args&#x3D;[i,])</span><br><span class="line">    t.start()</span><br><span class="line">time.sleep(20)</span><br><span class="line">obj &#x3D; Singleton.instance()</span><br><span class="line">print(obj)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>基于__new__方法</li>
</ol>
<blockquote>
<p>实例化一个对象时，是先执行了类的__new__方法，实例化对象；然后再执行类的__init__方法，对这个对象进行初始化，所有我们可以基于这个，实现单例模式</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">class Singleton(object):</span><br><span class="line">    _instance_lock &#x3D; threading.Lock()</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def __new__(cls, *args, **kwargs):</span><br><span class="line">        if not hasattr(Singleton, &quot;_instance&quot;):</span><br><span class="line">            with Singleton._instance_lock:</span><br><span class="line">                if not hasattr(Singleton, &quot;_instance&quot;):</span><br><span class="line">                    Singleton._instance &#x3D; object.__new__(cls)  </span><br><span class="line">        return Singleton._instance</span><br><span class="line"></span><br><span class="line">obj1 &#x3D; Singleton()</span><br><span class="line">obj2 &#x3D; Singleton()</span><br><span class="line">print(obj1,obj2)</span><br><span class="line"></span><br><span class="line">def task(arg):</span><br><span class="line">    obj &#x3D; Singleton()</span><br><span class="line">    print(obj)</span><br><span class="line"></span><br><span class="line">for i in range(10):</span><br><span class="line">    t &#x3D; threading.Thread(target&#x3D;task,args&#x3D;[i,])</span><br><span class="line">    t.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>元类metaclass</li>
</ol>
<blockquote>
<p>1.类由type创建，创建类时，type的__init__方法自动执行，类()<br>  执行type的 __call__方法(类的__new__方法,类的__init__方法)</p>
</blockquote>
<blockquote>
<p>2.对象由类创建，创建对象时，类的__init__方法自动执行，对象()执行类的 <strong>call</strong> 方法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line"></span><br><span class="line">class SingletonType(type):</span><br><span class="line">    _instance_lock &#x3D; threading.Lock()</span><br><span class="line">    def __call__(cls, *args, **kwargs):</span><br><span class="line">        if not hasattr(cls, &quot;_instance&quot;):</span><br><span class="line">            with SingletonType._instance_lock:</span><br><span class="line">                if not hasattr(cls, &quot;_instance&quot;):</span><br><span class="line">                    cls._instance &#x3D; super(SingletonType,cls).__call__(*args, **kwargs)</span><br><span class="line">        return cls._instance</span><br><span class="line"></span><br><span class="line">class Foo(metaclass&#x3D;SingletonType):</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj1 &#x3D; Foo(&#39;name&#39;)</span><br><span class="line">obj2 &#x3D; Foo(&#39;name&#39;)</span><br><span class="line">print(obj1,obj2)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-单例模式的优点："><a href="#3-单例模式的优点：" class="headerlink" title="3.单例模式的优点："></a>3.单例模式的优点：</h4><p>1、由于单例模式要求在全局内只有一个实例，因而可以节省比较多的内存空间；</p>
<p>2、全局只有一个接入点，可以更好地进行数据同步控制，避免多重占用；</p>
<p>3、单例可长驻内存，减少系统开销。</p>
<p>单例模式的应用举例：</p>
<pre><code>1、生成全局惟一的序列号；
2、访问全局复用的惟一资源，如磁盘、总线等；
3、单个对象占用的资源过多，如数据库等；
4、系统全局统一管理，如Windows下的Task Manager；
5、网站计数器。
</code></pre>
<h3 id="python设计模式–工厂模式"><a href="#python设计模式–工厂模式" class="headerlink" title="python设计模式–工厂模式"></a>python设计模式–工厂模式</h3><blockquote>
<p>通过一个指定的“工厂”获得需要的“产品”，在设计模式中主要用于抽象对象的创建过程，让用户可以指定自己想要的对象而不必关心对象的实例化过程。这样做的好处是用户只需通过固定的接口而不是直接去调用类的实例化方法来获得一个对象的实例，隐藏了实例创建过程的复杂度，解耦了生产实例和使用实例的代码，降低了维护的复杂性。</p>
</blockquote>
<h4 id="1-简单工厂"><a href="#1-简单工厂" class="headerlink" title="1.简单工厂"></a>1.简单工厂</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#coding&#x3D;utf-8</span><br><span class="line">class Mercedes(object):</span><br><span class="line">    &quot;&quot;&quot;梅赛德斯</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &quot;Mercedes-Benz&quot;</span><br><span class="line"></span><br><span class="line">class BMW(object):</span><br><span class="line">    &quot;&quot;&quot;宝马</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &quot;BMW&quot;</span><br><span class="line">        </span><br><span class="line">假设我们有两个“产品”分别是Mercedes和BMW的汽车，如果没有“工厂”来生产它们，</span><br><span class="line">我们就要在代码中自己进行实例化，如：</span><br><span class="line"></span><br><span class="line">mercedes &#x3D; Mercedes()</span><br><span class="line">bmw &#x3D; BMW()</span><br><span class="line">但现实中，你可能会面对很多汽车产品，而且每个产品的构造参数还不一样，这样在创</span><br><span class="line">建实例时会遇到麻烦。这时就可以构造一个“简单工厂”把所有汽车实例化的过程封装在里面。</span><br><span class="line"></span><br><span class="line">class SimpleCarFactory(object):</span><br><span class="line">    &quot;&quot;&quot;简单工厂</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    @staticmethod</span><br><span class="line">    def product_car(name):</span><br><span class="line">        if name &#x3D;&#x3D; &#39;mb&#39;:</span><br><span class="line">            return Mercedes()</span><br><span class="line">        elif name &#x3D;&#x3D; &#39;bmw&#39;:</span><br><span class="line">            return BMW()</span><br><span class="line">SimpleCarFactory类后，就可以通过向固定的接口传入参数获得想要的对象实例</span><br><span class="line"></span><br><span class="line">c1 &#x3D; SimpleCarFactory.product_car(&#39;mb&#39;)</span><br><span class="line">c2 &#x3D; SimpleCarFactory.product_car(&#39;bmw&#39;)</span><br></pre></td></tr></table></figure>

<h4 id="2-工厂方法"><a href="#2-工厂方法" class="headerlink" title="2.工厂方法"></a>2.工厂方法</h4><blockquote>
<p>如果我们要新增一个“产品”，例如Audi的汽车，我们除了新增一个Audi类外还要修改SimpleCarFactory内的product_car方法。这样就违背了软件设计中的开闭原则[1]，即在扩展新的类时，尽量不要修改原有代码。所以我们在简单工厂的基础上把SimpleCarFactory抽象成不同的工厂，每个工厂对应生成自己的产品，这就是工厂方法。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#coding&#x3D;utf-8</span><br><span class="line">import abc</span><br><span class="line"></span><br><span class="line">class AbstractFactory(object):</span><br><span class="line">    &quot;&quot;&quot;抽象工厂</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    __metaclass__ &#x3D; abc.ABCMeta</span><br><span class="line"></span><br><span class="line">    @abc.abstractmethod</span><br><span class="line">    def product_car(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">class MercedesFactory(AbstractFactory):</span><br><span class="line">    &quot;&quot;&quot;梅赛德斯工厂</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def product_car(self):</span><br><span class="line">        return Mercedes()</span><br><span class="line"></span><br><span class="line">class BMWFactory(AbstractFactory):</span><br><span class="line">    &quot;&quot;&quot;宝马工厂</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def product_car(self):</span><br><span class="line">        return BMW()</span><br><span class="line">我们把工厂抽象出来用abc模块[2]实现了一个抽象的基类AbstractFactory，</span><br><span class="line">这样就可以通过特定的工厂来获得特定的产品实例了：</span><br><span class="line"></span><br><span class="line">c1 &#x3D; MercedesFactory().product_car()</span><br><span class="line">c2 &#x3D; BMWFactory().product_car()</span><br><span class="line"></span><br><span class="line">每个工厂负责生产自己的产品也避免了我们在新增产品时需要修改工厂的代码，</span><br><span class="line">而只要增加相应的工厂即可。如新增一个Audi产品，只需新增一个Audi类和AudiFactory类。</span><br></pre></td></tr></table></figure>

<h4 id="3-抽象工厂"><a href="#3-抽象工厂" class="headerlink" title="3.抽象工厂"></a>3.抽象工厂</h4><blockquote>
<p>如果我们要生产很多产品，就会发现我们同样需要写很多对应的工厂类。比如如果MercedesFactory和BMWFactory不仅生产小汽车，还要生产SUV，那我们用工厂方法就要再多构造两个生产SUV的工厂类。所以为了解决这个问题，我们就要再更进一步的抽象工厂类，让一个工厂可以生产同一类的多个产品，这就是抽象工厂</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import abc</span><br><span class="line"></span><br><span class="line"># 两种小汽车</span><br><span class="line">class Mercedes_C63(object):</span><br><span class="line">    &quot;&quot;&quot;梅赛德斯 C63</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &quot;Mercedes-Benz: C63&quot;</span><br><span class="line"></span><br><span class="line">class BMW_M3(object):</span><br><span class="line">    &quot;&quot;&quot;宝马 M3</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &quot;BMW: M3&quot;</span><br><span class="line"></span><br><span class="line">#　两种SUV</span><br><span class="line">class Mercedes_G63(object):</span><br><span class="line">    &quot;&quot;&quot;梅赛德斯 G63</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &quot;Mercedes-Benz: G63&quot;</span><br><span class="line"></span><br><span class="line">class BMW_X5(object):</span><br><span class="line">    &quot;&quot;&quot;宝马 X5</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &quot;BMW: X5&quot;</span><br><span class="line"></span><br><span class="line">class AbstractFactory(object):</span><br><span class="line">    &quot;&quot;&quot;抽象工厂</span><br><span class="line">    可以生产小汽车外，还可以生产SUV</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    __metaclass__ &#x3D; abc.ABCMeta</span><br><span class="line"></span><br><span class="line">    @abc.abstractmethod</span><br><span class="line">    def product_car(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    @abc.abstractmethod</span><br><span class="line">    def product_suv(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">class MercedesFactory(AbstractFactory):</span><br><span class="line">    &quot;&quot;&quot;梅赛德斯工厂</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def product_car(self):</span><br><span class="line">        return Mercedes_C63()</span><br><span class="line"></span><br><span class="line">    def product_suv(self):</span><br><span class="line">        return Mercedes_G63()</span><br><span class="line"></span><br><span class="line">class BMWFactory(AbstractFactory):</span><br><span class="line">    &quot;&quot;&quot;宝马工厂</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def product_car(self):</span><br><span class="line">        return BMW_M3()</span><br><span class="line"></span><br><span class="line">    def product_suv(self):</span><br><span class="line">        return BMW_X5()</span><br><span class="line"></span><br><span class="line">让基类AbstractFactory同时可以生产汽车和SUV，然后令MercedesFactory和BMWFactory</span><br><span class="line">继承AbstractFactory并重写product_car和product_suv方法即可。</span><br><span class="line"></span><br><span class="line">c1 &#x3D; MercedesFactory().product_car()</span><br><span class="line">s1 &#x3D; MercedesFactory().product_suv()</span><br><span class="line">print(c1, s1)</span><br><span class="line">s2 &#x3D; BMWFactory().product_suv()</span><br><span class="line">c2 &#x3D; BMWFactory().product_car()</span><br><span class="line">print(c2, s2)</span><br></pre></td></tr></table></figure>


<h4 id="4-抽象工厂模式与工厂方法模式区别"><a href="#4-抽象工厂模式与工厂方法模式区别" class="headerlink" title="4.抽象工厂模式与工厂方法模式区别"></a>4.抽象工厂模式与工厂方法模式区别</h4><ol>
<li>抽象工厂中的一个工厂对象可以负责多个不同产品对象的创建 ，这样比工厂方法模式更为简单、有效率。</li>
</ol>
<p>工厂模式、抽象工厂模式的优点：</p>
<blockquote>
<p>1、工厂模式巨有非常好的封装性，代码结构清晰；在抽象工厂模式中，其结构还可以随着需要进行更深或者更浅的抽象层级调整，非常灵活；</p>
</blockquote>
<blockquote>
<p>2、屏蔽产品类，使产品的被使用业务场景和产品的功能细节可以分而开发进行，是比较典型的解耦框架。</p>
</blockquote>
<ol start="2">
<li>工厂模式、抽象工厂模式的使用场景： 1、当系统实例要求比较灵活和可扩展时，可以考虑工厂模式或者抽象工厂模式实现。比如，<pre><code> 在通信系统中，高层通信协议会很多样化，同时，上层协议依赖于下层协议，
 那么就可以对应建立对应层级的抽象工厂，根据不同的“产品需求”去生产定制的实例。
</code></pre>
</li>
</ol>
<h3 id="python与设计模式–建造者模式"><a href="#python与设计模式–建造者模式" class="headerlink" title="python与设计模式–建造者模式"></a>python与设计模式–建造者模式</h3><blockquote>
<p>建造者模式的定义如下：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>
</blockquote>
<blockquote>
<p>在建造者模式中，还可以加一个Director类，用以安排已有模块的构造步骤。对于在建造者中有比较严格的顺序要求时，该类会有比较大的用处。</p>
</blockquote>
<h4 id="快餐例："><a href="#快餐例：" class="headerlink" title="快餐例："></a>快餐例：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主餐</span><br><span class="line">class Burger():</span><br><span class="line">    name&#x3D;&quot;&quot;</span><br><span class="line">    price&#x3D;0.0</span><br><span class="line">    def getPrice(self):</span><br><span class="line">        return self.price</span><br><span class="line">    def setPrice(self,price):</span><br><span class="line">        self.price&#x3D;price</span><br><span class="line">    def getName(self):</span><br><span class="line">        return self.name</span><br><span class="line">class cheeseBurger(Burger):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.name&#x3D;&quot;cheese burger&quot;</span><br><span class="line">        self.price&#x3D;10.0</span><br><span class="line">class spicyChickenBurger(Burger):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.name&#x3D;&quot;spicy chicken burger&quot;</span><br><span class="line">        self.price&#x3D;15.0</span><br><span class="line">小食</span><br><span class="line">class Snack():</span><br><span class="line">    name &#x3D; &quot;&quot;</span><br><span class="line">    price &#x3D; 0.0</span><br><span class="line">    type &#x3D; &quot;SNACK&quot;</span><br><span class="line">    def getPrice(self):</span><br><span class="line">        return self.price</span><br><span class="line">    def setPrice(self, price):</span><br><span class="line">        self.price &#x3D; price</span><br><span class="line">    def getName(self):</span><br><span class="line">        return self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class chips(Snack):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.name &#x3D; &quot;chips&quot;</span><br><span class="line">        self.price &#x3D; 6.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class chickenWings(Snack):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.name &#x3D; &quot;chicken wings&quot;</span><br><span class="line">        self.price &#x3D; 12.0</span><br><span class="line">饮料</span><br><span class="line">class Beverage():</span><br><span class="line">    name &#x3D; &quot;&quot;</span><br><span class="line">    price &#x3D; 0.0</span><br><span class="line">    type &#x3D; &quot;BEVERAGE&quot;</span><br><span class="line">    def getPrice(self):</span><br><span class="line">        return self.price</span><br><span class="line">    def setPrice(self, price):</span><br><span class="line">        self.price &#x3D; price</span><br><span class="line">    def getName(self):</span><br><span class="line">        return self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class coke(Beverage):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.name &#x3D; &quot;coke&quot;</span><br><span class="line">        self.price &#x3D; 4.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class milk(Beverage):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.name &#x3D; &quot;milk&quot;</span><br><span class="line">        self.price &#x3D; 5.0</span><br><span class="line"></span><br><span class="line">一个订单类。假设，一个订单，包括一份主食，一份小食，一种饮料。（省去一些异常判断）</span><br><span class="line"></span><br><span class="line">class order():</span><br><span class="line">    burger&#x3D;&quot;&quot;</span><br><span class="line">    snack&#x3D;&quot;&quot;</span><br><span class="line">    beverage&#x3D;&quot;&quot;</span><br><span class="line">    def __init__(self,orderBuilder):</span><br><span class="line">        self.burger&#x3D;orderBuilder.bBurger</span><br><span class="line">        self.snack&#x3D;orderBuilder.bSnack</span><br><span class="line">        self.beverage&#x3D;orderBuilder.bBeverage</span><br><span class="line">    def show(self):</span><br><span class="line">        print &quot;Burger:%s&quot;%self.burger.getName()</span><br><span class="line">        print &quot;Snack:%s&quot;%self.snack.getName()</span><br><span class="line">        print &quot;Beverage:%s&quot;%self.beverage.getName()</span><br><span class="line"></span><br><span class="line">orderBuilder就是建造者模式中所谓的“建造者”了</span><br><span class="line"></span><br><span class="line">class orderBuilder():</span><br><span class="line">    bBurger&#x3D;&quot;&quot;</span><br><span class="line">    bSnack&#x3D;&quot;&quot;</span><br><span class="line">    bBeverage&#x3D;&quot;&quot;</span><br><span class="line">    def addBurger(self,xBurger):</span><br><span class="line">        self.bBurger&#x3D;xBurger</span><br><span class="line">    def addSnack(self,xSnack):</span><br><span class="line">        self.bSnack&#x3D;xSnack</span><br><span class="line">    def addBeverage(self,xBeverage):</span><br><span class="line">        self.bBeverage&#x3D;xBeverage</span><br><span class="line">    def build(self):</span><br><span class="line">        return order(self)</span><br><span class="line">        </span><br><span class="line">订单生成</span><br><span class="line"></span><br><span class="line">if  __name__&#x3D;&#x3D;&quot;__main__&quot;:</span><br><span class="line">    order_builder&#x3D;orderBuilder()</span><br><span class="line">    order_builder.addBurger(spicyChickenBurger())</span><br><span class="line">    order_builder.addSnack(chips())</span><br><span class="line">    order_builder.addBeverage(milk())</span><br><span class="line">    order_1&#x3D;order_builder.build()</span><br><span class="line">    order_1.show()</span><br><span class="line">    </span><br><span class="line">构造步骤</span><br><span class="line"></span><br><span class="line">class orderDirector():</span><br><span class="line">    order_builder&#x3D;&quot;&quot;</span><br><span class="line">    def __init__(self,order_builder):</span><br><span class="line">        self.order_builder&#x3D;order_builder</span><br><span class="line">    def createOrder(self,burger,snack,beverage):</span><br><span class="line">        self.order_builder.addBurger(burger)</span><br><span class="line">        self.order_builder.addSnack(snack)</span><br><span class="line">        self.order_builder.addBeverage(beverage)</span><br><span class="line">        return self.order_builder.build()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-优缺："><a href="#3-优缺：" class="headerlink" title="3.优缺："></a>3.优缺：</h4><pre><code>1、封装性好，用户可以不知道对象的内部构造和细节，就可以直接建造对象；
2、系统扩展容易；
3、建造者模式易于使用，非常灵活。在构造性的场景中很容易实现“流水线”；
4、便于控制细节。
</code></pre>
<p>使用场景：</p>
<blockquote>
<p>1、 目标对象由组件构成的场景中，很适合建造者模式。例如，在一款赛车游戏中，车辆生成时，需要根据级别、环境等，选择轮胎、悬挂、骨架等部件，构造一辆“赛车”；</p>
</blockquote>
<blockquote>
<p>2、 在具体的场景中，对象内部接口需要根据不同的参数而调用顺序有所不同时，可以使用建造者模式。例如：一个植物养殖器系统，对于某些不同的植物，浇水、施加肥料的顺序要求可能会不同，因而可以在Director中维护一个类似于队列的结构，在实例化时作为参数代入到具体建造者中。</p>
</blockquote>
<p>缺点：</p>
<pre><code>1、“加工工艺”对用户不透明。（封装的两面性）
</code></pre>
<h3 id="python设计模式–原型模式"><a href="#python设计模式–原型模式" class="headerlink" title="python设计模式–原型模式"></a>python设计模式–原型模式</h3><h4 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h4><p>原型模式定义如下：用原型实例指定创建对象的种类，并且通过复制这些原型创建新的对象。<br>需要注意一点的是，进行clone操作后，新对象的构造函数没有被二次执行，新对象的内容是从内存里直接拷贝的。</p>
<blockquote>
<p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>
</blockquote>
<p><img data-src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/56e6c262b1510b59beba7552f07522ae.png" alt="原型模式"></p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><blockquote>
<p>从简历原型，生成新的简历</p>
<p>简历类Resume提供的Clone()方法其实并不是真正的Clone，只是为已存在对象增加了一次引用。</p>
<p>Python为对象提供的copy模块中的copy方法和deepcopy方法已经实现了原型模式，但由于例子的层次较浅，二者看不出区别。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import copy</span><br><span class="line">class WorkExp:</span><br><span class="line">    place&#x3D;&quot;&quot;</span><br><span class="line">    year&#x3D;0</span><br><span class="line"></span><br><span class="line">class Resume:</span><br><span class="line">    name &#x3D; &#39;&#39;</span><br><span class="line">    age &#x3D; 0</span><br><span class="line">    def __init__(self,n):</span><br><span class="line">        self.name &#x3D; n</span><br><span class="line">    def SetAge(self,a):</span><br><span class="line">        self.age &#x3D; a</span><br><span class="line">    def SetWorkExp(self,p,y):</span><br><span class="line">        self.place &#x3D; p</span><br><span class="line">        self.year &#x3D; y</span><br><span class="line">    def Display(self):</span><br><span class="line">        print self.age</span><br><span class="line">        print self.place</span><br><span class="line">        print self.year</span><br><span class="line">    def Clone(self):</span><br><span class="line">    #实际不是“克隆”，只是返回了自身</span><br><span class="line">        return self</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    a &#x3D; Resume(&quot;a&quot;)</span><br><span class="line">    b &#x3D; a.Clone()</span><br><span class="line">    c &#x3D; copy.copy(a)</span><br><span class="line">    d &#x3D; copy.deepcopy(a)</span><br><span class="line">    a.SetAge(7)</span><br><span class="line">    b.SetAge(12)</span><br><span class="line">    c.SetAge(15)</span><br><span class="line">    d.SetAge(18)</span><br><span class="line">    a.SetWorkExp(&quot;PrimarySchool&quot;,1996)</span><br><span class="line">    b.SetWorkExp(&quot;MidSchool&quot;,2001)</span><br><span class="line">    c.SetWorkExp(&quot;HighSchool&quot;,2004)</span><br><span class="line">    d.SetWorkExp(&quot;University&quot;,2007)</span><br><span class="line">    a.Display()</span><br><span class="line">    b.Display()</span><br><span class="line">    c.Display()</span><br><span class="line">    d.Display()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="原型模式的优缺点和使用场景"><a href="#原型模式的优缺点和使用场景" class="headerlink" title="原型模式的优缺点和使用场景"></a>原型模式的优缺点和使用场景</h4><ol>
<li><p>优点：</p>
<pre><code> 1、性能极佳，直接拷贝比在内存里直接新建实例节省不少的资源；
 2、简化对象创建，同时避免了构造函数的约束，不受构造函数的限制直接复制对象，是优
 点，也有隐患，这一点还是需要多留意一些。
</code></pre>
</li>
<li><p>使用场景：</p>
<pre><code> 1、对象在修改过后，需要复制多份的场景。如本例和其它一些涉及到复制、粘贴的场景；
 2、需要优化资源的情况。如，需要在内存中创建非常多的实例，可以通过原型模式来减少
     资源消耗。此时，原型模式与工厂
     模式配合起来，不管在逻辑上还是结构上，都会达到不错的效果；
 3、某些重复性的复杂工作不需要多次进行。如对于一个设备的访问权限，多个对象不用各
     申请一遍权限，由一个设备申请后，通过原型模式将权限交给可信赖的对象，
     既可以提升效率，又可以节约资源。
</code></pre>
</li>
<li><p>原型模式的缺点</p>
<pre><code> 1、深拷贝和浅拷贝的使用需要事先考虑周到；
 2、某些编程语言中，拷贝会影响到静态变量和静态函数的使用。
 
 
</code></pre>
</li>
</ol>
<h3 id="Python与设计模式–代理模式"><a href="#Python与设计模式–代理模式" class="headerlink" title="Python与设计模式–代理模式"></a>Python与设计模式–代理模式</h3><p>代理模式是一种使用频率非常高的模式，在多个著名的开源软件和当前多个著名的互联网产品后台程序中都有所应用。下面我们用一个抽象化的简单例子，来说明代理模式。</p>
<blockquote>
<p>首先，构造一个网络服务器：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#该服务器接受如下格式数据，addr代表地址，content代表接收的信息内容</span><br><span class="line">info_struct&#x3D;dict()</span><br><span class="line">info_struct[&quot;addr&quot;]&#x3D;10000</span><br><span class="line">info_struct[&quot;content&quot;]&#x3D;&quot;&quot;</span><br><span class="line">class Server:</span><br><span class="line">    content&#x3D;&quot;&quot;</span><br><span class="line">    def recv(self,info):</span><br><span class="line">        pass</span><br><span class="line">    def send(self,info):</span><br><span class="line">        pass</span><br><span class="line">    def show(self):</span><br><span class="line">        pass</span><br><span class="line">class infoServer(Server):</span><br><span class="line">    def recv(self,info):</span><br><span class="line">        self.content&#x3D;info</span><br><span class="line">        return &quot;recv OK!&quot;</span><br><span class="line">    def send(self,info):</span><br><span class="line">        pass</span><br><span class="line">    def show(self):</span><br><span class="line">        print &quot;SHOW:%s&quot;%self.content</span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<p>infoServer有接收和发送的功能，发送功能由于暂时用不到，保留。</p>
<p>另外新加一个接口show，用来展示服务器接收的内容。</p>
<p>接收的数据格式必须如info_struct所示，服务器仅接受info_struct的content字段。</p>
<p>那么，如何给这个服务器设置一个白名单，使得只有白名单里的地址可以访问服务器呢？</p>
<p>修改Server结构是个方法，但这显然不符合软件设计原则中的单一职责原则。</p>
<blockquote>
<p>在此基础之上，使用代理，是个不错的方法。代理配置如下：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class serverProxy:</span><br><span class="line">    pass</span><br><span class="line">class infoServerProxy(serverProxy):</span><br><span class="line">    server&#x3D;&quot;&quot;</span><br><span class="line">    def __init__(self,server):</span><br><span class="line">        self.server&#x3D;server</span><br><span class="line">    def recv(self,info):</span><br><span class="line">        return self.server.recv(info)</span><br><span class="line">    def show(self):</span><br><span class="line">        self.server.show()</span><br><span class="line"></span><br><span class="line">class whiteInfoServerProxy(infoServerProxy):</span><br><span class="line">    white_list&#x3D;[]</span><br><span class="line">    def recv(self,info):</span><br><span class="line">        try:</span><br><span class="line">            assert type(info)&#x3D;&#x3D;dict</span><br><span class="line">        except:</span><br><span class="line">            return &quot;info structure is not correct&quot;</span><br><span class="line">        addr&#x3D;info.get(&quot;addr&quot;,0)</span><br><span class="line">        if not addr in self.white_list:</span><br><span class="line">            return &quot;Your address is not in the white list.&quot;</span><br><span class="line">        else:</span><br><span class="line">            content&#x3D;info.get(&quot;content&quot;,&quot;&quot;)</span><br><span class="line">            return self.server.recv(content)</span><br><span class="line">    def addWhite(self,addr):</span><br><span class="line">        self.white_list.append(addr)</span><br><span class="line">    def rmvWhite(self,addr):</span><br><span class="line">        self.white_list.remove(addr)</span><br><span class="line">    def clearWhite(self):</span><br><span class="line">        self.white_list&#x3D;[]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>代理中有一个server字段，控制代理的服务器对象，infoServerProxy充当Server的直接接口代理，而whiteInfoServerProxy直接继承了infoServerProxy对象，同时加入了white_list和对白名单的操作。</p>
<blockquote>
<p>这样，在场景中通过对白名单代理的访问，就可以实现服务器的白名单访问了。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if  __name__&#x3D;&#x3D;&quot;__main__&quot;:</span><br><span class="line">    info_struct &#x3D; dict()</span><br><span class="line">    info_struct[&quot;addr&quot;] &#x3D; 10010</span><br><span class="line">    info_struct[&quot;content&quot;] &#x3D; &quot;Hello World!&quot;</span><br><span class="line">    info_server &#x3D; infoServer()</span><br><span class="line">    info_server_proxy &#x3D; whiteInfoServerProxy(info_server)</span><br><span class="line">    print info_server_proxy.recv(info_struct)</span><br><span class="line">    info_server_proxy.show()</span><br><span class="line">    info_server_proxy.addWhite(10010)</span><br><span class="line">    print info_server_proxy.recv(info_struct)</span><br><span class="line">    info_server_proxy.show()</span><br><span class="line">		</span><br></pre></td></tr></table></figure>

<h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><p>代理模式定义如下：为某对象提供一个代理，以控制对此对象的访问和控制。代理模式在使用过程中，应尽量对抽象主题类进行代理，而尽量不要对加过修饰和方法的子类代理。</p>
<pre><code>为其他对象提供一种代理以控制对这个对象的访问。
</code></pre>
<blockquote>
<p>如上例中，如果有一个xServer继承了Server，并新加了方法xMethod，xServer的代理应以Server为主题进行设计，而尽量不要以xServer为主题，以xServer为主题的代理可以从ServerProxy继承并添加对应的方法.</p>
</blockquote>
<p><img data-src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/651b419d706989c57083ad35e71d1029.png" alt="代理模式"></p>
<blockquote>
<p>在JAVA中，讲到代理模式，不得不会提到动态代理。动态代理是实现AOP（面向切面编程）的重要实现手段。而在Python中，很少会提到动态代理，而AOP则会以另一种模式实现：装饰模式。有关AOP的相关内容，我们会在装饰模式这一节中进行说明。</p>
</blockquote>
<h4 id="代理模式的优缺点和应用场景"><a href="#代理模式的优缺点和应用场景" class="headerlink" title="代理模式的优缺点和应用场景"></a>代理模式的优缺点和应用场景</h4><ol>
<li><p>优点:</p>
<pre><code> 1、职责清晰：非常符合单一职责原则，主题对象实现真实业务逻辑，而非本职责
     的事务，交由代理完成；
 2、扩展性强：面对主题对象可能会有的改变，代理模式在不改变对外接口的情况
     下，可以实现最大程度的扩展；
 3、保证主题对象的处理逻辑：代理可以通过检查参数的方式，保证主题对象的处
 理逻辑输入在理想范围内。
</code></pre>
</li>
<li><p>应用场景：</p>
<pre><code> 1、针对某特定对象进行功能和增强性扩展。如IP防火墙、远程访问代理等技术的应用；
 2、对主题对象进行保护。如大流量代理，安全代理等；
 3、减轻主题对象负载。如权限代理等。
</code></pre>
</li>
<li><p>代理模式的缺点</p>
<pre><code> 1、可能会降低整体业务的处理效率和速度。
 
</code></pre>
</li>
</ol>
<h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p>同模式特点描述：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Interface :</span><br><span class="line">    def Request(self):</span><br><span class="line">    return 0</span><br><span class="line"></span><br><span class="line">class RealSubject(Interface): </span><br><span class="line">    def Request(self):</span><br><span class="line">        print &quot;Real request.&quot;</span><br><span class="line"></span><br><span class="line">class Proxy(Interface):</span><br><span class="line">    def Request(self):</span><br><span class="line">        self.real &#x3D; RealSubject()</span><br><span class="line">        self.real.Request()</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    p &#x3D; Proxy()</span><br><span class="line">    p.Request()</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="python与设计模式–装饰器模式"><a href="#python与设计模式–装饰器模式" class="headerlink" title="python与设计模式–装饰器模式"></a>python与设计模式–装饰器模式</h3><h4 id="快餐点餐系统（3）"><a href="#快餐点餐系统（3）" class="headerlink" title="快餐点餐系统（3）"></a>快餐点餐系统（3）</h4><blockquote>
<p>又提到了那个快餐点餐系统，不过今天我们只以其中的一个类作为主角：饮料类。首先，回忆下饮料类：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Beverage():</span><br><span class="line">    name &#x3D; &quot;&quot;</span><br><span class="line">    price &#x3D; 0.0</span><br><span class="line">    type &#x3D; &quot;BEVERAGE&quot;</span><br><span class="line">    def getPrice(self):</span><br><span class="line">        return self.price</span><br><span class="line">    def setPrice(self, price):</span><br><span class="line">        self.price &#x3D; price</span><br><span class="line">    def getName(self):</span><br><span class="line">        return self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class coke(Beverage):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.name &#x3D; &quot;coke&quot;</span><br><span class="line">        self.price &#x3D; 4.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class milk(Beverage):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.name &#x3D; &quot;milk&quot;</span><br><span class="line">        self.price &#x3D; 5.0</span><br></pre></td></tr></table></figure>
<blockquote>
<p>除了基本配置，快餐店卖可乐时，可以选择加冰，如果加冰的话，要在原价上加0.3元；卖牛奶时，可以选择加糖，如果加糖的话，要原价上加0.5元。怎么解决这样的问题？可以选择装饰器模式来解决这一类的问题。首先，定义装饰器类：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class drinkDecorator():</span><br><span class="line">    def getName(self):</span><br><span class="line">        pass</span><br><span class="line">    def getPrice(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">class iceDecorator(drinkDecorator):</span><br><span class="line">    def __init__(self,beverage):</span><br><span class="line">        self.beverage&#x3D;beverage</span><br><span class="line">    def getName(self):</span><br><span class="line">        return self.beverage.getName()+&quot; +ice&quot;</span><br><span class="line">    def getPrice(self):</span><br><span class="line">        return self.beverage.getPrice()+0.3</span><br><span class="line">    </span><br><span class="line">class sugarDecorator(drinkDecorator):</span><br><span class="line">    def __init__(self,beverage):</span><br><span class="line">        self.beverage&#x3D;beverage</span><br><span class="line">    def getName(self):</span><br><span class="line">        return self.beverage.getName()+&quot; +sugar&quot;</span><br><span class="line">    def getPrice(self):</span><br><span class="line">        return self.beverage.getPrice()+0.5</span><br></pre></td></tr></table></figure>

<blockquote>
<p>构建好装饰器后，在具体的业务场景中，就可以与饮料类进行关联。以可乐+冰为例，示例业务场景如下：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if  __name__&#x3D;&#x3D;&quot;__main__&quot;:</span><br><span class="line">    coke_cola&#x3D;coke()</span><br><span class="line">    print &quot;Name:%s&quot;%coke_cola.getName()</span><br><span class="line">    print &quot;Price:%s&quot;%coke_cola.getPrice()</span><br><span class="line">    ice_coke&#x3D;iceDecorator(coke_cola)</span><br><span class="line">    print &quot;Name:%s&quot; % ice_coke.getName()</span><br><span class="line">    print &quot;Price:%s&quot; % ice_coke.getPrice()</span><br><span class="line">    </span><br><span class="line">打印结果如下：</span><br><span class="line">Name:coke</span><br><span class="line">Price:4.0</span><br><span class="line">Name:coke +ice</span><br><span class="line">Price:4.3</span><br></pre></td></tr></table></figure>

<h4 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h4><p>装饰器模式定义如下：动态地给一个对象添加一些额外的职责。在增加功能方面，装饰器模式比生成子类更为灵活。</p>
<p><img data-src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/6c8cc57b36c5772c0bc489221c648819.png" alt="装饰器模式"></p>
<p>装饰器模式和上一节说到的代理模式非常相似，可以认为，装饰器模式就是代理模式的一个特殊应用，两者的共同点是都具有相同的接口，不同点是侧重对主题类的过程的控制，而装饰模式则侧重对类功能的加强或减弱。</p>
<blockquote>
<p>动态地为对象增加额外的职责</p>
</blockquote>
<p>上一次说到，JAVA中的动态代理模式，是实现AOP的重要手段。而在Python中，AOP通过装饰器模式实现更为简洁和方便。</p>
<p>先来解释一下什么是AOP。AOP即Aspect Oriented Programming，中文翻译为面向切面的编程，它的含义可以解释为：如果几个或更多个逻辑过程中（这类逻辑过程可能位于不同的对象，不同的接口当中），有重复的操作行为，就可以将这些行为提取出来（即形成切面），进行统一管理和维护。举例子说，系统中需要在各个地方打印日志，就可以将打印日志这一操作提取出来，作为切面进行统一维护。</p>
<p>从编程思想的关系来看，可以认为AOP和OOP（面向对象的编程）是并列关系，二者是可以替换的，也可以结合起来用。</p>
<blockquote>
<p>实际上，在Python语言中，是天然支持装饰器的，如下例：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def log(func):</span><br><span class="line">    def wrapper(*args, **kw):</span><br><span class="line">        print &#39;call %s():&#39; % func.__name__</span><br><span class="line">        return func(*args, **kw)</span><br><span class="line">    return wrapper</span><br><span class="line"></span><br><span class="line">@log</span><br><span class="line">def now():</span><br><span class="line">    print &#39;2016-12-04&#39;</span><br><span class="line">if  __name__&#x3D;&#x3D;&quot;__main__&quot;:</span><br><span class="line">    now()</span><br><span class="line">打印如下：</span><br><span class="line">call now():</span><br><span class="line">2016-12-04</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>log接口就是装饰器的定义，而Python的@语法部分则直接支持装饰器的使用。<br>如果要在快餐点餐系统中打印日志，该如何进行AOP改造呢？可以借助类的静态方法或者类方法来实现：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class LogManager:</span><br><span class="line">    @staticmethod</span><br><span class="line">    def log(func):</span><br><span class="line">        def wrapper(*args):</span><br><span class="line">            print &quot;Visit Func %s&quot;%func.__name__</span><br><span class="line">            return func(*args)</span><br><span class="line">        return wrapper</span><br><span class="line">在需要打印日志的地方直接@LogManager.log，即可打印出访问的日志信息。</span><br><span class="line">如，在beverage类的函数前加上@LogManager.log，场景类保持不变，则打印结果如下：</span><br><span class="line">Visit Func getName</span><br><span class="line">Name:coke</span><br><span class="line">Visit Func getPrice</span><br><span class="line">Price:4.0</span><br><span class="line">Visit Func getName</span><br><span class="line">Name:coke +ice</span><br><span class="line">Visit Func getPrice</span><br><span class="line">Price:4.3</span><br></pre></td></tr></table></figure>
<h4 id="装饰器模式的优点和应用场景"><a href="#装饰器模式的优点和应用场景" class="headerlink" title="装饰器模式的优点和应用场景"></a>装饰器模式的优点和应用场景</h4><ol>
<li><p>优点：</p>
<pre><code> 1、装饰器模式是继承方式的一个替代方案，可以轻量级的扩展被装饰对象的功能；
 2、Python的装饰器模式是实现AOP的一种方式，便于相同操作位于不同调用位置
     的统一管理。
</code></pre>
</li>
<li><p>应用场景：</p>
<pre><code> 1、需要扩展、增强或者减弱一个类的功能，如本例。
</code></pre>
</li>
<li><p>装饰器模式的缺点</p>
<pre><code>  1、多层装饰器的调试和维护有比较大的困难。
</code></pre>
</li>
</ol>
<h4 id="举例：展示一个人一件一件穿衣服的过程。"><a href="#举例：展示一个人一件一件穿衣服的过程。" class="headerlink" title="举例：展示一个人一件一件穿衣服的过程。"></a>举例：展示一个人一件一件穿衣服的过程。</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    def __init__(self,tname):</span><br><span class="line">        self.name &#x3D; tname</span><br><span class="line">    def Show(self):</span><br><span class="line">       print &quot;dressed %s&quot; %(self.name)</span><br><span class="line"></span><br><span class="line">class Finery(Person):</span><br><span class="line">    componet &#x3D; None</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line">    def Decorate(self,ct):</span><br><span class="line">        self.componet &#x3D; ct</span><br><span class="line">    def Show(self):</span><br><span class="line">    if(self.componet!&#x3D;None):</span><br><span class="line">        self.componet.Show()</span><br><span class="line"></span><br><span class="line">class TShirts(Finery):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line">    def Show(self):</span><br><span class="line">        print &quot;Big T-shirt &quot;</span><br><span class="line">        self.componet.Show()</span><br><span class="line"></span><br><span class="line">class BigTrouser(Finery):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line">    def Show(self):</span><br><span class="line">        print &quot;Big Trouser &quot;</span><br><span class="line">        self.componet.Show()</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    p &#x3D; Person(&quot;somebody&quot;)</span><br><span class="line">    bt &#x3D; BigTrouser()</span><br><span class="line">    ts &#x3D; TShirts()</span><br><span class="line">    bt.Decorate(p)</span><br><span class="line">    ts.Decorate(bt)</span><br><span class="line">    ts.Show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>python扩展</category>
      </categories>
      <tags>
        <tag>python设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>python扩展知识02--IO编程</title>
    <url>/jwangcloud/3348220571/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/python01.jpeg"></p>
<h1 id="IO编程"><a href="#IO编程" class="headerlink" title="IO编程"></a>IO编程</h1><span id="more"></span>

<h3 id="1-IO"><a href="#1-IO" class="headerlink" title="1. IO"></a>1. IO</h3><p>IO在计算机中指Input/Output，也就是输入和输出。由于程序和运行时数据是在内存中驻留，由CPU这个超快的计算核心来执行，涉及到数据交换的地方，通常是磁盘、网络等，就需要IO接口。</p>
<blockquote>
<p>比如你打开浏览器，访问新浪首页，浏览器这个程序就需要通过网络IO获取新浪的网页。浏览器首先会发送数据给新浪服务器，告诉它我想要首页的HTML，这个动作是往外发数据，叫Output</p>
<p>随后新浪服务器把网页发过来，这个动作是从外面接收数据，叫Input。</p>
<p>通常，程序完成IO操作会有Input和Output两个数据流。当然也有只用一个的情况，比如，从磁盘读取文件到内存，就只有Input操作，反过来，把数据写到磁盘文件里，就只是一个Output操作。</p>
</blockquote>
<h3 id="2-stream"><a href="#2-stream" class="headerlink" title="2. stream"></a>2. stream</h3><p>IO编程中，Stream（流）是一个很重要的概念，可以把流想象成一个水管，数据就是水管里的水，但是只能单向流动。</p>
<blockquote>
<p>Input Stream就是数据从外面（磁盘、网络）流进内存，Output Stream就是数据从内存流到外面去。</p>
<p>对于浏览网页来说，浏览器和新浪服务器之间至少需要建立两根水管，才可以既能发数据，又能收数据。</p>
</blockquote>
<p>由于CPU和内存的速度远远高于外设的速度，所以，在IO编程中，就存在速度严重不匹配的问题。举个例子来说，比如要把100M的数据写入磁盘，CPU输出100M的数据只需要0.01秒，可是磁盘要接收这100M数据可能需要10秒，怎么办呢？有两种办法：</p>
<p><strong>1. 第一种是CPU等着，也就是程序暂停执行后续代码，等100M的数据在10秒后写入磁盘，再接着往下执行，这种模式称为同步IO；</strong></p>
<p>2.另一种方法是CPU不等待，只是告诉磁盘，“您老慢慢写，不着急，我接着干别的事去了”，于是，后续代码可以立刻接着执行，这种模式称为异步IO。</p>
<h3 id="3-同步与异步区别"><a href="#3-同步与异步区别" class="headerlink" title="3. 同步与异步区别"></a>3. 同步与异步区别</h3><p>同步和异步的区别就在于是否等待IO执行的结果。</p>
<blockquote>
<p>好比你去麦当劳点餐，你说“来个汉堡”，服务员告诉你，对不起，汉堡要现做，需要等5分钟，于是你站在收银台前面等了5分钟，拿到汉堡再去逛商场，这是同步IO。</p>
</blockquote>
<blockquote>
<p>你说“来个汉堡”，服务员告诉你，汉堡需要等5分钟，你可以先去逛商场，等做好了，我们再通知你，这样你可以立刻去干别的事情（逛商场），这是异步IO。</p>
</blockquote>
<p>使用异步IO来编写程序性能会远远高于同步IO，但是异步IO的缺点是编程模型复杂。想想看，你得知道什么时候通知你“汉堡做好了”，而通知你的方法也各不相同。如果是服务员跑过来找到你，这是回调模式，如果服务员发短信通知你，你就得不停地检查手机，这是轮询模式。</p>
<blockquote>
<p>总之，异步IO的复杂度远远高于同步IO。</p>
</blockquote>
<p>操作IO的能力都是由操作系统提供的，每一种编程语言都会把操作系统提供的低级C接口封装起来方便使用，Python也不例外。我们后面会详细讨论Python的IO编程接口。</p>
<h1 id="同步IO"><a href="#同步IO" class="headerlink" title="同步IO"></a>同步IO</h1><h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>读写文件是最常见的IO操作。Python内置了读写文件的函数，用法和C是兼容的。</p>
<p>读写文件前，我们先必须了解一下，在磁盘上读写文件的功能都是由操作系统提供的，现代操作系统不允许普通的程序直接操作磁盘，所以，读写文件就是请求操作系统打开一个文件对象（通常称为文件描述符），然后，通过操作系统提供的接口从这个文件对象中读取数据（读文件），或者把数据写入这个文件对象（写文件）。</p>
<h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><h4 id="文本文件"><a href="#文本文件" class="headerlink" title="文本文件"></a>文本文件</h4><ol>
<li><p>要以读文件的模式打开一个文件对象，使用Python内置的open()函数，传入文件名和标示符：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f &#x3D; open(&#39;&#x2F;Users&#x2F;michael&#x2F;test.txt&#39;, &#39;r&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>标示符’r’表示读，这样，我们就成功地打开了一个文件。</p>
</blockquote>
</li>
<li><p>如果文件不存在，open()函数就会抛出一个IOError的错误，并且给出错误码和详细的信息告诉你文件不存在：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; f&#x3D;open(&#39;&#x2F;Users&#x2F;michael&#x2F;notfound.txt&#39;, &#39;r&#39;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">FileNotFoundError: [Errno 2] No such file or directory: &#39;&#x2F;Users&#x2F;michael&#x2F;notfound.txt&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果文件打开成功，接下来，调用read()方法可以一次读取文件的全部内容，Python把内容读到内存，用一个str对象表示：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; f.read()</span><br><span class="line">&#39;Hello, world!&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>最后一步是调用close()方法关闭文件。文件使用完毕后必须关闭，因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; f.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>由于文件读写时都有可能产生IOError，一旦出错，后面的f.close()就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用try … finally来实现：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    f &#x3D; open(&#39;&#x2F;path&#x2F;to&#x2F;file&#39;, &#39;r&#39;)</span><br><span class="line">    print(f.read())</span><br><span class="line">finally:</span><br><span class="line">    if f:</span><br><span class="line">        f.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>但是每次都这么写实在太繁琐，所以，Python引入了with语句来自动帮我们调用close()方法：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&#39;&#x2F;path&#x2F;to&#x2F;file&#39;, &#39;r&#39;) as f:</span><br><span class="line">    print(f.read())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这和前面的try … finally是一样的，但是代码更佳简洁，并且不必调用f.close()方法。</p>
</blockquote>
</li>
<li><p>调用read()会一次性读取文件的全部内容，如果文件有10G，内存就爆了，所以，要保险起见，可以反复调用read(size)方法，每次最多读取size个字节的内容。另外，调用readline()可以每次读取一行内容，调用readlines()一次读取所有内容并按行返回list。因此，要根据需要决定怎么调用。</p>
<blockquote>
<p>如果文件很小，read()一次性读取最方便；如果不能确定文件大小，反复调用read(size)比较保险；如果是配置文件，调用readlines()最方便：</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for line in f.readlines():</span><br><span class="line">    print(line.strip()) # 把末尾的&#39;\n&#39;删掉</span><br><span class="line">file-like Object</span><br></pre></td></tr></table></figure></li>
<li><p>像open()函数返回的这种有个read()方法的对象，在Python中统称为file-like Object。除了file外，还可以是内存的字节流，网络流，自定义流等等。file-like Object不要求从特定类继承，只要写个read()方法就行。</p>
<blockquote>
<p>StringIO就是在内存中创建的file-like Object，常用作临时缓冲。</p>
</blockquote>
</li>
</ol>
<h4 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h4><ol>
<li><p>前面讲的默认都是读取文本文件，并且是UTF-8编码的文本文件。要读取二进制文件，比如图片、视频等等，用’rb’模式打开文件即可：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; f &#x3D; open(&#39;&#x2F;Users&#x2F;michael&#x2F;test.jpg&#39;, &#39;rb&#39;)</span><br><span class="line">&gt;&gt;&gt; f.read()</span><br><span class="line">b&#39;\xff\xd8\xff\xe1\x00\x18Exif\x00\x00...&#39; # 十六进制表示的字节</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>字符编码<br>要读取非UTF-8编码的文本文件，需要给open()函数传入encoding参数，例如，读取GBK编码的文件：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; f &#x3D; open(&#39;&#x2F;Users&#x2F;michael&#x2F;gbk.txt&#39;, &#39;r&#39;, encoding&#x3D;&#39;gbk&#39;)</span><br><span class="line">&gt;&gt;&gt; f.read()</span><br><span class="line">&#39;测试&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>遇到有些编码不规范的文件，你可能会遇到UnicodeDecodeError，因为在文本文件中可能夹杂了一些非法编码的字符。遇到这种情况，open()函数还接收一个errors参数，表示如果遇到编码错误后如何处理。最简单的方式是直接忽略：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; f &#x3D; open(&#39;&#x2F;Users&#x2F;michael&#x2F;gbk.txt&#39;, &#39;r&#39;, encoding&#x3D;&#39;gbk&#39;, errors&#x3D;&#39;ignore&#39;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><ol>
<li><p>写文件和读文件是一样的，唯一区别是调用open()函数时，传入标识符’w’或者’wb’表示写文本文件或写二进制文件：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; f &#x3D; open(&#39;&#x2F;Users&#x2F;michael&#x2F;test.txt&#39;, &#39;w&#39;)</span><br><span class="line">&gt;&gt;&gt; f.write(&#39;Hello, world!&#39;)</span><br><span class="line">&gt;&gt;&gt; f.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>你可以反复调用write()来写入文件，但是务必要调用f.close()来关闭文件。当我们写文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存缓存起来，空闲的时候再慢慢写入。只有调用close()方法时，操作系统才保证把没有写入的数据全部写入磁盘。忘记调用close()的后果是数据可能只写了一部分到磁盘，剩下的丢失了。</p>
</blockquote>
<p> 所以，还是用with语句来得保险：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&#39;&#x2F;Users&#x2F;michael&#x2F;test.txt&#39;, &#39;w&#39;) as f:</span><br><span class="line">    f.write(&#39;Hello, world!&#39;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>要写入特定编码的文本文件，请给open()函数传入encoding参数，将字符串自动转换成指定编码。</p>
</blockquote>
</li>
</ol>
<ol start="2">
<li><p>以’w’模式写入文件时，如果文件已存在，会直接覆盖（相当于删掉后新写入一个文件）。如果我们希望追加到文件末尾怎么办？可以传入’a’以追加（append）模式写入。</p>
<blockquote>
<p>所有模式的定义及含义可以参考Python的<a href="https://docs.python.org/3/library/functions.html#open">官方文档</a>。</p>
</blockquote>
</li>
</ol>
<h2 id="StringIO和BytesIO"><a href="#StringIO和BytesIO" class="headerlink" title="StringIO和BytesIO"></a>StringIO和BytesIO</h2><h3 id="StringIO"><a href="#StringIO" class="headerlink" title="StringIO"></a>StringIO</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>很多时候，数据读写不一定是文件，也可以在内存中读写。</p>
<p>StringIO顾名思义就是在内存中读写str。</p>
<h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><ol>
<li><p>要把str写入StringIO，我们需要先创建一个StringIO，然后，像文件一样写入即可：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from io import StringIO</span><br><span class="line">&gt;&gt;&gt; f &#x3D; StringIO()</span><br><span class="line">&gt;&gt;&gt; f.write(&#39;hello&#39;)</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; f.write(&#39; &#39;)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; f.write(&#39;world!&#39;)</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; print(f.getvalue())</span><br><span class="line">hello world!</span><br><span class="line">getvalue()方法用于获得写入后的str。</span><br></pre></td></tr></table></figure></li>
<li><p>要读取StringIO，可以用一个str初始化StringIO，然后，像读文件一样读取：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from io import StringIO</span><br><span class="line">&gt;&gt;&gt; f &#x3D; StringIO(&#39;Hello!\nHi!\nGoodbye!&#39;)</span><br><span class="line">&gt;&gt;&gt; while True:</span><br><span class="line">...     s &#x3D; f.readline()</span><br><span class="line">...     if s &#x3D;&#x3D; &#39;&#39;:</span><br><span class="line">...         break</span><br><span class="line">...     print(s.strip())</span><br><span class="line">...</span><br><span class="line">Hello!</span><br><span class="line">Hi!</span><br><span class="line">Goodbye!</span><br><span class="line">BytesIO</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>StringIO操作的只能是str，如果要操作二进制数据，就需要使用BytesIO。</p>
<blockquote>
<p>BytesIO实现了在内存中读写bytes，我们创建一个BytesIO，然后写入一些bytes：</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from io import BytesIO</span><br><span class="line">&gt;&gt;&gt; f &#x3D; BytesIO()</span><br><span class="line">&gt;&gt;&gt; f.write(&#39;中文&#39;.encode(&#39;utf-8&#39;))</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; print(f.getvalue())</span><br><span class="line">b&#39;\xe4\xb8\xad\xe6\x96\x87&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>请注意，写入的不是str，而是经过UTF-8编码的bytes。</p>
</blockquote>
</li>
</ol>
<ol start="4">
<li><p>和StringIO类似，可以用一个bytes初始化BytesIO，然后，像读文件一样读取：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from io import BytesIO</span><br><span class="line">&gt;&gt;&gt; f &#x3D; BytesIO(b&#39;\xe4\xb8\xad\xe6\x96\x87&#39;)</span><br><span class="line">&gt;&gt;&gt; f.read()</span><br><span class="line">b&#39;\xe4\xb8\xad\xe6\x96\x87&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>代码</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from io import StringIO</span><br><span class="line"></span><br><span class="line"># write to StringIO:</span><br><span class="line">f &#x3D; StringIO()</span><br><span class="line">f.write(&#39;hello&#39;)</span><br><span class="line">f.write(&#39; &#39;)</span><br><span class="line">f.write(&#39;world!&#39;)</span><br><span class="line">print(f.getvalue())</span><br><span class="line"></span><br><span class="line"># read from StringIO:</span><br><span class="line">f &#x3D; StringIO(&#39;水面细风生，\n菱歌慢慢声。\n客亭临小市，\n灯火夜妆明。&#39;)</span><br><span class="line">while True:</span><br><span class="line">    s &#x3D; f.readline()</span><br><span class="line">    if s &#x3D;&#x3D; &#39;&#39;:</span><br><span class="line">        break</span><br><span class="line">    print(s.strip())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from io import BytesIO</span><br><span class="line"></span><br><span class="line"># write to BytesIO:</span><br><span class="line">f &#x3D; BytesIO()</span><br><span class="line">f.write(b&#39;hello&#39;)</span><br><span class="line">f.write(b&#39; &#39;)</span><br><span class="line">f.write(b&#39;world!&#39;)</span><br><span class="line">print(f.getvalue())</span><br><span class="line"></span><br><span class="line"># read from BytesIO:</span><br><span class="line">data &#x3D; &#39;人闲桂花落，夜静春山空。月出惊山鸟，时鸣春涧中。&#39;.encode(&#39;utf-8&#39;)</span><br><span class="line">f &#x3D; BytesIO(data)</span><br><span class="line">print(f.read())</span><br><span class="line">	</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="操作文件和目录"><a href="#操作文件和目录" class="headerlink" title="操作文件和目录"></a>操作文件和目录</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>如果我们要操作文件、目录，可以在命令行下面输入操作系统提供的各种命令来完成。比如dir、cp等命令。</p>
<p>如果要在Python程序中执行这些目录和文件的操作怎么办？其实操作系统提供的命令只是简单地调用了操作系统提供的接口函数，Python内置的os模块也可以直接调用操作系统提供的接口函数。</p>
<h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3><ol>
<li><p>打开Python交互式命令行，我们来看看如何使用os模块的基本功能：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import os</span><br><span class="line">&gt;&gt;&gt; os.name # 操作系统类型</span><br><span class="line">&#39;posix&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果是posix，说明系统是Linux、Unix或Mac OS X，如果是nt，就是Windows系统。</p>
</blockquote>
</li>
<li><p>要获取详细的系统信息，可以调用uname()函数：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; os.uname()</span><br><span class="line">posix.uname_result(sysname&#x3D;&#39;Darwin&#39;, nodename&#x3D;&#39;MichaelMacPro.local&#39;, release&#x3D;&#39;14.3.0&#39;, </span><br><span class="line">version&#x3D;&#39;Darwin Kernel Version 14.3.0: Mon Mar 23 11:59:05 PDT 2015; </span><br><span class="line">root:xnu-2782.20.48~5&#x2F;RELEASE_X86_64&#39;, machine&#x3D;&#39;x86_64&#39;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意uname()函数在Windows上不提供，也就是说，os模块的某些函数是跟操作系统相关的。</p>
</blockquote>
</li>
<li><p>环境变量</p>
<p> 在操作系统中定义的环境变量，全部保存在os.environ这个变量中，可以直接查看：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; os.environ</span><br><span class="line">environ(&#123;&#39;VERSIONER_PYTHON_PREFER_32_BIT&#39;: &#39;no&#39;, &#39;TERM_PROGRAM_VERSION&#39;: &#39;326&#39;, &#39;LOGNAME&#39;: </span><br><span class="line">&#39;michael&#39;, &#39;USER&#39;: &#39;michael&#39;, &#39;PATH&#39;: &#39;&#x2F;usr&#x2F;bin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:</span><br><span class="line">&#x2F;opt&#x2F;X11&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#39;, ...&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 要获取某个环境变量的值，可以调用os.environ.get(‘key’)：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; os.environ.get(&#39;PATH&#39;)</span><br><span class="line">&#39;&#x2F;usr&#x2F;bin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;opt&#x2F;X11&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#39;</span><br><span class="line">&gt;&gt;&gt; os.environ.get(&#39;x&#39;, &#39;default&#39;)</span><br><span class="line">&#39;default&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="操作文件和目录-1"><a href="#操作文件和目录-1" class="headerlink" title="操作文件和目录"></a>操作文件和目录</h3><ol>
<li><p>操作文件和目录的函数一部分放在os模块中，一部分放在os.path模块中，这一点要注意一下。查看、创建和删除目录可以这么调用：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看当前目录的绝对路径:</span><br><span class="line">&gt;&gt;&gt; os.path.abspath(&#39;.&#39;)</span><br><span class="line">&#39;&#x2F;Users&#x2F;michael&#39;</span><br><span class="line"># 在某个目录下创建一个新目录，首先把新目录的完整路径表示出来:</span><br><span class="line">&gt;&gt;&gt; os.path.join(&#39;&#x2F;Users&#x2F;michael&#39;, &#39;testdir&#39;)</span><br><span class="line">&#39;&#x2F;Users&#x2F;michael&#x2F;testdir&#39;</span><br><span class="line"># 然后创建一个目录:</span><br><span class="line">&gt;&gt;&gt; os.mkdir(&#39;&#x2F;Users&#x2F;michael&#x2F;testdir&#39;)</span><br><span class="line"># 删掉一个目录:</span><br><span class="line">&gt;&gt;&gt; os.rmdir(&#39;&#x2F;Users&#x2F;michael&#x2F;testdir&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>把两个路径合成一个时，不要直接拼字符串，而要通过os.path.join()函数，这样可以正确处理不同操作系统的路径分隔符。在Linux/Unix/Mac下，os.path.join()返回这样的字符串：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">part-1&#x2F;part-2</span><br><span class="line">而Windows下会返回这样的字符串：</span><br><span class="line"></span><br><span class="line">part-1\part-2</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>同样的道理，要拆分路径时，也不要直接去拆字符串，而要通过os.path.split()函数，这样可以把一个路径拆分为两部分，后一部分总是最后级别的目录或文件名：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.split(&#39;&#x2F;Users&#x2F;michael&#x2F;testdir&#x2F;file.txt&#39;)</span><br><span class="line">(&#39;&#x2F;Users&#x2F;michael&#x2F;testdir&#39;, &#39;file.txt&#39;)</span><br><span class="line">os.path.splitext()可以直接让你得到文件扩展名，很多时候非常方便：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; os.path.splitext(&#39;&#x2F;path&#x2F;to&#x2F;file.txt&#39;)</span><br><span class="line">(&#39;&#x2F;path&#x2F;to&#x2F;file&#39;, &#39;.txt&#39;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这些合并、拆分路径的函数并不要求目录和文件要真实存在，它们只对字符串进行操作。</p>
</blockquote>
</li>
<li><p>文件操作使用下面的函数。假定当前目录下有一个test.txt文件：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 对文件重命名:</span><br><span class="line">&gt;&gt;&gt; os.rename(&#39;test.txt&#39;, &#39;test.py&#39;)</span><br><span class="line"># 删掉文件:</span><br><span class="line">&gt;&gt;&gt; os.remove(&#39;test.py&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>但是复制文件的函数居然在os模块中不存在！原因是复制文件并非由操作系统提供的系统调用。理论上讲，我们通过上一节的读写文件可以完成文件复制，只不过要多写很多代码。</p>
</blockquote>
<blockquote>
<p>幸运的是shutil模块提供了copyfile()的函数，你还可以在shutil模块中找到很多实用函数，它们可以看做是os模块的补充。</p>
</blockquote>
</li>
<li><p>利用Python的特性来过滤文件。比如我们要列出当前目录下的所有目录，只需要一行代码：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [x for x in os.listdir(&#39;.&#39;) if os.path.isdir(x)]</span><br><span class="line">[&#39;.lein&#39;, &#39;.local&#39;, &#39;.m2&#39;, &#39;.npm&#39;, &#39;.ssh&#39;, &#39;.Trash&#39;, &#39;.vim&#39;, &#39;Applications&#39;, &#39;Desktop&#39;, ...]</span><br><span class="line">要列出所有的.py文件，也只需一行代码：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; [x for x in os.listdir(&#39;.&#39;) if os.path.isfile(x) and os.path.splitext(x)[1]&#x3D;&#x3D;&#39;.py&#39;]</span><br><span class="line">[&#39;apis.py&#39;, &#39;config.py&#39;, &#39;models.py&#39;, &#39;pymonitor.py&#39;, &#39;test_db.py&#39;, &#39;urls.py&#39;, &#39;wsgiapp.py&#39;]</span><br><span class="line">是不是非常简洁？</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>小结</p>
</li>
</ol>
<p>Python的os模块封装了操作系统的目录和文件操作，要注意这些函数有的在os模块中，有的在os.path模块中。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from datetime import datetime</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">pwd &#x3D; os.path.abspath(&#39;.&#39;)</span><br><span class="line"></span><br><span class="line">print(&#39;      Size     Last Modified  Name&#39;)</span><br><span class="line">print(&#39;------------------------------------------------------------&#39;)</span><br><span class="line"></span><br><span class="line">for f in os.listdir(pwd):</span><br><span class="line">    fsize &#x3D; os.path.getsize(f)</span><br><span class="line">    mtime &#x3D; datetime.fromtimestamp(os.path.getmtime(f)).strftime(&#39;%Y-%m-%d %H:%M&#39;)</span><br><span class="line">    flag &#x3D; &#39;&#x2F;&#39; if os.path.isdir(f) else &#39;&#39;</span><br><span class="line">    print(&#39;%10d  %s  %s%s&#39; % (fsize, mtime, f, flag))</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><ol>
<li><p>在程序运行的过程中，所有的变量都是在内存中，比如，定义一个dict：</p>
<blockquote>
<p>d = dict(name=’Bob’, age=20, score=88)</p>
<p>可以随时修改变量，比如把name改成’Bill’，但是一旦程序结束，变量所占用的内存就被操作系统全部回收。如果没有把修改后的’Bill’存储到磁盘上，下次重新运行程序，变量又被初始化为’Bob’。</p>
</blockquote>
</li>
</ol>
<ol start="2">
<li><p>我们把变量从内存中变成可存储或传输的过程称之为序列化，在Python中叫pickling，在其他语言中也被称之为serialization，marshalling，flattening等等，都是一个意思。</p>
</li>
<li><p>序列化之后，就可以把序列化后的内容写入磁盘，或者通过网络传输到别的机器上。</p>
</li>
<li><p>反过来，把变量内容从序列化的对象重新读到内存里称之为反序列化，即unpickling。</p>
</li>
</ol>
<h3 id="操作-2"><a href="#操作-2" class="headerlink" title="操作"></a>操作</h3><h4 id="pickle"><a href="#pickle" class="headerlink" title="pickle"></a>pickle</h4><blockquote>
<p>Python提供了pickle模块来实现序列化。</p>
</blockquote>
<ol>
<li><p>首先，我们尝试把一个对象序列化并写入文件：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import pickle</span><br><span class="line">&gt;&gt;&gt; d &#x3D; dict(name&#x3D;&#39;Bob&#39;, age&#x3D;20, score&#x3D;88)</span><br><span class="line">&gt;&gt;&gt; pickle.dumps(d)</span><br><span class="line">b&#39;\x80\x03&#125;q\x00(X\x03\x00\x00\x00ageq\x01K\x14X\x05\x00\x00\x00scoreq\x02KXX\x04\x00\x00\x00nameq</span><br><span class="line">\x03X\x03\x00\x00\x00Bobq\x04u.&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>pickle.dumps()方法把任意对象序列化成一个bytes，然后，就可以把这个bytes写入文件。或者用另一个方法pickle.dump()直接把对象序列化后写入一个file-like Object：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; f &#x3D; open(&#39;dump.txt&#39;, &#39;wb&#39;)</span><br><span class="line">&gt;&gt;&gt; pickle.dump(d, f)</span><br><span class="line">&gt;&gt;&gt; f.close()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>看看写入的dump.txt文件，一堆乱七八糟的内容，这些都是Python保存的对象内部信息。</p>
</blockquote>
</li>
<li><p>当我们要把对象从磁盘读到内存时，可以先把内容读到一个bytes，然后用pickle.loads()方法反序列化出对象，也可以直接用pickle.load()方法从一个file-like Object中直接反序列化出对象。我们打开另一个Python命令行来反序列化刚才保存的对象：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; f &#x3D; open(&#39;dump.txt&#39;, &#39;rb&#39;)</span><br><span class="line">&gt;&gt;&gt; d &#x3D; pickle.load(f)</span><br><span class="line">&gt;&gt;&gt; f.close()</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;&#39;age&#39;: 20, &#39;score&#39;: 88, &#39;name&#39;: &#39;Bob&#39;&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个变量和原来的变量是完全不相干的对象，它们只是内容相同而已。</p>
</blockquote>
<blockquote>
<p>Pickle的问题和所有其他编程语言特有的序列化问题一样，就是它只能用于Python，并且可能不同版本的Python彼此都不兼容，因此，只能用Pickle保存那些不重要的数据，不能成功地反序列化也没关系。</p>
</blockquote>
</li>
</ol>
<h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><p>如果我们要在不同的编程语言之间传递对象，就必须把对象序列化为标准格式，比如XML，但更好的方法是序列化为JSON，因为JSON表示出来就是一个字符串，可以被所有语言读取，也可以方便地存储到磁盘或者通过网络传输。JSON不仅是标准格式，并且比XML更快，而且可以直接在Web页面中读取，非常方便。</p>
<ol>
<li>JSON表示的对象就是标准的JavaScript语言的对象，JSON和Python内置的数据类型对应如下：</li>
</ol>
<pre><code>|JSON类型|    Python类型
|:-:|:-:|
&#123;&#125;    |dict
[]    |list
&quot;string&quot;|    str
1234.56    |int或float
true/false    |True/False
null|    None
</code></pre>
<ol start="2">
<li><p>Python内置的json模块提供了非常完善的Python对象到JSON格式的转换。我们先看看如何把Python对象变成一个JSON：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import json</span><br><span class="line">&gt;&gt;&gt; d &#x3D; dict(name&#x3D;&#39;Bob&#39;, age&#x3D;20, score&#x3D;88)</span><br><span class="line">&gt;&gt;&gt; json.dumps(d)</span><br><span class="line">&#39;&#123;&quot;age&quot;: 20, &quot;score&quot;: 88, &quot;name&quot;: &quot;Bob&quot;&#125;&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>dumps()方法返回一个str，内容就是标准的JSON。类似的，dump()方法可以直接把JSON写入一个file-like Object。</p>
</blockquote>
</li>
<li><p>要把JSON反序列化为Python对象，用loads()或者对应的load()方法，前者把JSON的字符串反序列化，后者从file-like Object中读取字符串并反序列化：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; json_str &#x3D; &#39;&#123;&quot;age&quot;: 20, &quot;score&quot;: 88, &quot;name&quot;: &quot;Bob&quot;&#125;&#39;</span><br><span class="line">&gt;&gt;&gt; json.loads(json_str)</span><br><span class="line">&#123;&#39;age&#39;: 20, &#39;score&#39;: 88, &#39;name&#39;: &#39;Bob&#39;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>由于JSON标准规定JSON编码是UTF-8，所以我们总是能正确地在Python的str与JSON的字符串之间转换。</p>
</blockquote>
</li>
</ol>
<h4 id="JSON进阶"><a href="#JSON进阶" class="headerlink" title="JSON进阶"></a>JSON进阶</h4><ol>
<li>Python的dict对象可以直接序列化为JSON的{}，不过，很多时候，我们更喜欢用class表示对象，比如定义Student类，然后序列化： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name, age, score):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.age &#x3D; age</span><br><span class="line">        self.score &#x3D; score</span><br><span class="line"></span><br><span class="line">s &#x3D; Student(&#39;Bob&#39;, 20, 88)</span><br><span class="line">print(json.dumps(s))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行代码，毫不留情地得到一个TypeError：</p>
</blockquote>
<blockquote>
<p>Traceback (most recent call last):</p>
<p>…</p>
<p>TypeError: &lt;__main__.Student object at 0x10603cc50&gt; is not JSON serializable</p>
</blockquote>
<blockquote>
<p>错误的原因是Student对象不是一个可序列化为JSON的对象。</p>
</blockquote>
</li>
</ol>
<ol start="2">
<li><p>dumps()方法的参数列表,除了第一个必须的obj参数外，dumps()方法还提供了一大堆的可选参数：</p>
<p> <a href="https://docs.python.org/3/library/json.html#json.dumps">https://docs.python.org/3/library/json.html#json.dumps</a></p>
</li>
</ol>
<p>这些可选参数就是让我们来定制JSON序列化。前面的代码之所以无法把Student类实例序列化为JSON，是因为默认情况下，dumps()方法不知道如何将Student实例变为一个JSON的{}对象。</p>
<p>可选参数default就是把任意一个对象变成一个可序列为JSON的对象，我们只需要为Student专门写一个转换函数，再把函数传进去即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def student2dict(std):</span><br><span class="line">    return &#123;</span><br><span class="line">        &#39;name&#39;: std.name,</span><br><span class="line">        &#39;age&#39;: std.age,</span><br><span class="line">        &#39;score&#39;: std.score</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<blockquote>
<p>这样，Student实例首先被student2dict()函数转换成dict，然后再被顺利序列化为JSON：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(json.dumps(s, default&#x3D;student2dict))</span><br><span class="line">&#123;&quot;age&quot;: 20, &quot;name&quot;: &quot;Bob&quot;, &quot;score&quot;: 88&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>不过，下次如果遇到一个Teacher类的实例，照样无法序列化为JSON。我们可以偷个懒，把任意class的实例变为dict：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(json.dumps(s, default&#x3D;lambda obj: obj.__dict__))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>因为通常class的实例都有一个__dict__属性，它就是一个dict，用来存储实例变量。也有少数例外，比如定义了__slots__的class。</p>
<ol start="3">
<li>同样的道理，如果我们要把JSON反序列化为一个Student对象实例，loads()方法首先转换出一个dict对象，然后，我们传入的object_hook函数负责把dict转换为Student实例： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def dict2student(d):</span><br><span class="line">    return Student(d[&#39;name&#39;], d[&#39;age&#39;], d[&#39;score&#39;])</span><br><span class="line">运行结果如下：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; json_str &#x3D; &#39;&#123;&quot;age&quot;: 20, &quot;score&quot;: 88, &quot;name&quot;: &quot;Bob&quot;&#125;&#39;</span><br><span class="line">&gt;&gt;&gt; print(json.loads(json_str, object_hook&#x3D;dict2student))</span><br><span class="line">&lt;__main__.Student object at 0x10cd3c190&gt;</span><br><span class="line">打印出的是反序列化的Student实例对象。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol>
<li><p>Python语言特定的序列化模块是pickle，但如果要把序列化搞得更通用、更符合Web标准，就可以使用json模块。</p>
</li>
<li><p>json模块的dumps()和loads()函数是定义得非常好的接口的典范。当我们使用时，只需要传入一个必须的参数。但是，当默认的序列化或反序列机制不满足我们的要求时，我们又可以传入更多的参数来定制序列化或反序列化的规则，既做到了接口简单易用，又做到了充分的扩展性和灵活性。</p>
</li>
</ol>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">import pickle</span><br><span class="line"></span><br><span class="line">d &#x3D; dict(name&#x3D;&#39;Bob&#39;, age&#x3D;20, score&#x3D;88)</span><br><span class="line">data &#x3D; pickle.dumps(d)</span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line">reborn &#x3D; pickle.loads(data)</span><br><span class="line">print(reborn)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">d &#x3D; dict(name&#x3D;&#39;Bob&#39;, age&#x3D;20, score&#x3D;88)</span><br><span class="line">data &#x3D; json.dumps(d)</span><br><span class="line">print(&#39;JSON Data is a str:&#39;, data)</span><br><span class="line">reborn &#x3D; json.loads(data)</span><br><span class="line">print(reborn)</span><br><span class="line"></span><br><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, age, score):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.age &#x3D; age</span><br><span class="line">        self.score &#x3D; score</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &#39;Student object (%s, %s, %s)&#39; % (self.name, self.age, self.score)</span><br><span class="line"></span><br><span class="line">s &#x3D; Student(&#39;Bob&#39;, 20, 88)</span><br><span class="line">std_data &#x3D; json.dumps(s, default&#x3D;lambda obj: obj.__dict__)</span><br><span class="line">print(&#39;Dump Student:&#39;, std_data)</span><br><span class="line">rebuild &#x3D; json.loads(std_data, object_hook&#x3D;lambda d: Student(d[&#39;name&#39;], d[&#39;age&#39;], d[&#39;score&#39;]))</span><br><span class="line">print(rebuild)</span><br></pre></td></tr></table></figure>
</code></pre>
<p>#异步IO</p>
<h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><ol>
<li><p>CPU的速度远远快于磁盘、网络等IO。在一个线程中，CPU执行代码的速度极快，然而，一旦遇到IO操作，如读写文件、发送网络数据时，就需要等待IO操作完成，才能继续进行下一步操作。这种情况称为同步IO。</p>
<blockquote>
<p>在IO操作的过程中，当前线程被挂起，而其他需要CPU执行的代码就无法被当前线程执行了。</p>
</blockquote>
<blockquote>
<p>因为一个IO操作就阻塞了当前线程，导致其他代码无法执行，所以我们必须使用多线程或者多进程来并发执行代码，为多个用户服务。每个用户都会分配一个线程，如果遇到IO导致线程被挂起，其他用户的线程不受影响。</p>
</blockquote>
</li>
<li><p>多线程和多进程的模型虽然解决了并发问题，但是系统不能无上限地增加线程。由于系统切换线程的开销也很大，所以，一旦线程数量过多，CPU的时间就花在线程切换上了，真正运行代码的时间就少了，结果导致性能严重下降。</p>
<p> 由于我们要解决的问题是CPU高速执行能力和IO设备的龟速严重不匹配，多线程和多进程只是解决这一问题的一种方法。</p>
<p> 另一种解决IO问题的方法是异步IO。当代码需要执行一个耗时的IO操作时，它只发出IO指令，并不等待IO结果，然后就去执行其他代码了。一段时间后，当IO返回结果时，再通知CPU进行处理。</p>
</li>
<li><p>如果按普通顺序写出的代码实际上是没法完成异步IO的：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">do_some_code()</span><br><span class="line">f &#x3D; open(&#39;&#x2F;path&#x2F;to&#x2F;file&#39;, &#39;r&#39;)</span><br><span class="line">r &#x3D; f.read() # &lt;&#x3D;&#x3D; 线程停在此处等待IO操作结果</span><br><span class="line"># IO操作完成后线程才能继续执行:</span><br><span class="line">do_some_code(r)</span><br><span class="line">所以，同步IO模型的代码是无法实现异步IO模型的。</span><br></pre></td></tr></table></figure></li>
<li><p>异步IO模型需要一个消息循环，在消息循环中，主线程不断地重复“读取消息-处理消息”这一过程：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">loop &#x3D; get_event_loop()</span><br><span class="line">while True:</span><br><span class="line">    event &#x3D; loop.get_event()</span><br><span class="line">    process_event(event)</span><br></pre></td></tr></table></figure></li>
<li><p>消息模型其实早在应用在桌面应用程序中了。一个GUI程序的主线程就负责不停地读取消息并处理消息。所有的键盘、鼠标等消息都被发送到GUI程序的消息队列中，然后由GUI程序的主线程处理。</p>
</li>
<li><p>由于GUI线程处理键盘、鼠标等消息的速度非常快，所以用户感觉不到延迟。某些时候，GUI线程在一个消息处理的过程中遇到问题导致一次消息处理时间过长，此时，用户会感觉到整个GUI程序停止响应了，敲键盘、点鼠标都没有反应。这种情况说明在消息模型中，处理一个消息必须非常迅速，否则，主线程将无法及时处理消息队列中的其他消息，导致程序看上去停止响应。</p>
</li>
<li><p>消息模型是如何解决同步IO必须等待IO操作这一问题的呢？当遇到IO操作时，代码只负责发出IO请求，不等待IO结果，然后直接结束本轮消息处理，进入下一轮消息处理过程。当IO操作完成后，将收到一条“IO完成”的消息，处理该消息时就可以直接获取IO操作结果。</p>
</li>
<li><p>在“发出IO请求”到收到“IO完成”的这段时间里，同步IO模型下，主线程只能挂起，但异步IO模型下，主线程并没有休息，而是在消息循环中继续处理其他消息。这样，在异步IO模型下，一个线程就可以同时处理多个IO请求，并且没有切换线程的操作。对于大多数IO密集型的应用程序，使用异步IO将大大提升系统的多任务处理能力。</p>
</li>
</ol>
<h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><ol>
<li><p>协程，又称微线程，纤程。英文名Coroutine。</p>
</li>
<li><p>子程序，或者称为函数，在所有语言中都是层级调用，比如A调用B，B在执行过程中又调用了C，C执行完毕返回，B执行完毕返回，最后是A执行完毕。</p>
<blockquote>
<p>所以子程序调用是通过栈实现的，一个线程就是执行一个子程序。</p>
</blockquote>
<blockquote>
<p>子程序调用总是一个入口，一次返回，调用顺序是明确的。而协程的调用和子程序不同。</p>
</blockquote>
<blockquote>
<p>协程看上去也是子程序，但执行过程中，在子程序内部可中断，然后转而执行别的子程序，在适当的时候再返回来接着执行。</p>
</blockquote>
</li>
</ol>
<ol start="3">
<li><p>注意，在一个子程序中中断，去执行其他子程序，不是函数调用，有点类似CPU的中断。比如子程序A、B：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def A():</span><br><span class="line">   	print(&#39;1&#39;)</span><br><span class="line">   	print(&#39;2&#39;)</span><br><span class="line">   	print(&#39;3&#39;)</span><br><span class="line"></span><br><span class="line">def B():</span><br><span class="line">   	print(&#39;x&#39;)</span><br><span class="line">   	print(&#39;y&#39;)</span><br><span class="line">   	print(&#39;z&#39;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>假设由协程执行，在执行A的过程中，可以随时中断，去执行B，B也可能在执行过程中中断再去执行A，结果可能是：</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">x</span><br><span class="line">y</span><br><span class="line">3</span><br><span class="line">z</span><br></pre></td></tr></table></figure>

<blockquote>
<p>但是在A中是没有调用B的，所以协程的调用比函数调用理解起来要难一些。</p>
</blockquote>
<blockquote>
<p>看起来A、B的执行有点像多线程，但协程的特点在于是一个线程执行，那和多线程比，协程有何优势？</p>
</blockquote>
</li>
</ol>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ol>
<li><p>最大的优势就是协程极高的执行效率。因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。</p>
</li>
<li><p>第二大优势就是不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，所以执行效率比多线程高很多。</p>
<blockquote>
<p>因为协程是一个线程执行，那怎么利用多核CPU呢？最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。</p>
</blockquote>
</li>
</ol>
<h3 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h3><ol>
<li><p>Python对协程的支持是通过generator实现的。</p>
<blockquote>
<p>在generator中，我们不但可以通过for循环来迭代，还可以不断调用next()函数获取由yield语句返回的下一个值。</p>
</blockquote>
</li>
<li><p>Python的yield不但可以返回一个值，它还可以接收调用者发出的参数。</p>
<blockquote>
<p>来看例子：</p>
</blockquote>
<blockquote>
<p>传统的生产者-消费者模型是一个线程写消息，一个线程取消息，通过锁机制控制队列和等待，但一不小心就可能死锁。</p>
</blockquote>
<blockquote>
<p>如果改用协程，生产者生产消息后，直接通过yield跳转到消费者开始执行，待消费者执行完毕后，切换回生产者继续生产，效率极高：</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def consumer():</span><br><span class="line">    r &#x3D; &#39;&#39;</span><br><span class="line">    while True:</span><br><span class="line">        n &#x3D; yield r</span><br><span class="line">        if not n:</span><br><span class="line">            return</span><br><span class="line">        print(&#39;[CONSUMER] Consuming %s...&#39; % n)</span><br><span class="line">        r &#x3D; &#39;200 OK&#39;</span><br><span class="line"></span><br><span class="line">def produce(c):</span><br><span class="line">    c.send(None)</span><br><span class="line">    n &#x3D; 0</span><br><span class="line">    while n &lt; 5:</span><br><span class="line">        n &#x3D; n + 1</span><br><span class="line">        print(&#39;[PRODUCER] Producing %s...&#39; % n)</span><br><span class="line">        r &#x3D; c.send(n)</span><br><span class="line">        print(&#39;[PRODUCER] Consumer return: %s&#39; % r)</span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line">c &#x3D; consumer()</span><br><span class="line">produce(c)</span><br><span class="line">执行结果：</span><br><span class="line"></span><br><span class="line">[PRODUCER] Producing 1...</span><br><span class="line">[CONSUMER] Consuming 1...</span><br><span class="line">[PRODUCER] Consumer return: 200 OK</span><br><span class="line">[PRODUCER] Producing 2...</span><br><span class="line">[CONSUMER] Consuming 2...</span><br><span class="line">[PRODUCER] Consumer return: 200 OK</span><br><span class="line">[PRODUCER] Producing 3...</span><br><span class="line">[CONSUMER] Consuming 3...</span><br><span class="line">[PRODUCER] Consumer return: 200 OK</span><br><span class="line">[PRODUCER] Producing 4...</span><br><span class="line">[CONSUMER] Consuming 4...</span><br><span class="line">[PRODUCER] Consumer return: 200 OK</span><br><span class="line">[PRODUCER] Producing 5...</span><br><span class="line">[CONSUMER] Consuming 5...</span><br><span class="line">[PRODUCER] Consumer return: 200 OK</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意到consumer函数是一个generator，把一个consumer传入produce后：</p>
<blockquote>
<ol>
<li>首先调用c.send(None)启动生成器；</li>
</ol>
</blockquote>
<blockquote>
<ol start="2">
<li>然后，一旦生产了东西，通过c.send(n)切换到consumer执行；</li>
</ol>
</blockquote>
<blockquote>
<ol start="3">
<li>consumer通过yield拿到消息，处理，又通过yield把结果传回；</li>
</ol>
</blockquote>
<blockquote>
<ol start="4">
<li>produce拿到consumer处理的结果，继续生产下一条消息；</li>
</ol>
</blockquote>
<blockquote>
<ol start="5">
<li>produce决定不生产了，通过c.close()关闭consumer，整个过程结束。</li>
</ol>
</blockquote>
<blockquote>
<p>整个流程无锁，由一个线程执行，produce和consumer协作完成任务，所以称为“协程”，而非线程的抢占式多任务。</p>
</blockquote>
</li>
</ol>
<p><s>协程的特点：“子程序就是协程的一种特例。”</s></p>
<h2 id="asyncio"><a href="#asyncio" class="headerlink" title="asyncio"></a>asyncio</h2><h3 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h3><p>asyncio是Python 3.4版本引入的标准库，直接内置了对异步IO的支持。</p>
<p>asyncio的编程模型就是一个消息循环。我们从asyncio模块中直接获取一个EventLoop的引用，然后把需要执行的协程扔到EventLoop中执行，就实现了异步IO。</p>
<h3 id="操作-3"><a href="#操作-3" class="headerlink" title="操作"></a>操作</h3><ol>
<li>用asyncio实现Hello world代码如下：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import asyncio</span><br><span class="line"></span><br><span class="line">@asyncio.coroutine</span><br><span class="line">def hello():</span><br><span class="line">    print(&quot;Hello world!&quot;)</span><br><span class="line">    # 异步调用asyncio.sleep(1):</span><br><span class="line">    r &#x3D; yield from asyncio.sleep(1)</span><br><span class="line">    print(&quot;Hello again!&quot;)</span><br><span class="line"></span><br><span class="line"># 获取EventLoop:</span><br><span class="line">loop &#x3D; asyncio.get_event_loop()</span><br><span class="line"># 执行coroutine</span><br><span class="line">loop.run_until_complete(hello())</span><br><span class="line">loop.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>@asyncio.coroutine把一个generator标记为coroutine类型，然后，我们就把这个coroutine扔到EventLoop中执行。</p>
</blockquote>
<p>hello()会首先打印出Hello world!，然后，yield from语法可以让我们方便地调用另一个generator。</p>
<p>由于asyncio.sleep()也是一个coroutine，所以线程不会等待asyncio.sleep()，而是直接中断并执行下一个消息循环。当asyncio.sleep()返回时，线程就可以从yield from拿到返回值（此处是None），然后接着执行下一行语句。</p>
<p>把asyncio.sleep(1)看成是一个耗时1秒的IO操作，在此期间，主线程并未等待，而是去执行EventLoop中其他可以执行的coroutine了，因此可以实现并发执行。</p>
<ol start="2">
<li>我们用Task封装两个coroutine试试：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import asyncio</span><br><span class="line"></span><br><span class="line">@asyncio.coroutine</span><br><span class="line">def hello():</span><br><span class="line">    print(&#39;Hello world! (%s)&#39; % threading.currentThread())</span><br><span class="line">    yield from asyncio.sleep(1)</span><br><span class="line">    print(&#39;Hello again! (%s)&#39; % threading.currentThread())</span><br><span class="line"></span><br><span class="line">loop &#x3D; asyncio.get_event_loop()</span><br><span class="line">tasks &#x3D; [hello(), hello()]</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">loop.close()</span><br><span class="line">观察执行过程：</span><br><span class="line"></span><br><span class="line">Hello world! (&lt;_MainThread(MainThread, started 140735195337472)&gt;)</span><br><span class="line">Hello world! (&lt;_MainThread(MainThread, started 140735195337472)&gt;)</span><br><span class="line">(暂停约1秒)</span><br><span class="line">Hello again! (&lt;_MainThread(MainThread, started 140735195337472)&gt;)</span><br><span class="line">Hello again! (&lt;_MainThread(MainThread, started 140735195337472)&gt;)</span><br><span class="line">由打印的当前线程名称可以看出，两个coroutine是由同一个线程并发执行的。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果把asyncio.sleep()换成真正的IO操作，则多个coroutine就可以由一个线程并发执行。</p>
</blockquote>
<ol start="3">
<li>我们用asyncio的异步网络连接来获取sina、sohu和163的网站首页：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import asyncio</span><br><span class="line"></span><br><span class="line">@asyncio.coroutine</span><br><span class="line">def wget(host):</span><br><span class="line">    print(&#39;wget %s...&#39; % host)</span><br><span class="line">    connect &#x3D; asyncio.open_connection(host, 80)</span><br><span class="line">    reader, writer &#x3D; yield from connect</span><br><span class="line">    header &#x3D; &#39;GET &#x2F; HTTP&#x2F;1.0\r\nHost: %s\r\n\r\n&#39; % host</span><br><span class="line">    writer.write(header.encode(&#39;utf-8&#39;))</span><br><span class="line">    yield from writer.drain()</span><br><span class="line">    while True:</span><br><span class="line">        line &#x3D; yield from reader.readline()</span><br><span class="line">        if line &#x3D;&#x3D; b&#39;\r\n&#39;:</span><br><span class="line">            break</span><br><span class="line">        print(&#39;%s header &gt; %s&#39; % (host, line.decode(&#39;utf-8&#39;).rstrip()))</span><br><span class="line">    # Ignore the body, close the socket</span><br><span class="line">    writer.close()</span><br><span class="line"></span><br><span class="line">loop &#x3D; asyncio.get_event_loop()</span><br><span class="line">tasks &#x3D; [wget(host) for host in [&#39;www.sina.com.cn&#39;, &#39;www.sohu.com&#39;, &#39;www.163.com&#39;]]</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">loop.close()</span><br><span class="line">执行结果如下：</span><br><span class="line"></span><br><span class="line">wget www.sohu.com...</span><br><span class="line">wget www.sina.com.cn...</span><br><span class="line">wget www.163.com...</span><br><span class="line">(等待一段时间)</span><br><span class="line">(打印出sohu的header)</span><br><span class="line">www.sohu.com header &gt; HTTP&#x2F;1.1 200 OK</span><br><span class="line">www.sohu.com header &gt; Content-Type: text&#x2F;html</span><br><span class="line">...</span><br><span class="line">(打印出sina的header)</span><br><span class="line">www.sina.com.cn header &gt; HTTP&#x2F;1.1 200 OK</span><br><span class="line">www.sina.com.cn header &gt; Date: Wed, 20 May 2015 04:56:33 GMT</span><br><span class="line">...</span><br><span class="line">(打印出163的header)</span><br><span class="line">www.163.com header &gt; HTTP&#x2F;1.0 302 Moved Temporarily</span><br><span class="line">www.163.com header &gt; Server: Cdn Cache Server V2.0</span><br><span class="line">...</span><br><span class="line">可见3个连接由一个线程通过coroutine并发完成。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ol>
<li><p>asyncio提供了完善的异步IO支持；</p>
</li>
<li><p>异步操作需要在coroutine中通过yield from完成；</p>
</li>
<li><p>多个coroutine可以封装成一组Task然后并发执行。</p>
</li>
</ol>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">import threading</span><br><span class="line">import asyncio</span><br><span class="line"></span><br><span class="line">@asyncio.coroutine</span><br><span class="line">def hello():</span><br><span class="line">    print(&#39;Hello world! (%s)&#39; % threading.currentThread())</span><br><span class="line">    yield from asyncio.sleep(1)</span><br><span class="line">    print(&#39;Hello again! (%s)&#39; % threading.currentThread())</span><br><span class="line"></span><br><span class="line">loop &#x3D; asyncio.get_event_loop()</span><br><span class="line">tasks &#x3D; [hello(), hello()]</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">loop.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">import asyncio</span><br><span class="line"></span><br><span class="line">@asyncio.coroutine</span><br><span class="line">def wget(host):</span><br><span class="line">    print(&#39;wget %s...&#39; % host)</span><br><span class="line">    connect &#x3D; asyncio.open_connection(host, 80)</span><br><span class="line">    reader, writer &#x3D; yield from connect</span><br><span class="line">    header &#x3D; &#39;GET &#x2F; HTTP&#x2F;1.0\r\nHost: %s\r\n\r\n&#39; % host</span><br><span class="line">    writer.write(header.encode(&#39;utf-8&#39;))</span><br><span class="line">    yield from writer.drain()</span><br><span class="line">    while True:</span><br><span class="line">        line &#x3D; yield from reader.readline()</span><br><span class="line">        if line &#x3D;&#x3D; b&#39;\r\n&#39;:</span><br><span class="line">            break</span><br><span class="line">        print(&#39;%s header &gt; %s&#39; % (host, line.decode(&#39;utf-8&#39;).rstrip()))</span><br><span class="line">    # Ignore the body, close the socket</span><br><span class="line">    writer.close()</span><br><span class="line"></span><br><span class="line">loop &#x3D; asyncio.get_event_loop()</span><br><span class="line">tasks &#x3D; [wget(host) for host in [&#39;www.sina.com.cn&#39;, &#39;www.sohu.com&#39;, &#39;www.163.com&#39;]]</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">loop.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h2><h3 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h3><ol>
<li><p>用asyncio提供的@asyncio.coroutine可以把一个generator标记为coroutine类型，然后在coroutine内部用yield from调用另一个coroutine实现异步操作。</p>
</li>
<li><p>为了简化并更好地标识异步IO，从Python 3.5开始引入了新的语法async和await，可以让coroutine的代码更简洁易读。</p>
</li>
<li><p>注意，async和await是针对coroutine的新语法，要使用新的语法，只需要做两步简单的替换：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">把@asyncio.coroutine替换为async；</span><br><span class="line">把yield from替换为await。</span><br><span class="line">让我们对比一下上一节的代码：</span><br><span class="line"></span><br><span class="line">@asyncio.coroutine</span><br><span class="line">def hello():</span><br><span class="line">    print(&quot;Hello world!&quot;)</span><br><span class="line">    r &#x3D; yield from asyncio.sleep(1)</span><br><span class="line">    print(&quot;Hello again!&quot;)</span><br><span class="line">用新语法重新编写如下：</span><br><span class="line"></span><br><span class="line">async def hello():</span><br><span class="line">    print(&quot;Hello world!&quot;)</span><br><span class="line">    r &#x3D; await asyncio.sleep(1)</span><br><span class="line">    print(&quot;Hello again!&quot;)</span><br><span class="line">剩下的代码保持不变。</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>Python从3.5版本开始为asyncio提供了async和await的新语法；</p>
<p>注意新语法只能用在Python 3.5以及后续版本，如果使用3.4版本，则仍需使用上一节的方案。</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">import threading</span><br><span class="line">import asyncio</span><br><span class="line"></span><br><span class="line">async def hello():</span><br><span class="line">    print(&#39;Hello world! (%s)&#39; % threading.currentThread())</span><br><span class="line">    await asyncio.sleep(1)</span><br><span class="line">    print(&#39;Hello again! (%s)&#39; % threading.currentThread())</span><br><span class="line"></span><br><span class="line">loop &#x3D; asyncio.get_event_loop()</span><br><span class="line">tasks &#x3D; [hello(), hello()]</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">loop.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">import threading</span><br><span class="line">import asyncio</span><br><span class="line"></span><br><span class="line">async def hello():</span><br><span class="line">    print(&#39;Hello world! (%s)&#39; % threading.currentThread())</span><br><span class="line">    await asyncio.sleep(1)</span><br><span class="line">    print(&#39;Hello again! (%s)&#39; % threading.currentThread())</span><br><span class="line"></span><br><span class="line">loop &#x3D; asyncio.get_event_loop()</span><br><span class="line">tasks &#x3D; [hello(), hello()]</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">loop.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="aiohttp"><a href="#aiohttp" class="headerlink" title="aiohttp"></a>aiohttp</h2><h3 id="定义-6"><a href="#定义-6" class="headerlink" title="定义"></a>定义</h3><ol>
<li><p>asyncio可以实现单线程并发IO操作。如果仅用在客户端，发挥的威力不大。如果把asyncio用在服务器端，例如Web服务器，由于HTTP连接就是IO操作，因此可以用单线程+coroutine实现多用户的高并发支持。</p>
</li>
<li><p>asyncio实现了TCP、UDP、SSL等协议，aiohttp则是基于asyncio实现的HTTP框架。</p>
</li>
</ol>
<h3 id="操作-4"><a href="#操作-4" class="headerlink" title="操作"></a>操作</h3><ol>
<li><p>安装aiohttp：</p>
<pre><code> pip install aiohttp
</code></pre>
</li>
<li><p>然后编写一个HTTP服务器，分别处理以下URL：</p>
<pre><code> / - 首页返回b&#39;&lt;h1&gt;Index&lt;/h1&gt;&#39;；

 /hello/&#123;name&#125; - 根据URL参数返回文本hello, %s!。
</code></pre>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">代码如下：</span><br><span class="line"></span><br><span class="line">import asyncio</span><br><span class="line"></span><br><span class="line">from aiohttp import web</span><br><span class="line"></span><br><span class="line">async def index(request):</span><br><span class="line">    await asyncio.sleep(0.5)</span><br><span class="line">    return web.Response(body&#x3D;b&#39;&lt;h1&gt;Index&lt;&#x2F;h1&gt;&#39;)</span><br><span class="line"></span><br><span class="line">async def hello(request):</span><br><span class="line">    await asyncio.sleep(0.5)</span><br><span class="line">    text &#x3D; &#39;&lt;h1&gt;hello, %s!&lt;&#x2F;h1&gt;&#39; % request.match_info[&#39;name&#39;]</span><br><span class="line">    return web.Response(body&#x3D;text.encode(&#39;utf-8&#39;))</span><br><span class="line"></span><br><span class="line">async def init(loop):</span><br><span class="line">    app &#x3D; web.Application(loop&#x3D;loop)</span><br><span class="line">    app.router.add_route(&#39;GET&#39;, &#39;&#x2F;&#39;, index)</span><br><span class="line">    app.router.add_route(&#39;GET&#39;, &#39;&#x2F;hello&#x2F;&#123;name&#125;&#39;, hello)</span><br><span class="line">    srv &#x3D; await loop.create_server(app.make_handler(), &#39;127.0.0.1&#39;, 8000)</span><br><span class="line">    print(&#39;Server started at http:&#x2F;&#x2F;127.0.0.1:8000...&#39;)</span><br><span class="line">    return srv</span><br><span class="line"></span><br><span class="line">loop &#x3D; asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(init(loop))</span><br><span class="line">loop.run_forever()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意aiohttp的初始化函数init()也是一个coroutine，loop.create_server()则利用asyncio创建TCP服务。</p>
</blockquote>
</li>
</ol>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">__author__ &#x3D; &#39;Michael Liao&#39;</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">async web application.</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">import asyncio</span><br><span class="line"></span><br><span class="line">from aiohttp import web</span><br><span class="line"></span><br><span class="line">async def index(request):</span><br><span class="line">    await asyncio.sleep(0.5)</span><br><span class="line">    return web.Response(body&#x3D;b&#39;&lt;h1&gt;Index&lt;&#x2F;h1&gt;&#39;)</span><br><span class="line"></span><br><span class="line">async def hello(request):</span><br><span class="line">    await asyncio.sleep(0.5)</span><br><span class="line">    text &#x3D; &#39;&lt;h1&gt;hello, %s!&lt;&#x2F;h1&gt;&#39; % request.match_info[&#39;name&#39;]</span><br><span class="line">    return web.Response(body&#x3D;text.encode(&#39;utf-8&#39;))</span><br><span class="line"></span><br><span class="line">async def init(loop):</span><br><span class="line">    app &#x3D; web.Application(loop&#x3D;loop)</span><br><span class="line">    app.router.add_route(&#39;GET&#39;, &#39;&#x2F;&#39;, index)</span><br><span class="line">    app.router.add_route(&#39;GET&#39;, &#39;&#x2F;hello&#x2F;&#123;name&#125;&#39;, hello)</span><br><span class="line">    srv &#x3D; await loop.create_server(app.make_handler(), &#39;127.0.0.1&#39;, 8000)</span><br><span class="line">    print(&#39;Server started at http:&#x2F;&#x2F;127.0.0.1:8000...&#39;)</span><br><span class="line">    return srv</span><br><span class="line"></span><br><span class="line">loop &#x3D; asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(init(loop))</span><br><span class="line">loop.run_forever()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python扩展</category>
      </categories>
      <tags>
        <tag>pythonIO编程</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础大全12--正则表达式</title>
    <url>/jwangcloud/1992162868/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/python01.jpeg"></p>
<h4 id="参考地址：正则表达式运用"><a href="#参考地址：正则表达式运用" class="headerlink" title="参考地址：正则表达式运用"></a>参考地址：<a href="https://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html">正则表达式运用</a></h4><span id="more"></span>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">基础函数运用：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import re</span><br><span class="line">pattern &#x3D; re.compile(r&#39;\d+&#39;)</span><br><span class="line">print(pattern.split(&#39;one1two2three&#39;)) </span><br><span class="line">#以此分隔并返回分开后的形式</span><br><span class="line">print(pattern.match(&#39;0one1two2three&#39;))  </span><br><span class="line">#返回一个对象</span><br><span class="line">print(pattern.findall(&#39;one111two211three&#39;)) </span><br><span class="line">#返回所有能匹配的对象</span><br><span class="line">print(pattern.finditer(&#39;one1two2three&#39;))   </span><br><span class="line">#返回为迭代器</span><br><span class="line">pattern1 &#x3D; re.compile(r&#39;(\d\w+) (\d\w+)&#39;)  </span><br><span class="line">#相互交换位置</span><br><span class="line">print(pattern1.sub(r&#39;\2 \1&#39;,&#39;1one 2two&#39;))</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="正则表达式：邮箱等规则字符串可用-re函数"><a href="#正则表达式：邮箱等规则字符串可用-re函数" class="headerlink" title="正则表达式：邮箱等规则字符串可用   re函数"></a>正则表达式：邮箱等规则字符串可用   re函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">模糊查询：判断主题是字符串</span><br><span class="line">特殊字符：</span><br><span class="line">\d:数字（一个数字（开始为数字则正确））</span><br><span class="line">\D:非数字</span><br><span class="line">\w:单词字符</span><br><span class="line">\W:非单词字符</span><br><span class="line">\s:空白字符</span><br><span class="line">[1-9]: 1到9数字</span><br><span class="line">[a-z|A-Z]:</span><br><span class="line"></span><br><span class="line">转义符：\</span><br><span class="line">\\d:\d</span><br><span class="line">\.:.</span><br><span class="line">.:任意字符</span><br><span class="line"></span><br><span class="line">|：左右满足任何一个即可</span><br><span class="line"></span><br><span class="line">正则表达式的数量：</span><br><span class="line">*:0个或多个</span><br><span class="line">+：1个或多个</span><br><span class="line">？：0个或1个  贪婪模式下:取消贪婪模式</span><br><span class="line">注意：+ ？ * 匹配的是前一个字符</span><br><span class="line">贪婪模式：*?  +?  ??  &#123;1,4&#125;?</span><br><span class="line">^:以xxx开头</span><br><span class="line">$:以XXX结尾</span><br><span class="line">\A:相当于：^\w</span><br><span class="line">\Z:相当于:\w$</span><br><span class="line">&#123;0,5&#125;：格式重复次数0到5次</span><br><span class="line">r:转译符，r&#39;  &#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="re函数"><a href="#re函数" class="headerlink" title="re函数"></a>re函数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">match:尽量不匹配，找到一个马上返回</span><br><span class="line">search：</span><br><span class="line">findall:尽量匹配</span><br><span class="line"></span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># pa &#x3D; &#39;\d&#39;   #规则 ---&gt;正则表达式</span><br><span class="line"># str1 &#x3D; &#39;qaqsqdq12313&#39;</span><br><span class="line">#</span><br><span class="line"># x &#x3D; re.findall(pa,str1)</span><br><span class="line"># print(x)</span><br><span class="line"></span><br><span class="line"># def is_num(string1):</span><br><span class="line">#     pattern &#x3D; &#39;\w+@\w+\.com&#39;</span><br><span class="line">#     x &#x3D; re.findall(pattern,string1)</span><br><span class="line">#     print(x)</span><br><span class="line">#     return x</span><br><span class="line">#</span><br><span class="line"># while True:</span><br><span class="line">#     str1 &#x3D; input(&#39;输入邮箱： &#39;)</span><br><span class="line">#     res &#x3D; is_num(str1)</span><br><span class="line">#     if len(res) &#x3D;&#x3D; 0:</span><br><span class="line">#         print(&#39;xxxx&#39;)</span><br><span class="line">#     else:</span><br><span class="line">#         print(&#39;oooooo&#39;)</span><br><span class="line">#         break</span><br><span class="line"></span><br><span class="line"># def is_num(string1):</span><br><span class="line">#     pattern &#x3D; r&quot;^((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.)&#123;3&#125;(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])$&quot;</span><br><span class="line">#     # pattern &#x3D; r&#39;1\d\d|25[0-5]|2[0-4]\d&#39;</span><br><span class="line">#     x &#x3D; re.findall(pattern, string1)</span><br><span class="line">#     print(x)</span><br><span class="line">#     return x</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># while True:</span><br><span class="line">#     str1 &#x3D; input(&#39;输入号码： &#39;)</span><br><span class="line">#     res &#x3D; is_num(str1)</span><br><span class="line">#     if len(res) !&#x3D; 1:</span><br><span class="line">#         print(&#39;xxxx&#39;)</span><br><span class="line">#     else:</span><br><span class="line">#         print(&#39;oooooo&#39;)</span><br><span class="line">#         break</span><br><span class="line"># content &#x3D; &#39;Hello 12345 World&#39;</span><br><span class="line"># result &#x3D; re.match(&#39;^Hello\s(\d+)\sWorld&#39;, content)</span><br><span class="line"># print(result.group())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">贪婪模式</span><br><span class="line"># content &#x3D; &#39;http:&#x2F;&#x2F;weibo.com&#x2F;comment&#x2F;kEraCNdsfgkdsfgjkldsjkl&#39;</span><br><span class="line"># result1 &#x3D; re.match(&#39;http.*?comment&#x2F;(.*?)&#39;, content)</span><br><span class="line"># result2 &#x3D; re.match(&#39;http.*?comment&#x2F;(.*)&#39;, content)</span><br><span class="line"># print(&#39;result1&#39;, result1.group(1))  # 结果 result1</span><br><span class="line"># print(&#39;result2&#39;, result2.group(1))  # 结果 result2 kEraCN</span><br><span class="line"></span><br><span class="line"># content &#x3D; &#39;Hello 1234567 World_This is a Regex Demo&#39;</span><br><span class="line"># result &#x3D; re.match(&#39;^He.*?(\d+).*Demo$&#39;, content)</span><br><span class="line"># print(result.group(1))  # 结果</span><br><span class="line"># result &#x3D; re.match(&#39;^He.*(\d+).*Demo$&#39;, content)</span><br><span class="line"># print(result.group(1))  # 结果 7</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python正则</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础大全10--异常类、手写list</title>
    <url>/jwangcloud/3400028629/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/python01.jpeg"></p>
<h3 id="异常类-：报告错误-–-gt-中断-运行"><a href="#异常类-：报告错误-–-gt-中断-运行" class="headerlink" title="异常类 ：报告错误 –&gt; 中断 运行"></a>异常类 ：报告错误 –&gt; 中断 运行</h3><span id="more"></span>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#只会监听特殊类型的错误</span><br><span class="line">try:</span><br><span class="line">    xx &#x3D; [qxaas]</span><br><span class="line">#监听与 NameError 相关的错误，监听所有报错只需要监听其父类（Exception）即可    </span><br><span class="line">except NameError:      </span><br><span class="line">    print(&#39;cuo  wu&#39;)</span><br><span class="line"></span><br><span class="line"># class TestError(Exception):  #exception属于报错的父类，继承即可</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="自定义报错"><a href="#自定义报错" class="headerlink" title="自定义报错"></a>自定义报错</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class TestError(Exception):  #自定义一个报错</span><br><span class="line">    pass</span><br><span class="line">def rujiao(age):</span><br><span class="line">    if age &lt; 30:</span><br><span class="line">        print(age)</span><br><span class="line">    else:</span><br><span class="line">        raise TestError(&#39;xiajibaluanxie&#39;)  #报错目标 ：中止程序，并输出错误提示</span><br><span class="line"># try:                #出现报错并继续运行后面的代码</span><br><span class="line">#     rujiao(333)</span><br><span class="line"># except TestError:</span><br><span class="line">#     print(&quot;xxx&quot;)   #若输入pass 则会直接跳过并不会报错</span><br><span class="line">#</span><br><span class="line"># print(&#39;xxxxxxxxxx&#39;)</span><br><span class="line">l &#x3D; [1,2,3,4]</span><br><span class="line">try:                #出现报错并继续运行后面的代码</span><br><span class="line">    l[7]             #出现错误则直接报错，不会执行下面的语句快</span><br><span class="line">    rujiao(60)</span><br><span class="line">#打印错误提示 (as后接错误提示)   可以重复抓取不同的错误，显示抓取的只有一种</span><br><span class="line">except TestError as errortype:  </span><br><span class="line">    print(errortype)</span><br><span class="line">except IndexError:</span><br><span class="line">    print(&quot;下标错误&quot;)</span><br><span class="line">except AttributeError:</span><br><span class="line">    print(&#39;无法赋值&#39;)</span><br><span class="line">else:  #上述若未发现错误，就执行else中语句</span><br><span class="line">    print(&#39;++++++++&#39;)</span><br><span class="line">finally:  #若上述未出现错误或中断：至少会执行该命令</span><br><span class="line">    print(&#39;-------&#39;)</span><br><span class="line"></span><br><span class="line">print(&#39;xxxxxxxxxx&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="编写列表类，实现列表的基础方法"><a href="#编写列表类，实现列表的基础方法" class="headerlink" title="编写列表类，实现列表的基础方法"></a>编写列表类，实现列表的基础方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Node:</span><br><span class="line">    def __init__(self, v, n):</span><br><span class="line">        self.value &#x3D; v</span><br><span class="line">        self.next &#x3D; n</span><br><span class="line"></span><br><span class="line">class MyList:</span><br><span class="line">    def __init__(self, *args):</span><br><span class="line">        self.first_node &#x3D; Node(None, None)</span><br><span class="line">        self.length &#x3D; 1</span><br><span class="line">        for i in args:</span><br><span class="line">            self.append(i)</span><br><span class="line">        self.listxx &#x3D; args</span><br><span class="line"></span><br><span class="line">    def __len__(self):</span><br><span class="line">        return self.length - 1</span><br><span class="line"></span><br><span class="line">    def append(self, v):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        给列表添加一个新的元素</span><br><span class="line">        :param v:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        node &#x3D; self.find_last_node()</span><br><span class="line">        node.next &#x3D; Node(v, None)</span><br><span class="line">        self.length +&#x3D; 1</span><br><span class="line"></span><br><span class="line">    def find_last_node(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        找到最后一个元素</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        node &#x3D; self.first_node</span><br><span class="line">        if node is None:</span><br><span class="line">            return None</span><br><span class="line">        while True:</span><br><span class="line">            if node.next is None:</span><br><span class="line">                break</span><br><span class="line">            node &#x3D; node.next</span><br><span class="line">        return node</span><br><span class="line"></span><br><span class="line">    def pop(self, index&#x3D;-1):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        把列表最后一个元素删除</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if self.length &lt;&#x3D; 1:</span><br><span class="line">            return False</span><br><span class="line">        if index &#x3D;&#x3D; -1:</span><br><span class="line">            index &#x3D; self.length - 2</span><br><span class="line">        n &#x3D; self.get(index)</span><br><span class="line">        next &#x3D; n.next  # 要删除元素的最后一个元素</span><br><span class="line">        pre &#x3D; self.get(index - 1)  # 要删除元素前面一个元素</span><br><span class="line">        pre.next &#x3D; next</span><br><span class="line">        self.length -&#x3D; 1</span><br><span class="line"></span><br><span class="line">    def get(self, index):</span><br><span class="line">        index +&#x3D; 1</span><br><span class="line">        if index &gt;&#x3D; self.length:</span><br><span class="line">            return False</span><br><span class="line">        counter &#x3D; 0</span><br><span class="line">        node &#x3D; self.first_node</span><br><span class="line">        if counter &#x3D;&#x3D; index:</span><br><span class="line">            return node</span><br><span class="line">        while counter !&#x3D; index:</span><br><span class="line">            counter +&#x3D; 1</span><br><span class="line">            # 找到下一个元素</span><br><span class="line">            node &#x3D; node.next</span><br><span class="line">        return node.value</span><br><span class="line"></span><br><span class="line">    def clear(self):</span><br><span class="line">        self.first_node.next &#x3D; None</span><br><span class="line">        self.length &#x3D; 1</span><br><span class="line"></span><br><span class="line">    def count(self, value):</span><br><span class="line">        counter &#x3D; 0</span><br><span class="line">        node &#x3D; self.first_node.next</span><br><span class="line">        while True:</span><br><span class="line">            if node is not None:</span><br><span class="line">                if node.value &#x3D;&#x3D; value:</span><br><span class="line">                    counter +&#x3D; 1</span><br><span class="line">                node &#x3D; node.next</span><br><span class="line">            else:</span><br><span class="line">                break</span><br><span class="line">        return counter</span><br><span class="line"></span><br><span class="line">    def remove(self,value):</span><br><span class="line">        pre_node &#x3D; self.first_node</span><br><span class="line">        current_node &#x3D; pre_node.next</span><br><span class="line">        while True:</span><br><span class="line">            if current_node is None:</span><br><span class="line">                raise ValueError(&quot;&#123;&#125; not in &#123;&#125;&quot;.format(value,self.__class__.__name__))</span><br><span class="line">            if current_node.value &#x3D;&#x3D; value:</span><br><span class="line">                pre_node.next &#x3D; current_node.next</span><br><span class="line">                return</span><br><span class="line">            pre_node &#x3D; pre_node.next</span><br><span class="line">            current_node &#x3D; current_node.next</span><br><span class="line"></span><br><span class="line">    def index(self, value):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        找出value所在的第一个节点</span><br><span class="line">        :param value:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        counter &#x3D; 0</span><br><span class="line">        node &#x3D; self.first_node.next</span><br><span class="line">        while True:</span><br><span class="line">            if node is not None:</span><br><span class="line">                if node.value &#x3D;&#x3D; value:</span><br><span class="line">                    return counter</span><br><span class="line">                else:</span><br><span class="line">                    counter +&#x3D; 1</span><br><span class="line">                    node &#x3D; node.next</span><br><span class="line">            else:</span><br><span class="line">                raise ValueError(&quot;&#123;&#125; is not in list&quot;.format(value))</span><br><span class="line"></span><br><span class="line">    def insert(self, index, value):</span><br><span class="line">        counter &#x3D; 0</span><br><span class="line">        pre_node &#x3D; self.first_node</span><br><span class="line">        while True:</span><br><span class="line">            if pre_node is None:</span><br><span class="line">                self.append(value)</span><br><span class="line">                break</span><br><span class="line">            if counter &#x3D;&#x3D; index:</span><br><span class="line">                next_node &#x3D; pre_node.next</span><br><span class="line">                new_node &#x3D; Node(value, None)</span><br><span class="line">                pre_node.next &#x3D; new_node</span><br><span class="line">                new_node.next &#x3D; next_node</span><br><span class="line">                self.length +&#x3D; 1</span><br><span class="line">                break</span><br><span class="line">            else:</span><br><span class="line">                counter +&#x3D; 1</span><br><span class="line">                pre_node &#x3D; pre_node.next</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        string &#x3D; &quot;[&quot;</span><br><span class="line">        node &#x3D; self.first_node.next</span><br><span class="line">        if node is not None:</span><br><span class="line">            v &#x3D; node.value</span><br><span class="line">            string +&#x3D; str(v)</span><br><span class="line">            node &#x3D; node.next</span><br><span class="line">            while node is not None:</span><br><span class="line">                string +&#x3D; &quot;, &quot; + str(node.value)</span><br><span class="line">                node &#x3D; node.next</span><br><span class="line">        string +&#x3D; &quot;]&quot;</span><br><span class="line"></span><br><span class="line">        return string</span><br><span class="line"></span><br><span class="line">    def reverse(self):</span><br><span class="line">        counter &#x3D; 0</span><br><span class="line">        while self.length-2 &gt; counter:</span><br><span class="line">            node &#x3D; self.first_node.next</span><br><span class="line">            if node is None:</span><br><span class="line">                return</span><br><span class="line">            self.insert(self.length-1-counter,node.value)</span><br><span class="line">            counter +&#x3D; 1</span><br><span class="line">            self.pop(0)</span><br><span class="line">    # timsort</span><br><span class="line">    # &lt;__main__.MyListV2 object at 0x103aa1bd0&gt;</span><br><span class="line">    # def __str__(self):</span><br><span class="line">    #     global __name__</span><br><span class="line">    #     string &#x3D; &quot;&lt;&quot;</span><br><span class="line">    #     string +&#x3D; __name__</span><br><span class="line">    #     string +&#x3D; &quot;.MyList&quot;</span><br><span class="line">    #     string +&#x3D; &#39;  object at &#123;0:x&#125;&#39;.format(id(self))</span><br><span class="line">    #     string +&#x3D; &quot;&gt;&quot;</span><br><span class="line">    #     return string</span><br><span class="line">    def __getitem__(self, item):</span><br><span class="line">        if item &#x3D;&#x3D; -1:</span><br><span class="line">            item &#x3D; self.length - 2</span><br><span class="line">        node &#x3D; self.get(item)</span><br><span class="line">        return node.value</span><br><span class="line"></span><br><span class="line">    def __delitem__(self, *args, **kwargs):  # real signature unknown</span><br><span class="line">        &quot;&quot;&quot; Delete self[key]. &quot;&quot;&quot;</span><br><span class="line">        self.pop(args[0])</span><br><span class="line"></span><br><span class="line">    def __gt__(self, other):  #other表示另一个对象，self表示本次的对象   __gt__(&gt;)  __at__(&lt;)</span><br><span class="line">        if self.length &gt; other.length:</span><br><span class="line">            return True</span><br><span class="line">        else:</span><br><span class="line">            return False</span><br><span class="line">    def __add__(self, other):</span><br><span class="line"></span><br><span class="line">        len1 &#x3D; len(self)</span><br><span class="line">        len2 &#x3D; len(other)</span><br><span class="line">        l3 &#x3D; MyList()</span><br><span class="line">        for i in range(len1):</span><br><span class="line">            l3.append(self.get(i))</span><br><span class="line"></span><br><span class="line">        for j in range(len2):</span><br><span class="line">            l3.append(other.get(j))</span><br><span class="line"></span><br><span class="line">        return l3</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">l1 &#x3D; MyList(1,2,3,4,5,6)</span><br><span class="line">print(l1.get(2))</span><br><span class="line">l2 &#x3D; MyList(1,2,3,4)</span><br><span class="line">print(l1+l2)</span><br><span class="line"></span><br><span class="line"># l.reverse()</span><br><span class="line"># #l1.remove(77)</span><br><span class="line"># # l.insert(10,77)</span><br><span class="line"># # l.clear()</span><br><span class="line"># #</span><br><span class="line"># # l &#x3D; [9,2,9,4,9,2,7,8,9]</span><br><span class="line"># # print(l.index(9))</span><br><span class="line"># # print(l1.index(9))</span><br><span class="line">#</span><br><span class="line"># # print(l1)</span><br><span class="line"># print(l)</span><br><span class="line"># print(len(l))</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># class MyListV2(MyList):</span><br><span class="line">#     def sort(self):</span><br><span class="line">#         pass</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># class MyListV3(MyListV2):</span><br><span class="line">#     def reverse(self):</span><br><span class="line">#         pass</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># l &#x3D; MyListV2(6, 7, 8, 9, 10)</span><br><span class="line">#</span><br><span class="line"># l.append(9)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python异常类</tag>
        <tag>python手写list</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础大全11--面相对象</title>
    <url>/jwangcloud/1278160075/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/python01.jpeg"></p>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><span id="more"></span>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">面向对象：先有类（抽象）才有对象（具体）</span><br><span class="line">class:</span><br><span class="line">可继承  class Mylist(list):  括号里为其它的对象等   ：可多继承，层层继承，本次继承拥有被继承以及上面所有</span><br><span class="line">继承父类的init时，需要使用supper().__init__()</span><br><span class="line">可重写：可以在继承的类中重写其中的方法或功能（多态）</span><br><span class="line">可扩展：继承中可以增加新的方法或功能</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import random</span><br><span class="line">#类的申明方式</span><br><span class="line">class Car:  #在这个下面可以有无数函数  命名：首字母必须大写</span><br><span class="line"></span><br><span class="line">    def __init__(self):        </span><br><span class="line">    #面向对象中的所有东西可共享（通过self挂载，再通过self调用，只用于类）init中为确定的功能</span><br><span class="line">        self.coloer &#x3D; &#39;red&#39;</span><br><span class="line">        self.ppai &#x3D; &#39;jili&#39;</span><br><span class="line">        self.kuandu &#x3D; 1900</span><br><span class="line">        print(&#39;对象初始化&#39;)</span><br><span class="line">        self.x &#x3D; random.randint(0,100)</span><br><span class="line"></span><br><span class="line">    def test(self):</span><br><span class="line">        print(self.coloer)</span><br><span class="line">        self.laba()</span><br><span class="line">        return self.ppai</span><br><span class="line"></span><br><span class="line">    def laba(self):</span><br><span class="line">        self.changd &#x3D; 8000</span><br><span class="line"></span><br><span class="line">    def de_self(self):</span><br><span class="line">        print(self.x)     #挂载在self上，每次调用地址不同</span><br><span class="line">        print(id(self.x))</span><br><span class="line">        xx &#x3D; random.randint(0,100)  #依附于class上，相当于函数变量，每次调用地址相同</span><br><span class="line">        print(xx)</span><br><span class="line">        print(id(xx))</span><br><span class="line"></span><br><span class="line">    def de1_self(self):</span><br><span class="line">        self.de_self()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># car1 &#x3D; Car()         </span><br><span class="line">类的实例化(对象) 会直接调用类中的__init__（初始化）函数 (魔法函数都以__名称__为命名格式)初始化</span><br><span class="line"># car2 &#x3D; Car()         </span><br><span class="line">可实例化多次</span><br><span class="line"># # print(car1.test())   </span><br><span class="line">调用功能函数</span><br><span class="line"># # print(car1.coloer)    </span><br><span class="line">调用self的属性</span><br><span class="line"># car1.laba()             </span><br><span class="line">属于类里除__init__函数之外的self需要先运行其类中对应的函数，才能挂载在self上，对象才能继续调用</span><br><span class="line"># print(car1.changdu)</span><br></pre></td></tr></table></figure>


<h3 id="self"><a href="#self" class="headerlink" title="self"></a>self</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self：相当于挂载器，可以将类中的各个属性通过其挂载，再使用，属于对象，可以在类中互相传递</span><br><span class="line">每个self都有一个独立的空间</span><br><span class="line"></span><br><span class="line">car1 &#x3D; Car()</span><br><span class="line">car1.de_self()</span><br><span class="line">car1.de1_self()</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># import random</span><br><span class="line"># class Student:</span><br><span class="line">#     def __init__(self):</span><br><span class="line">#         self.cla_num &#x3D; random.randint(1,5)</span><br><span class="line">#         self.cla_stunum &#x3D; random.randint(1,50)</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#     def cla_girls(self):</span><br><span class="line">#         stunum &#x3D; self.cla_stunum</span><br><span class="line">#         self.girls &#x3D; random.randint(1,stunum)</span><br><span class="line">#         print(&quot;女生人数：%d&quot;%self.girls)</span><br><span class="line">#</span><br><span class="line">#     def cla_boysnum(self):</span><br><span class="line">#         cla_boyssnum &#x3D; self.cla_stunum - self.girls</span><br><span class="line">#         print(&quot;男生人数：%d&quot;%cla_boyssnum)</span><br><span class="line"># student1 &#x3D; Student</span><br><span class="line"># student1.cla_girls()</span><br><span class="line"># student1.cla_boysnum()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Room:</span><br><span class="line">    def __init__(self,name_num):  #初始化时，可以加入参数</span><br><span class="line">        self.__password &#x3D; 111   #在前面+__后 该属性变成私有，只能在内部调用</span><br><span class="line">        self.__card &#x3D; 111111</span><br><span class="line">        self.n &#x3D; name_num</span><br><span class="line"></span><br><span class="line">    def card_get(self):      #可以通过函数传出，但可以修改成其它值</span><br><span class="line">        return self.__card &#x2F; 2</span><br><span class="line"></span><br><span class="line">    def get_password(self):</span><br><span class="line">        return &#39;12365&#39;</span><br><span class="line"></span><br><span class="line">xx &#x3D; Room(&#39;aaaa&#39;)  #参数值传入并初始化</span><br><span class="line"></span><br><span class="line">print(xx.card_get())</span><br><span class="line">print(xx.get_password())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#每一个类中都存在默认函数：如__str__(魔法函数，会自动调用)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="内置函数调用装饰器"><a href="#内置函数调用装饰器" class="headerlink" title="内置函数调用装饰器"></a>内置函数调用装饰器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person:</span><br><span class="line"></span><br><span class="line">    def __init__(self,name,age,id):</span><br><span class="line">        self.__age &#x3D; age       #私有属性：进行运行时无法查看（被保护）,可隐藏真实数据</span><br><span class="line">        self.__name &#x3D; name</span><br><span class="line">        self.id &#x3D; id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def age(self):</span><br><span class="line">        return self.__age&#x2F;&#x2F;2</span><br><span class="line"></span><br><span class="line">    def set_age(self,age):  #判断输入的参数是否符合规则，符合就修改该参数</span><br><span class="line">        if age &lt; 50:</span><br><span class="line">            self.__age &#x3D; age</span><br><span class="line">        else:</span><br><span class="line">            self.__age &#x3D; 50</span><br><span class="line"></span><br><span class="line">        return self.__age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @property  # 可以直接使用函数名调用的内置装饰器</span><br><span class="line">    def name(self):</span><br><span class="line">        return self.__name</span><br><span class="line"></span><br><span class="line">    def id_c(self):</span><br><span class="line">        print(self.id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p &#x3D; Person(&#39;xxx&#39;,50,12)</span><br><span class="line"></span><br><span class="line">print(p.age())  #只能通过函数调用该属性，并且函数能改原数据</span><br><span class="line"></span><br><span class="line">print(p.name)   #不需要加（）即可调用该函数</span><br><span class="line"></span><br><span class="line">p.id &#x3D; 14    #可修改类中的参数。</span><br><span class="line">p.id_c()</span><br><span class="line"></span><br><span class="line">p.set_age(30)   #判断参数规则并修改该参数</span><br><span class="line">print(p.age())</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="slots"><a href="#slots" class="headerlink" title="slots"></a><strong>slots</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class DataBaset:</span><br><span class="line">    #在设置属性时会直接调用，控制其对象只能存在的属性</span><br><span class="line">    __slots__ &#x3D; (&#39;__password&#39;,&#39;__database_name&#39;,&#39;__name&#39;)</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.__name &#x3D; &#39;&#39;</span><br><span class="line">        self.__password &#x3D; &#39;&#39;</span><br><span class="line">        self.__database_name &#x3D; &#39;&#39;</span><br><span class="line"></span><br><span class="line">    def name(self):</span><br><span class="line">        return self.__name</span><br><span class="line">    @property   #将函数变成属性  若有相关联的setting则需要对setting中的语句再执行该变量</span><br><span class="line">    def password(self):</span><br><span class="line">        return &quot;&#123;&#125;&quot;.format(&#39;*&#39; * len(self.__password))</span><br><span class="line"></span><br><span class="line">    def set_name(self,name):</span><br><span class="line">        iswasp &#x3D; True</span><br><span class="line">        while iswasp &#x3D;&#x3D; True:</span><br><span class="line">            if type(len(name)) &#x3D;&#x3D; str:</span><br><span class="line">                print(&quot;非字符串&quot;)</span><br><span class="line">                iswasp &#x3D; False</span><br><span class="line">            elif len(name) &lt; 6:</span><br><span class="line">                print(&#39;账户名错误&#39;)</span><br><span class="line">                iswasp &#x3D; False</span><br><span class="line">            elif 48 &lt;&#x3D; ord(name[0])&lt;&#x3D; 57:</span><br><span class="line">                print(&quot;首字母为数字&quot;)</span><br><span class="line">                iswasp &#x3D; False</span><br><span class="line">            else:</span><br><span class="line">                self.__name &#x3D; name</span><br><span class="line">                break</span><br><span class="line">    @password.setter   #在变成属性的函数赋值时会调用此setting函数</span><br><span class="line">    def password(self,password):</span><br><span class="line">        if type(password) !&#x3D; str:</span><br><span class="line">            print(&#39;错误&#39;)</span><br><span class="line">            return</span><br><span class="line">        if len(password) &lt; 8:</span><br><span class="line">            print(&#39;长度不够&#39;)</span><br><span class="line">            return</span><br><span class="line">        self.__password &#x3D; password</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql &#x3D; DataBaset()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mysql.name &#x3D; &#39;aaaaaa&#39;  #未修改类中的任何，只是单纯定义（直接在类中设置控制函数就可）</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">在使用property后 如果需要直接使用赋值语法修改被保护的，可在相关判断条件下使用  </span><br><span class="line">@判断名(需要与函数名一样).setter</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">mysql.password &#x3D; &#39;aaa&#39;</span><br><span class="line">print(mysql.password)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础大全09--模块操作</title>
    <url>/jwangcloud/1559717923/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/python01.jpeg"></p>
<h3 id="模块的引用与创建"><a href="#模块的引用与创建" class="headerlink" title="模块的引用与创建"></a>模块的引用与创建</h3><span id="more"></span>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test1.py</span><br><span class="line"></span><br><span class="line">小技巧，程序自动识别当前执行的python文件名   __file__</span><br><span class="line"></span><br><span class="line">def a_test():</span><br><span class="line">    return &#39;a.py&#39;</span><br><span class="line">def test():     #return 为空 调用会多一个返回值空，以及执行该函数打印出aaaa</span><br><span class="line">    print(&quot;aaaaa&quot;)</span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:   #该命令下的不会被引用执行</span><br><span class="line">    print(&quot;不可被引用的命令test1&quot;)</span><br><span class="line">print(&#39;可以被调用的test1&#39;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test2.py</span><br><span class="line">from module.test1 import a_test,test  #引用来自module包下test1.py中的a_test函数，</span><br><span class="line">module包必须含有_init_.py文件</span><br><span class="line"></span><br><span class="line">def b_test():</span><br><span class="line">    return &#39;b.py&#39;</span><br><span class="line"></span><br><span class="line">print(a_test())   #输出test1中的a_test函数运行结果</span><br><span class="line">print(test())</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test3.py</span><br><span class="line"></span><br><span class="line">import module.test1    #引用目标文件名 -- 会先执行import下的文件</span><br><span class="line">import module.a_test</span><br><span class="line">print(module.test1.a_test())  #直接调用该文件下的为a_test的函数，并打印输出  </span><br><span class="line">若有其它文件调用该文件下函数，会执行该文件下的命令，解决方案见test1.py</span><br><span class="line">print(module.test1.test())    #会先执行module下test1中的所有，</span><br><span class="line">再执行函数test若无return会返回空</span><br><span class="line">print(module.a_test.get_path())  #调用的执行目标文件所在路径，</span><br><span class="line">而不是该命令所在文件的路径</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="引用内置库"><a href="#引用内置库" class="headerlink" title="引用内置库"></a>引用内置库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import os    #引进os模块，详见a_test.py</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">time.sleep(2) #程序暂停2秒</span><br><span class="line">time.time()#时间戳</span><br><span class="line">datetime.time() #运行时间</span><br><span class="line"></span><br><span class="line">import random</span><br><span class="line">random.randint(0,10)  #伪随机</span><br><span class="line">random.random()  #随机浮点数</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="引用第三方库"><a href="#引用第三方库" class="headerlink" title="引用第三方库"></a>引用第三方库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装外部库：pycharm -- preferences -- project interpreter -- + -- &#39;选择库&#39; -- install</span><br><span class="line">相当于执行了：pip3 install requests(浏览网页)</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">r &#x3D; requests.get(&#39;https:&#x2F;&#x2F;www.baidu.com&#39;)</span><br><span class="line">print(r.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="建立自己的库：在需要的文件夹下建立一个-init-py文件-或者系统自动生成，该文件夹会成为一个库"><a href="#建立自己的库：在需要的文件夹下建立一个-init-py文件-或者系统自动生成，该文件夹会成为一个库" class="headerlink" title="建立自己的库：在需要的文件夹下建立一个__init__.py文件,或者系统自动生成，该文件夹会成为一个库"></a>建立自己的库：在需要的文件夹下建立一个__init__.py文件,或者系统自动生成，该文件夹会成为一个库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from module import test1</span><br><span class="line">test1.test()</span><br></pre></td></tr></table></figure>

<h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">r w a --&gt;读 写（会覆盖文件中的内容） 追加写（末尾添加）读写文件性能会很低，因为文件存在磁盘，需要转到CPU运行</span><br><span class="line"></span><br><span class="line"> w &#x3D; open(&#39;open.txt&#39;,&#39;r&#39;)  #每次都只能操作一个方法</span><br><span class="line"> w.write(&#39;测试写&#39;)</span><br><span class="line"> w.close()          #文件操作后需要关闭，文件描述符有关</span><br><span class="line"></span><br><span class="line">r.readlines():一行一行读</span><br><span class="line"></span><br><span class="line"> r &#x3D; open(&#39;open.txt&#39;,&#39;r&#39;)  #读取文档中所有内容（字节读取）</span><br><span class="line"> read_txt &#x3D; &#39;&#39;</span><br><span class="line"> while True:</span><br><span class="line">     x &#x3D; r.read(1)      #一个字节一个字节读取</span><br><span class="line">     if len(x) &#x3D;&#x3D; 0:</span><br><span class="line">         break</span><br><span class="line">     read_txt +&#x3D; x</span><br><span class="line"> r.close()</span><br><span class="line"> print(read_txt)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> r &#x3D; open(&#39;open.txt&#39;,&#39;r&#39;)  #读取文档中的所有内容（行读取）</span><br><span class="line"> read_txt &#x3D; &#39;&#39;</span><br><span class="line"> while True:</span><br><span class="line">     x &#x3D; r.readlines()</span><br><span class="line">     if len(x) &#x3D;&#x3D; 0:</span><br><span class="line">         break</span><br><span class="line">     print(x)</span><br><span class="line"> r.close()</span><br><span class="line"></span><br><span class="line">#无需关闭文件的方法：</span><br><span class="line"> with open(&#39;open.txt&#39;,&#39;r&#39;) as r:  #在其中的文件操作代码运行后会自动关掉</span><br><span class="line">     read_txt &#x3D; &#39;&#39;</span><br><span class="line">     while True:</span><br><span class="line">         x &#x3D; r.readlines()</span><br><span class="line">         if len(x) &#x3D;&#x3D; 0:</span><br><span class="line">             break</span><br><span class="line">         print(x)</span><br><span class="line">         </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python模块操作</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础大全08--文件操作</title>
    <url>/jwangcloud/2633756156/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/python01.jpeg"></p>
<h3 id="os-shtuil模块常用命令"><a href="#os-shtuil模块常用命令" class="headerlink" title="os/shtuil模块常用命令"></a>os/shtuil模块常用命令</h3><span id="more"></span>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">os模块</span><br><span class="line">path函数os模块中的abspath:找出当前运行函数的绝对路径</span><br><span class="line">os.mkdir:不能递归创建目录</span><br><span class="line">os.path.join:相当于&quot;+&#x2F;&quot;，如果是windos则是&quot;\+&quot;</span><br><span class="line">os.makedirs: 可递归创建文件</span><br><span class="line">os.path.abspath:显示同层文件的绝对路径</span><br><span class="line">os.path.dirname:显示同层文件上层目录</span><br><span class="line">os.rmdir:删除空文件</span><br><span class="line">shutil模块</span><br><span class="line">shutil rmtree:强制删除文件</span><br><span class="line">shutil move:移动文件</span><br><span class="line">shutil copy:</span><br><span class="line">shutil copytree:</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="文件路径的查找"><a href="#文件路径的查找" class="headerlink" title="文件路径的查找"></a>文件路径的查找</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">import shutil #更高级一点的库</span><br><span class="line"></span><br><span class="line"> def get_path():</span><br><span class="line">     xx &#x3D; os.path.abspath(__file__)  #__file__相当于当前所在文件名</span><br><span class="line">     return xx</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一直找上层路径直到项目路径</span><br><span class="line"> c_path &#x3D; os.path.abspath(__file__)</span><br><span class="line"> module_path &#x3D; os.path.dirname(c_path)</span><br><span class="line"> pycode_path &#x3D; os.path.dirname(module_path)</span><br><span class="line"> print(os.path.dirname(pycode_path))</span><br><span class="line"></span><br><span class="line">相当于下面代码</span><br><span class="line"> BASE_DIR &#x3D; os.path.dirname(os.path.dirname(__file__))</span><br><span class="line"> print(BASE_DIR)</span><br><span class="line"> os.mkdir(BASE_DIR+&#39;&#x2F;b_test&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="创建或删除文件-文件夹"><a href="#创建或删除文件-文件夹" class="headerlink" title="创建或删除文件/文件夹"></a>创建或删除文件/文件夹</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> xx &#x3D; os.path.join(BASE_DIR,&#39;text1&#39;,&#39;text2&#39;) #在BASE_DIR的路径下创建text1并在该文件下再创建text2</span><br><span class="line"> os.mkdir(xx)   #不能递归创建</span><br><span class="line"> os.makedirs(xx) #可递归创建文件</span><br><span class="line"> os.makedirs(xx,exist_ok&#x3D;True)  #若有该文件名存在则不会再报错</span><br><span class="line"></span><br><span class="line"> os.rmdir(os.path.join(BASE_DIR,&#39;b_test&#39;))  #只能删除空目录</span><br><span class="line"></span><br><span class="line">shutil.rmtree(os.path.join(BASE_DIR,&#39;text1&#39;)) #使用shutil库函数删除文件夹(包括非空文件夹)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="文件-文件夹的移动，以及文件夹遍历"><a href="#文件-文件夹的移动，以及文件夹遍历" class="headerlink" title="文件/文件夹的移动，以及文件夹遍历"></a>文件/文件夹的移动，以及文件夹遍历</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将位于BASE_PATH路径下的a_text移动到b_text下</span><br><span class="line"></span><br><span class="line"> os.mkdir(os.path.join(BASE_DIR,&#39;a_text&#39;))</span><br><span class="line"> os.mkdir(os.path.join(BASE_DIR,&#39;b_text&#39;))</span><br><span class="line"> shutil.move(os.path.join(BASE_DIR,&#39;a_text&#39;),os.path.join(BASE_DIR,&#39;b_text&#39;))  </span><br><span class="line"> </span><br><span class="line">拷贝文件到一个新文件中  操作的是文件</span><br><span class="line"> shutil.copy(&#39;test1.py&#39;,&#39;test4.py&#39;) </span><br><span class="line">拷贝文件夹到新文件夹中，操作的是文件夹   	</span><br><span class="line"> shutil.copytree(os.path.join(BASE_DIR,&#39;module&#39;),os.path.join(BASE_DIR,&#39;module2&#39;)) </span><br><span class="line"> </span><br><span class="line">遍历文件夹</span><br><span class="line"> yy &#x3D; os.listdir(BASE_DIR+&#39;&#x2F;module&#39;)  </span><br><span class="line"> print(yy)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="遍历文件夹"><a href="#遍历文件夹" class="headerlink" title="遍历文件夹"></a>遍历文件夹</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">import shutil</span><br><span class="line"></span><br><span class="line">#深度遍历文件夹</span><br><span class="line">def deep_first(dir):  </span><br><span class="line">    dir_lists &#x3D; os.listdir(dir)</span><br><span class="line">    if len(dir_lists) &#x3D;&#x3D; 0:</span><br><span class="line">        return</span><br><span class="line">    for d in dir_lists:</span><br><span class="line">        print(d)</span><br><span class="line">        deep_first(os.path.join(dir,d))</span><br><span class="line">deep_first(&#39;test&#39;)</span><br><span class="line"></span><br><span class="line">#广度遍历文件夹</span><br><span class="line">def brand_first(dir):   </span><br><span class="line">    buckets &#x3D; []</span><br><span class="line">    buckets.append(dir)</span><br><span class="line"></span><br><span class="line">    while len(buckets) &gt; 0:</span><br><span class="line">        tmp &#x3D; buckets.pop(0)</span><br><span class="line">        print(tmp)</span><br><span class="line">        files &#x3D; os.listdir(tmp)    #listdir中容易乱序，需要排序</span><br><span class="line">        files.sort()</span><br><span class="line">        for i in files:</span><br><span class="line">            buckets.append(os.path.join(tmp,i))</span><br><span class="line"></span><br><span class="line">brand_first(&#39;test&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python文件操作</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础大全07--集合</title>
    <url>/jwangcloud/1297570316/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/python01.jpeg"></p>
<h4 id="字典-键值对-key-value"><a href="#字典-键值对-key-value" class="headerlink" title="字典: 键值对 key - value"></a>字典: 键值对 key - value</h4><span id="more"></span>

<p>1.申明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dict1 &#x3D; &#123;&#39;a&#39;:1,&#39;b&#39;:2,&#39;c&#39;:3&#125;   #其中的每一个键值对都与下标无关，即与位置无关</span><br><span class="line">dict2 &#x3D; &#123;&#39;b&#39;:2,&#39;a&#39;:1,&#39;c&#39;:3&#125;</span><br><span class="line">print(dict1)</span><br><span class="line">print(dict1[&#39;a&#39;])</span><br></pre></td></tr></table></figure>

<p>2.dict内置方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dict3 &#x3D; &#123;&#39;b&#39;:2,&#39;a&#39;:1,&#39;c&#39;:3,&#39;d&#39;:dict1&#125;</span><br><span class="line">print(dict3.keys())        #打印所有的键</span><br><span class="line"></span><br><span class="line">print(list(dict3.keys()))</span><br><span class="line"></span><br><span class="line">print(list(dict3.values())) #打印所有的值</span><br><span class="line"></span><br><span class="line">print(list(dict3.items()))  #打印所有的键和值</span><br><span class="line"></span><br><span class="line">print(dict3.get(&#39;a&#39;,&#39;aa&#39;))  #判断其是否存在该键值,有则返回对应的值，（键，值）</span><br><span class="line"></span><br><span class="line">print(dict3.setdefault(&#39;hello&#39;,&#39;w&#39;)) #不存在该键值则更新字典，将其加入</span><br><span class="line">print(dict3)</span><br><span class="line"></span><br><span class="line">dict4 &#x3D; &#123;&#39;f&#39;:134&#125;</span><br><span class="line">dict4.update(dict2)    #把dict2中的键值对更新到dict4中</span><br><span class="line">print(dict4)</span><br><span class="line"></span><br><span class="line">dict1.pop(&#39;a&#39;)         #将dict1中的键&#39;a&#39;对应的键值对删除</span><br><span class="line">print(dict1)</span><br><span class="line">del dict1[&#39;b&#39;]         #删除该键值对</span><br><span class="line">print(dict1)</span><br><span class="line"></span><br><span class="line">dict11 &#x3D; dict.fromkeys(dict1)  #新建一个与dict1有相同键的字典，其值为none</span><br><span class="line">print(dict11)</span><br><span class="line"></span><br><span class="line">#键值对添加修改</span><br><span class="line">dict2[&#39;world&#39;] &#x3D; &#39;e&#39;    #无则添加该键值</span><br><span class="line">print(dict2)</span><br><span class="line">dict2[&#39;c&#39;] &#x3D; &#39;f&#39;    #有则修改该键对应的值</span><br><span class="line">print(dict2)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.优化斐波拉契</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dict1 &#x3D; &#123;&#125;</span><br><span class="line">def fib(n):</span><br><span class="line">    if n &#x3D;&#x3D; 1 or n &#x3D;&#x3D; 2:</span><br><span class="line">        return 1</span><br><span class="line">    else:</span><br><span class="line">        if dict1.get(n-1,&#39;&#39;):</span><br><span class="line">            x1 &#x3D; dict1.get(n-1)</span><br><span class="line">        else:</span><br><span class="line">            x1 &#x3D; fib(n-1)</span><br><span class="line">            dict1[n-1] &#x3D; x1</span><br><span class="line">        if dict1.get(n-2,&#39;&#39;):</span><br><span class="line">            x2 &#x3D; dict1.get(n-2)</span><br><span class="line">        else:</span><br><span class="line">            x2 &#x3D; fib(n-2)</span><br><span class="line">            dict1[n-2] &#x3D; x2</span><br><span class="line">        return x1 + x2</span><br><span class="line">print(fib(5))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="tuple-元祖-不可修改的列表"><a href="#tuple-元祖-不可修改的列表" class="headerlink" title="tuple:元祖  不可修改的列表"></a>tuple:元祖  不可修改的列表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可拆包</span><br><span class="line">不可变 （针对某些元素）</span><br><span class="line">用于轻量级数据中</span><br><span class="line"></span><br><span class="line"> tup1 &#x3D; (&#39;asdf&#39;,&#39;s&#39;)</span><br><span class="line"> tup4 &#x3D; (&#39;d&#39;,) #但元素加，</span><br><span class="line"> tup2,tup3 &#x3D; (&#39;aa&#39;,&#39;bb&#39;)  #可以拆包</span><br><span class="line"> print(tup3)</span><br><span class="line"> print(tup2)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.tuple取值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1,下标取值</span><br><span class="line">2。拆包</span><br><span class="line"></span><br><span class="line">d &#x3D; &#123;&#39;a&#39;:1,&#39;b&#39;:2,&#39;c&#39;:3&#125;</span><br><span class="line">for tup1,tup2 in d.items():     #若不需要tup1则可以写成 _ , tup2</span><br><span class="line">    print(tup2)</span><br><span class="line">for _,v in d.items():</span><br><span class="line">    print(v)</span><br><span class="line">l2 &#x3D; [(k,v) for k,v in d.items()] #变成列表</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="set-集合"><a href="#set-集合" class="headerlink" title="set:集合"></a>set:集合</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">元素不重合</span><br><span class="line">可做集合运算 &amp;（交集） |（并集） -（差集）</span><br><span class="line"></span><br><span class="line">s &#x3D; set(&#39;2235462346&#39;)</span><br><span class="line">s1 &#x3D; (&#123;1,2,3,3,4,5,2,3,4&#125;)    #自动去掉重复的元素，不能嵌套list,dict.</span><br><span class="line">#里面的元素必须是可hash的</span><br><span class="line">print(s)</span><br><span class="line">print(s1)</span><br><span class="line">list1 &#x3D; [1,2,3,4,5,2,3,4,2,2]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="浅复制"><a href="#浅复制" class="headerlink" title="浅复制"></a>浅复制</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> a &#x3D; [1,2,3,4,5]</span><br><span class="line"> b &#x3D; a[:]       #此时b重新指向另一个地址 但如果其中内嵌容器，则只会对数值改变，容器仍指向原地址</span><br><span class="line"></span><br><span class="line"> l1 &#x3D; [1,[22,33],(11,22,[33,44])]</span><br><span class="line"></span><br><span class="line"> l2 &#x3D; list(l1)     #新的列表创建。但内嵌列表和元祖的指向地址未改变</span><br><span class="line"></span><br><span class="line"> l3 &#x3D; l1[:]        #新列表创建，内嵌容器仍指向原地址</span><br><span class="line"> print(l1 &#x3D;&#x3D; l2)</span><br><span class="line"> print(l1 is l2)</span><br><span class="line"></span><br><span class="line"> l1[1].append(1111111)</span><br><span class="line"> l1[2][2].append(2333)  #改变的为元祖中的内嵌列表，其仍可进行添加</span><br><span class="line"></span><br><span class="line"> l1[0] &#x3D; 9          #改变的是列表中的数值，其L1发生改变，对L2和L3无影响</span><br><span class="line"></span><br><span class="line"> print(l1)</span><br><span class="line"> print(l2)</span><br><span class="line"> print(l3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">l1 &#x3D; [2,[44,55],(44,55,[3,1])]</span><br><span class="line">l2 &#x3D; list(l1)</span><br><span class="line">l1.append(100)</span><br><span class="line">l1[1].remove(44)</span><br><span class="line">l2[1] +&#x3D; [11,22]</span><br><span class="line">l2[2] +&#x3D; (2,3)     #生成新的tuple但其内嵌的列表地址未改变，相当于浅复制</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python集合</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础大全06--排序算法</title>
    <url>/jwangcloud/193083354/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/python01.jpeg"></p>
<h3 id="资料博客："><a href="#资料博客：" class="headerlink" title="资料博客："></a>资料博客：</h3><p><a href="https://www.jianshu.com/p/47170b1ced23">十大金典排序</a></p>
<span id="more"></span>

<h4 id="1-鸡尾酒排序-左右同时进行冒泡排序"><a href="#1-鸡尾酒排序-左右同时进行冒泡排序" class="headerlink" title="1. 鸡尾酒排序 左右同时进行冒泡排序"></a>1. 鸡尾酒排序 左右同时进行冒泡排序</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def cocktaisort(list2):</span><br><span class="line">    left &#x3D; 0</span><br><span class="line">    right &#x3D; len(list2) - 1</span><br><span class="line">    while left &lt; right:</span><br><span class="line">        for i in range(left, right, 1):</span><br><span class="line">            if(list2[i] &gt; list2[i + 1]):</span><br><span class="line">                temp1 &#x3D; list2[i+1]</span><br><span class="line">                list2[i+1] &#x3D; list2[i]          #交换python可以直接使用：list2[i],list2[i+1] &#x3D; list2[i+1], list2[i]</span><br><span class="line">                list2[i] &#x3D; temp1</span><br><span class="line">        right -&#x3D; 1</span><br><span class="line">        for i in range(right,left,-1):</span><br><span class="line">            if(list2[i] &lt; list2[i - 1]):</span><br><span class="line">                temp1 &#x3D; list2[i]</span><br><span class="line">                list2[i] &#x3D; list2[i -1]</span><br><span class="line">                list2[i - 1] &#x3D; temp1</span><br><span class="line">        left+&#x3D;1</span><br><span class="line">        return list2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-冒泡排序-顺序比较-两两比较，依次后移-性能较低"><a href="#2-冒泡排序-顺序比较-两两比较，依次后移-性能较低" class="headerlink" title="2. 冒泡排序  顺序比较  两两比较，依次后移        性能较低"></a>2. 冒泡排序  顺序比较  两两比较，依次后移        性能较低</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def sort(list1):</span><br><span class="line">    num &#x3D; len(list1)</span><br><span class="line">    if num &#x3D;&#x3D; 0:</span><br><span class="line">        return list1</span><br><span class="line">    for i in range(0,num,1):</span><br><span class="line">        iswap &#x3D; False</span><br><span class="line">        for j in range(0,num - 1 - i,1):</span><br><span class="line">            if list1[j + 1] &lt; list1[j]:</span><br><span class="line">                temp &#x3D; list1[j + 1]</span><br><span class="line">                list1[j + 1] &#x3D; list1[j]</span><br><span class="line">                list1[j] &#x3D; temp</span><br><span class="line">                iswap &#x3D; True</span><br><span class="line">        if (not iswap):</span><br><span class="line">            break</span><br><span class="line">    return  list1</span><br></pre></td></tr></table></figure>

<h4 id="3-简化冒泡排序"><a href="#3-简化冒泡排序" class="headerlink" title="3. 简化冒泡排序"></a>3. 简化冒泡排序</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def sort_bubble(list1):</span><br><span class="line">    for i in range(len(list1)):</span><br><span class="line">        j &#x3D; 0</span><br><span class="line">        while j &lt; (len(list1) - 1 - i):</span><br><span class="line">            if list1[j] &gt; list1[j + 1]:</span><br><span class="line">                temp &#x3D; list1[j]</span><br><span class="line">                list1[j] &#x3D; list1[j+1]</span><br><span class="line">                list1[j+1] &#x3D; temp</span><br><span class="line">            j +&#x3D; 1</span><br><span class="line">    return list1</span><br></pre></td></tr></table></figure>

<h4 id="4-简单选择排序"><a href="#4-简单选择排序" class="headerlink" title="4. 简单选择排序"></a>4. 简单选择排序</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def simpesort(list1):</span><br><span class="line">    num &#x3D; len(list1)</span><br><span class="line">    if num &#x3D;&#x3D; 0:</span><br><span class="line">        return list1</span><br><span class="line">    for i in range(0,num):</span><br><span class="line">        min &#x3D; i                       #最小值下标</span><br><span class="line">        for j in range(i,num):         #i开始后推</span><br><span class="line">            if list1[j] &lt; list1[min]:   # 最小值与该值比较，符合则交换下标</span><br><span class="line">                min &#x3D; j</span><br><span class="line">        temp &#x3D; list1[min]              #下标对应值交换</span><br><span class="line">        list1[min] &#x3D; list1[i]</span><br><span class="line">        list1[i] &#x3D; temp</span><br><span class="line">    return list1</span><br></pre></td></tr></table></figure>

<h4 id="5-直接插入排序-取出i-1的元素-与前面排好序的元素从后向前比较，小于等于则将i-1元素插入到该位置（有一定序的时候效率最高）"><a href="#5-直接插入排序-取出i-1的元素-与前面排好序的元素从后向前比较，小于等于则将i-1元素插入到该位置（有一定序的时候效率最高）" class="headerlink" title="5. 直接插入排序:取出i + 1的元素 与前面排好序的元素从后向前比较，小于等于则将i+1元素插入到该位置（有一定序的时候效率最高）"></a>5. 直接插入排序:取出i + 1的元素 与前面排好序的元素从后向前比较，小于等于则将i+1元素插入到该位置（有一定序的时候效率最高）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def insert_sort(list1):</span><br><span class="line">    length &#x3D; len(list1)</span><br><span class="line">    if len(list1) &#x3D;&#x3D; 0:</span><br><span class="line">        return list1</span><br><span class="line">    for i in range(1,length,1):</span><br><span class="line">        temp &#x3D; list1[i]</span><br><span class="line">        preindex &#x3D; i - 1</span><br><span class="line">        while preindex &gt;&#x3D; 0 and temp &lt; list1[preindex]:</span><br><span class="line">            list1[preindex + 1] &#x3D; list1[preindex]</span><br><span class="line">            preindex -&#x3D; 1</span><br><span class="line">        list1[preindex + 1] &#x3D; temp</span><br><span class="line">    return list1</span><br></pre></td></tr></table></figure>

<h4 id="6-二分插入排序-排好序的为一个数组，未排好序的为另一个"><a href="#6-二分插入排序-排好序的为一个数组，未排好序的为另一个" class="headerlink" title="6. 二分插入排序  排好序的为一个数组，未排好序的为另一个"></a>6. 二分插入排序  排好序的为一个数组，未排好序的为另一个</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def Binaryinsertsort(list1):</span><br><span class="line">    if len(list1) &#x3D;&#x3D; 0:</span><br><span class="line">        return list1</span><br><span class="line">    for i in range(1,len(list1)):</span><br><span class="line">        left &#x3D; 0</span><br><span class="line">        right &#x3D; i - 1   #有序边界</span><br><span class="line">        temp &#x3D; list1[i]</span><br><span class="line">        while left &lt;&#x3D; right:</span><br><span class="line">            mid &#x3D; left + (right - left) &#x2F;&#x2F; 2</span><br><span class="line">            if list1[mid] &gt; temp:</span><br><span class="line">                right &#x3D; mid - 1</span><br><span class="line">            else:</span><br><span class="line">                left &#x3D; mid + 1</span><br><span class="line">        for j in range(i - 1,left,-1):</span><br><span class="line">            list1[j+1] &#x3D; list1[j]</span><br><span class="line">        list1[left] &#x3D; temp</span><br><span class="line">    return list1</span><br></pre></td></tr></table></figure>

<h4 id="7-归并排序-空间换时间，多了一个tmp列表占用内存，但时间减少为n-logn"><a href="#7-归并排序-空间换时间，多了一个tmp列表占用内存，但时间减少为n-logn" class="headerlink" title="7.归并排序 空间换时间，多了一个tmp列表占用内存，但时间减少为n*logn"></a>7.归并排序 空间换时间，多了一个tmp列表占用内存，但时间减少为n*logn</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def merge_sort(list1):</span><br><span class="line">    if len(list1) &lt; 2:</span><br><span class="line">        return list1</span><br><span class="line">    else:                               #递归函数分解列表</span><br><span class="line">        mid &#x3D; len(list1) &#x2F;&#x2F; 2</span><br><span class="line">        list1_left &#x3D; merge_sort(list1[:mid])</span><br><span class="line">        list1_right &#x3D; merge_sort(list1[mid:])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        tmp &#x3D; list()                   #tmp 为新列表 存放排好序的元素</span><br><span class="line">        i &#x3D; 0</span><br><span class="line">        j &#x3D; 0</span><br><span class="line">        k &#x3D; 0</span><br><span class="line">        while i &lt; len(list1_left) or j &lt; len(list1_right):     #循环条件</span><br><span class="line">            if i &lt; len(list1_left) and j &lt; len(list1_right):   #两个有序列表相比较，开始为一个元素，直接累积为两个有序列表</span><br><span class="line">                if list1_left[i] &lt; list1_right[j]:             #判断两个列表中元素的大小，小的放入tmp列表</span><br><span class="line">                    tmp.append(list1_left[i])</span><br><span class="line">                    i+&#x3D;1</span><br><span class="line">                else:</span><br><span class="line">                    tmp.append(list1_right[j])</span><br><span class="line">                    j +&#x3D; 1</span><br><span class="line">            elif i &gt;&#x3D; len(list1_left):                        #分别判断是否超出左右列表最大下标，则只需要把左右列表合并到tmp里 反之一样</span><br><span class="line">                tmp.append(list1_right[j])</span><br><span class="line">                j +&#x3D; 1</span><br><span class="line">            else:</span><br><span class="line">                tmp.append(list1_left[i])</span><br><span class="line">                i +&#x3D; 1</span><br><span class="line">        return tmp</span><br></pre></td></tr></table></figure>

<h3 id="调用所有排序"><a href="#调用所有排序" class="headerlink" title="调用所有排序"></a>调用所有排序</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def random_sort(sort_name):</span><br><span class="line">    import random</span><br><span class="line">    list1 &#x3D; list()</span><br><span class="line">    for i in range(10):</span><br><span class="line">        list1.append(random.randint(0,100))</span><br><span class="line"></span><br><span class="line">    print(&quot;使用%s排序结是%s&quot;%(sort_name.__name__,sort_name(list1)))</span><br><span class="line"></span><br><span class="line">list2 &#x3D; [cocktaisort,sort,sort_bubble,simpesort,Binaryinsertsort,merge_sort]</span><br><span class="line"></span><br><span class="line">for xx in list2:</span><br><span class="line">    random_sort(xx)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="使用装饰器计算程序运行时间"><a href="#使用装饰器计算程序运行时间" class="headerlink" title="使用装饰器计算程序运行时间"></a>使用装饰器计算程序运行时间</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def dec(fun):             #装饰器：计算运行时间</span><br><span class="line">    def res(*args,**kwarges):</span><br><span class="line">        print(&#39;--------%s 算法-------------&#39; % (fun.__name__))</span><br><span class="line">        start &#x3D; time.perf_counter()</span><br><span class="line">        a &#x3D; fun(*args,**kwarges)</span><br><span class="line">        print(&#39;消耗的时间为 %s&#39; %(time.perf_counter() - start))</span><br><span class="line">        print(&#39;******************&#39;)</span><br><span class="line">        return a</span><br><span class="line">    return res</span><br><span class="line">    </span><br><span class="line">在需要计算时间的函数前加上 @dec 即可（详见test19.py）</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础大全04--控制语句</title>
    <url>/jwangcloud/3540061980/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/python01.jpeg"></p>
<h2 id="控制语句："><a href="#控制语句：" class="headerlink" title="控制语句："></a>控制语句：</h2><span id="more"></span>

<h3 id="1-if-判断语句，"><a href="#1-if-判断语句，" class="headerlink" title="1 if 判断语句，"></a>1 if 判断语句，</h3><p>只接受True/False，只运行判断为真的语句快。</p>
<p>语句快中pass会不执行这一块语句</p>
<p>可以在判断语句中先赋值，再在语句外调用该值</p>
<p>if   else:</p>
<p>if elif else: 满足其中一个条件则执行该条件后直接跳出语句块</p>
<h4 id="1-1-基础判断举例"><a href="#1-1-基础判断举例" class="headerlink" title="1.1 基础判断举例"></a>1.1 基础判断举例</h4><ol>
<li>该成员是否是会员</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">is_plus &#x3D; True #是否是会员    # 基础判断</span><br><span class="line">if is_plus:</span><br><span class="line">    print(&quot;恭喜你，会员大大 &quot;)</span><br><span class="line">elif not is_plus:</span><br><span class="line">    print(&quot;垃圾小号&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;请充钱&quot;)</span><br><span class="line">print(&quot;用薪创造快乐&quot;)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>折扣计算</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">buy_sum &#x3D; float(input(&quot;购买后金额为：&quot;))     #折扣计算</span><br><span class="line">if buy_sum &lt; 0:</span><br><span class="line">    print(&quot;非法操作&quot;)</span><br><span class="line">else:</span><br><span class="line">    if buy_sum &gt; 400:</span><br><span class="line">        buy_sum &#x3D; buy_sum * 0.85</span><br><span class="line">    else:</span><br><span class="line">        buy_sum &#x3D; buy_sum * 0.95</span><br><span class="line">    print(&quot;实际支付金额：%.2f&quot; % buy_sum)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>分数等级判断</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">score &#x3D; float(input(&quot;分数： &quot;))     #输入分数并判断其等级</span><br><span class="line">if score &gt; 100 or score &lt; 0:</span><br><span class="line">    print(&quot;无法判断&quot;)</span><br><span class="line">elif score &gt;&#x3D; 90:</span><br><span class="line">    print(&quot;等级为： A&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;等级为： F&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="循环语句："><a href="#循环语句：" class="headerlink" title="循环语句："></a>循环语句：</h2><h3 id="while："><a href="#while：" class="headerlink" title="while："></a>while：</h3><p>若判断条件为真，循环运行其中的语句块，若为假，运行语句块外语句  注意：每次循环都会执行一次while进行判断</p>
<p>break：停止循环</p>
<p>continu：结束本次循环继续下一次循环</p>
<h3 id="while循环举例"><a href="#while循环举例" class="headerlink" title="while循环举例"></a>while循环举例</h3><p>成绩录入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">num &#x3D; 1</span><br><span class="line">score &#x3D; 0</span><br><span class="line">while True:</span><br><span class="line">    n &#x3D; input(&quot;请输入第&#123;&#125;科成绩: &quot;.format(num))</span><br><span class="line">    n &#x3D; int(n)</span><br><span class="line">    if n &gt; 100 or n &lt; 0:</span><br><span class="line">        n &#x3D; input(&quot;输入错误，请重新输入第&#123;0&#125;科成绩&quot;.format(num))     #print（&quot;输入错误，请重新输入&quot;） continue</span><br><span class="line">        n &#x3D; int(n)                                               #使用continu可以结束本次循环</span><br><span class="line">    score &#x3D; score + n</span><br><span class="line">    if num &gt;&#x3D;5:</span><br><span class="line">        print(&quot;总成绩为：&#123;0&#125;,平均成绩为：&#123;1&#125;&quot;.format(score, score&#x2F;num))</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">    num +&#x3D; 1</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>九九乘法表</p>
<p>利用while循环进行，声明变量需要清晰表达所表达的内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">倒九九乘法表</span><br><span class="line"></span><br><span class="line">i &#x3D; 1</span><br><span class="line"></span><br><span class="line">while i &lt;&#x3D; 9:</span><br><span class="line">    j &#x3D; 9</span><br><span class="line">    xx &#x3D;&quot;&quot;</span><br><span class="line">    while j &gt;&#x3D; i:</span><br><span class="line">        xx +&#x3D; (&quot;&#123;0:d&#125; * &#123;1:d&#125; &#x3D; &#123;2:2d&#125;  |  &quot;.format(i,j,i * j))</span><br><span class="line">        j -&#x3D; 1</span><br><span class="line">    print(xx)</span><br><span class="line">    i +&#x3D; 1</span><br></pre></td></tr></table></figure>

<p>图形数字输出</p>
<p>在做类似多个循环嵌套时，可以将循环拆分开一步一步分拆成单个变量循环，最后嵌套在一起。对于本题，整个：先输出空格，再输出数字</p>
<pre><code>    1
   2 3 
  4 5 6
 7 8 9 0
  
</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">space_num &#x3D; n - 1</span><br><span class="line">i &#x3D; 1</span><br><span class="line">n &#x3D; 4</span><br><span class="line">while space_num &gt;&#x3D; 0:</span><br><span class="line">    string &#x3D; (&quot; &quot;*space_num)</span><br><span class="line">    j &#x3D; 0</span><br><span class="line">    while (n - space_num) &gt; j:</span><br><span class="line">        string +&#x3D; str(i % 10) + &quot; &quot;</span><br><span class="line">        i +&#x3D; 1</span><br><span class="line">        j +&#x3D; 1</span><br><span class="line">    print(string)</span><br><span class="line">    space_num -&#x3D; 1</span><br></pre></td></tr></table></figure>

<pre><code>         *
        **
       ***
      ****
     *****
</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">lines &#x3D; 6</span><br><span class="line">start_num &#x3D; 6</span><br><span class="line">j &#x3D; lines</span><br><span class="line">while j &gt; 0:</span><br><span class="line">    space_num &#x3D; lines - start_num</span><br><span class="line"></span><br><span class="line">    print(&quot; &quot; * space_num + &quot;*&quot; * start_num)</span><br><span class="line">    start_num -&#x3D; 1</span><br><span class="line">    j -&#x3D; 1</span><br></pre></td></tr></table></figure>


<pre><code>        *
       ***
      *****
     *******
      *****
       ***
        *
    
    分析： 
    （1）先确认行数：n                          n = 7 
    （2）再判断图形组成元素即对象数量，并确认命名    两个对象： 空格（space_num） *号 (star_num)
    （3）发现每个对象的循环规律，最好与循环或已知变量关联   space_num = abs(中间行数mid - 循环1.2.3...)
                            规律： 等差数列             star_num = (mid - space_num)* 2 - 1             
    （4）确认循环结束条件： n &gt; 0 n递减  i递增               
    （5）编写 测试
</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">代码：</span><br><span class="line">n &#x3D; 7</span><br><span class="line">mid &#x3D; n &#x2F;&#x2F; 2 + 1 #中间那一排</span><br><span class="line">i &#x3D; 1</span><br><span class="line">while n &gt; 0:</span><br><span class="line">    space_num &#x3D; abs(mid-i) #3</span><br><span class="line">    base_num &#x3D; mid-space_num #1</span><br><span class="line">    star_num &#x3D; base_num*2-1</span><br><span class="line">    print(&#39; &#39;*space_num + &quot;*&quot;*star_num)</span><br><span class="line">    i +&#x3D; 1</span><br><span class="line">    n -&#x3D; 1</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*****</span><br><span class="line"> ***</span><br><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">n &#x3D; 5                          # 中间一行的行数</span><br><span class="line">a &#x3D; n                          #3</span><br><span class="line">j &#x3D; 2 * n + 1                  #7 一共7行</span><br><span class="line">while j &gt; 0:                   #循环7次</span><br><span class="line">    space_num &#x3D; n - abs(a)     # 初始化</span><br><span class="line">    j -&#x3D; 1                     #j控制循环</span><br><span class="line">    line_num &#x3D; abs(2 * a) + 1  #  *  数</span><br><span class="line">    a -&#x3D; 1                     #  a递减 3 2 1 0 -1 -2 -3</span><br><span class="line">    print(&quot; &quot;* (space_num) + &quot;*&quot; *line_num )</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<p>输入一个整数n，输出所有0~n之间的质数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">def is_peime(num):           #判断是否为质数</span><br><span class="line">    i &#x3D; 2</span><br><span class="line">    flag &#x3D; True</span><br><span class="line">    while num &gt; i:           #循环条件</span><br><span class="line">        if not num % i:      #质数判断，若为真（不是质数）则执行判断语句</span><br><span class="line">            flag &#x3D; False</span><br><span class="line">            break            #符合该条件则直接跳出循环</span><br><span class="line">        i +&#x3D; 1</span><br><span class="line">    return flag</span><br><span class="line"></span><br><span class="line">num1 &#x3D; int(input(&quot;请输入一个大于1的整数： &quot;))    #输出所有符合条件的质数</span><br><span class="line">while num1 &gt; 0:</span><br><span class="line">    if is_peime(num1):      #调用质数函数</span><br><span class="line">        print(num1)</span><br><span class="line">    num1 -&#x3D; 1</span><br></pre></td></tr></table></figure>

<p>当比较大小时，需要注意比较值的初始化，最好与初始值输入值一样，不定义成0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 1、从键盘输入10个数，求出最大数</span><br><span class="line"></span><br><span class="line">num &#x3D; 1</span><br><span class="line">max_num &#x3D; int(input(&quot;请依次输入第&#123;&#125;个数：&quot;.format(num)))    #初始化最大值，防止输入的数为负数，若比较大小都需要初始化比较值。</span><br><span class="line"></span><br><span class="line">while num &lt; 10:</span><br><span class="line">    num +&#x3D; 1</span><br><span class="line">    num1 &#x3D; int(input(&quot;请依次输入第&#123;&#125;个数：&quot;.format(num)))</span><br><span class="line">    if num1 &gt; max_num:                           #若max_num&#x3D;0，出现负数比较则直接会使max_num&#x3D;0</span><br><span class="line">        max_num &#x3D; num1</span><br><span class="line">print(max_num)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>控制语句</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础大全05--list</title>
    <url>/jwangcloud/2660417926/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/python01.jpeg"></p>
<h3 id="list-列表"><a href="#list-列表" class="headerlink" title="list 列表"></a>list 列表</h3><span id="more"></span>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据结构：组织并存取数据</span><br><span class="line">list:有序的集合，列表 ，是一种数据结构</span><br><span class="line">创建方式</span><br><span class="line">取值方式</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.申明方式</p>
<pre><code>list1 = [&#39;a&#39;,2,3,[1,2,3,4,[1,2,3]],&#39;abcde&#39;]
</code></pre>
<p>2.将字符串转化为列表</p>
<pre><code>list2 = list(&quot;a,b&quot;)
print(list2)
</code></pre>
<p>3.下标取值,下标取首不取尾,与数组相似取值方式</p>
<pre><code>print(list1[3][4][1])
print(list1[0:3])
</code></pre>
<p>4.最后一个元素取法</p>
<pre><code>print(list1[-1])
print(list1[len(list1)-1])    #列表不能为空
</code></pre>
<p>5.使用的len语句是计算的该列表中有多少个元素</p>
<pre><code>print(len(list1[3]))
</code></pre>
<p>6.元素更改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(list1[1])</span><br><span class="line">list1[1] &#x3D; &quot;b&quot;         #元素修改</span><br><span class="line">print(list1[1])</span><br><span class="line">list1.append(&#39;f&#39;)      #尾部增加元素   其内置函数中没有return 所以print(list1.append())返回值为none</span><br><span class="line">list1.insert(1,&#39;b&#39;)    #在下标1处添加元素 返回值为none</span><br><span class="line">print(list1.insert(1,&#39;3&#39;))</span><br><span class="line">x &#x3D; list1.pop(1)       #删除下标所在位置的元素，若无下标，则将尾部元素删除，返回值为删除的元素</span><br><span class="line">list1.remove(&#39;a&#39;)        #找到该元素并移除 返回为none</span><br><span class="line">range(start_num,end_num,间隔)：有序的一组数字</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list2 &#x3D; [1,&#39;hello&#39;, &#39;world&#39;,&#39;c&#39;,&#39;d&#39;,[1,2,3,[1,2],5]]   #打印输出列表所有元素</span><br><span class="line">for i in list2:                                  #for循环会将列表中存在的字符串也分开打印，例如&#39;asd&#39;,for后为 &#39;a&#39;,&#39;s&#39;,&#39;d&#39;</span><br><span class="line">    if not type(i) &#x3D;&#x3D; list:                     #判断类别</span><br><span class="line">        print(i)</span><br><span class="line">    else:</span><br><span class="line">        for j in i:</span><br><span class="line">            print(j)</span><br><span class="line">def for_list(list1):                 #使用函数打印所有列表中的元素</span><br><span class="line">    for i in list1:</span><br><span class="line">        if type(i) &#x3D;&#x3D; list:</span><br><span class="line">            for_list(i)</span><br><span class="line">        else:</span><br><span class="line">            print(i)</span><br><span class="line">for_list([1,2,3,[1,2,[1,2,[12,34,[&#39;aasas&#39;,&#39;asadadf&#39;]]]]])  </span><br></pre></td></tr></table></figure>

<p>7.列表切分</p>
<pre><code>list3 = [1,2,3,4,5]
print(list3[1:3])   #切分1-2下标元素 长度为下标差
</code></pre>
<p>8.容器序列（容器）和编排序列（真正的数据）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list1 --&gt; 容器(列表，元祖等） [1,2,3,4,5],[True,False] --&gt; 编排序列</span><br><span class="line"></span><br><span class="line">传统生成方式</span><br><span class="line">list1 &#x3D; []</span><br><span class="line">for i in range(10):</span><br><span class="line">    list1.append(i)</span><br><span class="line"></span><br><span class="line">列表生成式：将一个编排序列放入列表中</span><br><span class="line">list1 &#x3D; [i for i in range(10)]       #性能更高</span><br><span class="line">list2 &#x3D; [i for i in &#39;asdfghjk&#39;]</span><br><span class="line"></span><br><span class="line">print(list1)</span><br><span class="line">print(list2)</span><br><span class="line"></span><br><span class="line">list3 &#x3D; [(i, j) for i in list1 for j in list2]   #注意：(i,j)</span><br><span class="line">print(list3)</span><br><span class="line"></span><br><span class="line">l1 &#x3D; [&#39;spades&#39;, &#39;diamonda&#39;,&#39;clubs&#39;,&#39;hearts&#39;]</span><br><span class="line">l2 &#x3D; [&#39;A&#39;,2,3,4,5,6,7,8,9,&#39;j&#39;,&#39;q&#39;,&#39;k&#39;,10]</span><br><span class="line">list4 &#x3D; [((i,j)) for i in l2 for j in l1]    #注意循环次序</span><br><span class="line"></span><br><span class="line">i  &#x3D; 0</span><br><span class="line">l2 &#x3D; list()</span><br><span class="line">while i &lt; (len(list4)):</span><br><span class="line">    if &quot;k&quot; in list4[i]:</span><br><span class="line">        l2 +&#x3D; list4[i:i+1]</span><br><span class="line">    i +&#x3D; 1</span><br><span class="line"></span><br><span class="line">print(l2)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>9.切片  取左不取右 前闭后开</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">list1&#x3D; [i for i in range(1,11,1)]</span><br><span class="line">print(list1)</span><br><span class="line">xx &#x3D; list1[2:4]   #2,3  便于计算切片的数量：4-2</span><br><span class="line">yy &#x3D; list1[1:]    #list1[1:len(list1)]</span><br><span class="line">zz &#x3D; list1[:3]    #不包括3之前的</span><br><span class="line">print(xx)</span><br><span class="line"></span><br><span class="line">l1 &#x3D; list1[-1]</span><br><span class="line">l2 &#x3D; list1[-1:]</span><br><span class="line">print(l1)</span><br><span class="line">print(l2)     #两者区分，一个取值一个切片仍是列表</span><br><span class="line"></span><br><span class="line"># print(id(list1))</span><br><span class="line"># print(id(list1[2:5]))</span><br><span class="line"># print(id(list1[3:4]))</span><br><span class="line"># print(id(xx))</span><br><span class="line"># print(id(yy))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>10.引用规则：python中变量是引用而不是赋值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; [1,2,3]</span><br><span class="line">b &#x3D; a              #直接将a的地址给了b，未重新开空间 对两个变量进行操作时，都是对同一个地址中存储的数据操作</span><br><span class="line">a.append(4)</span><br><span class="line">print(a)</span><br><span class="line">print(id(a))</span><br><span class="line">print(b)</span><br><span class="line">print(id(b))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python集合</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础大全03--函数定义</title>
    <url>/jwangcloud/2679684480/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/python01.jpeg"></p>
<h3 id="函数基本定义"><a href="#函数基本定义" class="headerlink" title="函数基本定义"></a>函数基本定义</h3><span id="more"></span>

<ol>
<li>申明 函数命名规则与变量一样</li>
<li>函数需要调用后才会运行，并函数可重复调用</li>
<li>函数内部申明的变量在外部无法使用，即函数作用域</li>
<li>全局变量：在函数外部定义的变量，可以拿到函数内部使用，只需要在需要使用该变量的函数内部将该变量变为全局变量：global 变量名</li>
<li>变量的传递：将需要传递的变量放入函数头（）中,传递多个参数时，用, 隔开，在调用函数时需要注意一一对应其变量值，即 参数：可随意改变的值</li>
<li>函数返回值：return 返回变量 ，调用函数则会返回return的结果，，其函数中若没有return 会在结尾自动加一个，存在输出语句则也会输出</li>
<li>自定义函数/内置函数</li>
<li>return: 返回的为函数时，会暂停运行并调用相关函数，直到返回值为确定值，则继续运行该函数</li>
<li>递归函数：函数调用函数本身</li>
</ol>
<h3 id="题型"><a href="#题型" class="headerlink" title="题型"></a>题型</h3><p>1.1 * 2 * 3 * 4 * 5 * 。。。n =</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">步骤： 1. 停止条件：n &#x3D; 1</span><br><span class="line">	  2. 分解条件（规律）： 若 n &#x3D; 5  （确认一个后面的数，往前推）</span><br><span class="line">	  </span><br><span class="line">	   5 * num_sum(4)</span><br><span class="line">	   	        4   *  num_sum(3)</span><br><span class="line">	   	        			 3     *  num_sum(2)</span><br><span class="line">										   2 * num_sum(1) --&gt; num_sum(1)&#x3D;&#x3D;1</span><br><span class="line">	   5  *     4   *         3     *      2 *   1		   	        								 </span><br><span class="line">	   	        						    </span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def num_sum(n):</span><br><span class="line">    if n &#x3D;&#x3D; 1:            #添加停止条件</span><br><span class="line">        return n</span><br><span class="line">    else:</span><br><span class="line">        return n * num_sum(n - 1)    #递归函数，分解条件</span><br><span class="line"></span><br><span class="line">print(num_sum(5))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>2.斐波拉契数：1 1 2 3 5 8 …</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">步骤：</span><br><span class="line">		</span><br><span class="line">		1.停止条件：n &#x3D; 1或者 n &#x3D; 2 即 num_qq(1) &#x3D; 1 num_qq(2) &#x3D; 1 （即最小元子确认）</span><br><span class="line">		2.循环条件：若 n &#x3D; 5 ：  bile(n) + bile(n-1)</span><br><span class="line">				 			bile(5) </span><br><span class="line">			    			&#x2F;     \</span><br><span class="line">					bile(4)  +   bile(3)</span><br><span class="line">       			&#x2F;	  \	         </span><br><span class="line">   				bile(3)+ bile(2)  </span><br><span class="line">    			&#x2F;     \    1        </span><br><span class="line"> 			bile(2)+bile(1)</span><br><span class="line"> 			  1       1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def num_qq(n):</span><br><span class="line">    if n &#x3D;&#x3D; 1 or n &#x3D;&#x3D; 2:     #添加停止条件</span><br><span class="line">        return 1</span><br><span class="line">    else:</span><br><span class="line">        return num_qq(n - 1) + num_qq(n - 2)   #递归函数分解条件，反推或者正推 数值太大会卡顿</span><br></pre></td></tr></table></figure>

<p>3.汉诺塔</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">递归函数：解题思路，将n&#x3D;&#x3D;1的写出来 即将底层的结果写出来，然后将自己知道的过程或者下一步写出来，将下一步的如2 当成n </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def is_equeue(n,start, mid, end):</span><br><span class="line">    if n &#x3D;&#x3D; 1:</span><br><span class="line">        print(&quot;&#123;&#125; to &#123;&#125;&quot;.format(start,end))     #一个的时候移动步骤</span><br><span class="line">    else:</span><br><span class="line">        is_equeue(n -1,start,end,mid)           #两个时候的移动步骤，当成n     2-1</span><br><span class="line">        is_equeue(1,start,mid,end)</span><br><span class="line">        is_equeue(n-1,mid,start,end)</span><br><span class="line"></span><br><span class="line">is_equeue(3,&#39;a&#39;,&#39;b&#39;,&#39;c&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4.二分法查找</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def find(i, l):</span><br><span class="line">    num &#x3D; len(l) &#x2F;&#x2F; 2</span><br><span class="line">    if len(l) &#x3D;&#x3D; 0:</span><br><span class="line">        print(&quot;0&quot;)</span><br><span class="line">    elif i &gt; l[num]:</span><br><span class="line">        find(i,l[(num + 1): ]) #可以不再判断这个中间值 直接+1</span><br><span class="line"></span><br><span class="line">    elif i &lt; l[num]:</span><br><span class="line">        find(i,l[ :num])</span><br><span class="line"></span><br><span class="line">    else:</span><br><span class="line">        print(&quot;1&quot;)</span><br><span class="line"></span><br><span class="line">find(13,[1,2,3,4,5,6,7,8,9])</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查找并定位</span><br><span class="line"></span><br><span class="line">def find(l,num,start,end):</span><br><span class="line">    mid_index &#x3D; (end + start) &#x2F;&#x2F; 2</span><br><span class="line">    if start &gt; end:</span><br><span class="line">        print(&quot;列表中不存在%d&quot;%num)</span><br><span class="line">    else:</span><br><span class="line">        if l[mid_index] &gt; num:</span><br><span class="line">            return find(l,num,1,mid_index -1)</span><br><span class="line">        elif l[mid_index] &lt; num:</span><br><span class="line">            return find(l,num,mid_index + 1,end)</span><br><span class="line">        elif l[mid_index] &#x3D;&#x3D; num:</span><br><span class="line">            print(&quot;%d 的位置为：%d&quot;%(num,mid_index))</span><br><span class="line"></span><br><span class="line">l &#x3D; [1,2,3,4,5,6,7,8,9,12,23,45]</span><br><span class="line">find_i &#x3D; len(l)</span><br><span class="line">find(l,3,0,find_i)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>5.一等函数，和变量一样，可传递和赋值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def fun1():</span><br><span class="line">    print(2112)</span><br><span class="line">a &#x3D; fun1   #当成变量进行赋值</span><br><span class="line">b &#x3D; a</span><br><span class="line">b()     #此时才是运行函数</span><br></pre></td></tr></table></figure>

<p>6.高阶函数  接受函数作为参数的函数 详见pysort.py</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sorted  排序，</span><br><span class="line">fruits &#x3D; [&#39;strawberry&#39;,&#39;fig&#39;,&#39;apple&#39;,&#39;cherry&#39;,&#39;raspberry&#39;,&#39;banana&#39;]</span><br><span class="line">list2 &#x3D; sorted(fruits,key&#x3D;len)   #根据len产生的返回值进行排序</span><br><span class="line">print(list2)</span><br><span class="line"></span><br><span class="line">def first_num(list1):</span><br><span class="line">    return list1[0]</span><br><span class="line">list4 &#x3D; sorted(fruits,key&#x3D;first_num)</span><br><span class="line">print(list4)</span><br><span class="line">lamda  无法复用，简单结构可以使用</span><br><span class="line"></span><br><span class="line">list5 &#x3D; sorted(fruits,key&#x3D;lambda list_1: list_1[0])</span><br><span class="line"></span><br><span class="line">print(list5)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础大全01--内置对象、占位符、运算符、表达式</title>
    <url>/jwangcloud/446152610/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/python01.jpeg"></p>
<h3 id="常用内置对象"><a href="#常用内置对象" class="headerlink" title="常用内置对象"></a>常用内置对象</h3><span id="more"></span>

<table>
<thead>
<tr>
<th align="center">对象类型</th>
<th align="center">类型名称</th>
<th align="center">示例</th>
<th align="center">简要说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">数字</td>
<td align="center">int、float</td>
<td align="center">1、3.14</td>
<td align="center">数字大小没有限制，内置支持复数及其运算</td>
</tr>
<tr>
<td align="center">字符串</td>
<td align="center">str</td>
<td align="center">‘hello’、”python”、’‘’world’’’、r’abc’、R’bcd’</td>
<td align="center">使用单引号、双引号、三引号作为界定符，以字母r和R引导表示原生字符串</td>
</tr>
<tr>
<td align="center">列表</td>
<td align="center">list</td>
<td align="center">[1,2,3]、[‘a’,’b’]</td>
<td align="center">元素可为任意类型</td>
</tr>
<tr>
<td align="center">字典</td>
<td align="center">dict</td>
<td align="center">{“aa”:”11”}</td>
<td align="center">元素形式为：键：值</td>
</tr>
<tr>
<td align="center">元组</td>
<td align="center">tuple</td>
<td align="center">(2,-2,1)、(3,)</td>
<td align="center">不可变的列表，如果只有一个元素，后面的逗号不能省略</td>
</tr>
<tr>
<td align="center">布尔</td>
<td align="center">bool</td>
<td align="center">True、False</td>
<td align="center">逻辑值</td>
</tr>
<tr>
<td align="center">空类型</td>
<td align="center">NoneType</td>
<td align="center">None</td>
<td align="center">空值</td>
</tr>
<tr>
<td align="center">异常</td>
<td align="center">ValueError、TypeError…</td>
<td align="center"></td>
<td align="center">python内置异常，对应不同类型的异常</td>
</tr>
</tbody></table>
<h3 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h3><table>
<thead>
<tr>
<th align="center">type</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">d i u</td>
<td align="center">十进制整数</td>
</tr>
<tr>
<td align="center">o</td>
<td align="center">八进制整数</td>
</tr>
<tr>
<td align="center">x X</td>
<td align="center">十六进制整数（x的话数字里字母为小写，X为大写）</td>
</tr>
<tr>
<td align="center">e E</td>
<td align="center">科学技数法</td>
</tr>
<tr>
<td align="center">f F</td>
<td align="center">浮点数（默认保留6位小数）</td>
</tr>
<tr>
<td align="center">g G</td>
<td align="center">自动选择最优表示法（整数、浮点数、科学技数）</td>
</tr>
<tr>
<td align="center">c</td>
<td align="center">单个字符或整数转化为字符</td>
</tr>
<tr>
<td align="center">s</td>
<td align="center">用str()转化为字符串</td>
</tr>
<tr>
<td align="center">r</td>
<td align="center">用repr()转化为字符串</td>
</tr>
<tr>
<td align="center">a</td>
<td align="center">用ascii（）转化为字符串</td>
</tr>
</tbody></table>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ol>
<li>变量命名<pre><code> 变量中不能有空格以及标点符号
 大小写敏感
 数字不出现在开头
 内置关键字不会出现在其中（查询关键：导入keyword包，print(keyword.kwlist)）
 符合常识并有意义
</code></pre>
</li>
<li>对象</li>
</ol>
<p>python 中一切皆对象 ：</p>
<table>
<thead>
<tr>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">内存地址（身份id）</td>
</tr>
<tr>
<td align="center">类型（type）</td>
</tr>
<tr>
<td align="center">值（实际值）</td>
</tr>
</tbody></table>
<h3 id="运算符和表达式"><a href="#运算符和表达式" class="headerlink" title="运算符和表达式"></a>运算符和表达式</h3><ol>
<li>运算符说明</li>
</ol>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">功能说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">算数加法，列表、元组、字符串合并与连接，正号</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">算数减法，集合差集，相反数</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">算数乘法，序列重复</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center">真除法</td>
</tr>
<tr>
<td align="center">//</td>
<td align="center">整除，若其中包含实数，结果也为实数</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center">余数，字符串格式化</td>
</tr>
<tr>
<td align="center">**</td>
<td align="center">幂运算</td>
</tr>
<tr>
<td align="center">&lt; &gt; &lt;= &gt;= != ==</td>
<td align="center">值比较符，集合的包含关系比较</td>
</tr>
</tbody></table>
<ol start="2">
<li>python 运算符与功能<pre><code> or: 逻辑或
 and:逻辑与
 not：逻辑非
 in:成员测试
 is:对象测试，即判断是否为同一对象或内存地址是否相同
</code></pre>
</li>
<li>二进制位运算符：如果为十进制会将其先转化为二进制进行下述运算<pre><code> | ：位或
 ^ : 位异或
 &amp; ：位与
 &lt;&lt; : 左位移
 &gt;&gt; : 右位移
 ～ ：位求反

 
</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>内置对象</tag>
        <tag>占位符</tag>
        <tag>运算符</tag>
        <tag>表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>python基础大全02--helloword</title>
    <url>/jwangcloud/3728702410/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img data-src="https://jwangtec.oss-cn-chengdu.aliyuncs.com/jwangcloud/index/python01.jpeg"></p>
<h1 id="python常识"><a href="#python常识" class="headerlink" title="python常识"></a>python常识</h1><span id="more"></span>


<ol>
<li>编译器：编译器就是将“一种语言（通常为高级语言）”翻译为“另一种语言（通常为低级语言）”的程序。一个现代编译器的主要工作流程：源代码 (source code) → 预处理器 (preprocessor) → 编译器 (compiler) → 目标代码 (object code) → 链接器 (Linker) → 可执行程序 (executables)</li>
<li>python编译器：pythonc</li>
<li>pyhton领域：数据分析、人工智能、爬虫</li>
<li>python缺点：运行速度慢，属于解释性语言</li>
</ol>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ol>
<li>int: 整型 <pre><code> 注意：print(&quot;12345&quot;) 与 print(12345), 前者是字符串存储，其占40个bit 后者为整型，占14个bit.
      前者是ascill码保存，后者直接转化为二进制
</code></pre>
</li>
<li>float：单精度型 </li>
<li>两者区别：前者直接可以转化为二进制，后者需要遵循IEEE协议进行编码（指数E）</li>
</ol>
<h1 id="入门命令"><a href="#入门命令" class="headerlink" title="入门命令"></a>入门命令</h1><ol>
<li>print(“hello world”)</li>
<li>print(123456)</li>
<li>bin(589): 将十进制转化为二进制</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>数据类型</tag>
        <tag>python入门</tag>
      </tags>
  </entry>
</search>
